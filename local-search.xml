<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++的一些特点</title>
    <link href="/2022/03/22/Cpp1/"/>
    <url>/2022/03/22/Cpp1/</url>
    
    <content type="html"><![CDATA[<h1 id="C-的一些特点"><a href="#C-的一些特点" class="headerlink" title="C++的一些特点"></a>C++的一些特点</h1><h2 id="1-main-函数"><a href="#1-main-函数" class="headerlink" title="1 main()函数"></a>1 main()函数</h2><p><strong>1.1</strong> 主函数必须是int main()或int main(void)<br><em>原因</em>：运行cpp程序时，通常从main()函数开始执行。因此，如果没有main()，程序将不完整，编译器将指出未定义main()函数。</p><p><strong>1.2</strong> main()最后可以不返回0<br><em>原因</em>：ANSI/ISO C++标准为，如果编译器到达main()函数末尾时没有遇到返回语句，则认为main()函数以return 0结尾。</p><h2 id="2-注释"><a href="#2-注释" class="headerlink" title="2 注释"></a>2 注释</h2><p><strong>2.1</strong> 注释以“//”打头，到行尾结束<br><strong>2.2</strong> 注释可以位于单独一行，也可和代码位于同一行</p><h2 id="3-预处理器和头文件名"><a href="#3-预处理器和头文件名" class="headerlink" title="3 预处理器和头文件名"></a>3 预处理器和头文件名</h2><p><strong>3.1</strong> 如果程序要使用某些工具，要在前几行标明#include…<br><em>原因</em>：C++和C一样，使用一个预处理器，在主编译之前对源文件进行处理，例如在源代码被编译之前，替换或添加文本。</p><p><strong>3.2</strong> 头文件名没有扩展名</p><h2 id="4-名称空间"><a href="#4-名称空间" class="headerlink" title="4 名称空间"></a>4 名称空间</h2><p><strong>4.1</strong> using namespace std;<br>原因：有助于组织程序，在调用同名函数时可以指定哪个名称空间的函数,如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp">Microflop::<span class="hljs-built_in">wanda</span>(<span class="hljs-string">&quot;go dancing?&quot;</span>);<br>Piscine::<span class="hljs-built_in">wanda</span>(<span class="hljs-string">&quot;a fish named Desire&quot;</span>);<br></code></pre></td></tr></table></figure><p>如果省略了这条语句，那么就要使用如下语句编码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::cout &lt;&lt; <span class="hljs-string">&quot;Come up and C++ me some time.&quot;</span>;<br>std::cout &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>更好的办法是，只是通过using声明使所需名称可用，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::endl;<br><span class="hljs-keyword">using</span> std::cin;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>01：计算机网络和因特网</title>
    <link href="/2022/03/21/Computer%20Network/"/>
    <url>/2022/03/21/Computer%20Network/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p><em><strong>纸上得来终觉浅，绝知此事要躬行。</strong></em></p></blockquote><div class="code-wrapper"><pre><code class="hljs">在本专栏中，我们将使用*公共因特网*（一种特定的计算机网络）作为讨论计算机网络机器协议的主要载体。</code></pre></div><h1 id="一、因特网：网络的网络"><a href="#一、因特网：网络的网络" class="headerlink" title="一、因特网：网络的网络"></a>一、因特网：网络的网络</h1><blockquote><p>何为因特网？可以有两种解释：<br> ——构成因特网的基本硬件和软件组件<br>  ——为分布式应用提供服务的联网基础设施</p></blockquote><p>下面我们分别以这两方面作为切入点，剖析因特网</p><h2 id="1-1-具体构成描述"><a href="#1-1-具体构成描述" class="headerlink" title="1.1 具体构成描述"></a>1.1 具体构成描述</h2><h3 id="1-1-1-端系统、通信链路、分组交换机、分组简介"><a href="#1-1-1-端系统、通信链路、分组交换机、分组简介" class="headerlink" title="1.1.1 端系统、通信链路、分组交换机、分组简介"></a>1.1.1 端系统、通信链路、分组交换机、分组简介</h3><p>用因特网术语来说，所有与它相联系的设备统称为<strong>主机</strong>（host）或<strong>端系统</strong>（end system）。</p><blockquote><p>端系统通过<strong>通信链路</strong>（communication link）和<strong>分组交换机</strong>（packet switch）连接到一起。</p></blockquote><p><em>通信链路</em>。它们由不同类型的物理媒体（同轴电缆、铜线、光纤和无线电频谱）组成。不同的链路有不同的传输速率（以bit/s或bps度量）。当一台端系统要向另一台端系统发送数据时，发送端系统将数据分段，并为每段加上首部字节。由此形成的信息包我们将其称为<strong>分组</strong>（packet）。这些分组通过网络发送到目的端系统，在那里被装配成初始数据。</p><p><em>分组交换机</em>。分组交换机从它的一条入通信链路接收到达的分组，并从它的一条出通信链路转发该分组。在当今的因特网中，两种最著名的类型是<strong>路由器</strong>（router）和<strong>链路层交换机</strong>（link-layer switch）。</p><blockquote><p><strong>路由器</strong>通常用于网络核心中<br><strong>链路层交换机</strong>通常用于接入网中</p></blockquote><p>从发送端系统到接收端系统，一个分组所经历的一系列通信链路和分组交换机称为通过该网络的<strong>路径</strong>（route或path）。</p><p>用于传送分组的分组交换网络在许多方面类似于承载运输车辆的运输网络，该网络包括了高速公路、公路和立交桥。当工厂需要将大量货物搬运至远方的仓库时，工厂就要将货物分开装上卡车车队，通过高速公路、公路和立交桥将货物搬运至仓库。在这一过程中，各个环节扮演的角色如下表所示：</p><table><thead><tr><th>角色</th><th>环节</th></tr></thead><tbody><tr><td>分组</td><td>卡车</td></tr><tr><td>通信链路</td><td>高速公路、公路</td></tr><tr><td>分组交换机</td><td>立交桥</td></tr><tr><td>端系统</td><td>工厂、仓库</td></tr></tbody></table><h3 id="1-1-2-ISP简介"><a href="#1-1-2-ISP简介" class="headerlink" title="1.1.2 ISP简介"></a>1.1.2 ISP简介</h3><p>端系统通过<strong>因特网服务提供商</strong>（ISP）接入因特网。每个ISP是一个由多个分组交换机和多段通信链路组成的网络。各ISP为端系统提供各种不同类型的网络接入（线缆调制解调器或如DSL的住宅宽带接入、高速局域网接入、无线接入和56kbps拨号调制解调器接入）。</p><p>因特网将端系统彼此互联，因此ISP也必须互联。</p><blockquote><p><strong>低层ISP</strong>通过国家、国际的高层ISP（Level 3 Communications、AT&amp;T、Sprint和NTT）互联；<br><strong>高层ISP</strong>是由通过高速光纤链路互联的高速路由器组成的</p></blockquote><h3 id="1-1-3-协议简介"><a href="#1-1-3-协议简介" class="headerlink" title="1.1.3 协议简介"></a>1.1.3 协议简介</h3><p>端系统、分组交换机和其他因特网部件都要运行一系列协议（protocol），这些协议控制因特网中信息的接收和发送。<strong>传输控制协议</strong>（TCP）和<strong>网络协议</strong>（IP）是因特网中两个最为重要的协议。IP协议定义了在路由器和端系统之间发送和接收的分组格式。因特网的主要协议统称为TCP/IP。</p><p>鉴于因特网协议的重要性，每个人就各个协议及其作用取得一致认识很重要，这样人们就能创造协同工作的系统和产品。自然而然，我们引入了因特网<strong>标准</strong>（Internet standard），它由因特网工程任务组（IETF）研发。IETF的标准文档称为<strong>请求评论</strong>（RFC），它们定义了TCP、IP、HTTP（用于Web）和SMTP（用于电子邮件）等协议。当然，其他组织也在制定用于网络组件的标准。</p><h2 id="1-2-服务描述"><a href="#1-2-服务描述" class="headerlink" title="1.2 服务描述"></a>1.2 服务描述</h2><blockquote><p>何为因特网？可以有两种解释：<br> ——构成因特网的基本硬件和软件组件<br>  ——为分布式应用提供服务的联网基础设施</p></blockquote><p>上文以前者作为切入点，现在我们从<em>应用程序提供服务的基础设施</em>的角度来描述因特网。</p><p>我们平时接触到的大部分应用程序，例如电子邮件、Web冲浪、即时讯息等等，它们称为<strong>分布式应用程序</strong>（distributed application），因为它们涉及多台相互交换数据的端系统。</p><p>与因特网相连的端系统提供了一个<strong>应用程序编程接口</strong>（API）。API规定了运行在一个端系统上的软件请求因特网基础设施向运行在另一个端系统上的特定目的地软件交付数据的方式。</p><p>举个例子，Alice要向Bob寄一封信，Alice不能写完信后就将信丢出窗外，邮政服务要求Alice将信放入 信封并贴上邮票，还要投进邮箱中。对应到因特网中，就有如下类比：</p><table><thead><tr><th>角色</th><th>环节</th></tr></thead><tbody><tr><td>软件A</td><td>Alice</td></tr><tr><td>软件B</td><td>Bob</td></tr><tr><td>API</td><td>邮政服务规定</td></tr></tbody></table><h2 id="1-3-什么是协议"><a href="#1-3-什么是协议" class="headerlink" title="1.3 什么是协议"></a>1.3 什么是协议</h2><h3 id="1-3-1-人类活动类比"><a href="#1-3-1-人类活动类比" class="headerlink" title="1.3.1 人类活动类比"></a>1.3.1 人类活动类比</h3><blockquote><p>我们用一张图生动形象的表达协议的含义</p></blockquote><p><a href="https://img-blog.csdnimg.cn/86635908c0e14a5aa3909b7848af7ccb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbTBfNTI3NTUwNTk=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center">图为人类协议和计算机网络协议</a> </p><p>如果人们使用不同的协议（例如，一个人讲礼貌而另一个人不讲礼貌），该协议就不能互动，因而不能完成有用的工作。在网络中这个道理同样成立。即为了完成一项工作，要求两个（或多个）通信实体运行相同协议。</p><h3 id="1-3-2-网络协议"><a href="#1-3-2-网络协议" class="headerlink" title="1.3.2 网络协议"></a>1.3.2 网络协议</h3><blockquote><p>在因特网中，凡是涉及两个或多个远程通信实体的所有活动都受<strong>协议</strong>的制约。</p></blockquote><p>例如，在两台物理上连接的计算机中，硬件实现的协议控制了在两块网络接口卡间的“线上”的比特流；在端系统中，拥塞控制协议控制了在发送方和接收方之间传输的分组发送的速率。</p><p>从上述的人类活动和网络的例子中可见，报文的交换以及发送和接收这些报文时所采取的动作是定义一个协议的关键元素：</p><blockquote><p>一个<strong>协议</strong>定义了在两个或多个通信实体之间交换的<strong>报文格式和次序</strong>，以及报文发送和（或）接收一条报文或其他事件所采取的<strong>动作</strong>。</p></blockquote><h1 id="二、网络边缘"><a href="#二、网络边缘" class="headerlink" title="二、网络边缘"></a>二、网络边缘</h1><p>我们通常把与因特网相连的计算机和其他设备称为端系统，因为它们位于<strong>互联网的边缘</strong>，故而被称为端系统。端系统也称为<strong>主机</strong>，因为它们容纳（即运行）应用程序，如Web浏览器程序、Web服务器程序、电子邮件阅读程序或电子邮件服务器程序等。端系统有时又被进一步划分为两类：<strong>客户</strong>（client）和<strong>服务器</strong>（server）。</p><blockquote><p><strong>客户</strong>相当于是桌面PC、移动PC和智能手机等，<br><strong>服务器</strong>相当于是更为强大的机器，用于存储和发布Web页面、流视频、中继电子邮件等。</p></blockquote><h2 id="2-1-接入网"><a href="#2-1-接入网" class="headerlink" title="2.1 接入网"></a>2.1 接入网</h2><blockquote><p><strong>接入网</strong>是指将端系统连接到其<strong>边缘路由器</strong>的<strong>物理链路</strong></p></blockquote><p>边缘路由器是端系统到任何其他远程端系统的路径上的<strong>第一台路由器</strong>。</p><p><a href="https://img-blog.csdnimg.cn/0adfe3517b9f4caaad181ea94136954e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbTBfNTI3NTUwNTk=,size_20,color_FFFFFF,t_70,g_se,x_16">图为端系统交互的大致组成部分</a></p><h3 id="2-1-1-家庭接入：DSL、电缆、FTTH、拨号和卫星"><a href="#2-1-1-家庭接入：DSL、电缆、FTTH、拨号和卫星" class="headerlink" title="2.1.1 家庭接入：DSL、电缆、FTTH、拨号和卫星"></a>2.1.1 家庭接入：DSL、电缆、FTTH、拨号和卫星</h3><p>以前，宽带住宅接入有两种类型：<strong>数字用户线</strong>（DSL）和<strong>电缆</strong>。</p><p><a href="https://img-blog.csdnimg.cn/c9e80d89bf684f809beca1e20b49e770.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbTBfNTI3NTUwNTk=,size_20,color_FFFFFF,t_70,g_se,x_16">图为DSL因特网接入</a></p><p>除了DSL电话接入，还有利用有线电视公司现有有线电视基础设施的电缆因特网接入，这里不再赘述，读者可自行查阅。目前主流的上网方式是<strong>光纤到户</strong>（FTTH），即从本地中心局直接到家庭提供一条光纤路径。</p><p><a href="/img/cn1.4.png">图为FTTH因特网接入</a></p><h3 id="2-1-2-企业（和家庭）接入：以太网和WIFI"><a href="#2-1-2-企业（和家庭）接入：以太网和WIFI" class="headerlink" title="2.1.2 企业（和家庭）接入：以太网和WIFI"></a>2.1.2 企业（和家庭）接入：以太网和WIFI</h3><p>在公司和大学校园以及在越来越多的家庭环境中，通常是用局域网（LAN）将端用户连接到边缘路由器，以太网是目前最为流行的接入技术。使用以太网接入，用户通常以100Mbps速率接入以太网交换机，而服务器可能具有1Gbps甚至10Gbps的接入速率。</p><p><a href="/img/cn1.5.png">图为以太网因特网接入</a></p><p>在无线LAN环境中，无线用户从/到一个接入点发送/接收分组，该接入点与企业网连接，该企业网再与有线因特网相连。基于IEEE 802.11的技术的无线LAN称为WiFi。</p><h2 id="2-2-物理媒体"><a href="#2-2-物理媒体" class="headerlink" title="2.2 物理媒体"></a>2.2 物理媒体</h2><p>物理媒体划分为两类：<strong>导引型媒体</strong>（guided media）和<strong>非导引型媒体</strong>（unguided meidia）。</p><blockquote><p> 导引型媒体，电波沿着固体媒体前行，如光缆、双绞铜线或同轴电缆。<br> 非导引型媒体，电波在空气或外层空间中传播，如无线局域网或数字卫星频道。</p></blockquote><p>具体物理媒体介绍暂且不更，有兴趣者可自行查阅。</p><h1 id="三、网络核心"><a href="#三、网络核心" class="headerlink" title="三、网络核心"></a>三、网络核心</h1><p><strong>网络核心</strong>指互联因特网端系统的分组交换机和链路构成的网状网络。</p><h2 id="3-1-分组交换"><a href="#3-1-分组交换" class="headerlink" title="3.1 分组交换"></a>3.1 分组交换</h2><p>源端系统向目的端系统发送报文，源将长报文划分为一个个<strong>分组</strong>，每个分组都通过<strong>通信链路</strong>和<strong>分组交换机</strong>传送，分组以等于该链路<strong>最大传输速率</strong>的速度传输通过通信链路。因此，如果某源端系统或分组交换机经过一条链路发送一个L比特的分组，链路的传输速率为R比特/秒，则传输该分组的时间为L/R秒。</p><h3 id="3-1-1-存储转发运输"><a href="#3-1-1-存储转发运输" class="headerlink" title="3.1.1 存储转发运输"></a>3.1.1 存储转发运输</h3><blockquote><p>存储转发运输，是指在交换机能够开始向输出链路传输该分组的第一个比特之前，必须接收到整个分组。</p></blockquote><p>多数分组交换机在链路的输入端使用<strong>存储转发运输</strong>（store-and-forward transmission）机制。</p><p>为了深刻理解存储转发运输，特举例说明（这里忽略传播时延），</p><blockquote><p>发送一个分组：<br>源在时刻0开始传输；<br>在时刻L/R，路由器接收到整个分组；<br>在时刻2L/R，路由器传输了整个分组，并已被目的地接收。<br>总时延为2L/R。</p></blockquote><blockquote><p>发送三个分组：<br>源在时刻0开始传输；<br>在时刻L/R，路由器开始转发第一个分组，源开始发送第二个分组；<br>在时刻2L/R，目的地收到第一个分组，路由器收到第二个分组；<br>在时刻3L/R，目的地收到前两个分组，路由器收到第三个分组；<br>在时刻4L/R，目的地接收全部分组。<br>总时延为4L/R。</p></blockquote><p>综上所诉，我们可以考虑N条速率均为R的链路组成的路径（所以，源和目的地之间有N-1台路由器），d（端时延）=N*L/R</p><h2 id="3-1-2-排队时延和分组丢失"><a href="#3-1-2-排队时延和分组丢失" class="headerlink" title="3.1.2 排队时延和分组丢失"></a>3.1.2 排队时延和分组丢失</h2>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
      <category>自顶向下方法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/21/hello-world/"/>
    <url>/2022/03/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
