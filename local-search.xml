<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Muduo库源码剖析(1) Reactor架构三大核心模块</title>
    <link href="/2023/01/04/Muduo(1)/"/>
    <url>/2023/01/04/Muduo(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="muduo库源码剖析1-reactor架构三大核心模块"><a class="markdownIt-Anchor" href="#muduo库源码剖析1-reactor架构三大核心模块"></a> Muduo库源码剖析(1) Reactor架构三大核心模块</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>好久不见，距离上次更新过去两个月了，一直在忙各种各样的事，搁置了很长时间。服务器的实现先暂且告一段落，因为我想一味地去抄袭别人的代码起到的作用可能会很有限，所以还是想自己去实现一下。正好这段时间也读了<code>APUE</code>、<code>UNP</code>等等的材料，所以觉得准备的也差不多了。先从陈硕老师赫赫有名的<code>Muduo</code>网络库开始学习吧。</p><p>本文介绍一下<code>Muduo</code>库所采用的Reactor架构的三大核心模块。</p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><h3 id="1-reactor模式简介"><a class="markdownIt-Anchor" href="#1-reactor模式简介"></a> 1 Reactor模式简介</h3><p>Reactor模式也叫反应器模式，大多数IO相关组件如Netty、Redis在使用的IO模式，用于需要<strong>并发</strong>处理<strong>多个客户端</strong>的服务器。</p><p>Reactor模式就是基于建立连接与具体服务之间线程分离的模式。在Reactor模式中，会有一个线程负责与所有客户端建立连接，这个线程通常称之为 <code>Reactor</code>。然后在建立连接之后，Reactor 线程 会使用其它线程（可以有多个）来处理与每一个客户端之间的数据传输，这个（些）线程通常称之为 <code>Handler</code>。</p><p>由于服务端需要与多个客户端通信，它的通信是一对多的关系，所以它需要使用 Reactor 模式。对客户端，它只需要与服务端通信，它的通信是一对一的关系，所以它不需要使用 Reactor 模式。也就是说，对客户端来讲，它不需要进行建立连接与传输数据之间的线程分离。</p><p><code>Muduo</code>库有三个核心组件支撑一个Reactor实现<strong>持续</strong>的<strong>监听</strong>一组fd，并根据每个fd上发生的事件<strong>调用</strong>相应的处理函数。这三个组件分别是<code>Channel</code>类、<code>Poller/EpollPoller</code>类以及<code>EventLoop</code>类。</p><h3 id="2-channel类"><a class="markdownIt-Anchor" href="#2-channel类"></a> 2 Channel类</h3><h4 id="21-channel类简介"><a class="markdownIt-Anchor" href="#21-channel类简介"></a> 2.1 Channel类简介</h4><p>在TCP网络编程中，想要IO多路复用监听某个fd，就要把这个fd和该fd感兴趣的事件通过<code>epoll_ctl</code><strong>注册</strong>到IO多路复用模块（也叫<strong>事件监听器</strong>）上。当事件监听器监听到该fd发生了某个事件。事件监听器返回<strong>发生事件的fd集合</strong>以及<strong>每个fd都发生了什么事件</strong>。</p><p><code>Channel</code>类则封装了<strong>一个fd</strong>和<strong>该fd感兴趣的事件</strong>以及事件监听器监听到的<strong>该fd实际发生的事件</strong>。同时Channel类还提供了<strong>设置</strong>该fd的感兴趣事件，以及将该fd及其感兴趣事件<strong>注册</strong>到事件监听器或从事件监听器上<strong>移除</strong>，以及<strong>保存</strong>了该fd的每种事件对应的处理函数。</p><p>每个<code>Channel</code>对象自始至终只属于一个<code>EventLoop</code>，因此每个<code>Channel</code>对象都只属于一个IO线程，自始至终只负责一个文件描述符(fd)的IO事件分发，但它不拥有这个fd，也不会在析构时关闭这个fd。</p><p>用户不直接使用<code>Channel</code>，即不继承<code>Channel</code>，而会用到更上层的封装，如<code>TcpConnection</code>。</p><p><code>Channel</code>的生命期由其owner class负责管理。</p><h4 id="22-channel类一些重要的成员变量"><a class="markdownIt-Anchor" href="#22-channel类一些重要的成员变量"></a> 2.2 Channel类一些重要的成员变量</h4><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">private</span>:<br> <span class="hljs-function"><span class="hljs-type">static</span> string <span class="hljs-title">eventsToString</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> ev)</span></span>;<br><br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 本质上就是调用epoll_ctl()</span><br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handleEventWithGuard</span><span class="hljs-params">(Timestamp receiveTime)</span></span>;<br><br> <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> kNoneEvent;<br> <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> kReadEvent;<br> <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> kWriteEvent;<br><br> EventLoop* loop_;<span class="hljs-comment">// 该fd属于哪个EventLoop对象</span><br> <span class="hljs-type">const</span> <span class="hljs-type">int</span>  fd_;<span class="hljs-comment">// 照看的文件描述符(fd)</span><br> <span class="hljs-type">int</span>        events_;<span class="hljs-comment">// fd感兴趣的事件类型集合</span><br> <span class="hljs-type">int</span>        revents_;  <span class="hljs-comment">// 事件监听器实际监听到该fd发生的事件类型集合</span><br> <span class="hljs-type">int</span>        index_; <span class="hljs-comment">// used by Poller.</span><br>   <span class="hljs-comment">// Poller使用。</span><br> <span class="hljs-type">bool</span>       logHup_;<br><br> std::weak_ptr&lt;<span class="hljs-type">void</span>&gt; tie_;<br> <span class="hljs-type">bool</span> tied_;<br> <span class="hljs-type">bool</span> eventHandling_;<br> <span class="hljs-type">bool</span> addedToLoop_;<br><br> <span class="hljs-comment">// 这些是std::function类型，代表着这个Channel为这个文件描述符保存的各事件类型发生时的处理函数。</span><br> <span class="hljs-comment">// 比如这个fd发生了可读事件，需要执行可读事件处理函数，这时候Channel类都替你保管好了这些可调用函数。</span><br> ReadEventCallback readCallback_;<br> EventCallback writeCallback_;<br> EventCallback closeCallback_;<br> EventCallback errorCallback_;<br></code></pre></td></tr></table></figure><h4 id="23-channel类一些重要的成员方法"><a class="markdownIt-Anchor" href="#23-channel类一些重要的成员方法"></a> 2.3 Channel类一些重要的成员方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">public</span>:<br> <span class="hljs-keyword">typedef</span> std::function&lt;<span class="hljs-type">void</span>()&gt; EventCallback;<br> <span class="hljs-keyword">typedef</span> std::function&lt;<span class="hljs-type">void</span>(Timestamp)&gt; ReadEventCallback;<br><br> <span class="hljs-built_in">Channel</span>(EventLoop* loop, <span class="hljs-type">int</span> fd);<br> ~<span class="hljs-built_in">Channel</span>();<br> <br> <span class="hljs-comment">// handleEvent让每个发生了事件的Channel调用自己保管的事件处理函数。</span><br> <span class="hljs-comment">// 每个Channel会根据自己文件描述符实际发生的事件（revents_变量）和感兴趣的事件（events_变量）</span><br> <span class="hljs-comment">// 选择调用read_callback_和/或write_callback_和/或close_callback_和/或error_callback_。</span><br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handleEvent</span><span class="hljs-params">(Timestamp receiveTime)</span></span>;<br><br> <span class="hljs-comment">// 向Channel对象注册各类事件的处理函数</span><br> <span class="hljs-comment">// 一个文件描述符会发生可读、可写、关闭、错误事件。</span><br> <span class="hljs-comment">// 当发生这些事件后，就需要调用相应的处理函数来处理。</span><br> <span class="hljs-comment">// 外部通过调用下面这四个函数可以将事件处理函数放进Channel类中，当需要调用的时候就可以直接拿出来调用了。</span><br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setReadCallback</span><span class="hljs-params">(ReadEventCallback cb)</span></span><br><span class="hljs-function"> </span>&#123; readCallback_ = std::<span class="hljs-built_in">move</span>(cb); &#125;<br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setWriteCallback</span><span class="hljs-params">(EventCallback cb)</span></span><br><span class="hljs-function"> </span>&#123; writeCallback_ = std::<span class="hljs-built_in">move</span>(cb); &#125;<br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setCloseCallback</span><span class="hljs-params">(EventCallback cb)</span></span><br><span class="hljs-function"> </span>&#123; closeCallback_ = std::<span class="hljs-built_in">move</span>(cb); &#125;<br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setErrorCallback</span><span class="hljs-params">(EventCallback cb)</span></span><br><span class="hljs-function"> </span>&#123; errorCallback_ = std::<span class="hljs-built_in">move</span>(cb); &#125;<br><br> <span class="hljs-comment">/// Tie this channel to the owner object managed by shared_ptr,</span><br> <span class="hljs-comment">/// prevent the owner object being destroyed in handleEvent.</span><br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tie</span><span class="hljs-params">(<span class="hljs-type">const</span> std::shared_ptr&lt;<span class="hljs-type">void</span>&gt;&amp;)</span></span>;<br><br> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fd</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> fd_; &#125;<br> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">events</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> events_; &#125;<br><br> <span class="hljs-comment">// 当事件监听器监听到某个文件描述符发生了什么事件，通过这个函数可以将这个文件描述符实际发生的事件封装进这个Channel中。</span><br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_revents</span><span class="hljs-params">(<span class="hljs-type">int</span> revt)</span> </span>&#123; revents_ = revt; &#125;<br><br> <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isNoneEvent</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> events_ == kNoneEvent; &#125;<br><br> <span class="hljs-comment">// 将Channel中的文件描述符及其感兴趣事件注册事件监听器上或从事件监听器上移除</span><br> <span class="hljs-comment">// 外部通过下面几个函数来告知Channel你所监管的文件描述符都对哪些事件类型感兴趣，</span><br> <span class="hljs-comment">// 并把这个文件描述符及其感兴趣事件注册到事件监听器（IO多路复用模块）上。</span><br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">enableReading</span><span class="hljs-params">()</span> </span>&#123; events_ |= kReadEvent; <span class="hljs-built_in">update</span>(); &#125;<br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">disableReading</span><span class="hljs-params">()</span> </span>&#123; events_ &amp;= ~kReadEvent; <span class="hljs-built_in">update</span>(); &#125;<br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">enableWriting</span><span class="hljs-params">()</span> </span>&#123; events_ |= kWriteEvent; <span class="hljs-built_in">update</span>(); &#125;<br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">disableWriting</span><span class="hljs-params">()</span> </span>&#123; events_ &amp;= ~kWriteEvent; <span class="hljs-built_in">update</span>(); &#125;<br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">disableAll</span><span class="hljs-params">()</span> </span>&#123; events_ = kNoneEvent; <span class="hljs-built_in">update</span>(); &#125;<br><br> <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isWriting</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> events_ &amp; kWriteEvent; &#125;<br> <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isReading</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> events_ &amp; kReadEvent; &#125;<br><br> <span class="hljs-comment">// for Poller</span><br> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> index_; &#125;<br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_index</span><span class="hljs-params">(<span class="hljs-type">int</span> idx)</span> </span>&#123; index_ = idx; &#125;<br><br> <span class="hljs-comment">// for debug</span><br> <span class="hljs-function">string <span class="hljs-title">reventsToString</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br> <span class="hljs-function">string <span class="hljs-title">eventsToString</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doNotLogHup</span><span class="hljs-params">()</span> </span>&#123; logHup_ = <span class="hljs-literal">false</span>; &#125;<br><br> <span class="hljs-function">EventLoop* <span class="hljs-title">ownerLoop</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> loop_; &#125;<br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="3-pollerepollpoller类"><a class="markdownIt-Anchor" href="#3-pollerepollpoller类"></a> 3 Poller/EpollPoller类</h3><h4 id="31-pollerepollpoller简介"><a class="markdownIt-Anchor" href="#31-pollerepollpoller简介"></a> 3.1 Poller/EpollPoller简介</h4><p><strong>负责监听文件描述符事件是否触发</strong>以及<strong>返回发生事件的文件描述符以及具体事件</strong>的模块就是Poller。所以<strong>一个Poller对象对应一个事件监听器</strong>。在<code>multi-reactor</code>模型（多线程）中，有多少reactor就有多少Poller。</p><p><code>muduo</code>提供了<code>epoll</code>和<code>poll</code>两种IO多路复用方法来实现事件监听。不过默认是使用<code>epoll</code>来实现，也可以通过选项选择<code>poll</code>。</p><p>这个<code>Poller</code>是个<strong>抽象虚类</strong>，由<code>EpollPoller</code>和<code>PollPoller</code>继承实现，与监听文件描述符和返回监听结果的具体方法也基本上是在这两个派生类中实现。<code>EpollPoller</code>就是封装了用<code>epoll</code>方法实现的与事件监听有关的各种方法，<code>PollPoller</code>就是封装了<code>poll</code>方法实现的与事件监听有关的各种方法。</p>]]></content>
    
    
    <categories>
      
      <category>源码剖析 - Muduo网络库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WebServer(1) 从打造最简单的echo服务器开始征途</title>
    <link href="/2022/10/30/WebServer(1)/"/>
    <url>/2022/10/30/WebServer(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="webserver1-从打造最简单的echo服务器开始征途"><a class="markdownIt-Anchor" href="#webserver1-从打造最简单的echo服务器开始征途"></a> WebServer(1) 从打造最简单的echo服务器开始征途</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>写这篇文章的时候是10月30日，马上就要寒假了，之所以要开这个项目也是为了能赶在投实习前再完成一个网络编程项目。预计在11月完成。自打大三开学之后能明显感觉时间在飞速流走，寒假实习的期限也迫在眉睫，希望自己能顶住压力吧。需要说明的是，因为自己时间太紧，本项目完全是跟着csdn上面大佬的流程进行的，不过也是逐行代码自己琢磨研究过了，等稳定后再重新翻阅。</p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>在上代码之前，先上一张流程图：</p><p><img src="/img/web-server/1.1.png" alt="图为TCP报文交互" /></p><h3 id="simple-echo-server-001"><a class="markdownIt-Anchor" href="#simple-echo-server-001"></a> simple echo server 0.01</h3><p>上源码：</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span>* argv[])</span><span class="hljs-comment">// argc是命令行中参数数量，argv是命令行中参数的数组(第一个元素是程序名）</span><br>&#123;<br><span class="hljs-comment">// 参数数量小于3退出</span><br><span class="hljs-keyword">if</span> (argc &lt;= <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Usage: %s ip_address portname\n&quot;</span>, argv[<span class="hljs-number">0</span>] );<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip = argv[<span class="hljs-number">1</span>];<span class="hljs-comment">// ip地址</span><br><span class="hljs-type">int</span> port = atoi( argv[<span class="hljs-number">2</span>] );<span class="hljs-comment">// 端口号</span><br><span class="hljs-type">int</span> listenfd = socket( PF_INET, SOCK_STREAM, <span class="hljs-number">0</span> );<span class="hljs-comment">// 创建TCP套接字</span><br><span class="hljs-comment">// 协议族 协议类型 协议编号</span><br>assert( listenfd &gt;= <span class="hljs-number">1</span> );<span class="hljs-comment">// 套接字文件描述符小于1,报错</span><br><br><span class="hljs-comment">// 创建sockaddr_in结构体,处理网络通信</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">address</span>;</span><br><span class="hljs-built_in">memset</span>( &amp;address, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>( address ) );<span class="hljs-comment">// 初始化address</span><br>address.sin_family = AF_INET;<span class="hljs-comment">// 协议族</span><br>address.sin_port = htons( port );<span class="hljs-comment">// 端口号 修改字节序后存储进struct</span><br>inet_pton( AF_INET, ip, &amp;address.sin_addr );<span class="hljs-comment">// 主机地址 以二进制形式存储进struct</span><br><br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>ret = bind( listenfd, (<span class="hljs-keyword">struct</span> sockaddr*)( &amp;address ), <span class="hljs-keyword">sizeof</span>( address ) );<span class="hljs-comment">// 把本地协议地址赋予套接字</span><br>assert( ret != <span class="hljs-number">-1</span> );<span class="hljs-comment">// 返回值等于-1,报错</span><br><br>ret = listen( listenfd, <span class="hljs-number">5</span> );<span class="hljs-comment">// 把进程变为服务器</span><br>assert( ret != <span class="hljs-number">-1</span> );<span class="hljs-comment">// 返回值等于-1,报错</span><br><br><span class="hljs-comment">// 创建客户端</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">client</span>;</span><br><span class="hljs-type">socklen_t</span> client_addrlength = <span class="hljs-keyword">sizeof</span>( client );<br><span class="hljs-type">int</span> sockfd = accept( listenfd, (<span class="hljs-keyword">struct</span> sockaddr*)( &amp;address ), &amp;client_addrlength );<br>      <br><span class="hljs-type">char</span> buf_size[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> recv_size = <span class="hljs-number">0</span>;<br>recv_size = recv( sockfd, buf_size, <span class="hljs-keyword">sizeof</span>( buf_size ) , <span class="hljs-number">0</span>);<span class="hljs-comment">// 向客户端套接字sockfd发送内容</span><br><span class="hljs-comment">// 发送数据的首地址是buf_size</span><br><span class="hljs-comment">// 返回内容长度</span><br><span class="hljs-type">int</span> send_size = <span class="hljs-number">0</span>;<br>send_size = send( sockfd, buf_size , recv_size , <span class="hljs-number">0</span> );<span class="hljs-comment">// 向客户端套接字sockfd发送内容</span><br><span class="hljs-comment">// 发送数据的首地址是buf_size</span><br><span class="hljs-comment">// 返回内容长度</span><br><br>close( sockfd );<br>close( listenfd );<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释已经添加了，接下来验证一下。</p><p>先用gcc编译生成可执行文件：</p><p><img src="/img/web-server/1.2.png" alt="图为WebServer文件夹页面" /></p><p>运行该可执行文件，参数为回流的本地地址和端口号：</p><p><img src="/img/web-server/1.3.png" alt="图为命令行页面" /></p><p>同时再启动一个终端页面，利用nc冒充客户端验证该服务器：</p><p><img src="/img/web-server/1.4.png" alt="图为命令行页面" /></p><p>能看到输入完信息后是可以回弹的，验证成功！</p>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
      <category>从零开始打造WebServer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Winform 通过计时器实现图片缩放功能</title>
    <link href="/2022/10/25/C%20sharp1/"/>
    <url>/2022/10/25/C%20sharp1/</url>
    
    <content type="html"><![CDATA[<h1 id="winform-通过计时器实现图片缩放功能"><a class="markdownIt-Anchor" href="#winform-通过计时器实现图片缩放功能"></a> Winform 通过计时器实现图片缩放功能</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>hello，好久不见噢，距离上一次更新又过了一个月，这段时间在忙很多事。主要谈一谈技术上吧，机器学习的老师帮忙联系了一个C#的实习，犹豫了一下就果断发简历了，虽然之前从未接触过C#，但正巧自己需要丰富实习经历，再加上不需要线下，就当换换脑子了。这几天一直在狂补Winform的基础语法，从一开始的拿到程序都不会用到现在可以自己写一写简单的窗口程序了，感觉很不错。</p><p>这个项目其中的一个比较重要的功能就是在窗口的左侧绘制一张原图片，通过鼠标在上面移动，能在右侧绘制出鼠标周围图片的缩放。老师说利用多线程也可以，奈何自己才疏学浅，感觉计时器完成刷新率（每秒60帧）也可以接受，就果断采用了。</p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>先创建两个picturebox，把原图片也放上去。利用截屏方法提取图像，显示在右侧picturebox。再利用计时器实现不断刷新就行了。</p><p>上代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.ComponentModel;<br><span class="hljs-keyword">using</span> System.Data;<br><span class="hljs-keyword">using</span> System.Drawing;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><span class="hljs-keyword">using</span> System.Windows.Forms;<br><span class="hljs-keyword">using</span> System.Threading;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">WindowsFormsApplication4</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Form1</span> : <span class="hljs-title">Form</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> magnification = <span class="hljs-number">1</span>;  <span class="hljs-comment">//倍率，调节放大倍数,可由TrackBar控制调节    </span><br>        <span class="hljs-built_in">int</span> mx;                 <span class="hljs-comment">//鼠标x坐标</span><br>        <span class="hljs-built_in">int</span> my;                 <span class="hljs-comment">//鼠标y坐标</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> imgWidth = <span class="hljs-number">400</span>;   <span class="hljs-comment">//放大后图片的宽度</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> imgHeight = <span class="hljs-number">400</span>;  <span class="hljs-comment">//放大后图片的高度</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Form1</span>()</span><br>        &#123;<br>            InitializeComponent();<br><br>            <span class="hljs-comment">// 将原图像显示在pictureBox1</span><br>            Image img = Image.FromFile(<span class="hljs-string">&quot;Earth.bmp&quot;</span>);<span class="hljs-comment">// 建立Image对象</span><br>            pictureBox1.Image = img;<br>        &#125;<br><br>        <span class="hljs-comment">// 计时器</span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">timer1_Tick</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            mx = pictureBox1.PointToClient(Control.MousePosition).X;<br>            my = pictureBox1.PointToClient(Control.MousePosition).Y;<br><br>            <span class="hljs-comment">// 检测鼠标是否在pictureBox1中</span><br>            <span class="hljs-comment">// 若是，pictureBox2显示其缩放</span><br>            <span class="hljs-built_in">bool</span> b = pictureBox1.RectangleToScreen(pictureBox1.ClientRectangle).Contains(MousePosition);<br>            <span class="hljs-keyword">if</span> (!b)<br>            &#123;<br>                pictureBox2.Image = <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">//对图像进行放大显示　      </span><br>                Bitmap bt = <span class="hljs-keyword">new</span> Bitmap(imgWidth / magnification, imgHeight / magnification);<br>                Graphics g = Graphics.FromImage(bt);<br>                g.CopyFromScreen(<br>                        <span class="hljs-keyword">new</span> Point(Cursor.Position.X - imgWidth / (<span class="hljs-number">2</span> * magnification),<br>                                Cursor.Position.Y - imgHeight / (<span class="hljs-number">2</span> * magnification)),<br>                    <span class="hljs-comment">//new Point(mx - (imgWidth / (2 * magnification)), </span><br>                    <span class="hljs-comment">//            my - (imgHeight / (2 * magnification))),</span><br>                        <span class="hljs-keyword">new</span> Point(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<br>                        <span class="hljs-keyword">new</span> Size(imgWidth / magnification, imgHeight / magnification));<br>                IntPtr dc1 = g.GetHdc();<br>                g.ReleaseHdc(dc1);<br>                pictureBox2.Image = (Image)bt;<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">trackBar1_Scroll</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            label1.Text = <span class="hljs-string">&quot;x&quot;</span> + trackBar1.Value.ToString();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">trackBar1_ValueChanged</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            magnification = trackBar1.Value;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="/img/Csharp/winform1.png" alt="图为运行效果" /></p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>最近总是看到一些看低cpp就业的文章，弄得自己很焦虑，加上身边学前端的朋友们也都陆续找到了实习，自己却没有勇气前进，负面情绪高涨。不过在身边朋友鼓励下，还是毅然决然坚持cpp的道路，希望最后的结局配得上我为之付出的努力。这个c#系列我有什么想法也依然会更新的。</p>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
      <category>C sharp踩坑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JSON库(2) 函数重构，解析数字</title>
    <link href="/2022/09/21/JSON(2)/"/>
    <url>/2022/09/21/JSON(2)/</url>
    
    <content type="html"><![CDATA[<h1 id="json库2-函数重构解析数字"><a class="markdownIt-Anchor" href="#json库2-函数重构解析数字"></a> JSON库(2) 函数重构，解析数字</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>过去的大概一周多的时间都没有更新博客，一方面是非常忙，把准备很长时间的数模国赛打了，也处理了些学生会的事务，另一方面自己好像也松懈了很多，没有放假时候那么紧张了，希望赶紧把状态调整回来。</p><h2 id="实验内容"><a class="markdownIt-Anchor" href="#实验内容"></a> 实验内容</h2><p>本节主要完成的任务已经写在题目里了，比较容易理解，直接上代码。</p><h3 id="1-修改leptjsonc"><a class="markdownIt-Anchor" href="#1-修改leptjsonc"></a> 1 修改<code>leptjson.c</code></h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*  leptjson实现文件，此文件将编译成库 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;leptjson.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span>    <span class="hljs-comment">/* assert() */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span>   <span class="hljs-comment">/* errno, ERANGE */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span>    <span class="hljs-comment">/* HUGE_VAL */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span>    <span class="hljs-comment">/* NULL, strtod() */</span></span><br><br><span class="hljs-comment">/* 检测c-&gt;json是否指向目标值 c指向下一个字符*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXPECT(c, ch)       do &#123; assert(*c-&gt;json == (ch)); c-&gt;json++; &#125; while(0)</span><br><span class="hljs-comment">/* 检测字符是否在0~9之间 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ISDIGIT(ch)         ((ch) &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; (ch) &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)</span><br><span class="hljs-comment">/* 检测字符是否在1~9之间 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ISDIGIT1TO9(ch)     ((ch) &gt;= <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; (ch) &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)</span><br><br><span class="hljs-comment">/* 存放参数(JSON字符串) */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* json;<br>&#125;lept_context;<br><br><span class="hljs-comment">/* ws = *(%x20 / %09 / %x0A / %x0D) */</span><br><span class="hljs-comment">/* 消除空格字符 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lept_parse_whitespace</span><span class="hljs-params">(lept_context* c)</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *p = c-&gt;json;    <span class="hljs-comment">/* 创建指针p指向该字符串 */</span><br>    <span class="hljs-comment">/* 将指针移动到非空格字符 */</span><br>    <span class="hljs-keyword">while</span> (*p == <span class="hljs-string">&#x27; &#x27;</span> || *p == <span class="hljs-string">&#x27;\t&#x27;</span> || *p == <span class="hljs-string">&#x27;\n&#x27;</span> || *p == <span class="hljs-string">&#x27;\r&#x27;</span>)<br>        p++;<br>    c-&gt;json = p;<br>&#125;<br><br><span class="hljs-comment">/* null  = &quot;null&quot; */</span><br><span class="hljs-comment">/* true = &quot;true&quot; */</span><br><span class="hljs-comment">/* false = &quot;false&quot; */</span><br><span class="hljs-comment">/* 将三个函数进行合并，传入的literal是正确的字符串 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse_literal</span><span class="hljs-params">(lept_context* c, lept_value* v, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* literal, lept_type type)</span> &#123;<br>    <span class="hljs-type">size_t</span> i;<span class="hljs-comment">/* i表示数组的长度，注意数组的长度最好用size_t类型表示 */</span><br>    EXPECT(c, literal[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; literal[i + <span class="hljs-number">1</span>]; i++)<br>        <span class="hljs-keyword">if</span> (c-&gt;json[i] != literal[i + <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>    c-&gt;json += i;<br>    v-&gt;type = type;<br>    <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>&#125;<br><br><span class="hljs-comment">/* 检验数字 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse_number</span><span class="hljs-params">(lept_context* c, lept_value* v)</span> &#123;<br><span class="hljs-comment">/* 数字格式规定 */</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* p = c-&gt;json;<br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;-&#x27;</span>) p++;<br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;0&#x27;</span>) p++;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (!ISDIGIT1TO9(*p)) <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>        <span class="hljs-keyword">for</span> (p++; ISDIGIT(*p); p++);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>        p++;<br>        <span class="hljs-keyword">if</span> (!ISDIGIT(*p)) <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>        <span class="hljs-keyword">for</span> (p++; ISDIGIT(*p); p++);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;e&#x27;</span> || *p == <span class="hljs-string">&#x27;E&#x27;</span>) &#123;<br>        p++;<br>        <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;+&#x27;</span> || *p == <span class="hljs-string">&#x27;-&#x27;</span>) p++;<br>        <span class="hljs-keyword">if</span> (!ISDIGIT(*p)) <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>        <span class="hljs-keyword">for</span> (p++; ISDIGIT(*p); p++);<br>    &#125;<br><span class="hljs-comment">/* 数字过大的处理 */</span><br>    errno = <span class="hljs-number">0</span>;<br>    v-&gt;n = strtod(c-&gt;json, <span class="hljs-literal">NULL</span>);   <span class="hljs-comment">/* 用标准库strtod进行类型转换 */</span><br>    <span class="hljs-keyword">if</span> (errno == ERANGE &amp;&amp; (v-&gt;n == HUGE_VAL || v-&gt;n == -HUGE_VAL))<br>        <span class="hljs-keyword">return</span> LEPT_PARSE_NUMBER_TOO_BIG;<br>    v-&gt;type = LEPT_NUMBER;<br>    c-&gt;json = p;<br>    <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>&#125;<br><br><span class="hljs-comment">/* value */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse_value</span><span class="hljs-params">(lept_context* c, lept_value* v)</span> &#123;<br>    <span class="hljs-comment">/* 检验当前字符串的首个字符,跳转到对应函数 */</span><br>    <span class="hljs-keyword">switch</span> (*c-&gt;json) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>:  <span class="hljs-keyword">return</span> lept_parse_literal(c, v, <span class="hljs-string">&quot;true&quot;</span>, LEPT_TRUE);<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;f&#x27;</span>:  <span class="hljs-keyword">return</span> lept_parse_literal(c, v, <span class="hljs-string">&quot;false&quot;</span>, LEPT_FALSE);<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;n&#x27;</span>:  <span class="hljs-keyword">return</span> lept_parse_literal(c, v, <span class="hljs-string">&quot;null&quot;</span>, LEPT_NULL);<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\0&#x27;</span>: <span class="hljs-keyword">return</span> LEPT_PARSE_EXPECT_VALUE;<br>        <span class="hljs-keyword">default</span>:   <span class="hljs-keyword">return</span> lept_parse_number(c, v);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 解析器 */</span><br><span class="hljs-comment">/* 暂时只储存JSON字符串当前位置 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse</span><span class="hljs-params">(lept_value* v, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* json)</span> &#123;<br>    lept_context c;    <span class="hljs-comment">/* 创建新结构体c,保存字符串 */</span><br>    assert(v != <span class="hljs-literal">NULL</span>);    <span class="hljs-comment">/* v为空,弹出报错 */</span><br>    c.json = json;    <span class="hljs-comment">/* 字符串保存到c中 */</span><br>    v-&gt;type = LEPT_NULL;    <span class="hljs-comment">/* v的type赋为null */</span><br>    lept_parse_whitespace(&amp;c);    <span class="hljs-comment">/* 消除JSON字符串前面的空格字符 */</span><br><br>    <span class="hljs-comment">/* 第1题答案 解决字符串中间还有空格的问题 */</span><br>    <span class="hljs-type">int</span> ret;<br>    <span class="hljs-comment">/* 如果字符串正确,进入循环 */</span><br>    <span class="hljs-keyword">if</span> ((ret = lept_parse_value(&amp;c, v)) == LEPT_PARSE_OK) &#123;<br>        lept_parse_whitespace(&amp;c);    <span class="hljs-comment">/* 每次检验之前消一次空格 */</span><br>        <span class="hljs-comment">/* 指针指向JSON末尾,退出循环 */</span><br>        <span class="hljs-keyword">if</span> (*c.json != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>            v-&gt;type = LEPT_NULL;    <span class="hljs-comment">/* 注意把type重新置为null */</span><br>            ret = LEPT_PARSE_ROOT_NOT_SINGULAR;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">/* 获取JSON的type*/</span><br>lept_type <span class="hljs-title function_">lept_get_type</span><span class="hljs-params">(<span class="hljs-type">const</span> lept_value* v)</span> &#123;<br>    assert(v != <span class="hljs-literal">NULL</span>);    <span class="hljs-comment">/* 断言控制 */</span><br>    <span class="hljs-keyword">return</span> v-&gt;type;<br>&#125;<br><br><span class="hljs-comment">/* 如果JSON的type为LEPT_NUMBER,获取数值*/</span><br><span class="hljs-type">double</span> <span class="hljs-title function_">lept_get_number</span><span class="hljs-params">(<span class="hljs-type">const</span> lept_value* v)</span> &#123;<br>    assert(v != <span class="hljs-literal">NULL</span> &amp;&amp; v-&gt;type == LEPT_NUMBER);    <span class="hljs-comment">/* 断言控制 */</span><br>    <span class="hljs-keyword">return</span> v-&gt;n;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要看两个函数的实现，一个是<code>lept_parse_literal()</code>，这是函数重构部分，另一个是<code>lept_parse_number()</code>，这是解析数字部分。</p><p>先来看第一个要修改的部分。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse_true</span><span class="hljs-params">(lept_context* c, lept_value* v)</span> &#123;<br>    EXPECT(c, <span class="hljs-string">&#x27;t&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (c-&gt;json[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;r&#x27;</span> || c-&gt;json[<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;u&#x27;</span> || c-&gt;json[<span class="hljs-number">2</span>] != <span class="hljs-string">&#x27;e&#x27;</span>)<br>        <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>    c-&gt;json += <span class="hljs-number">3</span>;<br>    v-&gt;type = LEPT_TRUE;<br>    <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse_false</span><span class="hljs-params">(lept_context* c, lept_value* v)</span> &#123;<br>    EXPECT(c, <span class="hljs-string">&#x27;f&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (c-&gt;json[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;a&#x27;</span> || c-&gt;json[<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;l&#x27;</span> || c-&gt;json[<span class="hljs-number">2</span>] != <span class="hljs-string">&#x27;s&#x27;</span> || c-&gt;json[<span class="hljs-number">3</span>] != <span class="hljs-string">&#x27;e&#x27;</span>)<br>        <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>    c-&gt;json += <span class="hljs-number">4</span>;<br>    v-&gt;type = LEPT_FALSE;<br>    <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse_null</span><span class="hljs-params">(lept_context* c, lept_value* v)</span> &#123;<br>    EXPECT(c, <span class="hljs-string">&#x27;n&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (c-&gt;json[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;u&#x27;</span> || c-&gt;json[<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;l&#x27;</span> || c-&gt;json[<span class="hljs-number">2</span>] != <span class="hljs-string">&#x27;l&#x27;</span>)<br>        <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>    c-&gt;json += <span class="hljs-number">3</span>;<br>    v-&gt;type = LEPT_NULL;<br>    <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们能观察到在上一节编写完成后，对<code>null</code>，<code>true</code>，<code>false</code>这三个字符串的处理是非常类似的，完全可以合并成一个函数。合并是非常简单的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse_literal</span><span class="hljs-params">(lept_context* c, lept_value* v, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* literal, lept_type type)</span> &#123;<br>    <span class="hljs-type">size_t</span> i;<span class="hljs-comment">/* i表示数组的长度，注意数组的长度最好用size_t类型表示 */</span><br>    EXPECT(c, literal[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; literal[i + <span class="hljs-number">1</span>]; i++)<br>        <span class="hljs-keyword">if</span> (c-&gt;json[i] != literal[i + <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>    c-&gt;json += i;<br>    v-&gt;type = type;<br>    <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为不知道要检验这三个字符串中的哪个，所以传参需要有它正确的字符串和正确的类型。然后值得注意的地方就是在其中用了一个循环去遍历字符串中的字符，而不是像上面的三个函数一样因为已知正确字符串的每个字符直接用条件判断了。</p><p>第二个要修改的地方就是要加入检验数字的函数了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 检验数字 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse_number</span><span class="hljs-params">(lept_context* c, lept_value* v)</span> &#123;<br><span class="hljs-comment">/* 数字格式规定 */</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* p = c-&gt;json;<br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;-&#x27;</span>) p++;<br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;0&#x27;</span>) p++;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (!ISDIGIT1TO9(*p)) <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>        <span class="hljs-keyword">for</span> (p++; ISDIGIT(*p); p++);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>        p++;<br>        <span class="hljs-keyword">if</span> (!ISDIGIT(*p)) <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>        <span class="hljs-keyword">for</span> (p++; ISDIGIT(*p); p++);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;e&#x27;</span> || *p == <span class="hljs-string">&#x27;E&#x27;</span>) &#123;<br>        p++;<br>        <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;+&#x27;</span> || *p == <span class="hljs-string">&#x27;-&#x27;</span>) p++;<br>        <span class="hljs-keyword">if</span> (!ISDIGIT(*p)) <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>        <span class="hljs-keyword">for</span> (p++; ISDIGIT(*p); p++);<br>    &#125;<br><span class="hljs-comment">/* 数字过大的处理 */</span><br>    errno = <span class="hljs-number">0</span>;<br>    v-&gt;n = strtod(c-&gt;json, <span class="hljs-literal">NULL</span>);   <span class="hljs-comment">/* 用标准库strtod进行类型转换 */</span><br>    <span class="hljs-keyword">if</span> (errno == ERANGE &amp;&amp; (v-&gt;n == HUGE_VAL || v-&gt;n == -HUGE_VAL))<br>        <span class="hljs-keyword">return</span> LEPT_PARSE_NUMBER_TOO_BIG;<br>    v-&gt;type = LEPT_NUMBER;<br>    c-&gt;json = p;<br>    <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我为了简单地阐释清楚这一部分，直接放上原帖作者的图了。</p><p><img src="/img/json/2.1.png" alt="图为JSON数字格式" /></p><p>这个函数与其它检验函数不同的地方就在于需要考虑到很多的不合法格式，其次就是对数字过大的处理，我们引用了<code>errno</code>。简单解释下，当<code>linux</code>中的 <code>api</code>函数发生异常时,一般会将<code>errno</code>变量(需<code>include errno.h</code>)赋一个整数值,不同的值表示不同的含义,可以通过查看该值推测出错的原因。因此推断该数字是否为大数。对于大数，需要返回其特定形式。</p><h3 id="2-修改testc"><a class="markdownIt-Anchor" href="#2-修改testc"></a> 2 修改<code>test.c</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 单元测试(TDD) */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;leptjson.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> main_ret = <span class="hljs-number">0</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> test_count = <span class="hljs-number">0</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> test_pass = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/* 如果expect != actual,打印错误信息 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXPECT_EQ_BASE(equality, expect, actual, format) \</span><br><span class="hljs-meta">    do &#123;\</span><br><span class="hljs-meta">        test_count++;\</span><br><span class="hljs-meta">        <span class="hljs-keyword">if</span> (equality)\</span><br><span class="hljs-meta">            test_pass++;\</span><br><span class="hljs-meta">        <span class="hljs-keyword">else</span> &#123;\</span><br><span class="hljs-meta">            fprintf(stderr, <span class="hljs-string">&quot;%s:%d: expect: &quot;</span> format <span class="hljs-string">&quot; actual: &quot;</span> format <span class="hljs-string">&quot;\n&quot;</span>, __FILE__, __LINE__, expect, actual);\</span><br><span class="hljs-meta">            main_ret = 1;\</span><br><span class="hljs-meta">        &#125;\</span><br><span class="hljs-meta">    &#125; while(0)</span><br><br><span class="hljs-comment">/* 调用EXPECT_EQ_BASE,检验预期值和实际值是否相等 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXPECT_EQ_INT(expect, actual) EXPECT_EQ_BASE((expect) == (actual), expect, actual, <span class="hljs-string">&quot;%d&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXPECT_EQ_DOUBLE(expect, actual) EXPECT_EQ_BASE((expect) == (actual), expect, actual, <span class="hljs-string">&quot;%.17g&quot;</span>)</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse_null</span><span class="hljs-params">()</span> &#123;<br>    lept_value v;    <span class="hljs-comment">/* 定义JSON值结构体v 参数为type */</span><br>    v.type = LEPT_FALSE;    <span class="hljs-comment">/* v的type初始化为false */</span><br>    <span class="hljs-comment">/* 过单元测试 */</span><br>    <span class="hljs-comment">/* 预期值,实际值 */</span><br>    EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, <span class="hljs-string">&quot;null&quot;</span>));<br>    EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));<br>&#125;<br><br><span class="hljs-comment">/* 1.2答案 */</span><br><span class="hljs-comment">/* 和test_parse_null函数只有传入JSON有差别 */</span><br><span class="hljs-comment">/* 注意在test_parse函数中调用这两个函数 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse_true</span><span class="hljs-params">()</span> &#123;<br>    lept_value v;<br>    v.type = LEPT_FALSE;<br>    EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, <span class="hljs-string">&quot;true&quot;</span>));<br>    EXPECT_EQ_INT(LEPT_TRUE, lept_get_type(&amp;v));<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse_false</span><span class="hljs-params">()</span> &#123;<br>    lept_value v;<br>    v.type = LEPT_TRUE;<br>    EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, <span class="hljs-string">&quot;false&quot;</span>));<br>    EXPECT_EQ_INT(LEPT_FALSE, lept_get_type(&amp;v));<br>&#125;<br><br><span class="hljs-comment">/* 数字类型单元测试 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TEST_NUMBER(expect, json)\</span><br><span class="hljs-meta">    do &#123;\</span><br><span class="hljs-meta">        lept_value v;\</span><br><span class="hljs-meta">        EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, json));\</span><br><span class="hljs-meta">        EXPECT_EQ_INT(LEPT_NUMBER, lept_get_type(&amp;v));\</span><br><span class="hljs-meta">        EXPECT_EQ_DOUBLE(expect, lept_get_number(&amp;v));\</span><br><span class="hljs-meta">    &#125; while(0)</span><br><br><span class="hljs-comment">/* 测试用例 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse_number</span><span class="hljs-params">()</span> &#123;<br>    TEST_NUMBER(<span class="hljs-number">0.0</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">0.0</span>, <span class="hljs-string">&quot;-0&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">0.0</span>, <span class="hljs-string">&quot;-0.0&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">1.0</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">-1.0</span>, <span class="hljs-string">&quot;-1&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">1.5</span>, <span class="hljs-string">&quot;1.5&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">-1.5</span>, <span class="hljs-string">&quot;-1.5&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">3.1416</span>, <span class="hljs-string">&quot;3.1416&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">1E10</span>, <span class="hljs-string">&quot;1E10&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">1e10</span>, <span class="hljs-string">&quot;1e10&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">1E+10</span>, <span class="hljs-string">&quot;1E+10&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">1E-10</span>, <span class="hljs-string">&quot;1E-10&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">-1E10</span>, <span class="hljs-string">&quot;-1E10&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">-1e10</span>, <span class="hljs-string">&quot;-1e10&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">-1E+10</span>, <span class="hljs-string">&quot;-1E+10&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">-1E-10</span>, <span class="hljs-string">&quot;-1E-10&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">1.234E+10</span>, <span class="hljs-string">&quot;1.234E+10&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">1.234E-10</span>, <span class="hljs-string">&quot;1.234E-10&quot;</span>);<br>    TEST_NUMBER(<span class="hljs-number">0.0</span>, <span class="hljs-string">&quot;1e-10000&quot;</span>); <span class="hljs-comment">/* must underflow */</span><br><br>    TEST_NUMBER(<span class="hljs-number">1.0000000000000002</span>, <span class="hljs-string">&quot;1.0000000000000002&quot;</span>); <span class="hljs-comment">/* the smallest number &gt; 1 */</span><br>    TEST_NUMBER( <span class="hljs-number">4.9406564584124654e-324</span>, <span class="hljs-string">&quot;4.9406564584124654e-324&quot;</span>); <span class="hljs-comment">/* minimum denormal */</span><br>    TEST_NUMBER(<span class="hljs-number">-4.9406564584124654e-324</span>, <span class="hljs-string">&quot;-4.9406564584124654e-324&quot;</span>);<br>    TEST_NUMBER( <span class="hljs-number">2.2250738585072009e-308</span>, <span class="hljs-string">&quot;2.2250738585072009e-308&quot;</span>);  <span class="hljs-comment">/* Max subnormal double */</span><br>    TEST_NUMBER(<span class="hljs-number">-2.2250738585072009e-308</span>, <span class="hljs-string">&quot;-2.2250738585072009e-308&quot;</span>);<br>    TEST_NUMBER( <span class="hljs-number">2.2250738585072014e-308</span>, <span class="hljs-string">&quot;2.2250738585072014e-308&quot;</span>);  <span class="hljs-comment">/* Min normal positive double */</span><br>    TEST_NUMBER(<span class="hljs-number">-2.2250738585072014e-308</span>, <span class="hljs-string">&quot;-2.2250738585072014e-308&quot;</span>);<br>    TEST_NUMBER( <span class="hljs-number">1.7976931348623157e+308</span>, <span class="hljs-string">&quot;1.7976931348623157e+308&quot;</span>);  <span class="hljs-comment">/* Max double */</span><br>    TEST_NUMBER(<span class="hljs-number">-1.7976931348623157e+308</span>, <span class="hljs-string">&quot;-1.7976931348623157e+308&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/* 通过宏简化函数 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TEST_ERROR(<span class="hljs-keyword">error</span>, json)\</span><br><span class="hljs-meta">    do &#123;\</span><br><span class="hljs-meta">        lept_value v;\</span><br><span class="hljs-meta">        v.type = LEPT_FALSE;\</span><br><span class="hljs-meta">        EXPECT_EQ_INT(<span class="hljs-keyword">error</span>, lept_parse(&amp;v, json));\</span><br><span class="hljs-meta">        EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));\</span><br><span class="hljs-meta">    &#125; while(0)</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse_expect_value</span><span class="hljs-params">()</span> &#123;<br>    TEST_ERROR(LEPT_PARSE_EXPECT_VALUE, <span class="hljs-string">&quot;&quot;</span>);<br>    TEST_ERROR(LEPT_PARSE_EXPECT_VALUE, <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse_invalid_value</span><span class="hljs-params">()</span> &#123;<br>    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="hljs-string">&quot;nul&quot;</span>);<br>    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="hljs-string">&quot;?&quot;</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-comment">/* invalid number */</span><br>    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="hljs-string">&quot;+0&quot;</span>);<br>    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="hljs-string">&quot;+1&quot;</span>);<br>    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="hljs-string">&quot;.123&quot;</span>); <span class="hljs-comment">/* at least one </span><br><span class="hljs-comment">digit before &#x27;.&#x27; */</span><br>    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="hljs-string">&quot;1.&quot;</span>);   <span class="hljs-comment">/* at least one </span><br><span class="hljs-comment">digit after &#x27;.&#x27; */</span><br>    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="hljs-string">&quot;INF&quot;</span>);<br>    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="hljs-string">&quot;inf&quot;</span>);<br>    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="hljs-string">&quot;NAN&quot;</span>);<br>    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="hljs-string">&quot;nan&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br><span class="hljs-comment">/* 测试字符串中间包含空格 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse_root_not_singular</span><span class="hljs-params">()</span> &#123;<br>    TEST_ERROR(LEPT_PARSE_ROOT_NOT_SINGULAR, <span class="hljs-string">&quot;null x&quot;</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-comment">/* invalid number */</span><br>    TEST_ERROR(LEPT_PARSE_ROOT_NOT_SINGULAR, <span class="hljs-string">&quot;0123&quot;</span>); <span class="hljs-comment">/* after zer</span><br><span class="hljs-comment">o should be &#x27;.&#x27; , &#x27;E&#x27; , &#x27;e&#x27; or nothing */</span><br>    TEST_ERROR(LEPT_PARSE_ROOT_NOT_SINGULAR, <span class="hljs-string">&quot;0x0&quot;</span>);<br>    TEST_ERROR(LEPT_PARSE_ROOT_NOT_SINGULAR, <span class="hljs-string">&quot;0x123&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse_number_too_big</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    TEST_ERROR(LEPT_PARSE_NUMBER_TOO_BIG, <span class="hljs-string">&quot;1e309&quot;</span>);<br>    TEST_ERROR(LEPT_PARSE_NUMBER_TOO_BIG, <span class="hljs-string">&quot;-1e309&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse</span><span class="hljs-params">()</span> &#123;<br>    test_parse_null();<br>    test_parse_true();<br>    test_parse_false();<br>    test_parse_number();<br>    test_parse_expect_value();<br>    test_parse_invalid_value();<br>    test_parse_root_not_singular();<br>    test_parse_number_too_big();<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    test_parse();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d/%d (%3.2f%%) passed\n&quot;</span>, test_pass, test_count, test_pass * <span class="hljs-number">100.0</span> / test_count);<br>    <span class="hljs-keyword">return</span> main_ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里面就只需要加上几个测试值就好了，首先通过<code>TEST_NUMBER</code>的定义式和<code>test_parse_number()</code>函数共同测试数字类型的字符串。还有就是我们前面说过的函数重构，<code>test_parse_expect_value()</code>  <code>test_parse_invalid_value()</code> <code>test_parse_root_not_singular()</code> <code>test_parse_number_too_big()</code>由于两个函数的处理近乎相同，所以考虑对其采用重构，这里采用宏定义的方式实现，比较简单。</p><h3 id="编译运行"><a class="markdownIt-Anchor" href="#编译运行"></a> 编译运行</h3><p>直接进入build文件夹内输入<code>make</code>编译，然后再输入<code>./leptjson_test</code>运行就好，运行结果依然是100%通过率，就不再上图了。</p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>到这里第二节就结束了。随便写一写最近的感受吧，最近的日子真的很浮躁，好像整个九月都没有什么进步，眼看日子一天天的划过内心却毫无紧张感，很多lab、项目都在开展途中，却没有更新的动力，这学期课业的压力也相当大，自己如果没办法调整好状态很难在这学期有较大进步。前几天读到一句话感觉很好，自己作为一个小小学生组织的一员也要千万谨记，<code>水能载舟，亦能覆舟，德不配位，必有余殃</code>。共勉！</p>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
      <category>JSON库C语言实现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JSON库(1) 初识JSON库，建立TDD</title>
    <link href="/2022/09/08/JSON(1)/"/>
    <url>/2022/09/08/JSON(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="json库1-初识json库建立tdd"><a class="markdownIt-Anchor" href="#json库1-初识json库建立tdd"></a> JSON库(1) 初识JSON库，建立TDD</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>这段时间一直在忙于底层知识框架的整理，很是头疼。想着劳逸结合一下，开个新坑，从零开始实现一个<code>JSON库</code>。之前也没有接触过<code>JSON库</code>，只是略有耳闻，花了一天的时间大概理解了这个项目，觉得难度非常适合新手，特开此专栏用以记录。这一节内容比较简单，实现几个最基本的功能，再把我们的测试文件<code>TDD</code>建立了就OK了。</p><h2 id="实验环境"><a class="markdownIt-Anchor" href="#实验环境"></a> 实验环境</h2><p>本专栏参考叶劲峰老师在2016年写的的<code>JSON库教程</code><a href="https://zhuanlan.zhihu.com/p/22457315">从零开始的JSON库教程</a>，感谢作者。</p><p>实验材料取自配套文件<a href="https://github.com/miloyip/json-tutorial">GitHub链接</a>。本专栏将从零建立，可以不用下载配套文件。</p><p>系统为搭载<code>ubuntu16.04</code>版本的虚拟机。</p><p><code>cmake</code>版本为<code>3.5.1</code>。</p><h2 id="实验内容"><a class="markdownIt-Anchor" href="#实验内容"></a> 实验内容</h2><h3 id="1-创建leptjsonh"><a class="markdownIt-Anchor" href="#1-创建leptjsonh"></a> 1 创建<code>leptjson.h</code></h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 利用宏避免重复声明 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LEPTJSON_H__</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEPTJSON_H__</span><br><br><span class="hljs-comment">/* JSON存在6种数据类型 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span> <br>    LEPT_NULL, <br>    LEPT_FALSE,<br>    LEPT_TRUE,<br>    LEPT_NUMBER, <br>    LEPT_STRING,<br>    LEPT_ARRAY, <br>    LEPT_OBJECT <br>&#125; lept_type;<br><br><span class="hljs-comment">/* JSON值 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    lept_type type;<br>&#125;lept_value;<br><br><span class="hljs-comment">/* 解析函数的返回值 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>    LEPT_PARSE_OK = <span class="hljs-number">0</span>,<br>    LEPT_PARSE_EXPECT_VALUE,<br>    LEPT_PARSE_INVALID_VALUE,<br>    LEPT_PARSE_ROOT_NOT_SINGULAR<br>&#125;;<br><br><span class="hljs-comment">/* 解析JSON */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse</span><span class="hljs-params">(lept_value* v, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* json)</span>;<br><br><span class="hljs-comment">/* 访问结果，获取类型 */</span><br>lept_type <span class="hljs-title function_">lept_get_type</span><span class="hljs-params">(<span class="hljs-type">const</span> lept_value* v)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* LEPTJSON_H__ */</span>                                                                                   </span><br></code></pre></td></tr></table></figure><p>上来先把头文件和API搭建了，主要实现功能如下(配合代码中注释理解)，</p><blockquote><p>1 利用宏避免重复声明，这是每个项目的必备元素。</p><p>2 利用<code>enum</code>声明了7个<code>JSON</code>的基本类型(<code>true</code>和<code>false</code>算两个)。</p><p>3 建立结构体<code>lept_value</code>声明<code>JSON</code>的数据结构，我们要实现一个树作为数据结构，当前只需要类型作为其中参数。</p><p>4 创建两个API函数，一个用来解析JSON，一个用来访问结果。</p></blockquote><h3 id="2-创建leptjsonc"><a class="markdownIt-Anchor" href="#2-创建leptjsonc"></a> 2 创建<code>leptjson.c</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*  leptjson实现文件，此文件将编译成库 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;leptjson.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span>  <span class="hljs-comment">/* assert() */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span>  <span class="hljs-comment">/* NULL */</span></span><br><br><span class="hljs-comment">/* 检测c-&gt;json是否指向目标值 c指向下一个字符*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXPECT(c, ch)       do &#123; assert(*c-&gt;json == (ch)); c-&gt;json++; &#125; while(0)</span><br><br><span class="hljs-comment">/* 存放参数(JSON字符串) */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* json;<br>&#125;lept_context;<br><br><span class="hljs-comment">/* ws = *(%x20 / %09 / %x0A / %x0D) */</span><br><span class="hljs-comment">/* 消除空格字符 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lept_parse_whitespace</span><span class="hljs-params">(lept_context* c)</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *p = c-&gt;json;    <span class="hljs-comment">/* 创建指针p指向该字符串 */</span><br>    <span class="hljs-comment">/* 将指针移动到非空格字符 */</span><br>    <span class="hljs-keyword">while</span> (*p == <span class="hljs-string">&#x27; &#x27;</span> || *p == <span class="hljs-string">&#x27;\t&#x27;</span> || *p == <span class="hljs-string">&#x27;\n&#x27;</span> || *p == <span class="hljs-string">&#x27;\r&#x27;</span>)<br>        p++;<br>    c-&gt;json = p;<br>&#125;<br><br><span class="hljs-comment">/* null  = &quot;null&quot; */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse_null</span><span class="hljs-params">(lept_context* c, lept_value* v)</span> &#123;<br>    EXPECT(c, <span class="hljs-string">&#x27;n&#x27;</span>);    <span class="hljs-comment">/* 检测+移动指针 */</span><br>    <span class="hljs-comment">/* 后面三个字符不为ull */</span><br>    <span class="hljs-keyword">if</span> (c-&gt;json[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;u&#x27;</span> || c-&gt;json[<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;l&#x27;</span> || c-&gt;json[<span class="hljs-number">2</span>] != <span class="hljs-string">&#x27;l&#x27;</span>)<br>        <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>    <span class="hljs-comment">/* 后面三个字符为ull */</span><br>    c-&gt;json += <span class="hljs-number">3</span>;    <span class="hljs-comment">/* 指针后移三位 */</span><br>    v-&gt;type = LEPT_NULL;    <span class="hljs-comment">/* type转变为null */</span><br>    <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>&#125;<br><br><span class="hljs-comment">/* 第3题答案 */</span><br><span class="hljs-comment">/* 与lept_parse_null基本一致 */</span><br><span class="hljs-comment">/* 注意在lept_parse_value中添加调用接口 */</span><br><span class="hljs-comment">/* true = &quot;true&quot; */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse_true</span><span class="hljs-params">(lept_context* c, lept_value* v)</span> &#123;<br>    EXPECT(c, <span class="hljs-string">&#x27;t&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (c-&gt;json[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;r&#x27;</span> || c-&gt;json[<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;u&#x27;</span> || c-&gt;json[<span class="hljs-number">2</span>] != <span class="hljs-string">&#x27;e&#x27;</span>)<br>        <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>    c-&gt;json += <span class="hljs-number">3</span>;<br>    v-&gt;type = LEPT_TRUE;<br>    <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>&#125;<br><br><span class="hljs-comment">/* false = &quot;false&quot; */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse_false</span><span class="hljs-params">(lept_context* c, lept_value* v)</span> &#123;<br>    EXPECT(c, <span class="hljs-string">&#x27;f&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (c-&gt;json[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;a&#x27;</span> || c-&gt;json[<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;l&#x27;</span> || c-&gt;json[<span class="hljs-number">2</span>] != <span class="hljs-string">&#x27;s&#x27;</span> || c-&gt;json[<span class="hljs-number">3</span>] != <span class="hljs-string">&#x27;e&#x27;</span>)<br>        <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>    c-&gt;json += <span class="hljs-number">4</span>;<br>    v-&gt;type = LEPT_FALSE;<br>    <span class="hljs-keyword">return</span> LEPT_PARSE_OK;<br>&#125;<br><br><span class="hljs-comment">/* value = null / false / true */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse_value</span><span class="hljs-params">(lept_context* c, lept_value* v)</span> &#123;<br>    <span class="hljs-comment">/* 检验当前字符串的首个字符,跳转到对应函数 */</span><br>    <span class="hljs-keyword">switch</span> (*c-&gt;json) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;n&#x27;</span>:  <span class="hljs-keyword">return</span> lept_parse_null(c, v);<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>:  <span class="hljs-keyword">return</span> lept_parse_true(c, v);<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;f&#x27;</span>:  <span class="hljs-keyword">return</span> lept_parse_false(c, v);<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\0&#x27;</span>: <span class="hljs-keyword">return</span> LEPT_PARSE_EXPECT_VALUE;<br>        <span class="hljs-keyword">default</span>:   <span class="hljs-keyword">return</span> LEPT_PARSE_INVALID_VALUE;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 解析器 */</span><br><span class="hljs-comment">/* 暂时只储存JSON字符串当前位置 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">lept_parse</span><span class="hljs-params">(lept_value* v, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* json)</span> &#123;<br>    lept_context c;    <span class="hljs-comment">/* 创建新结构体c,保存字符串 */</span><br>    assert(v != <span class="hljs-literal">NULL</span>);    <span class="hljs-comment">/* v为空,弹出报错 */</span><br>    c.json = json;    <span class="hljs-comment">/* 字符串保存到c中 */</span><br>    v-&gt;type = LEPT_NULL;    <span class="hljs-comment">/* v的type赋为null */</span><br>    lept_parse_whitespace(&amp;c);    <span class="hljs-comment">/* 消除JSON字符串前面的空格字符 */</span><br>    <span class="hljs-comment">/* 第1题答案 解决字符串中间还有空格的问题 */</span><br>    <span class="hljs-type">int</span> ret;<br>    <span class="hljs-comment">/* 如果字符串正确,进入循环 */</span><br>    <span class="hljs-keyword">if</span> ((ret = lept_parse_value(&amp;c, v)) == LEPT_PARSE_OK) &#123;<br>        lept_parse_whitespace(&amp;c);    <span class="hljs-comment">/* 每次检验之前消一次空格 */</span><br>        <span class="hljs-comment">/* 指针指向JSON末尾,退出循环 */</span><br>        <span class="hljs-keyword">if</span> (*c.json != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>            v-&gt;type = LEPT_NULL;    <span class="hljs-comment">/* 注意把type重新置为null */</span><br>            ret = LEPT_PARSE_ROOT_NOT_SINGULAR;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>    <span class="hljs-comment">/* return lept_parse_value(&amp;c, v); */</span><br>&#125;<br><br>lept_type <span class="hljs-title function_">lept_get_type</span><span class="hljs-params">(<span class="hljs-type">const</span> lept_value* v)</span> &#123;<br>    assert(v != <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> v-&gt;type;<br></code></pre></td></tr></table></figure><p>这是我们<code>leptjson</code>的主要实现程序了，咱们一个个函数解释一下：</p><blockquote><p>1 <code>EXPECT</code>宏，利用assert断言检测字符串并移动指针。</p><p>2 <code>lept_context</code>结构体，用以简化操作，减少解析函数之间传递多个参数。</p><p>3 函数<code>lept_parse_whitespace</code>，每调用一次就会将指针移动到第一个字符处，即跳过空格。</p><p>4 函数<code>lept_parse_null</code> <code>lept_parse_true</code> <code>lept_parse_false</code>，分别检测指针指向的字符串是否是<code>null</code> <code>true</code> <code>false</code>，实现也都大同小异。如果正确，返回与之对应的之前声明的数据类型，否则返回<code>LEPT_PARSE_INVALID_VALUE</code>。</p><p>5 函数<code>lept_parse_value</code>，作为一个中转单位，根据字符串首个字符跳转到对应函数。</p><p>5 函数<code>lept_parse</code>和<code>lept_get_type</code>前面介绍过了，不再重复。</p></blockquote><h3 id="3-创建testc"><a class="markdownIt-Anchor" href="#3-创建testc"></a> 3 创建<code>test.c</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 单元测试(TDD) */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;leptjson.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> main_ret = <span class="hljs-number">0</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> test_count = <span class="hljs-number">0</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> test_pass = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/* 如果expect != actual,打印错误信息 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXPECT_EQ_BASE(equality, expect, actual, format) \</span><br><span class="hljs-meta">    do &#123;\</span><br><span class="hljs-meta">        test_count++;\</span><br><span class="hljs-meta">        <span class="hljs-keyword">if</span> (equality)\</span><br><span class="hljs-meta">            test_pass++;\</span><br><span class="hljs-meta">        <span class="hljs-keyword">else</span> &#123;\</span><br><span class="hljs-meta">            fprintf(stderr, <span class="hljs-string">&quot;%s:%d: expect: &quot;</span> format <span class="hljs-string">&quot; actual: &quot;</span> format <span class="hljs-string">&quot;\n&quot;</span>, __FILE__, __LINE__, expect, actual);\</span><br><span class="hljs-meta">            main_ret = 1;\</span><br><span class="hljs-meta">        &#125;\</span><br><span class="hljs-meta">    &#125; while(0)</span><br><br><span class="hljs-comment">/* 调用EXPECT_EQ_BASE,检验预期值和实际值是否相等 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXPECT_EQ_INT(expect, actual) EXPECT_EQ_BASE((expect) == (actual), expect, actual, <span class="hljs-string">&quot;%d&quot;</span>)</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse_null</span><span class="hljs-params">()</span> &#123;<br>    lept_value v;    <span class="hljs-comment">/* 定义JSON值结构体v 参数为type */</span><br>    v.type = LEPT_FALSE;    <span class="hljs-comment">/* v的type初始化为false */</span><br>    <span class="hljs-comment">/* 过单元测试 */</span><br>    <span class="hljs-comment">/* 预期值,实际值 */</span><br>    EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, <span class="hljs-string">&quot;null&quot;</span>));<br>    EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));<br>&#125;<br><br><span class="hljs-comment">/* 第2题答案 */</span><br><span class="hljs-comment">/* 和test_parse_null函数只有传入JSON有差别 */</span><br><span class="hljs-comment">/* 注意在test_parse函数中调用这两个函数 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse_true</span><span class="hljs-params">()</span> &#123;<br>    lept_value v;<br>    v.type = LEPT_FALSE;<br>    EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, <span class="hljs-string">&quot;true&quot;</span>));<br>    EXPECT_EQ_INT(LEPT_TRUE, lept_get_type(&amp;v));<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse_false</span><span class="hljs-params">()</span> &#123;<br>    lept_value v;<br>    v.type = LEPT_TRUE;<br>    EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, <span class="hljs-string">&quot;false&quot;</span>));<br>    EXPECT_EQ_INT(LEPT_FALSE, lept_get_type(&amp;v));<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse_expect_value</span><span class="hljs-params">()</span> &#123;<br>    lept_value v;<br><br>    v.type = LEPT_FALSE;<br>    EXPECT_EQ_INT(LEPT_PARSE_EXPECT_VALUE, lept_parse(&amp;v, <span class="hljs-string">&quot;&quot;</span>));<br>    EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));<br><br>    v.type = LEPT_FALSE;<br>    EXPECT_EQ_INT(LEPT_PARSE_EXPECT_VALUE, lept_parse(&amp;v, <span class="hljs-string">&quot; &quot;</span>));<br>    EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse_invalid_value</span><span class="hljs-params">()</span> &#123;<br>    lept_value v;    <span class="hljs-comment">/* 定义JSON值结构体v 参数为type */</span><br>    v.type = LEPT_FALSE;    <span class="hljs-comment">/* v的type初始化为false */</span><br>    <span class="hljs-comment">/* 过单元测试 */</span><br>    <span class="hljs-comment">/* 预期值,实际值 */</span><br>    EXPECT_EQ_INT(LEPT_PARSE_INVALID_VALUE, lept_parse(&amp;v, <span class="hljs-string">&quot;nul&quot;</span>));<br>    EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));<br><br>    v.type = LEPT_FALSE;<br>    EXPECT_EQ_INT(LEPT_PARSE_INVALID_VALUE, lept_parse(&amp;v, <span class="hljs-string">&quot;?&quot;</span>));<br>    EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));<br>&#125;<br><br><span class="hljs-comment">/* 测试字符串中间包含空格 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse_root_not_singular</span><span class="hljs-params">()</span> &#123;<br>    lept_value v;    <span class="hljs-comment">/* 定义JSON值结构体v 参数为type */</span><br>    v.type = LEPT_FALSE;    <span class="hljs-comment">/* v的type初始化为false */</span><br>    <span class="hljs-comment">/* 过单元测试 */</span><br>    <span class="hljs-comment">/* 预期值,实际值 */</span><br>    EXPECT_EQ_INT(LEPT_PARSE_ROOT_NOT_SINGULAR, lept_parse(&amp;v, <span class="hljs-string">&quot;null x&quot;</span>));<br>    EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test_parse</span><span class="hljs-params">()</span> &#123;<br>    test_parse_null();<br>    <span class="hljs-comment">/* 调用第2题新增两个函数 */</span><br>    test_parse_true();<br>    test_parse_false();<br><br>    test_parse_expect_value();<br>    test_parse_invalid_value();<br>    test_parse_root_not_singular();<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    test_parse();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d/%d (%3.2f%%) passed\n&quot;</span>, test_pass, test_count, test_pass * <span class="hljs-number">100.0</span> / test_count);<br>    <span class="hljs-keyword">return</span> main_ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是我们的测试驱动开发（test-driven development, TDD）程序，它的主要循环步骤是：</p><blockquote><p>1 加入一个测试。<br />2 运行所有测试，新的测试应该会失败。<br />3 编写实现代码。<br />4 运行所有测试，若有测试失败回到3。<br />5 重构代码。<br />6 回到 1。</p></blockquote><p>其实注释已经非常详细了，不过我还是简单写一下各部分的功能吧。</p><blockquote><p>1 宏定义<code>EXPECT_EQ_BASE</code>，检测实际值和预期值是否对应。</p><p>2 宏定义<code>EXPECT_EQ_INT</code>，调用<code>EXPECT_EQ_BASE</code>。</p><p>3 函数<code>test_parse_null</code> <code>test_parse_true</code> <code>test_parse_false</code>分别检验字符串为<code>null</code> <code>true</code> <code>false</code>的情况。</p><p>4 函数<code>test_parse_expect_value</code>检验字符串为空和空格的情况。</p><p>5 函数<code>test_parse_invalid_value</code>检验字符串为<code>nul</code> <code>?</code>的情况，即错误字符串。</p><p>6 函数<code>test_parse_root_not_singular</code>检验字符串为<code>null x</code>的情况，即中间有空格。</p><p>7 函数<code>test_parse</code> 负责调用上面所说的几个测试函数。</p></blockquote><p>到这里我们程序的三个文件就全部编写完成了，下面我们就要对它们使用cmake编译链接了，在这之前需要再创建一个cmake的编译文件。</p><h3 id="4-创建cmakeliststxt"><a class="markdownIt-Anchor" href="#4-创建cmakeliststxt"></a> 4 创建<code>CMakeLists.txt</code></h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span> (VERSION <span class="hljs-number">2.6</span>)<br><span class="hljs-keyword">project</span> (leptjson_test C)<br><br><span class="hljs-keyword">if</span> (CMAKE_C_COMPILER_ID <span class="hljs-keyword">MATCHES</span> <span class="hljs-string">&quot;GNU|Clang&quot;</span>)<br>    <span class="hljs-keyword">set</span>(CMAKE_C_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_C_FLAGS&#125; -ansi -pedantic -Wall&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-keyword">add_library</span>(leptjson leptjson.c)<br><span class="hljs-keyword">add_executable</span>(leptjson_test <span class="hljs-keyword">test</span>.c)<br><span class="hljs-keyword">target_link_libraries</span>(leptjson_test leptjson)<br></code></pre></td></tr></table></figure><h3 id="编译运行"><a class="markdownIt-Anchor" href="#编译运行"></a> 编译运行</h3><p>在该文件夹下执行如下命令：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$mkdir</span> build</span><br><span class="hljs-meta"><span class="hljs-keyword">$cd</span> build</span><br><span class="hljs-meta"><span class="hljs-keyword">$cmake</span> ..</span><br><span class="hljs-meta"><span class="hljs-keyword">$make</span></span><br></code></pre></td></tr></table></figure><p>会看到出现了一个build文件夹，然后我们在build文件夹里就能运行文件了，执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">./leptjson_test</span><br></code></pre></td></tr></table></figure><p>可以得到运行结果：</p><p><img src="/img/json/1.1.png" alt="图为命令行界面" /></p><p>结果显示这些检测函数得到的全部预期值都和实际值相等，说明主体程序是没有问题的。</p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>争取这个项目能在9月完成吧，马上就又恢复线下课了，不知道还能不能抽出这么多时间来自学了。对了，今天是中秋节了，奈何学校依然封控，好久没出去玩了。</p>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
      <category>JSON库C语言实现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2 Bomblab详解</title>
    <link href="/2022/09/02/csapp2/"/>
    <url>/2022/09/02/csapp2/</url>
    
    <content type="html"><![CDATA[<h1 id="bomblab详解"><a class="markdownIt-Anchor" href="#bomblab详解"></a> Bomblab详解</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>现在已经是9月了，距离完成上一个lab已经过去了将近四个月的时间，之所以暂停了这么长时间，主要还是因为之前在读到第三章的时候没有汇编和硬件的基础，实在晦涩难懂。所以在这期间，我读了许多操作系统和汇编的书和资料，完成了一个小型os的搭建，算是对汇编和底层有了一个初步的了解。这时再翻开这本书，发现读起来通畅很多了。</p><h2 id="实验环境"><a class="markdownIt-Anchor" href="#实验环境"></a> 实验环境</h2><p>这次的实验环境和上次有了些许变化，在搭建os的过程中由于种种原因把ubuntu22.04换回了16.04。</p><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><p>首先还是去官网下载lab所需的hand-out文件：<a href="http://csapp.cs.cmu.edu/3e/labs.html">csapp lab</a></p><p>我们把下载下来的安装包解压，然后进入bomb文件夹的目录，输入<code>gdb bomb</code>启动gdb调试器，然后输入<code>r</code>运行</p><p><img src="/img/csapp/2.1.png" alt="图为命令行界面" /></p><p>能看到作者给我们的一段话<code>Welcome to my fiendish little bomb. You have 6 phases with which to blow yourself up. Have a nice day!</code></p><p>那么现在我们就需要寻找这6个phases了，这是就需要对文件进行反汇编了，输入命令<code>objdump -d bomb &gt; bomb.asm</code>生成bomb.asm，我们要完成的6个phases就在这里了。</p><h2 id="实验内容"><a class="markdownIt-Anchor" href="#实验内容"></a> 实验内容</h2><h3 id="phase-1"><a class="markdownIt-Anchor" href="#phase-1"></a> Phase 1</h3><p>我们进入bomb.asm，往下拉就能看到phase1的段落了。</p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0000000000400ee0</span> &lt;phase_1&gt;:<br>  <span class="hljs-attribute">400ee0</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">08</span>          sub    $<span class="hljs-number">0</span>x8,%rsp<br>  <span class="hljs-attribute">400ee4</span>:be <span class="hljs-number">00</span> <span class="hljs-number">24</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x402400,%esi<br>  <span class="hljs-attribute">400ee9</span>:e8 <span class="hljs-number">4</span>a <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">401338</span> &lt;strings_not_equal&gt;<br>  <span class="hljs-attribute">400eee</span>:<span class="hljs-number">85</span> c0                test   %eax,%eax<br>  <span class="hljs-attribute">400ef0</span>:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                je     <span class="hljs-number">400</span>ef7 &lt;phase_1+<span class="hljs-number">0</span>x17&gt;<br>  <span class="hljs-attribute">400ef2</span>:e8 <span class="hljs-number">43</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">400ef7</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">08</span>          add    $<span class="hljs-number">0</span>x8,%rsp<br>  <span class="hljs-attribute">400efb</span>:c3                   retq  <br></code></pre></td></tr></table></figure><p>这里我们对这几行代码进行下分析：</p><p>第一行将<code>%rsp</code>的值减少0x8，可以理解为将栈指针减少了0x8。</p><p>第二行将地址<code>0x402400</code>的值传入<code>%esi</code>，<code>%esi</code>在x86机器上可以看成是变量。</p><p>第三行是跳转到地址<code>0x401338</code>，看后面的文字可以猜测是判断字符串是否相等。</p><p>第四行用test指令检测<code>%eax</code>的值，紧跟着第五行就用了跳转指令je，能够得出结论，如果<code>%eax</code>里的值为0，则略过第六行直接跳转到第七行。</p><p>再看第六行，跳转到地址<code>0x40143a</code>，后面文字写的很清楚，bomb。到这里我们就知道了，如果我们输入的字符串与内置好的字符串不一致，则<code>%eax</code>就会被置为1，就会将炸弹引爆，否则就能跳过炸弹。按理来说应该观察下地址<code>0x401338</code>处的代码，但我们有理由怀疑第二行传入<code>%esi</code>的地址应该就是内置字符串的位置了。</p><p>第七行，栈指针<code>%rsp</code>将第一行减去的0x8再加回来，归还初始状态。</p><p>按照我们分析的内容，在地址<code>0x400ee9</code>处设置一个断点，这里是刚刚执行完对寄存器esi的赋值。</p><p><img src="/img/csapp/2.2.png" alt="图为命令行界面" /></p><p>能够看到此时寄存器esi的值为一串字符串<code>Border relations with Canada have never been better.</code>嘿嘿，重新运行gdb，输入这段字符串试一下吧。</p><p><img src="/img/csapp/2.3.png" alt="图为命令行界面" /></p><p>拆除成功！</p><h3 id="phase-2"><a class="markdownIt-Anchor" href="#phase-2"></a> Phase 2</h3><p>还是先分析下这部分代码。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0000000000400efc</span> &lt;phase_2&gt;:<br>  <span class="hljs-attribute">400efc</span>:<span class="hljs-number">55</span>                   push   %rbp<br>  <span class="hljs-attribute">400efd</span>:<span class="hljs-number">53</span>                   push   %rbx<br>  <span class="hljs-attribute">400efe</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">28</span>          sub    $<span class="hljs-number">0</span>x28,%rsp<br>  <span class="hljs-attribute">400f02</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> e6             mov    %rsp,%rsi<br>  <span class="hljs-attribute">400f05</span>:e8 <span class="hljs-number">52</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40145</span>c &lt;read_six_numbers&gt;<br>  <span class="hljs-attribute">400f0a</span>:<span class="hljs-number">83</span> <span class="hljs-number">3</span>c <span class="hljs-number">24</span> <span class="hljs-number">01</span>          cmpl   $<span class="hljs-number">0</span>x1,(%rsp)<br>  <span class="hljs-attribute">400f0e</span>:<span class="hljs-number">74</span> <span class="hljs-number">20</span>                je     <span class="hljs-number">400</span>f30 &lt;phase_2+<span class="hljs-number">0</span>x34&gt;<br>  <span class="hljs-attribute">400f10</span>:e8 <span class="hljs-number">25</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">400f15</span>:eb <span class="hljs-number">19</span>                jmp    <span class="hljs-number">400</span>f30 &lt;phase_2+<span class="hljs-number">0</span>x34&gt;<br>  <span class="hljs-attribute">400f17</span>:<span class="hljs-number">8</span>b <span class="hljs-number">43</span> fc             mov    -<span class="hljs-number">0</span>x4(%rbx),%eax<br>  <span class="hljs-attribute">400f1a</span>:<span class="hljs-number">01</span> c0                add    %eax,%eax<br>  <span class="hljs-attribute">400f1c</span>:<span class="hljs-number">39</span> <span class="hljs-number">03</span>                cmp    %eax,(%rbx)<br>  <span class="hljs-attribute">400f1e</span>:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                je     <span class="hljs-number">400</span>f25 &lt;phase_2+<span class="hljs-number">0</span>x29&gt;<br>  <span class="hljs-attribute">400f20</span>:e8 <span class="hljs-number">15</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">400f25</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c3 <span class="hljs-number">04</span>          add    $<span class="hljs-number">0</span>x4,%rbx<br>  <span class="hljs-attribute">400f29</span>:<span class="hljs-number">48</span> <span class="hljs-number">39</span> eb             cmp    %rbp,%rbx<br>  <span class="hljs-attribute">400f2c</span>:<span class="hljs-number">75</span> e9                jne    <span class="hljs-number">400</span>f17 &lt;phase_2+<span class="hljs-number">0</span>x1b&gt;<br>  <span class="hljs-attribute">400f2e</span>:eb <span class="hljs-number">0</span>c                jmp    <span class="hljs-number">400</span>f3c &lt;phase_2+<span class="hljs-number">0</span>x40&gt;<br>  <span class="hljs-attribute">400f30</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">5</span>c <span class="hljs-number">24</span> <span class="hljs-number">04</span>       lea    <span class="hljs-number">0</span>x4(%rsp),%rbx<br>  <span class="hljs-attribute">400f35</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">6</span>c <span class="hljs-number">24</span> <span class="hljs-number">18</span>       lea    <span class="hljs-number">0</span>x18(%rsp),%rbp<br>  <span class="hljs-attribute">400f3a</span>:eb db                jmp    <span class="hljs-number">400</span>f17 &lt;phase_2+<span class="hljs-number">0</span>x1b&gt;<br>  <span class="hljs-attribute">400f3c</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">28</span>          add    $<span class="hljs-number">0</span>x28,%rsp<br>  <span class="hljs-attribute">400f40</span>:<span class="hljs-number">5</span>b                   pop    %rbx<br>  <span class="hljs-attribute">400f41</span>:<span class="hljs-number">5</span>d                   pop    %rbp<br>  <span class="hljs-attribute">400f42</span>:c3                   retq<br></code></pre></td></tr></table></figure><p>前两行把<code>%rbp</code>、<code>%rbx</code>压入栈中，这两个寄存器没有特殊含义。</p><p>第3行将<code>%rsp</code>减少0x28，栈空出了0x28。</p><p>第4行将<code>%rsp</code>传入<code>%rsi</code>里面。</p><p>第5行跳转到地址<code>0x40145c</code>处，看名字是读取六位数字，我们分析一下它。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">000000000040145c</span> &lt;read_six_numbers&gt;:<br>  <span class="hljs-attribute">40145c</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">18</span>          sub    $<span class="hljs-number">0</span>x18,%rsp<br>  <span class="hljs-attribute">401460</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> f2             mov    %rsi,%rdx<br>  <span class="hljs-attribute">401463</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">4</span>e <span class="hljs-number">04</span>          lea    <span class="hljs-number">0</span>x4(%rsi),%rcx<br>  <span class="hljs-attribute">401467</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">46</span> <span class="hljs-number">14</span>          lea    <span class="hljs-number">0</span>x14(%rsi),%rax<br>  <span class="hljs-attribute">40146b</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span>       mov    %rax,<span class="hljs-number">0</span>x8(%rsp)<br>  <span class="hljs-attribute">401470</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">46</span> <span class="hljs-number">10</span>          lea    <span class="hljs-number">0</span>x10(%rsi),%rax<br>  <span class="hljs-attribute">401474</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">04</span> <span class="hljs-number">24</span>          mov    %rax,(%rsp)<br>  <span class="hljs-attribute">401478</span>:<span class="hljs-number">4</span>c <span class="hljs-number">8</span>d <span class="hljs-number">4</span>e <span class="hljs-number">0</span>c          lea    <span class="hljs-number">0</span>xc(%rsi),%r9<br>  <span class="hljs-attribute">40147c</span>:<span class="hljs-number">4</span>c <span class="hljs-number">8</span>d <span class="hljs-number">46</span> <span class="hljs-number">08</span>          lea    <span class="hljs-number">0</span>x8(%rsi),%r8<br>  <span class="hljs-attribute">401480</span>:be c3 <span class="hljs-number">25</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x4025c3,%esi<br>  <span class="hljs-attribute">401485</span>:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x0,%eax<br>  <span class="hljs-attribute">40148a</span>:e8 <span class="hljs-number">61</span> f7 ff ff       callq  <span class="hljs-number">400</span>bf0 &lt;__isoc99_sscanf@plt&gt;<br>  <span class="hljs-attribute">40148f</span>:<span class="hljs-number">83</span> f8 <span class="hljs-number">05</span>             cmp    $<span class="hljs-number">0</span>x5,%eax<br>  <span class="hljs-attribute">401492</span>:<span class="hljs-number">7</span>f <span class="hljs-number">05</span>                jg     <span class="hljs-number">401499</span> &lt;read_six_numbers+<span class="hljs-number">0</span>x3d&gt;<br>  <span class="hljs-attribute">401494</span>:e8 a1 ff ff ff       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">401499</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">18</span>          add    $<span class="hljs-number">0</span>x18,%rsp<br>  <span class="hljs-attribute">40149d</span>:c3                   retq   <br></code></pre></td></tr></table></figure><p>首先把栈指针移动24byte，恰巧是6个int型所需的空间，后面是将6个int存入各个寄存器之中。值得注意的是第10行将地址<code>0x4025c3</code>传入寄存器esi里面了，后面紧接着跳转了库函数sscanf。我们按照phase1的思路，打印出地址<code>0x4025c3</code>的值看一下。</p><p><img src="/img/csapp/2.4.png" alt="图为命令行界面" /></p><p>能够看到我们的想法是正确的，下一步就是找出这六个int型数据了。再回过头去分析phase2处的代码。</p><p>第6行将<code>%rsp</code>的值和0x1进行比较，如果<code>%rsp</code>的值为1，则将在第7行跳转到地址<code>0x400f30</code>，从而避免第8行引爆炸弹。所以必须要保证<code>%rsp</code>的值为1，猜测答案的第1个数就是1。后面五个答案分别在<code>%rsp</code>地址之后的4，8，12，16，20里。</p><p>然后我们看地址<code>0x400f30</code>，连续的两行给出了<code>%rsp+0x4</code>和<code>%rsp+0x18</code>分别放在<code>%rbx</code>和<code>%rbp</code>中。</p><p>紧接着跳转到了地址<code>0x400f17</code>中，将<code>%rbx-0x4</code>即<code>%rsp</code>放在<code>%eax</code>中。后面又把这个值乘2，和<code>%rbx</code>进行比较，如果二者不相等就会引爆炸弹，所以二者必须相等。</p><p>然后跳转到地址<code>0x400f25</code>，<code>%rbx</code>先加4，然后和<code>%rbp</code>比较，如果二者不相等，则又跳转到地址<code>0x400f17</code>中了。综上，能够发现这是一个等比数列的循环，推测答案为<code>1 2 4 8 16 32</code>。</p><p><img src="/img/csapp/2.5.png" alt="图为命令行界面" /></p><p>解决。</p><h3 id="phase-3"><a class="markdownIt-Anchor" href="#phase-3"></a> Phase 3</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0000000000400f43</span> &lt;phase_3&gt;:<br>  <span class="hljs-attribute">400f43</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">18</span>          sub    $<span class="hljs-number">0</span>x18,%rsp<br>  <span class="hljs-attribute">400f47</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">4</span>c <span class="hljs-number">24</span> <span class="hljs-number">0</span>c       lea    <span class="hljs-number">0</span>xc(%rsp),%rcx<br>  <span class="hljs-attribute">400f4c</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">54</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span>       lea    <span class="hljs-number">0</span>x8(%rsp),%rdx<br>  <span class="hljs-attribute">400f51</span>:be cf <span class="hljs-number">25</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x4025cf,%esi<br>  <span class="hljs-attribute">400f56</span>:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x0,%eax<br>  <span class="hljs-attribute">400f5b</span>:e8 <span class="hljs-number">90</span> fc ff ff       callq  <span class="hljs-number">400</span>bf0 &lt;__isoc99_sscanf@plt&gt;<br>  <span class="hljs-attribute">400f60</span>:<span class="hljs-number">83</span> f8 <span class="hljs-number">01</span>             cmp    $<span class="hljs-number">0</span>x1,%eax<br>  <span class="hljs-attribute">400f63</span>:<span class="hljs-number">7</span>f <span class="hljs-number">05</span>                jg     <span class="hljs-number">400</span>f6a &lt;phase_3+<span class="hljs-number">0</span>x27&gt;<br>  <span class="hljs-attribute">400f65</span>:e8 d0 <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">400f6a</span>:<span class="hljs-number">83</span> <span class="hljs-number">7</span>c <span class="hljs-number">24</span> <span class="hljs-number">08</span> <span class="hljs-number">07</span>       cmpl   $<span class="hljs-number">0</span>x7,<span class="hljs-number">0</span>x8(%rsp)<br>  <span class="hljs-attribute">400f6f</span>:<span class="hljs-number">77</span> <span class="hljs-number">3</span>c                ja     <span class="hljs-number">400</span>fad &lt;phase_3+<span class="hljs-number">0</span>x6a&gt;<br>  <span class="hljs-attribute">400f71</span>:<span class="hljs-number">8</span>b <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span>          mov    <span class="hljs-number">0</span>x8(%rsp),%eax<br>  <span class="hljs-attribute">400f75</span>:ff <span class="hljs-number">24</span> c5 <span class="hljs-number">70</span> <span class="hljs-number">24</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> jmpq   *<span class="hljs-number">0</span>x402470(,%rax,<span class="hljs-number">8</span>)<br>  <span class="hljs-attribute">400f7c</span>:b8 cf <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>xcf,%eax<br>  <span class="hljs-attribute">400f81</span>:eb <span class="hljs-number">3</span>b                jmp    <span class="hljs-number">400</span>fbe &lt;phase_3+<span class="hljs-number">0</span>x7b&gt;<br>  <span class="hljs-attribute">400f83</span>:b8 c3 <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x2c3,%eax<br>  <span class="hljs-attribute">400f88</span>:eb <span class="hljs-number">34</span>                jmp    <span class="hljs-number">400</span>fbe &lt;phase_3+<span class="hljs-number">0</span>x7b&gt;<br>  <span class="hljs-attribute">400f8a</span>:b8 <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x100,%eax<br>  <span class="hljs-attribute">400f8f</span>:eb <span class="hljs-number">2</span>d                jmp    <span class="hljs-number">400</span>fbe &lt;phase_3+<span class="hljs-number">0</span>x7b&gt;<br>  <span class="hljs-attribute">400f91</span>:b8 <span class="hljs-number">85</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x185,%eax<br>  <span class="hljs-attribute">400f96</span>:eb <span class="hljs-number">26</span>                jmp    <span class="hljs-number">400</span>fbe &lt;phase_3+<span class="hljs-number">0</span>x7b&gt;<br>  <span class="hljs-attribute">400f98</span>:b8 ce <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>xce,%eax<br>  <span class="hljs-attribute">400f9d</span>:eb <span class="hljs-number">1</span>f                jmp    <span class="hljs-number">400</span>fbe &lt;phase_3+<span class="hljs-number">0</span>x7b&gt;<br>  <span class="hljs-attribute">400f9f</span>:b8 aa <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x2aa,%eax<br>  <span class="hljs-attribute">400fa4</span>:eb <span class="hljs-number">18</span>                jmp    <span class="hljs-number">400</span>fbe &lt;phase_3+<span class="hljs-number">0</span>x7b&gt;<br>  <span class="hljs-attribute">400fa6</span>:b8 <span class="hljs-number">47</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x147,%eax<br>  <span class="hljs-attribute">400fab</span>:eb <span class="hljs-number">11</span>                jmp    <span class="hljs-number">400</span>fbe &lt;phase_3+<span class="hljs-number">0</span>x7b&gt;<br>  <span class="hljs-attribute">400fad</span>:e8 <span class="hljs-number">88</span> <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">400fb2</span>:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x0,%eax<br>  <span class="hljs-attribute">400fb7</span>:eb <span class="hljs-number">05</span>                jmp    <span class="hljs-number">400</span>fbe &lt;phase_3+<span class="hljs-number">0</span>x7b&gt;<br>  <span class="hljs-attribute">400fb9</span>:b8 <span class="hljs-number">37</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x137,%eax<br>  <span class="hljs-attribute">400fbe</span>:<span class="hljs-number">3</span>b <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">0</span>c          cmp    <span class="hljs-number">0</span>xc(%rsp),%eax<br>  <span class="hljs-attribute">400fc2</span>:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                je     <span class="hljs-number">400</span>fc9 &lt;phase_3+<span class="hljs-number">0</span>x86&gt;<br>  <span class="hljs-attribute">400fc4</span>:e8 <span class="hljs-number">71</span> <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">400fc9</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">18</span>          add    $<span class="hljs-number">0</span>x18,%rsp<br>  <span class="hljs-attribute">400fcd</span>:c3                   retq   <br></code></pre></td></tr></table></figure><p>第1行把栈指针前移24byte空出位置。</p><p>第2、3行将<code>%rsp+0xc</code>和<code>%rsp+0x8</code>分别传入<code>%rcx</code>和<code>%rdx</code>。</p><p>第4、5行对<code>%esi</code>和<code>%eax</code>赋值，这里向<code>%esi</code>传入的地址值得注意。看一下这个地址的值。</p><p><img src="/img/csapp/2.6.png" alt="图为命令行界面" /></p><p>所以答案应该是两个int型数据。</p><p>第6行跳转到sscanf库函数，读取字符串。</p><p>第7、8、9行将<code>%eax</code>和0x1进行比较，<code>%eax</code>大于1越过炸弹跳转到第10行。</p><p>第10、11行将<code>%rsp+0x8</code>和0x7进行比较，如果前者小于等于7，能避开炸弹。</p><p>第12~27行和switch语句结构相似，先给<code>%eax</code>赋一个初值<code>%rsp+0x8</code>，然后间接跳转到地址<code>0x402470</code>处的跳转表，这里没有给出跳转表，不过结合后面的语句可以猜测其过程如下：以<code>%rax</code>为索引跳转到对应的case，在case中将<code>%eax</code>进行赋值，然后再让<code>%eax</code>和<code>%rsp+0xc</code>进行比较，如果相等则拆弹成功。推断输入的两个int型数据为索引和其对应值，因此答案不唯一，应该有7个。</p><p>我们从索引为1入手，通过查询索引表找到其对应的值。</p><p><img src="/img/csapp/2.7.png" alt="图为命令行界面" /></p><p>显示结果为4198329，注意两点，一点是这不是我们要找的答案，这是答案所在的地址，第二点是这是一个二进制数，需要将其转换为十六进制数<code>0x400fb9</code>。找到该地址的内容，找到了索引为1时对应的值为<code>0x137</code>，转换成十进制为311。验证一下答案是否正确。</p><p><img src="/img/csapp/2.8.png" alt="图为命令行界面" /></p><p>Halfway there！一中午连战两个phase，有亿点疲惫。</p><h3 id="phase-4"><a class="markdownIt-Anchor" href="#phase-4"></a> Phase 4</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">000000000040100c</span> &lt;phase_4&gt;:<br>  <span class="hljs-attribute">40100c</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">18</span>          sub    $<span class="hljs-number">0</span>x18,%rsp<br>  <span class="hljs-attribute">401010</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">4</span>c <span class="hljs-number">24</span> <span class="hljs-number">0</span>c       lea    <span class="hljs-number">0</span>xc(%rsp),%rcx<br>  <span class="hljs-attribute">401015</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">54</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span>       lea    <span class="hljs-number">0</span>x8(%rsp),%rdx<br>  <span class="hljs-attribute">40101a</span>:be cf <span class="hljs-number">25</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x4025cf,%esi<br>  <span class="hljs-attribute">40101f</span>:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x0,%eax<br>  <span class="hljs-attribute">401024</span>:e8 c7 fb ff ff       callq  <span class="hljs-number">400</span>bf0 &lt;__isoc99_sscanf@plt&gt;<br>  <span class="hljs-attribute">401029</span>:<span class="hljs-number">83</span> f8 <span class="hljs-number">02</span>             cmp    $<span class="hljs-number">0</span>x2,%eax<br>  <span class="hljs-attribute">40102c</span>:<span class="hljs-number">75</span> <span class="hljs-number">07</span>                jne    <span class="hljs-number">401035</span> &lt;phase_4+<span class="hljs-number">0</span>x29&gt;<br>  <span class="hljs-attribute">40102e</span>:<span class="hljs-number">83</span> <span class="hljs-number">7</span>c <span class="hljs-number">24</span> <span class="hljs-number">08</span> <span class="hljs-number">0</span>e       cmpl   $<span class="hljs-number">0</span>xe,<span class="hljs-number">0</span>x8(%rsp)<br>  <span class="hljs-attribute">401033</span>:<span class="hljs-number">76</span> <span class="hljs-number">05</span>                jbe    <span class="hljs-number">40103</span>a &lt;phase_4+<span class="hljs-number">0</span>x2e&gt;<br>  <span class="hljs-attribute">401035</span>:e8 <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">40103a</span>:ba <span class="hljs-number">0</span>e <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>xe,%edx<br>  <span class="hljs-attribute">40103f</span>:be <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x0,%esi<br>  <span class="hljs-attribute">401044</span>:<span class="hljs-number">8</span>b <span class="hljs-number">7</span>c <span class="hljs-number">24</span> <span class="hljs-number">08</span>          mov    <span class="hljs-number">0</span>x8(%rsp),%edi<br>  <span class="hljs-attribute">401048</span>:e8 <span class="hljs-number">81</span> ff ff ff       callq  <span class="hljs-number">400</span>fce &lt;func4&gt;<br>  <span class="hljs-attribute">40104d</span>:<span class="hljs-number">85</span> c0                test   %eax,%eax<br>  <span class="hljs-attribute">40104f</span>:<span class="hljs-number">75</span> <span class="hljs-number">07</span>                jne    <span class="hljs-number">401058</span> &lt;phase_4+<span class="hljs-number">0</span>x4c&gt;<br>  <span class="hljs-attribute">401051</span>:<span class="hljs-number">83</span> <span class="hljs-number">7</span>c <span class="hljs-number">24</span> <span class="hljs-number">0</span>c <span class="hljs-number">00</span>       cmpl   $<span class="hljs-number">0</span>x0,<span class="hljs-number">0</span>xc(%rsp)<br>  <span class="hljs-attribute">401056</span>:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                je     <span class="hljs-number">40105</span>d &lt;phase_4+<span class="hljs-number">0</span>x51&gt;<br>  <span class="hljs-attribute">401058</span>:e8 dd <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">40105d</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">18</span>          add    $<span class="hljs-number">0</span>x18,%rsp<br>  <span class="hljs-attribute">401061</span>:c3                   retq <br></code></pre></td></tr></table></figure><p>第1行栈指针前移24字节。</p><p>第2、3行将<code>%rsp+0xc</code>传入第四个参数<code>%rcx</code>，<code>%rsp+0x8</code>传入第三个参数<code>%rdx</code>。</p><p>第4、5行对<code>%esi</code>赋值为地址<code>0x4025cf</code>，初始化<code>%eax</code>。这个地址和phase3一样，所以答案还是两个int型数据。</p><p>第6行调用sscanf函数读取字符串，其参数为<code>%rcx</code> <code>%rdx</code> <code>%rsi</code>。</p><p>第7、8行明确只有sscanf函数返回值<code>%eax</code>等于2时才能避开炸弹。</p><p>第9、10行明确只有<code>%rsp+0x8</code>小于等于14时才能避开炸弹，即第一个答案小于等于14。</p><p>第11~13行对<code>%edx</code> <code>%esi</code> <code>%edi</code>分别赋值为0xe、0x0、<code>%rsp+0x8</code>（第一个答案）。</p><p>第14行跳转到<code>0x400fce</code>处的fun4了，传入上面所说的三个参数。</p><p>第15、16行明确只有<code>%eax</code>等于0时才能避开炸弹。说明fun4返回值必须是0。</p><p>第17~19行明确只有<code>%rsp+0xc</code>为0时才能避开炸弹，即第二个答案等于0。</p><p>第20行把第一行前移的栈指针恢复。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0000000000400fce</span> &lt;func4&gt;:<br>  <span class="hljs-attribute">400fce</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">08</span>          sub    $<span class="hljs-number">0</span>x8,%rsp<br>  <span class="hljs-attribute">400fd2</span>:<span class="hljs-number">89</span> d0                mov    %edx,%eax<br>  <span class="hljs-attribute">400fd4</span>:<span class="hljs-number">29</span> f0                sub    %esi,%eax<br>  <span class="hljs-attribute">400fd6</span>:<span class="hljs-number">89</span> c1                mov    %eax,%ecx<br>  <span class="hljs-attribute">400fd8</span>:c1 e9 <span class="hljs-number">1</span>f             shr    $<span class="hljs-number">0</span>x1f,%ecx<br>  <span class="hljs-attribute">400fdb</span>:<span class="hljs-number">01</span> c8                add    %ecx,%eax<br>  <span class="hljs-attribute">400fdd</span>:d1 f8                sar    %eax<br>  <span class="hljs-attribute">400fdf</span>:<span class="hljs-number">8</span>d <span class="hljs-number">0</span>c <span class="hljs-number">30</span>             lea    (%rax,%rsi,<span class="hljs-number">1</span>),%ecx<br>  <span class="hljs-attribute">400fe2</span>:<span class="hljs-number">39</span> f9                cmp    %edi,%ecx<br>  <span class="hljs-attribute">400fe4</span>:<span class="hljs-number">7</span>e <span class="hljs-number">0</span>c                jle    <span class="hljs-number">400</span>ff2 &lt;func4+<span class="hljs-number">0</span>x24&gt;<br>  <span class="hljs-attribute">400fe6</span>:<span class="hljs-number">8</span>d <span class="hljs-number">51</span> ff             lea    -<span class="hljs-number">0</span>x1(%rcx),%edx<br>  <span class="hljs-attribute">400fe9</span>:e8 e0 ff ff ff       callq  <span class="hljs-number">400</span>fce &lt;func4&gt;<br>  <span class="hljs-attribute">400fee</span>:<span class="hljs-number">01</span> c0                add    %eax,%eax<br>  <span class="hljs-attribute">400ff0</span>:eb <span class="hljs-number">15</span>                jmp    <span class="hljs-number">401007</span> &lt;func4+<span class="hljs-number">0</span>x39&gt;<br>  <span class="hljs-attribute">400ff2</span>:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x0,%eax<br>  <span class="hljs-attribute">400ff7</span>:<span class="hljs-number">39</span> f9                cmp    %edi,%ecx<br>  <span class="hljs-attribute">400ff9</span>:<span class="hljs-number">7</span>d <span class="hljs-number">0</span>c                jge    <span class="hljs-number">401007</span> &lt;func4+<span class="hljs-number">0</span>x39&gt;<br>  <span class="hljs-attribute">400ffb</span>:<span class="hljs-number">8</span>d <span class="hljs-number">71</span> <span class="hljs-number">01</span>             lea    <span class="hljs-number">0</span>x1(%rcx),%esi<br>  <span class="hljs-attribute">400ffe</span>:e8 cb ff ff ff       callq  <span class="hljs-number">400</span>fce &lt;func4&gt;<br>  <span class="hljs-attribute">401003</span>:<span class="hljs-number">8</span>d <span class="hljs-number">44</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span>          lea    <span class="hljs-number">0</span>x1(%rax,%rax,<span class="hljs-number">1</span>),%eax<br>  <span class="hljs-attribute">401007</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">08</span>          add    $<span class="hljs-number">0</span>x8,%rsp<br>  <span class="hljs-attribute">40100b</span>:c3                   retq  <br></code></pre></td></tr></table></figure><p>这里再回过头来分析下fun4，不要忘了fun4的传入参数分别为<code>%edx</code> <code>%esi</code> <code>%edi</code>，其初始值对应为14、0、<code>%rsp+0x8</code>（第一个答案），函数返回值<code>%eax</code>必须是0。直接把它转换成c风格代码。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">func4(<span class="hljs-built_in">edi</span>, <span class="hljs-built_in">esi</span>, <span class="hljs-built_in">edx</span>)<br>&#123;<br><span class="hljs-built_in">eax</span> = <span class="hljs-built_in">edx</span> - <span class="hljs-built_in">esi</span><span class="hljs-comment">;</span><br><span class="hljs-built_in">eax</span> = (<span class="hljs-built_in">eax</span> + <span class="hljs-built_in">eax</span> &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">1</span><span class="hljs-comment">;</span><br><span class="hljs-built_in">ecx</span> = <span class="hljs-built_in">rax</span> + <span class="hljs-built_in">rsi</span><span class="hljs-comment">;</span><br>if (<span class="hljs-built_in">ecx</span> &lt;= <span class="hljs-built_in">edi</span>) &#123;<br><span class="hljs-built_in">eax</span> = <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>        if (<span class="hljs-built_in">ecx</span> &gt;= <span class="hljs-built_in">edi</span>) &#123;<br>            return<span class="hljs-comment">;</span><br>        &#125;<br>        <span class="hljs-built_in">esi</span> = <span class="hljs-built_in">rcx</span> + <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>        <span class="hljs-built_in">rax</span> = func4(<span class="hljs-built_in">edi</span>, <span class="hljs-built_in">esi</span>, <span class="hljs-built_in">edx</span>)<span class="hljs-comment">;</span><br>        <span class="hljs-built_in">eax</span> = <span class="hljs-number">2</span> * <span class="hljs-built_in">rax</span> + <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>&#125;<br>else &#123;<br>        <span class="hljs-built_in">edx</span> = <span class="hljs-built_in">rcx</span> - <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>        <span class="hljs-built_in">rax</span> = func4(<span class="hljs-built_in">edi</span>, <span class="hljs-built_in">esi</span>, <span class="hljs-built_in">edx</span>)<span class="hljs-comment">;</span><br>        <span class="hljs-built_in">eax</span> = <span class="hljs-number">2</span> * <span class="hljs-built_in">rax</span><span class="hljs-comment">;</span><br>&#125;<br>retq<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>要使返回值为0，则<code>%edi=(%esi+%edx)/2</code>，所以第一个答案应为7。</p><p><img src="/img/csapp/2.9.png" alt="图为命令行界面" /></p><p>Try this one！</p><h3 id="phase-5"><a class="markdownIt-Anchor" href="#phase-5"></a> Phase 5</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0000000000401062</span> &lt;phase_5&gt;:<br>  <span class="hljs-attribute">401062</span>:<span class="hljs-number">53</span>                   push   %rbx<br>  <span class="hljs-attribute">401063</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">20</span>          sub    $<span class="hljs-number">0</span>x20,%rsp<br>  <span class="hljs-attribute">401067</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> fb             mov    %rdi,%rbx<br>  <span class="hljs-attribute">40106a</span>:<span class="hljs-number">64</span> <span class="hljs-number">48</span> <span class="hljs-number">8</span>b <span class="hljs-number">04</span> <span class="hljs-number">25</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> mov    %fs:<span class="hljs-number">0</span>x28,%rax<br>  <span class="hljs-attribute">401071</span>:<span class="hljs-number">00</span> <span class="hljs-number">00</span> <br>  <span class="hljs-attribute">401073</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">18</span>       mov    %rax,<span class="hljs-number">0</span>x18(%rsp)<br>  <span class="hljs-attribute">401078</span>:<span class="hljs-number">31</span> c0                xor    %eax,%eax<br>  <span class="hljs-attribute">40107a</span>:e8 <span class="hljs-number">9</span>c <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40131</span>b &lt;string_length&gt;<br>  <span class="hljs-attribute">40107f</span>:<span class="hljs-number">83</span> f8 <span class="hljs-number">06</span>             cmp    $<span class="hljs-number">0</span>x6,%eax<br>  <span class="hljs-attribute">401082</span>:<span class="hljs-number">74</span> <span class="hljs-number">4</span>e                je     <span class="hljs-number">4010</span>d2 &lt;phase_5+<span class="hljs-number">0</span>x70&gt;<br>  <span class="hljs-attribute">401084</span>:e8 b1 <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">401089</span>:eb <span class="hljs-number">47</span>                jmp    <span class="hljs-number">4010</span>d2 &lt;phase_5+<span class="hljs-number">0</span>x70&gt;<br>  <span class="hljs-attribute">40108b</span>:<span class="hljs-number">0</span>f b6 <span class="hljs-number">0</span>c <span class="hljs-number">03</span>          movzbl (%rbx,%rax,<span class="hljs-number">1</span>),%ecx<br>  <span class="hljs-attribute">40108f</span>:<span class="hljs-number">88</span> <span class="hljs-number">0</span>c <span class="hljs-number">24</span>             mov    %cl,(%rsp)<br>  <span class="hljs-attribute">401092</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>b <span class="hljs-number">14</span> <span class="hljs-number">24</span>          mov    (%rsp),%rdx<br>  <span class="hljs-attribute">401096</span>:<span class="hljs-number">83</span> e2 <span class="hljs-number">0</span>f             and    $<span class="hljs-number">0</span>xf,%edx<br>  <span class="hljs-attribute">401099</span>:<span class="hljs-number">0</span>f b6 <span class="hljs-number">92</span> b0 <span class="hljs-number">24</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> movzbl <span class="hljs-number">0</span>x4024b0(%rdx),%edx<br>  <span class="hljs-attribute">4010a0</span>:<span class="hljs-number">88</span> <span class="hljs-number">54</span> <span class="hljs-number">04</span> <span class="hljs-number">10</span>          mov    %dl,<span class="hljs-number">0</span>x10(%rsp,%rax,<span class="hljs-number">1</span>)<br>  <span class="hljs-attribute">4010a4</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c0 <span class="hljs-number">01</span>          add    $<span class="hljs-number">0</span>x1,%rax<br>  <span class="hljs-attribute">4010a8</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> f8 <span class="hljs-number">06</span>          cmp    $<span class="hljs-number">0</span>x6,%rax<br>  <span class="hljs-attribute">4010ac</span>:<span class="hljs-number">75</span> dd                jne    <span class="hljs-number">40108</span>b &lt;phase_5+<span class="hljs-number">0</span>x29&gt;<br>  <span class="hljs-attribute">4010ae</span>:c6 <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">16</span> <span class="hljs-number">00</span>       movb   $<span class="hljs-number">0</span>x0,<span class="hljs-number">0</span>x16(%rsp)<br>  <span class="hljs-attribute">4010b3</span>:be <span class="hljs-number">5</span>e <span class="hljs-number">24</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x40245e,%esi<br>  <span class="hljs-attribute">4010b8</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">7</span>c <span class="hljs-number">24</span> <span class="hljs-number">10</span>       lea    <span class="hljs-number">0</span>x10(%rsp),%rdi<br>  <span class="hljs-attribute">4010bd</span>:e8 <span class="hljs-number">76</span> <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">401338</span> &lt;strings_not_equal&gt;<br>  <span class="hljs-attribute">4010c2</span>:<span class="hljs-number">85</span> c0                test   %eax,%eax<br>  <span class="hljs-attribute">4010c4</span>:<span class="hljs-number">74</span> <span class="hljs-number">13</span>                je     <span class="hljs-number">4010</span>d9 &lt;phase_5+<span class="hljs-number">0</span>x77&gt;<br>  <span class="hljs-attribute">4010c6</span>:e8 <span class="hljs-number">6</span>f <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">4010cb</span>:<span class="hljs-number">0</span>f <span class="hljs-number">1</span>f <span class="hljs-number">44</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       nopl   <span class="hljs-number">0</span>x0(%rax,%rax,<span class="hljs-number">1</span>)<br>  <span class="hljs-attribute">4010d0</span>:eb <span class="hljs-number">07</span>                jmp    <span class="hljs-number">4010</span>d9 &lt;phase_5+<span class="hljs-number">0</span>x77&gt;<br>  <span class="hljs-attribute">4010d2</span>:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x0,%eax<br>  <span class="hljs-attribute">4010d7</span>:eb b2                jmp    <span class="hljs-number">40108</span>b &lt;phase_5+<span class="hljs-number">0</span>x29&gt;<br>  <span class="hljs-attribute">4010d9</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>b <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">18</span>       mov    <span class="hljs-number">0</span>x18(%rsp),%rax<br>  <span class="hljs-attribute">4010de</span>:<span class="hljs-number">64</span> <span class="hljs-number">48</span> <span class="hljs-number">33</span> <span class="hljs-number">04</span> <span class="hljs-number">25</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> xor    %fs:<span class="hljs-number">0</span>x28,%rax<br>  <span class="hljs-attribute">4010e5</span>:<span class="hljs-number">00</span> <span class="hljs-number">00</span> <br>  <span class="hljs-attribute">4010e7</span>:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                je     <span class="hljs-number">4010</span>ee &lt;phase_5+<span class="hljs-number">0</span>x8c&gt;<br>  <span class="hljs-attribute">4010e9</span>:e8 <span class="hljs-number">42</span> fa ff ff       callq  <span class="hljs-number">400</span>b30 &lt;__stack_chk_fail@plt&gt;<br>  <span class="hljs-attribute">4010ee</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">20</span>          add    $<span class="hljs-number">0</span>x20,%rsp<br>  <span class="hljs-attribute">4010f2</span>:<span class="hljs-number">5</span>b                   pop    %rbx<br>  <span class="hljs-attribute">4010f3</span>:c3                   retq   <br></code></pre></td></tr></table></figure><p>第1行，<code>%rbx</code>入栈，储存其状态。</p><p>第2行，栈指针<code>%rsp</code>前移20位。</p><p>第3行，<code>%rbx</code>传入<code>%rdi(第一个参数)</code>。</p><p>第4行，<code>%rax</code>传入<code>%fs:0x28</code>，暂时不知道这是什么。</p><p>第6行，<code>%rsp+0x18</code>传入<code>%rax</code>，即<code>%fs:0x28</code>。</p><p>第7行，对<code>%eax</code>进行异或操作,<code>%rax</code>为0。</p><p>第8行，跳转到地址<code>0x40131b</code>，看注释猜想该函数功能为读取字符串长度。</p><p>第9、10行，将<code>%eax</code>和6比较，若不为6则爆炸，因此字符串长度为6，跳转到地址<code>%4010d2</code>。</p><p>第32、33行，<code>%eax</code>传入0，跳转到地址%40108b。</p><p>第14~22行，明显是一个6次循环，每次循环都向栈中写入一个字符，每次写入的字符都是从第18行的语句中得出，即地址<code>%0x401099</code>,用gdb打印一下。</p><p><img src="/img/csapp/2.10.png" alt="图为命令行界面" /></p><p>得到字符串<code>&quot;maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?&quot;</code></p><p>第23~28行，这里分别以<code>(%rsp+0x10到%rsp+0x16)</code>的字符串和地址<code>0x40245e</code>的字符串作为参数，调用了函数<code>string_not_equal</code>。根据这段可以肯定，我们需要输入长度为6的字符串来和存放在地址<code>0x40245e</code>的字符串来进行比较，如果不同，就会Bomb。</p><p><img src="/img/csapp/2.11.png" alt="图为命令行界面" /></p><p>得到字符串为<code>flyers</code>。然后就是在上面的字符串中找<code>flyers</code>在长字符串中的索引分别是:9, 15, 14, 5, 6, 7。ASCII码在32以后是字符，这里分别加上64，得到一个不唯一可行解：73, 79, 78, 69, 70, 71。对应的字符串为<code>IONEFG</code>。</p><p><img src="/img/csapp/2.12.png" alt="图为命令行界面" /></p><h3 id="phase-6"><a class="markdownIt-Anchor" href="#phase-6"></a> Phase 6</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">00000000004010f4</span> &lt;phase_6&gt;:<br>  <span class="hljs-attribute">4010f4</span>:<span class="hljs-number">41</span> <span class="hljs-number">56</span>                push   %r14<br>  <span class="hljs-attribute">4010f6</span>:<span class="hljs-number">41</span> <span class="hljs-number">55</span>                push   %r13<br>  <span class="hljs-attribute">4010f8</span>:<span class="hljs-number">41</span> <span class="hljs-number">54</span>                push   %r12<br>  <span class="hljs-attribute">4010fa</span>:<span class="hljs-number">55</span>                   push   %rbp<br>  <span class="hljs-attribute">4010fb</span>:<span class="hljs-number">53</span>                   push   %rbx<br>  <span class="hljs-attribute">4010fc</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">50</span>          sub    $<span class="hljs-number">0</span>x50,%rsp<br>  <span class="hljs-attribute">401100</span>:<span class="hljs-number">49</span> <span class="hljs-number">89</span> e5             mov    %rsp,%r13<br>  <span class="hljs-attribute">401103</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> e6             mov    %rsp,%rsi<br>  <span class="hljs-attribute">401106</span>:e8 <span class="hljs-number">51</span> <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40145</span>c &lt;read_six_numbers&gt;<br>  <span class="hljs-attribute">40110b</span>:<span class="hljs-number">49</span> <span class="hljs-number">89</span> e6             mov    %rsp,%r14<br>  <span class="hljs-attribute">40110e</span>:<span class="hljs-number">41</span> bc <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>    mov    $<span class="hljs-number">0</span>x0,%r12d<br>  <span class="hljs-attribute">401114</span>:<span class="hljs-number">4</span>c <span class="hljs-number">89</span> ed             mov    %r13,%rbp<br>  <span class="hljs-attribute">401117</span>:<span class="hljs-number">41</span> <span class="hljs-number">8</span>b <span class="hljs-number">45</span> <span class="hljs-number">00</span>          mov    <span class="hljs-number">0</span>x0(%r13),%eax<br>  <span class="hljs-attribute">40111b</span>:<span class="hljs-number">83</span> e8 <span class="hljs-number">01</span>             sub    $<span class="hljs-number">0</span>x1,%eax<br>  <span class="hljs-attribute">40111e</span>:<span class="hljs-number">83</span> f8 <span class="hljs-number">05</span>             cmp    $<span class="hljs-number">0</span>x5,%eax<br>  <span class="hljs-attribute">401121</span>:<span class="hljs-number">76</span> <span class="hljs-number">05</span>                jbe    <span class="hljs-number">401128</span> &lt;phase_6+<span class="hljs-number">0</span>x34&gt;<br>  <span class="hljs-attribute">401123</span>:e8 <span class="hljs-number">12</span> <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">401128</span>:<span class="hljs-number">41</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">01</span>          add    $<span class="hljs-number">0</span>x1,%r12d<br>  <span class="hljs-attribute">40112c</span>:<span class="hljs-number">41</span> <span class="hljs-number">83</span> fc <span class="hljs-number">06</span>          cmp    $<span class="hljs-number">0</span>x6,%r12d<br>  <span class="hljs-attribute">401130</span>:<span class="hljs-number">74</span> <span class="hljs-number">21</span>                je     <span class="hljs-number">401153</span> &lt;phase_6+<span class="hljs-number">0</span>x5f&gt;<br>  <span class="hljs-attribute">401132</span>:<span class="hljs-number">44</span> <span class="hljs-number">89</span> e3             mov    %r12d,%ebx<br>  <span class="hljs-attribute">401135</span>:<span class="hljs-number">48</span> <span class="hljs-number">63</span> c3             movslq %ebx,%rax<br>  <span class="hljs-attribute">401138</span>:<span class="hljs-number">8</span>b <span class="hljs-number">04</span> <span class="hljs-number">84</span>             mov    (%rsp,%rax,<span class="hljs-number">4</span>),%eax<br>  <span class="hljs-attribute">40113b</span>:<span class="hljs-number">39</span> <span class="hljs-number">45</span> <span class="hljs-number">00</span>             cmp    %eax,<span class="hljs-number">0</span>x0(%rbp)<br>  <span class="hljs-attribute">40113e</span>:<span class="hljs-number">75</span> <span class="hljs-number">05</span>                jne    <span class="hljs-number">401145</span> &lt;phase_6+<span class="hljs-number">0</span>x51&gt;<br>  <span class="hljs-attribute">401140</span>:e8 f5 <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">401145</span>:<span class="hljs-number">83</span> c3 <span class="hljs-number">01</span>             add    $<span class="hljs-number">0</span>x1,%ebx<br>  <span class="hljs-attribute">401148</span>:<span class="hljs-number">83</span> fb <span class="hljs-number">05</span>             cmp    $<span class="hljs-number">0</span>x5,%ebx<br>  <span class="hljs-attribute">40114b</span>:<span class="hljs-number">7</span>e e8                jle    <span class="hljs-number">401135</span> &lt;phase_6+<span class="hljs-number">0</span>x41&gt;<br>  <span class="hljs-attribute">40114d</span>:<span class="hljs-number">49</span> <span class="hljs-number">83</span> c5 <span class="hljs-number">04</span>          add    $<span class="hljs-number">0</span>x4,%r13<br>  <span class="hljs-attribute">401151</span>:eb c1                jmp    <span class="hljs-number">401114</span> &lt;phase_6+<span class="hljs-number">0</span>x20&gt;<br>  <span class="hljs-attribute">401153</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">74</span> <span class="hljs-number">24</span> <span class="hljs-number">18</span>       lea    <span class="hljs-number">0</span>x18(%rsp),%rsi<br>  <span class="hljs-attribute">401158</span>:<span class="hljs-number">4</span>c <span class="hljs-number">89</span> f0             mov    %r14,%rax<br>  <span class="hljs-attribute">40115b</span>:b9 <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x7,%ecx<br>  <span class="hljs-attribute">401160</span>:<span class="hljs-number">89</span> ca                mov    %ecx,%edx<br>  <span class="hljs-attribute">401162</span>:<span class="hljs-number">2</span>b <span class="hljs-number">10</span>                sub    (%rax),%edx<br>  <span class="hljs-attribute">401164</span>:<span class="hljs-number">89</span> <span class="hljs-number">10</span>                mov    %edx,(%rax)<br>  <span class="hljs-attribute">401166</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c0 <span class="hljs-number">04</span>          add    $<span class="hljs-number">0</span>x4,%rax<br>  <span class="hljs-attribute">40116a</span>:<span class="hljs-number">48</span> <span class="hljs-number">39</span> f0             cmp    %rsi,%rax<br>  <span class="hljs-attribute">40116d</span>:<span class="hljs-number">75</span> f1                jne    <span class="hljs-number">401160</span> &lt;phase_6+<span class="hljs-number">0</span>x6c&gt;<br>  <span class="hljs-attribute">40116f</span>:be <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x0,%esi<br>  <span class="hljs-attribute">401174</span>:eb <span class="hljs-number">21</span>                jmp    <span class="hljs-number">401197</span> &lt;phase_6+<span class="hljs-number">0</span>xa3&gt;<br>  <span class="hljs-attribute">401176</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>b <span class="hljs-number">52</span> <span class="hljs-number">08</span>          mov    <span class="hljs-number">0</span>x8(%rdx),%rdx<br>  <span class="hljs-attribute">40117a</span>:<span class="hljs-number">83</span> c0 <span class="hljs-number">01</span>             add    $<span class="hljs-number">0</span>x1,%eax<br>  <span class="hljs-attribute">40117d</span>:<span class="hljs-number">39</span> c8                cmp    %ecx,%eax<br>  <span class="hljs-attribute">40117f</span>:<span class="hljs-number">75</span> f5                jne    <span class="hljs-number">401176</span> &lt;phase_6+<span class="hljs-number">0</span>x82&gt;<br>  <span class="hljs-attribute">401181</span>:eb <span class="hljs-number">05</span>                jmp    <span class="hljs-number">401188</span> &lt;phase_6+<span class="hljs-number">0</span>x94&gt;<br>  <span class="hljs-attribute">401183</span>:ba d0 <span class="hljs-number">32</span> <span class="hljs-number">60</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x6032d0,%edx<br>  <span class="hljs-attribute">401188</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">54</span> <span class="hljs-number">74</span> <span class="hljs-number">20</span>       mov    %rdx,<span class="hljs-number">0</span>x20(%rsp,%rsi,<span class="hljs-number">2</span>)<br>  <span class="hljs-attribute">40118d</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c6 <span class="hljs-number">04</span>          add    $<span class="hljs-number">0</span>x4,%rsi<br>  <span class="hljs-attribute">401191</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> fe <span class="hljs-number">18</span>          cmp    $<span class="hljs-number">0</span>x18,%rsi<br>  <span class="hljs-attribute">401195</span>:<span class="hljs-number">74</span> <span class="hljs-number">14</span>                je     <span class="hljs-number">4011</span>ab &lt;phase_6+<span class="hljs-number">0</span>xb7&gt;<br>  <span class="hljs-attribute">401197</span>:<span class="hljs-number">8</span>b <span class="hljs-number">0</span>c <span class="hljs-number">34</span>             mov    (%rsp,%rsi,<span class="hljs-number">1</span>),%ecx<br>  <span class="hljs-attribute">40119a</span>:<span class="hljs-number">83</span> f9 <span class="hljs-number">01</span>             cmp    $<span class="hljs-number">0</span>x1,%ecx<br>  <span class="hljs-attribute">40119d</span>:<span class="hljs-number">7</span>e e4                jle    <span class="hljs-number">401183</span> &lt;phase_6+<span class="hljs-number">0</span>x8f&gt;<br>  <span class="hljs-attribute">40119f</span>:b8 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x1,%eax<br>  <span class="hljs-attribute">4011a4</span>:ba d0 <span class="hljs-number">32</span> <span class="hljs-number">60</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x6032d0,%edx<br>  <span class="hljs-attribute">4011a9</span>:eb cb                jmp    <span class="hljs-number">401176</span> &lt;phase_6+<span class="hljs-number">0</span>x82&gt;<br>  <span class="hljs-attribute">4011ab</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>b <span class="hljs-number">5</span>c <span class="hljs-number">24</span> <span class="hljs-number">20</span>       mov    <span class="hljs-number">0</span>x20(%rsp),%rbx<br>  <span class="hljs-attribute">4011b0</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">28</span>       lea    <span class="hljs-number">0</span>x28(%rsp),%rax<br>  <span class="hljs-attribute">4011b5</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">74</span> <span class="hljs-number">24</span> <span class="hljs-number">50</span>       lea    <span class="hljs-number">0</span>x50(%rsp),%rsi<br>  <span class="hljs-attribute">4011ba</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> d9             mov    %rbx,%rcx<br>  <span class="hljs-attribute">4011bd</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>b <span class="hljs-number">10</span>             mov    (%rax),%rdx<br>  <span class="hljs-attribute">4011c0</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">51</span> <span class="hljs-number">08</span>          mov    %rdx,<span class="hljs-number">0</span>x8(%rcx)<br>  <span class="hljs-attribute">4011c4</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c0 <span class="hljs-number">08</span>          add    $<span class="hljs-number">0</span>x8,%rax<br>  <span class="hljs-attribute">4011c8</span>:<span class="hljs-number">48</span> <span class="hljs-number">39</span> f0             cmp    %rsi,%rax<br>  <span class="hljs-attribute">4011cb</span>:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                je     <span class="hljs-number">4011</span>d2 &lt;phase_6+<span class="hljs-number">0</span>xde&gt;<br>  <span class="hljs-attribute">4011cd</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> d1             mov    %rdx,%rcx<br>  <span class="hljs-attribute">4011d0</span>:eb eb                jmp    <span class="hljs-number">4011</span>bd &lt;phase_6+<span class="hljs-number">0</span>xc9&gt;<br>  <span class="hljs-attribute">4011d2</span>:<span class="hljs-number">48</span> c7 <span class="hljs-number">42</span> <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> movq   $<span class="hljs-number">0</span>x0,<span class="hljs-number">0</span>x8(%rdx)<br>  <span class="hljs-attribute">4011d9</span>:<span class="hljs-number">00</span> <br>  <span class="hljs-attribute">4011da</span>:bd <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x5,%ebp<br>  <span class="hljs-attribute">4011df</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>b <span class="hljs-number">43</span> <span class="hljs-number">08</span>          mov    <span class="hljs-number">0</span>x8(%rbx),%rax<br>  <span class="hljs-attribute">4011e3</span>:<span class="hljs-number">8</span>b <span class="hljs-number">00</span>                mov    (%rax),%eax<br>  <span class="hljs-attribute">4011e5</span>:<span class="hljs-number">39</span> <span class="hljs-number">03</span>                cmp    %eax,(%rbx)<br>  <span class="hljs-attribute">4011e7</span>:<span class="hljs-number">7</span>d <span class="hljs-number">05</span>                jge    <span class="hljs-number">4011</span>ee &lt;phase_6+<span class="hljs-number">0</span>xfa&gt;<br>  <span class="hljs-attribute">4011e9</span>:e8 <span class="hljs-number">4</span>c <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">4011ee</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>b <span class="hljs-number">5</span>b <span class="hljs-number">08</span>          mov    <span class="hljs-number">0</span>x8(%rbx),%rbx<br>  <span class="hljs-attribute">4011f2</span>:<span class="hljs-number">83</span> ed <span class="hljs-number">01</span>             sub    $<span class="hljs-number">0</span>x1,%ebp<br>  <span class="hljs-attribute">4011f5</span>:<span class="hljs-number">75</span> e8                jne    <span class="hljs-number">4011</span>df &lt;phase_6+<span class="hljs-number">0</span>xeb&gt;<br>  <span class="hljs-attribute">4011f7</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">50</span>          add    $<span class="hljs-number">0</span>x50,%rsp<br>  <span class="hljs-attribute">4011fb</span>:<span class="hljs-number">5</span>b                   pop    %rbx<br>  <span class="hljs-attribute">4011fc</span>:<span class="hljs-number">5</span>d                   pop    %rbp<br>  <span class="hljs-attribute">4011fd</span>:<span class="hljs-number">41</span> <span class="hljs-number">5</span>c                pop    %r12<br>  <span class="hljs-attribute">4011ff</span>:<span class="hljs-number">41</span> <span class="hljs-number">5</span>d                pop    %r13<br>  <span class="hljs-attribute">401201</span>:<span class="hljs-number">41</span> <span class="hljs-number">5</span>e                pop    %r14<br>  <span class="hljs-attribute">401203</span>:c3                   retq   <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机系统</category>
      
      <category>csapp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Wireshark Lab 3：DNS详解</title>
    <link href="/2022/08/24/Wireshark-Lab(3)/"/>
    <url>/2022/08/24/Wireshark-Lab(3)/</url>
    
    <content type="html"><![CDATA[<h1 id="wireshark-lab-3dns详解"><a class="markdownIt-Anchor" href="#wireshark-lab-3dns详解"></a> Wireshark Lab 3：DNS详解</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>今天开学了，正式开启了我的大三生活，希望这半年能把基础知识正式打造完成。还是先继续完成wireshark抓包吧。</p><h2 id="1-nslookup"><a class="markdownIt-Anchor" href="#1-nslookup"></a> 1. nslookup</h2><h3 id="11-run-nslookup-to-obtain-the-ip-address-of-a-web-server-in-asia-what-is-the-ip-address-of-that-server"><a class="markdownIt-Anchor" href="#11-run-nslookup-to-obtain-the-ip-address-of-a-web-server-in-asia-what-is-the-ip-address-of-that-server"></a> 1.1 Run nslookup to obtain the IP address of a Web server in Asia. What is the IP address of that server?</h3><p><img src="/img/wireshark-lab/3.1.png" alt="图为cmd界面" /></p><p>图中可以看到其IP地址为39.156.66.14。</p><h3 id="12-run-nslookup-to-determine-the-authoritative-dns-servers-for-a-university-in-europe"><a class="markdownIt-Anchor" href="#12-run-nslookup-to-determine-the-authoritative-dns-servers-for-a-university-in-europe"></a> 1.2 Run nslookup to determine the authoritative DNS servers for a university in Europe.</h3><p><img src="/img/wireshark-lab/3.2.png" alt="图为cmd界面" /></p><p>这里查询的剑桥大学的权威DNS服务器，其网址为<code>NS cam.ac.uk</code>。</p><p>可以看到图中有6个权威DNS服务器，但是是缓存。</p><h3 id="13-run-nslookup-so-that-one-of-the-dns-servers-obtained-in-question-2-is-queried-for-the-mail-servers-for-yahoo-mail-what-is-its-ip-address"><a class="markdownIt-Anchor" href="#13-run-nslookup-so-that-one-of-the-dns-servers-obtained-in-question-2-is-queried-for-the-mail-servers-for-yahoo-mail-what-is-its-ip-address"></a> 1.3 Run nslookup so that one of the DNS servers obtained in Question 2 is queried for the mail servers for Yahoo! mail.   What is its IP address?</h3><p><img src="/img/wireshark-lab/3.3.png" alt="图为cmd界面" /></p><h2 id="2-ipconfig"><a class="markdownIt-Anchor" href="#2-ipconfig"></a> 2. ipconfig</h2><p>这一部分没有实验，略过。</p><h2 id="3-tracing-dns-with-wireshark"><a class="markdownIt-Anchor" href="#3-tracing-dns-with-wireshark"></a> 3. Tracing DNS with Wireshark</h2><h3 id="q1"><a class="markdownIt-Anchor" href="#q1"></a> Q1</h3><h4 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h4><p>首先先把准备工作做好。第一步先把DNS缓存清了，利用ipconfig。</p><p><img src="/img/wireshark-lab/3.4.png" alt="图为cmd界面" /></p><p>第二步是清除掉浏览器的缓存，这里就不做演示了。</p><p>第三步，打开Wireshark并在过滤器中输入“ip.addr==your_ip_address”，ip地址可以通过ipconfig查询。</p><p><img src="/img/wireshark-lab/3.5.png" alt="图为wireshark界面" /></p><p>准备工作就到这里了。</p><h4 id="31-locate-the-dns-query-and-response-messages-are-then-sent-over-udp-or-tcp"><a class="markdownIt-Anchor" href="#31-locate-the-dns-query-and-response-messages-are-then-sent-over-udp-or-tcp"></a> 3.1 Locate the DNS query and response messages. Are then sent over UDP or TCP?</h4><p>DNS用的UDP发送。</p><h4 id="32-what-is-the-destination-port-for-the-dns-query-message-what-is-the-source-port-of-dns-response-message"><a class="markdownIt-Anchor" href="#32-what-is-the-destination-port-for-the-dns-query-message-what-is-the-source-port-of-dns-response-message"></a> 3.2 What is the destination port for the DNS query message? What is the source port of DNS response message?</h4><p><img src="/img/wireshark-lab/3.6.png" alt="图为wireshark界面" /></p><p>如图显示，sourse port是58497，destination port是53。</p><h4 id="33-to-what-ip-address-is-the-dns-query-message-sent-use-ipconfig-to-determine-the-ip-address-of-your-local-dns-server-are-these-two-ip-addresses-the-same"><a class="markdownIt-Anchor" href="#33-to-what-ip-address-is-the-dns-query-message-sent-use-ipconfig-to-determine-the-ip-address-of-your-local-dns-server-are-these-two-ip-addresses-the-same"></a> 3.3 To what IP address is the DNS query message sent? Use ipconfig to determine the IP address of your local DNS server. Are these two IP addresses the same?</h4><p>查询地址如下图所示，为211.137.160.5。</p><p><img src="/img/wireshark-lab/3.7.png" alt="图为wireshark界面" /></p><p>本地DNS地址用ipconfig查询，如下图所示，</p><p><img src="/img/wireshark-lab/3.8.png" alt="图为cmd界面" /></p><p>二者为同一地址。</p><h4 id="34-examine-the-dns-query-message-what-type-of-dns-query-is-it-does-the-query-message-contain-any-answers"><a class="markdownIt-Anchor" href="#34-examine-the-dns-query-message-what-type-of-dns-query-is-it-does-the-query-message-contain-any-answers"></a> 3.4 Examine the DNS query message. What “Type” of DNS query is it? Does the query message contain any “answers”?</h4><p>如上图所示，Type为A，answer为0。</p><h4 id="35-examine-the-dns-response-message-how-many-answers-are-provided-what-do-each-of-these-answers-contain"><a class="markdownIt-Anchor" href="#35-examine-the-dns-response-message-how-many-answers-are-provided-what-do-each-of-these-answers-contain"></a> 3.5 Examine the DNS response message. How many “answers” are provided? What do each of these answers contain?</h4><p><img src="/img/wireshark-lab/3.9.png" alt="图为wireshark界面" /></p><p>如图，提供了3个answer，包含两个IP地址和一个规范主机名。</p><h4 id="36-consider-the-subsequent-tcp-syn-packet-sent-by-your-host-does-the-destination-ip-address-of-the-syn-packet-correspond-to-any-of-the-ip-addresses-provided-in-the-dns-response-message"><a class="markdownIt-Anchor" href="#36-consider-the-subsequent-tcp-syn-packet-sent-by-your-host-does-the-destination-ip-address-of-the-syn-packet-correspond-to-any-of-the-ip-addresses-provided-in-the-dns-response-message"></a> 3.6 Consider the subsequent TCP SYN packet sent by your host. Does the destination IP address of the SYN packet correspond to any of the IP addresses provided in the DNS response message?</h4><p>是对应的。</p><h4 id="37-this-web-page-contains-images-before-retrieving-each-image-does-your-host-issue-new-dns-queries"><a class="markdownIt-Anchor" href="#37-this-web-page-contains-images-before-retrieving-each-image-does-your-host-issue-new-dns-queries"></a> 3.7 This web page contains images. Before retrieving each image, does your host issue new DNS queries?</h4><p>没有发送新的IP地址了。</p><h3 id="q2"><a class="markdownIt-Anchor" href="#q2"></a> Q2</h3><h4 id="准备工作-2"><a class="markdownIt-Anchor" href="#准备工作-2"></a> 准备工作</h4><p>还是先用<code>ipconfig /flushdns</code>清一下缓存，然后开始抓包，在cmd里面输入<code>nslookup mit.edu</code>就能看到如下界面了。</p><p><img src="/img/wireshark-lab/3.10.png" alt="图为wireshark界面" /></p><h4 id="38-what-is-the-destination-port-for-the-dns-query-message-what-is-the-source-port-of-dns-response-message"><a class="markdownIt-Anchor" href="#38-what-is-the-destination-port-for-the-dns-query-message-what-is-the-source-port-of-dns-response-message"></a> 3.8 What is the destination port for the DNS query message? What is the source port of DNS response message?</h4><p>destination port是53，source port是59604。</p><h4 id="39-to-what-ip-address-is-the-dns-query-message-sent-is-this-the-ip-address-of-your-default-local-dns-server"><a class="markdownIt-Anchor" href="#39-to-what-ip-address-is-the-dns-query-message-sent-is-this-the-ip-address-of-your-default-local-dns-server"></a> 3.9  To what IP address is the DNS query message sent? Is this the IP address of your default local DNS server?</h4><p>发送到192.168.1.104，是本地的IP地址。</p><h4 id="310-examine-the-dns-query-message-what-type-of-dns-query-is-it-does-the-query-message-contain-any-answers"><a class="markdownIt-Anchor" href="#310-examine-the-dns-query-message-what-type-of-dns-query-is-it-does-the-query-message-contain-any-answers"></a> 3.10 Examine the DNS query message. What “Type” of DNS query is it? Does the query message contain any “answers”?</h4><p>Type为A，不包括任何answer。</p><h4 id="311-examine-the-dns-response-message-how-many-answers-are-provided-what-do-each-of-these-answers-contain"><a class="markdownIt-Anchor" href="#311-examine-the-dns-response-message-how-many-answers-are-provided-what-do-each-of-these-answers-contain"></a> 3.11 Examine the DNS response message. How many “answers” are provided? What do each of these answers contain?</h4><p>提供了一个answer。包含一个IP地址。</p><h4 id="312-provide-a-screenshot"><a class="markdownIt-Anchor" href="#312-provide-a-screenshot"></a> 3.12 Provide a screenshot.</h4><p>略</p><h3 id="q3"><a class="markdownIt-Anchor" href="#q3"></a> Q3</h3><h4 id="准备工作-3"><a class="markdownIt-Anchor" href="#准备工作-3"></a> 准备工作</h4><p>跟Q2一致，只不过把<code>nslookup mit.edu</code>换成<code>nslookup –type=NS mit.edu</code>。</p><p><img src="/img/wireshark-lab/3.11.png" alt="图为cmd界面" /></p><p><img src="/img/wireshark-lab/3.12.png" alt="图为wireshark界面" /></p><h4 id="313-to-what-ip-address-is-the-dns-query-message-sent-is-this-the-ip-address-of-your-default-local-dns-server"><a class="markdownIt-Anchor" href="#313-to-what-ip-address-is-the-dns-query-message-sent-is-this-the-ip-address-of-your-default-local-dns-server"></a> 3.13 To what IP address is the DNS query message sent? Is this the IP address of your default local DNS server?</h4><p>发送到192.168.1.104。和本地IP一样。</p><h4 id="314-examine-the-dns-query-message-what-type-of-dns-query-is-it-does-the-query-message-contain-any-answers"><a class="markdownIt-Anchor" href="#314-examine-the-dns-query-message-what-type-of-dns-query-is-it-does-the-query-message-contain-any-answers"></a> 3.14 Examine the DNS query message. What “Type” of DNS query is it? Does the query message contain any “answers”?</h4><p>Type是NS，不包括。</p><h4 id="315-examine-the-dns-response-message-what-mit-nameservers-does-the-response-message-provide-does-this-response-message-also-provide-the-ip-addresses-of-the-mit-namesers"><a class="markdownIt-Anchor" href="#315-examine-the-dns-response-message-what-mit-nameservers-does-the-response-message-provide-does-this-response-message-also-provide-the-ip-addresses-of-the-mit-namesers"></a> 3.15 Examine the DNS response message. What MIT nameservers does the response message provide? Does this response message also provide the IP addresses of the MIT namesers?</h4><p>响应信息有<code>NS mit.edu NS asia2.akam.net NS ns1-173.akam.net NS ns1-37.akam.net NS asia1.akam.net NS use2.akam.net NS usw2.akam.net NS use5.akam.net NS eur5.akam.net</code>,不包括IP地址。</p><h4 id="316-provide-a-screenshot"><a class="markdownIt-Anchor" href="#316-provide-a-screenshot"></a> 3.16 Provide a screenshot.</h4><p>略</p><h3 id="q4"><a class="markdownIt-Anchor" href="#q4"></a> Q4</h3><p>这里给的<code>nslookup www.aiit.or.kr bitsy.mit.edu</code>我一直报超时，挂了梯子也是，看了下题目和之前是一样的，偷个懒略过了。</p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>ok，这一个lab就结束了，内容看似很多，不过大多都是重复性的内容。实验的主要目的一个是熟悉抓包的流程，另一个就是在抓包的过程中体会DNS的一些特点。下章再见。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
      <category>自顶向下方法 - Wireshark Lab</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git报错及解决方法</title>
    <link href="/2022/08/11/git_false/"/>
    <url>/2022/08/11/git_false/</url>
    
    <content type="html"><![CDATA[<h1 id="git报错及解决办法"><a class="markdownIt-Anchor" href="#git报错及解决办法"></a> git报错及解决办法</h1><h2 id="1-openssl-ssl_read-connection-was-reset-errno-10054"><a class="markdownIt-Anchor" href="#1-openssl-ssl_read-connection-was-reset-errno-10054"></a> 1 OpenSSL SSL_read: Connection was reset, errno 10054</h2><p>这是服务器的<a href="https://so.csdn.net/so/search?q=SSL&amp;spm=1001.2101.3001.7020">SSL</a>证书没有经过第三方机构的签署，所以报错。</p><p>造成这个错误很有可能是网络不稳定，连接超时导致的，如果再次尝试后依然报错，输入以下命令解除ssl验证：</p><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> http<span class="hljs-selector-class">.sslVerify</span> <span class="hljs-string">&quot;false&quot;</span><br></code></pre></td></tr></table></figure><p>再次上传即可。</p><h2 id="2-error-rpc-failed-curl-92-http2-stream-0-was-not-closed-cleanly-cancel-err-8"><a class="markdownIt-Anchor" href="#2-error-rpc-failed-curl-92-http2-stream-0-was-not-closed-cleanly-cancel-err-8"></a> 2 error: RPC failed; curl 92 HTTP/2 stream 0 was not closed cleanly: CANCEL (err 8)</h2><p>增加git缓冲区大小：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global http.postBuffer 524288000</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Wireshark Lab 2：HTTP详解</title>
    <link href="/2022/08/11/Wireshark-Lab(2)/"/>
    <url>/2022/08/11/Wireshark-Lab(2)/</url>
    
    <content type="html"><![CDATA[<h1 id="wireshark-lab-2http详解"><a class="markdownIt-Anchor" href="#wireshark-lab-2http详解"></a> Wireshark Lab 2：HTTP详解</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>上一个lab初次接触了wireshark，这一节应该就是对http进行一些抓包加深一下学习。下面的问题我直接用的原文档内容，没翻译，看起来不算吃力。</p><h2 id="1-the-basic-http-getresponse-interaction"><a class="markdownIt-Anchor" href="#1-the-basic-http-getresponse-interaction"></a> 1. The Basic HTTP GET/response interaction</h2><p>按照文档中的步骤一步步执行就行，下面放个抓包完成的截图。</p><p><img src="/img/wireshark-lab/2.1.png" alt="图为wireshark界面" /></p><h3 id="11-is-your-browser-running-http-version-10-or-11-what-version-of-http-is-the-server-running"><a class="markdownIt-Anchor" href="#11-is-your-browser-running-http-version-10-or-11-what-version-of-http-is-the-server-running"></a> 1.1 Is your browser running HTTP version 1.0 or 1.1?  What version of HTTP is the server running?</h3><p>浏览器和服务器的HTTP版本都是1.1。</p><h3 id="12-what-languages-if-any-does-your-browser-indicate-that-it-can-accept-to-the-server"><a class="markdownIt-Anchor" href="#12-what-languages-if-any-does-your-browser-indicate-that-it-can-accept-to-the-server"></a> 1.2 What languages (if any) does your browser indicate that it can accept to the server?</h3><p>Accept-Language：zh-CN,zh。</p><h3 id="13-what-is-the-ip-address-of-your-computer-of-the-gaiacsumassedu-server"><a class="markdownIt-Anchor" href="#13-what-is-the-ip-address-of-your-computer-of-the-gaiacsumassedu-server"></a> 1.3 What is the IP address of your computer?  Of the <a href="http://gaia.cs.umass.edu">gaia.cs.umass.edu</a> server?</h3><p>计算机的IP地址是192.168.31.101，服务器的IP地址是128.119.245.12。</p><h3 id="14-what-is-the-status-code-returned-from-the-server-to-your-browser"><a class="markdownIt-Anchor" href="#14-what-is-the-status-code-returned-from-the-server-to-your-browser"></a> 1.4 What is the status code returned from the server to your browser?</h3><p>状态码 Status Code: 200</p><h3 id="15-when-was-the-html-file-that-you-are-retrieving-last-modified-at-the-server"><a class="markdownIt-Anchor" href="#15-when-was-the-html-file-that-you-are-retrieving-last-modified-at-the-server"></a> 1.5 When was the HTML file that you are retrieving last modified at the server?</h3><p>问的是文件上次修改的时间 Last-Modified: Thu, 11 Aug 2022 05:59:01 GMT。</p><h3 id="16-how-many-bytes-of-content-are-being-returned-to-your-browser"><a class="markdownIt-Anchor" href="#16-how-many-bytes-of-content-are-being-returned-to-your-browser"></a> 1.6 How many bytes of content are being returned to your browser?</h3><p>返回的字节长度 Content length: 128</p><h3 id="17-by-inspecting-the-raw-data-in-the-packet-content-window-do-you-see-any-headers-within-the-data-that-are-not-displayed-in-the-packet-listing-window-if-so-name-one"><a class="markdownIt-Anchor" href="#17-by-inspecting-the-raw-data-in-the-packet-content-window-do-you-see-any-headers-within-the-data-that-are-not-displayed-in-the-packet-listing-window-if-so-name-one"></a> 1.7 By inspecting the raw data in the packet content window, do you see any headers within the data that are not displayed in the packet-listing window?  If so, name one.</h3><p>有很多header，不列举了。</p><h2 id="2-the-http-conditional-getresponse-interaction"><a class="markdownIt-Anchor" href="#2-the-http-conditional-getresponse-interaction"></a> 2. The HTTP CONDITIONAL GET/response interaction</h2><p><img src="/img/wireshark-lab/2.2.png" alt="图为wireshark界面" /></p><h3 id="21-inspect-the-contents-of-the-first-http-get-request-from-your-browser-to-the-server-do-you-see-an-if-modified-since-line-in-the-http-get"><a class="markdownIt-Anchor" href="#21-inspect-the-contents-of-the-first-http-get-request-from-your-browser-to-the-server-do-you-see-an-if-modified-since-line-in-the-http-get"></a> 2.1 Inspect the contents of the first HTTP GET request from your browser to the server.  Do you see an “IF-MODIFIED-SINCE” line in the HTTP GET?</h3><p>这一行出现在第二个get请求中，用来表示缓存的。第一个get请求没有。</p><h3 id="22-inspect-the-contents-of-the-server-response-did-the-server-explicitly-return-the-contents-of-the-file-how-can-you-tell"><a class="markdownIt-Anchor" href="#22-inspect-the-contents-of-the-server-response-did-the-server-explicitly-return-the-contents-of-the-file-how-can-you-tell"></a> 2.2 Inspect the contents of the server response. Did the server explicitly return the contents of the file?   How can you tell?</h3><p>返回文件内容了，data-text-lines里面有显示。</p><h3 id="23-now-inspect-the-contents-of-the-second-http-get-request-from-your-browser-to-the-server-do-you-see-an-if-modified-since-line-in-the-http-get-if-so-what-information-follows-the-if-modified-since-header"><a class="markdownIt-Anchor" href="#23-now-inspect-the-contents-of-the-second-http-get-request-from-your-browser-to-the-server-do-you-see-an-if-modified-since-line-in-the-http-get-if-so-what-information-follows-the-if-modified-since-header"></a> 2.3 Now inspect the contents of the second HTTP GET request from your browser to the server.  Do you see an “IF-MODIFIED-SINCE:” line in the HTTP GET? If so, what information follows the “IF-MODIFIED-SINCE:” header?</h3><p>这个前面也提了，出现了。If-Modified-Since: Sun, 14 Aug 2022 05:59:01 GMT\r\n</p><h3 id="24-what-is-the-http-status-code-and-phrase-returned-from-the-server-in-response-to-this-second-http-get-did-the-server-explicitly-return-the-contents-of-the-file-explain"><a class="markdownIt-Anchor" href="#24-what-is-the-http-status-code-and-phrase-returned-from-the-server-in-response-to-this-second-http-get-did-the-server-explicitly-return-the-contents-of-the-file-explain"></a> 2.4 What is the HTTP status code and phrase returned from the server in response to this second HTTP GET?  Did the server explicitly return the contents of the file?  Explain.</h3><p>Status Code: 304；Response Phrase: Not Modified。没返回文件内容，因为浏览器直接用的上一次的缓存。</p><h2 id="3-retrieving-long-documents"><a class="markdownIt-Anchor" href="#3-retrieving-long-documents"></a> 3. Retrieving Long Documents 、</h2><p><img src="/img/wireshark-lab/2.3.png" alt="图为wireshark界面" /></p><h3 id="31-how-many-http-get-request-messages-did-your-browser-send-which-packet-number-in-the-trace-contains-the-get-message-for-the-bill-or-rights"><a class="markdownIt-Anchor" href="#31-how-many-http-get-request-messages-did-your-browser-send-which-packet-number-in-the-trace-contains-the-get-message-for-the-bill-or-rights"></a> 3.1 How many HTTP GET request messages did your browser send?  Which packet number in the trace contains the GET message for the Bill or Rights?</h3><p>图上显示是三条，但是第一条是有道的get请求？？那应该是1条吧。中间那条是有信息的，是128.119.245.12发出来的。不知道数据包号是什么，答案给的是8。</p><h3 id="32-which-packet-number-in-the-trace-contains-the-status-code-and-phrase-associated-with-the-response-to-the-http-get-request"><a class="markdownIt-Anchor" href="#32-which-packet-number-in-the-trace-contains-the-status-code-and-phrase-associated-with-the-response-to-the-http-get-request"></a> 3.2 Which packet number in the trace contains the status code and phrase associated with the response to the HTTP GET request?</h3><p>就是与上一问那条get请求相对应的返回请求。答案给的是10。</p><h3 id="33-what-is-the-status-code-and-phrase-in-the-response"><a class="markdownIt-Anchor" href="#33-what-is-the-status-code-and-phrase-in-the-response"></a> 3.3 What is the status code and phrase in the response?</h3><p>Status Code: 200；Response Phrase: OK。</p><h3 id="34-how-many-data-containing-tcp-segments-were-needed-to-carry-the-single-http-response-and-the-text-of-the-bill-of-rights"><a class="markdownIt-Anchor" href="#34-how-many-data-containing-tcp-segments-were-needed-to-carry-the-single-http-response-and-the-text-of-the-bill-of-rights"></a> 3.4 How many data-containing TCP segments were needed to carry the single HTTP response and the text of the Bill of Rights?</h3><p>没看明白，答案给的三个，分别是10、11、13。</p><h2 id="4-html-documents-with-embedded-objects"><a class="markdownIt-Anchor" href="#4-html-documents-with-embedded-objects"></a> 4. HTML Documents with Embedded Objects</h2><p><img src="/img/wireshark-lab/2.4.png" alt="图为wireshark界面" /></p><h3 id="41-how-many-http-get-request-messages-did-your-browser-send-to-which-internet-addresses-were-these-get-requests-sent"><a class="markdownIt-Anchor" href="#41-how-many-http-get-request-messages-did-your-browser-send-to-which-internet-addresses-were-these-get-requests-sent"></a> 4.1 How many HTTP GET request messages did your browser send?  To which Internet addresses were these GET requests sent?</h3><p>从图上看是3条，但是不知为何有两条处于OK状态，这三条应该是一条文字，两条图片。发送给了128.119.245.12和178.79.137.164。</p><h3 id="42-can-you-tell-whether-your-browser-downloaded-the-two-images-serially-or-whether-they-were-downloaded-from-the-two-web-sites-in-parallel-explain"><a class="markdownIt-Anchor" href="#42-can-you-tell-whether-your-browser-downloaded-the-two-images-serially-or-whether-they-were-downloaded-from-the-two-web-sites-in-parallel-explain"></a> 4.2 Can you tell whether your browser downloaded the two images serially, or whether they were downloaded from the two web sites in parallel?  Explain.</h3><p>应该是连续的而不是同时，这样能够提升响应速度。</p><h2 id="5-http-authentication"><a class="markdownIt-Anchor" href="#5-http-authentication"></a> 5.  HTTP Authentication</h2><p><img src="/img/wireshark-lab/2.5.png" alt="图为wireshark界面" /></p><h3 id="51-what-is-the-servers-response-status-code-and-phrase-in-response-to-the-initial-http-get-message-from-your-browser"><a class="markdownIt-Anchor" href="#51-what-is-the-servers-response-status-code-and-phrase-in-response-to-the-initial-http-get-message-from-your-browser"></a> 5.1 What is the server’s response (status code and phrase) in response to the initial HTTP GET message from your browser?</h3><p>输入错误是状态码是401，输入正确时是200。</p><h3 id="52-when-your-browsers-sends-the-http-get-message-for-the-second-time-what-new-field-is-included-in-the-http-get-message"><a class="markdownIt-Anchor" href="#52-when-your-browsers-sends-the-http-get-message-for-the-second-time-what-new-field-is-included-in-the-http-get-message"></a> 5.2 When your browser’s sends the HTTP GET message for the second time, what new field is included in the HTTP GET message?</h3><p>多了认证Authorization和If-Modified。</p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>本章就到此结束啦。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
      <category>自顶向下方法 - Wireshark Lab</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Wireshark Lab 1：Getting Started详解</title>
    <link href="/2022/08/11/Wireshark-Lab(1)/"/>
    <url>/2022/08/11/Wireshark-Lab(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="wireshark-lab-1getting-started详解"><a class="markdownIt-Anchor" href="#wireshark-lab-1getting-started详解"></a> Wireshark Lab 1：Getting Started详解</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>在半年前其实我就已经精读过这本书的前三章了，现在想再拿起来把这本书前三章的lab做一下，毕竟实践出真知。lab的文档书上也给了链接，这里就不贴出来了。刚看了一下这第一个lab，大概就是下载下来wireshark，简单了解一下使用方法这样，那就开始吧。顺带说下，这个lab我没用虚拟机，就是在win10下操作的。</p><h2 id="实验步骤"><a class="markdownIt-Anchor" href="#实验步骤"></a> 实验步骤</h2><p>先去官网下载下来电脑对应版本的wireshark，我在安装的时候只改了安装路径，剩下的都是默认设置，其中有个npcap也需要安装。安装完启动应该为如下界面。</p><p><img src="/img/wireshark-lab/1.1.png" alt="图为wireshark启动界面" /></p><p>然后按照文档的要求，打开示例网站，然后就可以在捕获里面抓取这个包了。捕捉成功界面如下图。</p><p><img src="/img/wireshark-lab/1.2.png" alt="图为wireshark界面" /></p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>到这里就结束了，这一章是做了一个准备工作，咱们下个lab见。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
      <category>自顶向下方法 - Wireshark Lab</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git上传文件的基本方法</title>
    <link href="/2022/08/11/git/"/>
    <url>/2022/08/11/git/</url>
    
    <content type="html"><![CDATA[<h1 id="git上传文件的基本方法"><a class="markdownIt-Anchor" href="#git上传文件的基本方法"></a> git上传文件的基本方法</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>最近刚刚做了一个tiny-os，在上传github时候还是按照最简单的拖动文件做的，但是显示大于25mb的文件没法上传，而且一次只能上传最多100个文件，所以就被迫学一下git上传的命令行方法。因为我这个博客也是通过git去上传的，所以git已经关联了ssh密钥，这里就不再详述了。</p><h2 id="主要步骤"><a class="markdownIt-Anchor" href="#主要步骤"></a> 主要步骤</h2><p><strong>第一步</strong>，需要在github中新建一个存储库，这个在网页里操作。</p><p><strong>第二步</strong>，在要上传的文件夹里右键打开git bash，初始化git：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs git">git init<br></code></pre></td></tr></table></figure><p>相当于这个目录变成Git可以管理的仓库，而且是一个空的仓库（empty Git repository）。会发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件。这个目录默认是隐藏的，用 <strong>ls -ah</strong> 命令就可以看见。</p><p><strong>第三步</strong>，添加文件到仓库：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m &quot;first commit&quot;<br></code></pre></td></tr></table></figure><p>这里add后面的.指的是全部文件，如有需要可以添加指定文件。</p><p>第二行引号里的是注释，在github里会有体现。</p><p>如果是第一次提交的话，这里会提示要先配置好你在git上的用户名和邮箱，输入命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;邮箱&quot;</span> <br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;名字&quot;</span> <br></code></pre></td></tr></table></figure><p><strong>第四步</strong>，连接存储库地址：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git remote <span class="hljs-keyword">add </span><span class="hljs-keyword">origin </span>地址<br></code></pre></td></tr></table></figure><p>这里地址是一开始在github里建的存储库的url地址。</p><p><strong>第五步</strong>，上传代码：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></figure><p>大功告成。</p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>这是最基本的git方法，后续遇到报错或新功能我会再来这里更新。</p>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十五章 终章 呈现系统交互界面(下)</title>
    <link href="/2022/08/09/os(15-3)/"/>
    <url>/2022/08/09/os(15-3)/</url>
    
    <content type="html"><![CDATA[<h1 id="第十五章-终章-呈现系统交互界面下"><a class="markdownIt-Anchor" href="#第十五章-终章-呈现系统交互界面下"></a> 第十五章 终章 呈现系统交互界面(下)</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>这里15.5的时候卡了我三个多小时，原因是在sh编译时遇到了很多困难，庆幸自己没有放弃坚持了下来，要不可能后悔死。</p><h2 id="加载用户进程"><a class="markdownIt-Anchor" href="#加载用户进程"></a> 加载用户进程</h2><h3 id="userprogexech创建"><a class="markdownIt-Anchor" href="#userprogexech创建"></a> userprog/exec.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __USERPROG__EXEC_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __USERPROG__EXEC_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">segment_load</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">uint32_t</span> offset, <span class="hljs-type">uint32_t</span> filesz, <span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int32_t</span> <span class="hljs-title function_">load</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname)</span>;<br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_execv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* path, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* argv[])</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="userprogexecc创建"><a class="markdownIt-Anchor" href="#userprogexecc创建"></a> userprog/exec.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;exec.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span>    </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">intr_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">uint32_t</span> Elf32_Word, Elf32_Addr, Elf32_Off;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">uint16_t</span> Elf32_Half;<br><br><span class="hljs-comment">/* 32位elf头 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Elf32_Ehdr</span> &#123;</span><br>   <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> e_ident[<span class="hljs-number">16</span>];<br>   Elf32_Half    e_type;<br>   Elf32_Half    e_machine;<br>   Elf32_Word    e_version;<br>   Elf32_Addr    e_entry;<br>   Elf32_Off     e_phoff;<br>   Elf32_Off     e_shoff;<br>   Elf32_Word    e_flags;<br>   Elf32_Half    e_ehsize;<br>   Elf32_Half    e_phentsize;<br>   Elf32_Half    e_phnum;<br>   Elf32_Half    e_shentsize;<br>   Elf32_Half    e_shnum;<br>   Elf32_Half    e_shstrndx;<br>&#125;;<br><br><span class="hljs-comment">/* 程序头表Program header.就是段描述头 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Elf32_Phdr</span> &#123;</span><br>   Elf32_Word p_type; <span class="hljs-comment">// 见下面的enum segment_type</span><br>   Elf32_Off  p_offset;<br>   Elf32_Addr p_vaddr;<br>   Elf32_Addr p_paddr;<br>   Elf32_Word p_filesz;<br>   Elf32_Word p_memsz;<br>   Elf32_Word p_flags;<br>   Elf32_Word p_align;<br>&#125;;<br><br><span class="hljs-comment">/* 段类型 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">segment_type</span> &#123;</span><br>   PT_NULL,            <span class="hljs-comment">// 忽略</span><br>   PT_LOAD,            <span class="hljs-comment">// 可加载程序段</span><br>   PT_DYNAMIC,         <span class="hljs-comment">// 动态加载信息 </span><br>   PT_INTERP,          <span class="hljs-comment">// 动态加载器名称</span><br>   PT_NOTE,            <span class="hljs-comment">// 一些辅助信息</span><br>   PT_SHLIB,           <span class="hljs-comment">// 保留</span><br>   PT_PHDR             <span class="hljs-comment">// 程序头表</span><br>&#125;;<br><br><br><span class="hljs-comment">/* 将文件描述符fd指向的文件中,偏移为offset,大小为filesz的段加载到虚拟地址为vaddr的内存 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">segment_load</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">uint32_t</span> offset, <span class="hljs-type">uint32_t</span> filesz, <span class="hljs-type">uint32_t</span> vaddr)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> vaddr_first_page = vaddr &amp; <span class="hljs-number">0xfffff000</span>;    <span class="hljs-comment">// vaddr地址所在的页框</span><br>   <span class="hljs-type">uint32_t</span> size_in_first_page = PG_SIZE - (vaddr &amp; <span class="hljs-number">0x00000fff</span>);     <span class="hljs-comment">// 加载到内存后,文件在第一个页框中占用的字节大小</span><br>   <span class="hljs-type">uint32_t</span> occupy_pages = <span class="hljs-number">0</span>;<br>   <span class="hljs-comment">/* 若一个页框容不下该段 */</span><br>   <span class="hljs-keyword">if</span> (filesz &gt; size_in_first_page) &#123;<br>      <span class="hljs-type">uint32_t</span> left_size = filesz - size_in_first_page;<br>      occupy_pages = DIV_ROUND_UP(left_size, PG_SIZE) + <span class="hljs-number">1</span>;     <span class="hljs-comment">// 1是指vaddr_first_page</span><br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      occupy_pages = <span class="hljs-number">1</span>;<br>   &#125;<br><br>   <span class="hljs-comment">/* 为进程分配内存 */</span><br>   <span class="hljs-type">uint32_t</span> page_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">uint32_t</span> vaddr_page = vaddr_first_page;<br>   <span class="hljs-keyword">while</span> (page_idx &lt; occupy_pages) &#123;<br>      <span class="hljs-type">uint32_t</span>* pde = pde_ptr(vaddr_page);<br>      <span class="hljs-type">uint32_t</span>* pte = pte_ptr(vaddr_page);<br><br>      <span class="hljs-comment">/* 如果pde不存在,或者pte不存在就分配内存.</span><br><span class="hljs-comment">       * pde的判断要在pte之前,否则pde若不存在会导致</span><br><span class="hljs-comment">       * 判断pte时缺页异常 */</span><br>      <span class="hljs-keyword">if</span> (!(*pde &amp; <span class="hljs-number">0x00000001</span>) || !(*pte &amp; <span class="hljs-number">0x00000001</span>)) &#123;<br> <span class="hljs-keyword">if</span> (get_a_page(PF_USER, vaddr_page) == <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> &#125;<br>      &#125; <span class="hljs-comment">// 如果原进程的页表已经分配了,利用现有的物理页,直接覆盖进程体</span><br>      vaddr_page += PG_SIZE;<br>      page_idx++;<br>   &#125;<br>   sys_lseek(fd, offset, SEEK_SET);<br>   sys_read(fd, (<span class="hljs-type">void</span>*)vaddr, filesz);<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/* 从文件系统上加载用户程序pathname,成功则返回程序的起始地址,否则返回-1 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int32_t</span> <span class="hljs-title function_">load</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname)</span> &#123;<br>   <span class="hljs-type">int32_t</span> ret = <span class="hljs-number">-1</span>;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Elf32_Ehdr</span> <span class="hljs-title">elf_header</span>;</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Elf32_Phdr</span> <span class="hljs-title">prog_header</span>;</span><br>   <span class="hljs-built_in">memset</span>(&amp;elf_header, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Elf32_Ehdr));<br><br>   <span class="hljs-type">int32_t</span> fd = sys_open(pathname, O_RDONLY);<br>   <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">if</span> (sys_read(fd, &amp;elf_header, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Elf32_Ehdr)) != <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Elf32_Ehdr)) &#123;<br>      ret = <span class="hljs-number">-1</span>;<br>      <span class="hljs-keyword">goto</span> done;<br>   &#125;<br><br>   <span class="hljs-comment">/* 校验elf头 */</span><br>   <span class="hljs-keyword">if</span> (<span class="hljs-built_in">memcmp</span>(elf_header.e_ident, <span class="hljs-string">&quot;\177ELF\1\1\1&quot;</span>, <span class="hljs-number">7</span>) \<br>      || elf_header.e_type != <span class="hljs-number">2</span> \<br>      || elf_header.e_machine != <span class="hljs-number">3</span> \<br>      || elf_header.e_version != <span class="hljs-number">1</span> \<br>      || elf_header.e_phnum &gt; <span class="hljs-number">1024</span> \<br>      || elf_header.e_phentsize != <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Elf32_Phdr)) &#123;<br>      ret = <span class="hljs-number">-1</span>;<br>      <span class="hljs-keyword">goto</span> done;<br>   &#125;<br><br>   Elf32_Off prog_header_offset = elf_header.e_phoff; <br>   Elf32_Half prog_header_size = elf_header.e_phentsize;<br><br>   <span class="hljs-comment">/* 遍历所有程序头 */</span><br>   <span class="hljs-type">uint32_t</span> prog_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (prog_idx &lt; elf_header.e_phnum) &#123;<br>      <span class="hljs-built_in">memset</span>(&amp;prog_header, <span class="hljs-number">0</span>, prog_header_size);<br>      <br>      <span class="hljs-comment">/* 将文件的指针定位到程序头 */</span><br>      sys_lseek(fd, prog_header_offset, SEEK_SET);<br><br>     <span class="hljs-comment">/* 只获取程序头 */</span><br>      <span class="hljs-keyword">if</span> (sys_read(fd, &amp;prog_header, prog_header_size) != prog_header_size) &#123;<br> ret = <span class="hljs-number">-1</span>;<br> <span class="hljs-keyword">goto</span> done;<br>      &#125;<br><br>      <span class="hljs-comment">/* 如果是可加载段就调用segment_load加载到内存 */</span><br>      <span class="hljs-keyword">if</span> (PT_LOAD == prog_header.p_type) &#123;<br> <span class="hljs-keyword">if</span> (!segment_load(fd, prog_header.p_offset, prog_header.p_filesz, prog_header.p_vaddr)) &#123;<br>    ret = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">goto</span> done;<br> &#125;<br>      &#125;<br><br>      <span class="hljs-comment">/* 更新下一个程序头的偏移 */</span><br>      prog_header_offset += elf_header.e_phentsize;<br>      prog_idx++;<br>   &#125;<br>   ret = elf_header.e_entry;<br>done:<br>   sys_close(fd);<br>   <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">/* 用path指向的程序替换当前进程 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_execv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* path, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* argv[])</span> &#123;<br>   <span class="hljs-type">uint32_t</span> argc = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (argv[argc]) &#123;<br>      argc++;<br>   &#125;<br>   <span class="hljs-type">int32_t</span> entry_point = load(path);     <br>   <span class="hljs-keyword">if</span> (entry_point == <span class="hljs-number">-1</span>) &#123; <span class="hljs-comment">// 若加载失败则返回-1</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   <br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();<br>   <span class="hljs-comment">/* 修改进程名 */</span><br>   <span class="hljs-built_in">memcpy</span>(cur-&gt;name, path, TASK_NAME_LEN);<br><br>   <span class="hljs-comment">/* 修改栈中参数 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">intr_stack</span>* <span class="hljs-title">intr_0_stack</span> =</span> (<span class="hljs-keyword">struct</span> intr_stack*)((<span class="hljs-type">uint32_t</span>)cur + PG_SIZE - <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> intr_stack));<br>   <span class="hljs-comment">/* 参数传递给用户进程 */</span><br>   intr_0_stack-&gt;ebx = (<span class="hljs-type">int32_t</span>)argv;<br>   intr_0_stack-&gt;ecx = argc;<br>   intr_0_stack-&gt;eip = (<span class="hljs-type">void</span>*)entry_point;<br>   <span class="hljs-comment">/* 使新用户进程的栈地址为最高用户空间地址 */</span><br>   intr_0_stack-&gt;esp = (<span class="hljs-type">void</span>*)<span class="hljs-number">0xc0000000</span>;<br><br>   <span class="hljs-comment">/* exec不同于fork,为使新进程更快被执行,直接从中断返回 */</span><br>   <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;movl %0, %%esp; jmp intr_exit&quot;</span> : : <span class="hljs-string">&quot;g&quot;</span> (intr_0_stack) : <span class="hljs-string">&quot;memory&quot;</span>)</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="commandprog_no_argc创建"><a class="markdownIt-Anchor" href="#commandprog_no_argc创建"></a> command/prog_no_arg.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prog_no_arg from disk\n&quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="commandcompilesh创建"><a class="markdownIt-Anchor" href="#commandcompilesh创建"></a> command/compile.sh创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c">####  此脚本应该在command目录下执行<br><br><span class="hljs-keyword">if</span> [[ ! -d <span class="hljs-string">&quot;../lib&quot;</span> || ! -d <span class="hljs-string">&quot;../build&quot;</span> ]];then<br>   echo <span class="hljs-string">&quot;dependent dir don\`t exist!&quot;</span><br>   cwd=$(pwd)<br>   cwd=$&#123;cwd##*/&#125;<br>   cwd=$&#123;cwd%/&#125;<br>   <span class="hljs-keyword">if</span> [[ $cwd != <span class="hljs-string">&quot;command&quot;</span> ]];then<br>      echo -e <span class="hljs-string">&quot;you\`d better in command dir\n&quot;</span><br>   fi <br>   <span class="hljs-built_in">exit</span><br>fi<br><br>BIN=<span class="hljs-string">&quot;prog_no_arg&quot;</span><br>CFLAGS=<span class="hljs-string">&quot;-Wall -c -fno-builtin -W -Wstrict-prototypes \</span><br><span class="hljs-string">      -Wmissing-prototypes -Wsystem-headers&quot;</span><br>### LIB= <span class="hljs-string">&quot;../lib&quot;</span><br>OBJS=<span class="hljs-string">&quot;../build/string.o ../build/syscall.o \</span><br><span class="hljs-string">      ../build/stdio.o ../build/assert.o&quot;</span><br>DD_IN=$BIN<br>DD_OUT=<span class="hljs-string">&quot;/home/podest/bochs/hd60M.img&quot;</span> <br><br><br>gcc -m32 $CFLAGS -I <span class="hljs-string">&quot;../lib&quot;</span> -o $BIN<span class="hljs-string">&quot;.o&quot;</span> $BIN<span class="hljs-string">&quot;.c&quot;</span><br>ld -m elf_i386 -e main $BIN<span class="hljs-string">&quot;.o&quot;</span> $OBJS -o $BIN<br>SEC_CNT=$(ls -l $BIN|awk <span class="hljs-string">&#x27;&#123;printf(&quot;%d&quot;, ($5+511)/512)&#125;&#x27;</span>)<br><br><span class="hljs-keyword">if</span> [[ -f $BIN ]];then<br>   dd <span class="hljs-keyword">if</span>=./$DD_IN of=$DD_OUT bs=<span class="hljs-number">512</span> \<br>   count=$SEC_CNT seek=<span class="hljs-number">300</span> conv=notrunc<br>fi<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改"><a class="markdownIt-Anchor" href="#kernelmainc修改"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../shell/shell.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br>   intr_enable();<br><span class="hljs-comment">/*************    写入应用程序    *************/</span><br>   <span class="hljs-type">uint32_t</span> file_size = <span class="hljs-number">4777</span>;<br>   <span class="hljs-type">uint32_t</span> sec_cnt = DIV_ROUND_UP(file_size, <span class="hljs-number">512</span>);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">sda</span> =</span> &amp;channels[<span class="hljs-number">0</span>].devices[<span class="hljs-number">0</span>];<br>   <span class="hljs-type">void</span>* prog_buf = sys_malloc(file_size);<br>   ide_read(sda, <span class="hljs-number">300</span>, prog_buf, sec_cnt);<br>   <span class="hljs-type">int32_t</span> fd = sys_open(<span class="hljs-string">&quot;/prog_no_arg&quot;</span>, O_CREAT|O_RDWR);<br>   <span class="hljs-keyword">if</span> (fd != <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-keyword">if</span>(sys_write(fd, prog_buf, file_size) == <span class="hljs-number">-1</span>) &#123;<br>      printk(<span class="hljs-string">&quot;file write error!\n&quot;</span>);<br>      <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>      &#125;<br>   &#125;<br><span class="hljs-comment">/*************    写入应用程序结束   *************/</span><br>   cls_screen();<br>   console_put_str(<span class="hljs-string">&quot;[rabbit@localhost /]$ &quot;</span>);<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* init进程 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> ret_pid = fork();<br>   <span class="hljs-keyword">if</span>(ret_pid) &#123;  <span class="hljs-comment">// 父进程</span><br>      <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 子进程</span><br>      my_shell();<br>   &#125;<br>   PANIC(<span class="hljs-string">&quot;init: should not be here&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="shell脚本编译成功"><a class="markdownIt-Anchor" href="#shell脚本编译成功"></a> shell脚本编译成功</h3><p><img src="/img/os/os15.6.png" alt="图为命令行运行界面" /></p><h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h3><p><img src="/img/os/os15.7.png" alt="图为bochs运行界面" /></p><h3 id="commandstarts创建"><a class="markdownIt-Anchor" href="#commandstarts创建"></a> command/start.S创建</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">[bits <span class="hljs-number">32</span>]<br>extern main<br>extern <span class="hljs-keyword">exit</span> <br>section .text<br>global _start<br>_start:<br>   ;下面这两个要和execv中load之后指定的寄存器一致<br>   push ebx  ;压入argv<br>   push  ecx  ;压入argc<br>   call  main<br></code></pre></td></tr></table></figure><h3 id="commandprog_argc创建"><a class="markdownIt-Anchor" href="#commandprog_argc创建"></a> command/prog_arg.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/string.h&quot;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span>&#123;<br><span class="hljs-type">int</span> arg_idx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(arg_idx &lt; argc)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argv[%d] is %s\n&quot;</span>, arg_idx, argv[arg_idx]);<br>arg_idx++;<br>&#125;<br><span class="hljs-type">int</span> pid = fork();<br><span class="hljs-keyword">if</span> (pid)&#123;<br><span class="hljs-type">int</span> delay = <span class="hljs-number">900000</span>;<br><span class="hljs-keyword">while</span>(delay--);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n      i&#x27;m father prog, my pid%d,i will show process list\n&quot;</span>, getpid());<br>ps();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-type">char</span> abs_path[<span class="hljs-number">512</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n    i&#x27;m chhild prog, my pid: %d, i will exec %s right now\n&quot;</span>, getpid(), argv[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">if</span> (argv[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>getcwd(abs_path, <span class="hljs-number">512</span>);<br><span class="hljs-built_in">strcat</span>(abs_path, <span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-built_in">strcat</span>(abs_path, argv[<span class="hljs-number">1</span>]);<br>execv(abs_path, argv);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>execv(argv[<span class="hljs-number">1</span>], argv);<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="commandcompile2sh创建"><a class="markdownIt-Anchor" href="#commandcompile2sh创建"></a> command/compile2.sh创建</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">####  此脚本应该在command目录下执行</span><br><br><span class="hljs-keyword">if</span> [[ ! -d <span class="hljs-string">&quot;../lib&quot;</span> || ! -d <span class="hljs-string">&quot;../build&quot;</span> ]];then<br>   echo <span class="hljs-string">&quot;dependent dir don\`t exist!&quot;</span><br>   <span class="hljs-attribute">cwd</span>=$(pwd)<br>   <span class="hljs-attribute">cwd</span>=<span class="hljs-variable">$&#123;cwd##*/&#125;</span><br>   <span class="hljs-attribute">cwd</span>=<span class="hljs-variable">$&#123;cwd%/&#125;</span><br>   <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$cwd</span> != <span class="hljs-string">&quot;command&quot;</span> ]];then<br>      echo -e <span class="hljs-string">&quot;you\`d better in command dir\n&quot;</span><br>   fi <br>   exit<br>fi<br><br><span class="hljs-attribute">BIN</span>=<span class="hljs-string">&quot;prog_arg&quot;</span><br><span class="hljs-attribute">CFLAGS</span>=<span class="hljs-string">&quot;-Wall -c -fno-builtin -W -Wstrict-prototypes \</span><br><span class="hljs-string">      -Wmissing-prototypes -Wsystem-headers&quot;</span><br><span class="hljs-comment">#LIBS= &quot;-I ../lib -I ../lib/user -I ../fs&quot;</span><br><span class="hljs-attribute">OBJS</span>=<span class="hljs-string">&quot;../build/string.o ../build/syscall.o \</span><br><span class="hljs-string">      ../build/stdio.o ../build/assert.o start.o&quot;</span><br><span class="hljs-attribute">DD_IN</span>=<span class="hljs-variable">$BIN</span><br><span class="hljs-attribute">DD_OUT</span>=<span class="hljs-string">&quot;/home/podest/bochs/Seven.img&quot;</span> <br><br>nasm -f elf ./start.S -o ./start.o<br>ar rcs simple_crt.a <span class="hljs-variable">$OBJS</span> start.o<br><br>gcc -m32 <span class="hljs-variable">$CFLAGS</span> -I <span class="hljs-string">&quot;../lib/&quot;</span> -I <span class="hljs-string">&quot;../lib/kernel/&quot;</span> -I <span class="hljs-string">&quot;../lib/user/&quot;</span> -I <span class="hljs-string">&quot;../kernel/&quot;</span> -I <span class="hljs-string">&quot;../device/&quot;</span>  -I <span class="hljs-string">&quot;../thread/&quot;</span> -I <span class="hljs-string">&quot;../userprog/&quot;</span> -I <span class="hljs-string">&quot;../fs/&quot;</span> -I <span class="hljs-string">&quot;../shell/&quot;</span>  -o  <span class="hljs-variable">$BIN</span><span class="hljs-string">&quot;.o&quot;</span> <span class="hljs-variable">$BIN</span><span class="hljs-string">&quot;.c&quot;</span><br>ld -m elf_i386  <span class="hljs-variable">$BIN</span><span class="hljs-string">&quot;.o&quot;</span> simple_crt.a -o <span class="hljs-variable">$BIN</span><br><span class="hljs-attribute">SEC_CNT</span>=$(ls -l <span class="hljs-variable">$BIN</span>|awk <span class="hljs-string">&#x27;&#123;printf(&quot;%d&quot;, ($5+511)/512)&#125;&#x27;</span>)<br><br><span class="hljs-keyword">if</span> [[ -f <span class="hljs-variable">$BIN</span> ]];then<br>   dd <span class="hljs-attribute">if</span>=./$DD_IN <span class="hljs-attribute">of</span>=<span class="hljs-variable">$DD_OUT</span> <span class="hljs-attribute">bs</span>=512 \<br>   <span class="hljs-attribute">count</span>=<span class="hljs-variable">$SEC_CNT</span> <span class="hljs-attribute">seek</span>=300 <span class="hljs-attribute">conv</span>=notrunc<br>fi<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-2"><a class="markdownIt-Anchor" href="#kernelmainc修改-2"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../shell/shell.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br>   intr_enable();<br><br><br><span class="hljs-comment">/*************    写入应用程序    *************/</span><br>   <span class="hljs-type">uint32_t</span> file_size = <span class="hljs-number">5329</span>; <br>   <span class="hljs-type">uint32_t</span> sec_cnt = DIV_ROUND_UP(file_size, <span class="hljs-number">512</span>);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">sda</span> =</span> &amp;channels[<span class="hljs-number">0</span>].devices[<span class="hljs-number">0</span>];<br>   <span class="hljs-type">void</span>* prog_buf = sys_malloc(file_size);<br>   ide_read(sda, <span class="hljs-number">300</span>, prog_buf, sec_cnt);<br>   <span class="hljs-type">int32_t</span> fd = sys_open(<span class="hljs-string">&quot;/prog_arg&quot;</span>, O_CREAT|O_RDWR);<br>   <span class="hljs-keyword">if</span> (fd != <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-keyword">if</span>(sys_write(fd, prog_buf, file_size) == <span class="hljs-number">-1</span>) &#123;<br>         printk(<span class="hljs-string">&quot;file write error!\n&quot;</span>);<br>         <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>      &#125;<br>   &#125;<br><span class="hljs-comment">/*************    写入应用程序结束   *************/</span><br>   cls_screen();<br>   console_put_str(<span class="hljs-string">&quot;[rabbit@localhost /]$ &quot;</span>);<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* init进程 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> ret_pid = fork();<br>   <span class="hljs-keyword">if</span>(ret_pid) &#123;  <span class="hljs-comment">// 父进程</span><br>      <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 子进程</span><br>      my_shell();<br>   &#125;<br>   PANIC(<span class="hljs-string">&quot;init: should not be here&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-2"><a class="markdownIt-Anchor" href="#运行结果-2"></a> 运行结果</h3><p><img src="/img/os/os15.8.png" alt="图为bochs运行界面" /></p><h2 id="实现系统调用wait和exit"><a class="markdownIt-Anchor" href="#实现系统调用wait和exit"></a> 实现系统调用wait和exit</h2><h3 id="threadthreadh修改"><a class="markdownIt-Anchor" href="#threadthreadh修改"></a> thread/thread.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 进程或线程的pcb,程序控制块 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint32_t</span>* self_kstack; <span class="hljs-comment">// 各内核线程都用自己的内核栈</span><br>   <span class="hljs-type">pid_t</span> pid;<br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> <span class="hljs-title">status</span>;</span><br>   <span class="hljs-type">char</span> name[TASK_NAME_LEN];<br>   <span class="hljs-type">uint8_t</span> priority;<br>   <span class="hljs-type">uint8_t</span> ticks;   <span class="hljs-comment">// 每次在处理器上执行的时间嘀嗒数</span><br><span class="hljs-comment">/* 此任务自上cpu运行后至今占用了多少cpu嘀嗒数,</span><br><span class="hljs-comment"> * 也就是此任务执行了多久*/</span><br>   <span class="hljs-type">uint32_t</span> elapsed_ticks;<br><span class="hljs-comment">/* general_tag的作用是用于线程在一般的队列中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">general_tag</span>;</span>    <br><span class="hljs-comment">/* all_list_tag的作用是用于线程队列thread_all_list中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">all_list_tag</span>;</span><br>   <span class="hljs-type">uint32_t</span>* pgdir;              <span class="hljs-comment">// 进程自己页表的虚拟地址</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> <span class="hljs-title">userprog_vaddr</span>;</span>   <span class="hljs-comment">// 用户进程的虚拟地址 </span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block_desc</span> <span class="hljs-title">u_block_desc</span>[<span class="hljs-title">DESC_CNT</span>];</span>   <span class="hljs-comment">// 用户进程内存块描述符</span><br>   <span class="hljs-type">int8_t</span> exit_status;<br>   <span class="hljs-type">uint32_t</span> stack_magic; <span class="hljs-comment">// 用这串数字做栈的边界标记,用于检测栈的溢出</span><br>   <span class="hljs-type">int32_t</span> fd_table[MAX_FILES_OPEN_PER_PROC];<span class="hljs-comment">// 已打开文件数组</span><br>   <span class="hljs-type">uint32_t</span> cwd_inode_nr;<span class="hljs-comment">//进程所在工作目录inode的编号</span><br>   <span class="hljs-type">int16_t</span> parent_pid;     <span class="hljs-comment">// 父进程的pid</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="kernelmemoryc新增"><a class="markdownIt-Anchor" href="#kernelmemoryc新增"></a> kernel/memory.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 根据物理页框地址pg_phy_addr在相应的内存池的位图清0,不改动页表*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">free_a_phy_page</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_phy_addr)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span>* <span class="hljs-title">mem_pool</span>;</span><br>   <span class="hljs-type">uint32_t</span> bit_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">if</span> (pg_phy_addr &gt;= user_pool.phy_addr_start) &#123;<br>      mem_pool = &amp;user_pool;<br>      bit_idx = (pg_phy_addr - user_pool.phy_addr_start) / PG_SIZE;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      mem_pool = &amp;kernel_pool;<br>      bit_idx = (pg_phy_addr - kernel_pool.phy_addr_start) / PG_SIZE;<br>   &#125;<br>   bitmap_set(&amp;mem_pool-&gt;pool_bitmap, bit_idx, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="threadthreadc新增修改"><a class="markdownIt-Anchor" href="#threadthreadc新增修改"></a> thread/thread.c新增+修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* pid的位图,最大支持1024个pid */</span><br><span class="hljs-type">uint8_t</span> pid_bitmap_bits[<span class="hljs-number">128</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">/* pid池 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid_pool</span> &#123;</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bitmap</span> <span class="hljs-title">pid_bitmap</span>;</span>  <span class="hljs-comment">// pid位图</span><br>   <span class="hljs-type">uint32_t</span> pid_start;      <span class="hljs-comment">// 起始pid</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lock</span> <span class="hljs-title">pid_lock</span>;</span>      <span class="hljs-comment">// 分配pid锁</span><br>&#125;pid_pool;<br><br><span class="hljs-comment">/* 初始化pid池 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">pid_pool_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123; <br>   pid_pool.pid_start = <span class="hljs-number">1</span>;<br>   pid_pool.pid_bitmap.bits = pid_bitmap_bits;<br>   pid_pool.pid_bitmap.btmp_bytes_len = <span class="hljs-number">128</span>;<br>   bitmap_init(&amp;pid_pool.pid_bitmap);<br>   lock_init(&amp;pid_pool.pid_lock);<br>&#125;<br><br><br><span class="hljs-comment">/* 分配pid */</span><br><span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> <span class="hljs-title function_">allocate_pid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   lock_acquire(&amp;pid_pool.pid_lock);<br>   <span class="hljs-type">int32_t</span> bit_idx = bitmap_scan(&amp;pid_pool.pid_bitmap, <span class="hljs-number">1</span>);<br>   bitmap_set(&amp;pid_pool.pid_bitmap, bit_idx, <span class="hljs-number">1</span>);<br>   lock_release(&amp;pid_pool.pid_lock);<br>   <span class="hljs-keyword">return</span> (bit_idx + pid_pool.pid_start);<br>&#125;<br><br><br><span class="hljs-comment">/* 释放pid */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">release_pid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid)</span> &#123;<br>   lock_acquire(&amp;pid_pool.pid_lock);<br>   <span class="hljs-type">int32_t</span> bit_idx = pid - pid_pool.pid_start;<br>   bitmap_set(&amp;pid_pool.pid_bitmap, bit_idx, <span class="hljs-number">0</span>);<br>   lock_release(&amp;pid_pool.pid_lock);<br>&#125;<br><br><br><span class="hljs-comment">/* 回收thread_over的pcb和页表,并将其从调度队列中去除 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_exit</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* thread_over, <span class="hljs-type">bool</span> need_schedule)</span> &#123;<br>   <span class="hljs-comment">/* 要保证schedule在关中断情况下调用 */</span><br>   intr_disable();<br>   thread_over-&gt;status = TASK_DIED;<br><br>   <span class="hljs-comment">/* 如果thread_over不是当前线程,就有可能还在就绪队列中,将其从中删除 */</span><br>   <span class="hljs-keyword">if</span> (elem_find(&amp;thread_ready_list, &amp;thread_over-&gt;general_tag)) &#123;<br>      list_remove(&amp;thread_over-&gt;general_tag);<br>   &#125;<br>   <span class="hljs-keyword">if</span> (thread_over-&gt;pgdir) &#123;     <span class="hljs-comment">// 如是进程,回收进程的页表</span><br>      mfree_page(PF_KERNEL, thread_over-&gt;pgdir, <span class="hljs-number">1</span>);<br>   &#125;<br><br>   <span class="hljs-comment">/* 从all_thread_list中去掉此任务 */</span><br>   list_remove(&amp;thread_over-&gt;all_list_tag);<br>   <br>   <span class="hljs-comment">/* 回收pcb所在的页,主线程的pcb不在堆中,跨过 */</span><br>   <span class="hljs-keyword">if</span> (thread_over != main_thread) &#123;<br>      mfree_page(PF_KERNEL, thread_over, <span class="hljs-number">1</span>);<br>   &#125;<br><br>   <span class="hljs-comment">/* 归还pid */</span><br>   release_pid(thread_over-&gt;pid);<br><br>   <span class="hljs-comment">/* 如果需要下一轮调度则主动调用schedule */</span><br>   <span class="hljs-keyword">if</span> (need_schedule) &#123;<br>      schedule();<br>      PANIC(<span class="hljs-string">&quot;thread_exit: should not be here\n&quot;</span>);<br>   &#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 比对任务的pid */</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">pid_check</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* pelem, <span class="hljs-type">int32_t</span> pid)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">pthread</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> task_struct, all_list_tag, pelem);<br>   <span class="hljs-keyword">if</span> (pthread-&gt;pid == pid) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* 根据pid找pcb,若找到则返回该pcb,否则返回NULL */</span><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">pid2thread</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> pid)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">pelem</span> =</span> list_traversal(&amp;thread_all_list, pid_check, pid);<br>   <span class="hljs-keyword">if</span> (pelem == <span class="hljs-literal">NULL</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>   &#125;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">thread</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> task_struct, all_list_tag, pelem);<br>   <span class="hljs-keyword">return</span> thread;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="userprogwait_exith创建"><a class="markdownIt-Anchor" href="#userprogwait_exith创建"></a> userprog/wait_exit.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __USERPROG_WAITEXIT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __USERPROG_WAITEXIT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">sys_wait</span><span class="hljs-params">(<span class="hljs-type">int32_t</span>* status)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sys_exit</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> status)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="userprogwait_exitc创建"><a class="markdownIt-Anchor" href="#userprogwait_exitc创建"></a> userprog/wait_exit.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;wait_exit.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><br><span class="hljs-comment">/* 释放用户进程资源: </span><br><span class="hljs-comment"> * 1 页表中对应的物理页</span><br><span class="hljs-comment"> * 2 虚拟内存池占物理页框</span><br><span class="hljs-comment"> * 3 关闭打开的文件 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">release_prog_resource</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* release_thread)</span> &#123;<br>   <span class="hljs-type">uint32_t</span>* pgdir_vaddr = release_thread-&gt;pgdir;<br>   <span class="hljs-type">uint16_t</span> user_pde_nr = <span class="hljs-number">768</span>, pde_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">uint32_t</span> pde = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">uint32_t</span>* v_pde_ptr = <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">// v表示var,和函数pde_ptr区分</span><br><br>   <span class="hljs-type">uint16_t</span> user_pte_nr = <span class="hljs-number">1024</span>, pte_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">uint32_t</span> pte = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">uint32_t</span>* v_pte_ptr = <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">// 加个v表示var,和函数pte_ptr区分</span><br><br>   <span class="hljs-type">uint32_t</span>* first_pte_vaddr_in_pde = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">// 用来记录pde中第0个pte的地址</span><br>   <span class="hljs-type">uint32_t</span> pg_phy_addr = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">/* 回收页表中用户空间的页框 */</span><br>   <span class="hljs-keyword">while</span> (pde_idx &lt; user_pde_nr) &#123;<br>      v_pde_ptr = pgdir_vaddr + pde_idx;<br>      pde = *v_pde_ptr;<br>      <span class="hljs-keyword">if</span> (pde &amp; <span class="hljs-number">0x00000001</span>) &#123;   <span class="hljs-comment">// 如果页目录项p位为1,表示该页目录项下可能有页表项</span><br> first_pte_vaddr_in_pde = pte_ptr(pde_idx * <span class="hljs-number">0x400000</span>);  <span class="hljs-comment">// 一个页表表示的内存容量是4M,即0x400000</span><br> pte_idx = <span class="hljs-number">0</span>;<br> <span class="hljs-keyword">while</span> (pte_idx &lt; user_pte_nr) &#123;<br>    v_pte_ptr = first_pte_vaddr_in_pde + pte_idx;<br>    pte = *v_pte_ptr;<br>    <span class="hljs-keyword">if</span> (pte &amp; <span class="hljs-number">0x00000001</span>) &#123;<br>       <span class="hljs-comment">/* 将pte中记录的物理页框直接在相应内存池的位图中清0 */</span><br>       pg_phy_addr = pte &amp; <span class="hljs-number">0xfffff000</span>;<br>       free_a_phy_page(pg_phy_addr);<br>    &#125;<br>    pte_idx++;<br> &#125;<br> <span class="hljs-comment">/* 将pde中记录的物理页框直接在相应内存池的位图中清0 */</span><br> pg_phy_addr = pde &amp; <span class="hljs-number">0xfffff000</span>;<br> free_a_phy_page(pg_phy_addr);<br>      &#125;<br>      pde_idx++;<br>   &#125;<br><br>   <span class="hljs-comment">/* 回收用户虚拟地址池所占的物理内存*/</span><br>   <span class="hljs-type">uint32_t</span> bitmap_pg_cnt = (release_thread-&gt;userprog_vaddr.vaddr_bitmap.btmp_bytes_len) / PG_SIZE;<br>   <span class="hljs-type">uint8_t</span>* user_vaddr_pool_bitmap = release_thread-&gt;userprog_vaddr.vaddr_bitmap.bits;<br>   mfree_page(PF_KERNEL, user_vaddr_pool_bitmap, bitmap_pg_cnt);<br><br>   <span class="hljs-comment">/* 关闭进程打开的文件 */</span><br>   <span class="hljs-type">uint8_t</span> fd_idx = <span class="hljs-number">3</span>;<br>   <span class="hljs-keyword">while</span>(fd_idx &lt; MAX_FILES_OPEN_PER_PROC) &#123;<br>      <span class="hljs-keyword">if</span> (release_thread-&gt;fd_table[fd_idx] != <span class="hljs-number">-1</span>) &#123;<br> sys_close(fd_idx);<br>      &#125;<br>      fd_idx++;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/* list_traversal的回调函数,</span><br><span class="hljs-comment"> * 查找pelem的parent_pid是否是ppid,成功返回true,失败则返回false */</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">find_child</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* pelem, <span class="hljs-type">int32_t</span> ppid)</span> &#123;<br>   <span class="hljs-comment">/* elem2entry中间的参数all_list_tag取决于pelem对应的变量名 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">pthread</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> task_struct, all_list_tag, pelem);<br>   <span class="hljs-keyword">if</span> (pthread-&gt;parent_pid == ppid) &#123;     <span class="hljs-comment">// 若该任务的parent_pid为ppid,返回</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;   <span class="hljs-comment">// list_traversal只有在回调函数返回true时才会停止继续遍历,所以在此返回true</span><br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;     <span class="hljs-comment">// 让list_traversal继续传递下一个元素</span><br>&#125;<br><br><span class="hljs-comment">/* list_traversal的回调函数,</span><br><span class="hljs-comment"> * 查找状态为TASK_HANGING的任务 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">find_hanging_child</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* pelem, <span class="hljs-type">int32_t</span> ppid)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">pthread</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> task_struct, all_list_tag, pelem);<br>   <span class="hljs-keyword">if</span> (pthread-&gt;parent_pid == ppid &amp;&amp; pthread-&gt;status == TASK_HANGING) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>&#125;<br><br><span class="hljs-comment">/* list_traversal的回调函数,</span><br><span class="hljs-comment"> * 将一个子进程过继给init */</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">init_adopt_a_child</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* pelem, <span class="hljs-type">int32_t</span> pid)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">pthread</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> task_struct, all_list_tag, pelem);<br>   <span class="hljs-keyword">if</span> (pthread-&gt;parent_pid == pid) &#123;     <span class="hljs-comment">// 若该进程的parent_pid为pid,返回</span><br>      pthread-&gt;parent_pid = <span class="hljs-number">1</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">// 让list_traversal继续传递下一个元素</span><br>&#125;<br><br><span class="hljs-comment">/* 等待子进程调用exit,将子进程的退出状态保存到status指向的变量.</span><br><span class="hljs-comment"> * 成功则返回子进程的pid,失败则返回-1 */</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">sys_wait</span><span class="hljs-params">(<span class="hljs-type">int32_t</span>* status)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">parent_thread</span> =</span> running_thread();<br><br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">/* 优先处理已经是挂起状态的任务 */</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">child_elem</span> =</span> list_traversal(&amp;thread_all_list, find_hanging_child, parent_thread-&gt;pid);<br>      <span class="hljs-comment">/* 若有挂起的子进程 */</span><br>      <span class="hljs-keyword">if</span> (child_elem != <span class="hljs-literal">NULL</span>) &#123;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">child_thread</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> task_struct, all_list_tag, child_elem);<br> *status = child_thread-&gt;exit_status; <br><br> <span class="hljs-comment">/* thread_exit之后,pcb会被回收,因此提前获取pid */</span><br> <span class="hljs-type">uint16_t</span> child_pid = child_thread-&gt;pid;<br><br> <span class="hljs-comment">/* 2 从就绪队列和全部队列中删除进程表项*/</span><br> thread_exit(child_thread, <span class="hljs-literal">false</span>); <span class="hljs-comment">// 传入false,使thread_exit调用后回到此处</span><br> <span class="hljs-comment">/* 进程表项是进程或线程的最后保留的资源, 至此该进程彻底消失了 */</span><br><br> <span class="hljs-keyword">return</span> child_pid;<br>      &#125; <br><br>      <span class="hljs-comment">/* 判断是否有子进程 */</span><br>      child_elem = list_traversal(&amp;thread_all_list, find_child, parent_thread-&gt;pid);<br>      <span class="hljs-keyword">if</span> (child_elem == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">// 若没有子进程则出错返回</span><br> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">/* 若子进程还未运行完,即还未调用exit,则将自己挂起,直到子进程在执行exit时将自己唤醒 */</span><br> thread_block(TASK_WAITING); <br>      &#125;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/* 子进程用来结束自己时调用 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sys_exit</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> status)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">child_thread</span> =</span> running_thread();<br>   child_thread-&gt;exit_status = status; <br>   <span class="hljs-keyword">if</span> (child_thread-&gt;parent_pid == <span class="hljs-number">-1</span>) &#123;<br>      PANIC(<span class="hljs-string">&quot;sys_exit: child_thread-&gt;parent_pid is -1\n&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-comment">/* 将进程child_thread的所有子进程都过继给init */</span><br>   list_traversal(&amp;thread_all_list, init_adopt_a_child, child_thread-&gt;pid);<br><br>   <span class="hljs-comment">/* 回收进程child_thread的资源 */</span><br>   release_prog_resource(child_thread); <br><br>   <span class="hljs-comment">/* 如果父进程正在等待子进程退出,将父进程唤醒 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">parent_thread</span> =</span> pid2thread(child_thread-&gt;parent_pid);<br>   <span class="hljs-keyword">if</span> (parent_thread-&gt;status == TASK_WAITING) &#123;<br>      thread_unblock(parent_thread);<br>   &#125;<br><br>   <span class="hljs-comment">/* 将自己挂起,等待父进程获取其status,并回收其pcb */</span><br>   thread_block(TASK_HANGING);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="libusersyscallc新增"><a class="markdownIt-Anchor" href="#libusersyscallc新增"></a> lib/user/syscall.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">/* 以状态status退出 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> status)</span> &#123;<br>   _syscall1(SYS_EXIT, status);<br>&#125;<br><br><span class="hljs-comment">/* 等待子进程,子进程状态存储到status */</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">wait</span><span class="hljs-params">(<span class="hljs-type">int32_t</span>* status)</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall1(SYS_WAIT, status);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="libusersyscallh修改"><a class="markdownIt-Anchor" href="#libusersyscallh修改"></a> lib/user/syscall.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SYSCALL_NR</span> &#123;</span><br>   SYS_GETPID,<br>   SYS_WRITE,<br>   SYS_MALLOC,<br>   SYS_FREE,<br>   SYS_FORK,<br>   SYS_READ,<br>   SYS_PUTCHAR,<br>   SYS_CLEAR,<br>   SYS_GETCWD,<br>   SYS_OPEN,<br>   SYS_CLOSE,<br>   SYS_LSEEK,<br>   SYS_UNLINK,<br>   SYS_MKDIR,<br>   SYS_OPENDIR,<br>   SYS_CLOSEDIR,<br>   SYS_CHDIR,<br>   SYS_RMDIR,<br>   SYS_READDIR,<br>   SYS_REWINDDIR,<br>   SYS_STAT,<br>   SYS_PS,<br>   SYS_EXECV,<br>   SYS_EXIT,<br>   SYS_WAIT<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="userprogsyscall-initc修改"><a class="markdownIt-Anchor" href="#userprogsyscall-initc修改"></a> userprog/syscall-init.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 初始化系统调用 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">syscall_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;syscall_init start\n&quot;</span>);<br>   syscall_table[SYS_GETPID]= sys_getpid;<br>   syscall_table[SYS_WRITE]    = sys_write;<br>   syscall_table[SYS_MALLOC]= sys_malloc;<br>   syscall_table[SYS_FREE]    = sys_free;<br>   syscall_table[SYS_FORK]    = sys_fork;<br>   syscall_table[SYS_READ]    = sys_read;<br>   syscall_table[SYS_PUTCHAR]= console_put_char;<br>   syscall_table[SYS_CLEAR]    = cls_screen;<br>   syscall_table[SYS_GETCWD]= sys_getcwd;<br>   syscall_table[SYS_OPEN]    = sys_open;<br>   syscall_table[SYS_CLOSE]    = sys_close;<br>   syscall_table[SYS_LSEEK]    = sys_lseek;<br>   syscall_table[SYS_UNLINK]= sys_unlink;<br>   syscall_table[SYS_MKDIR]    = sys_mkdir;<br>   syscall_table[SYS_OPENDIR]= sys_opendir;<br>   syscall_table[SYS_CLOSEDIR]= sys_closedir;<br>   syscall_table[SYS_CHDIR]    = sys_chdir;<br>   syscall_table[SYS_RMDIR]    = sys_rmdir;<br>   syscall_table[SYS_READDIR]= sys_readdir;<br>   syscall_table[SYS_REWINDDIR]= sys_rewinddir;<br>   syscall_table[SYS_STAT]    = sys_stat;<br>   syscall_table[SYS_PS]    = sys_ps;<br>   syscall_table[SYS_EXECV]    = sys_execv; <br>   syscall_table[SYS_EXIT]    = sys_exit;<br>   syscall_table[SYS_WAIT]    = sys_wait;     <br>   put_str(<span class="hljs-string">&quot;syscall_init done\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="commandstarts修改"><a class="markdownIt-Anchor" href="#commandstarts修改"></a> command/start.S修改</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">[bits <span class="hljs-number">32</span>]<br>extern main<br>extern <span class="hljs-keyword">exit</span> <br>section .text<br>global _start<br>_start:<br>   ;下面这两个要和execv中load之后指定的寄存器一致<br>   push ebx  ;压入argv<br>   push  ecx  ;压入argc<br>   call  main<br><br>   ;将main的返回值通过栈传给<span class="hljs-keyword">exit</span>,gcc用eax存储返回值,这是ABI规定的<br>   push  eax<br>   call <span class="hljs-keyword">exit</span><br>   ;<span class="hljs-keyword">exit</span>不会返回<br></code></pre></td></tr></table></figure><h3 id="commandcatc创建"><a class="markdownIt-Anchor" href="#commandcatc创建"></a> command/cat.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br>   <span class="hljs-keyword">if</span> (argc &gt; <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cat: argument error\n&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">-2</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-type">char</span> buf[<span class="hljs-number">512</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>      read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">512</span>);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,buf);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>   &#125;<br><br>   <span class="hljs-type">int</span> buf_size = <span class="hljs-number">1024</span>;<br>   <span class="hljs-type">char</span> abs_path[<span class="hljs-number">512</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>   <span class="hljs-type">void</span>* buf = <span class="hljs-built_in">malloc</span>(buf_size);<br>   <span class="hljs-keyword">if</span> (buf == <span class="hljs-literal">NULL</span>) &#123; <br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cat: malloc memory failed\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (argv[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>      getcwd(abs_path, <span class="hljs-number">512</span>);<br>      <span class="hljs-built_in">strcat</span>(abs_path, <span class="hljs-string">&quot;/&quot;</span>);<br>      <span class="hljs-built_in">strcat</span>(abs_path, argv[<span class="hljs-number">1</span>]);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">strcpy</span>(abs_path, argv[<span class="hljs-number">1</span>]);<br>   &#125;<br>   <span class="hljs-type">int</span> fd = open(abs_path, O_RDONLY);<br>   <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>) &#123; <br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cat: open: open %s failed\n&quot;</span>, argv[<span class="hljs-number">1</span>]);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   <span class="hljs-type">int</span> read_bytes= <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>      read_bytes = read(fd, buf, buf_size);<br>      <span class="hljs-keyword">if</span> (read_bytes == <span class="hljs-number">-1</span>) &#123;<br>         <span class="hljs-keyword">break</span>;<br>      &#125;<br>      write(<span class="hljs-number">1</span>, buf, read_bytes);<br>   &#125;<br>   <span class="hljs-built_in">free</span>(buf);<br>   close(fd);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">66</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="commandcompile3sh创建"><a class="markdownIt-Anchor" href="#commandcompile3sh创建"></a> command/compile3.sh创建</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">####  此脚本应该在command目录下执行</span><br><br><span class="hljs-keyword">if</span> [[ ! -d <span class="hljs-string">&quot;../lib&quot;</span> || ! -d <span class="hljs-string">&quot;../build&quot;</span> ]];then<br>   echo <span class="hljs-string">&quot;dependent dir don\`t exist!&quot;</span><br>   <span class="hljs-attribute">cwd</span>=$(pwd)<br>   <span class="hljs-attribute">cwd</span>=<span class="hljs-variable">$&#123;cwd##*/&#125;</span><br>   <span class="hljs-attribute">cwd</span>=<span class="hljs-variable">$&#123;cwd%/&#125;</span><br>   <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$cwd</span> != <span class="hljs-string">&quot;command&quot;</span> ]];then<br>      echo -e <span class="hljs-string">&quot;you\`d better in command dir\n&quot;</span><br>   fi <br>   exit<br>fi<br><br><span class="hljs-attribute">BIN</span>=<span class="hljs-string">&quot;cat&quot;</span><br><span class="hljs-attribute">CFLAGS</span>=<span class="hljs-string">&quot;-Wall -c -fno-builtin -W -Wstrict-prototypes \</span><br><span class="hljs-string">      -Wmissing-prototypes -Wsystem-headers -fno-stack-protector&quot;</span><br><span class="hljs-comment">#LIBS= &quot;-I ../lib -I ../lib/user -I ../fs&quot;</span><br><span class="hljs-attribute">OBJS</span>=<span class="hljs-string">&quot;../build/string.o ../build/syscall.o \</span><br><span class="hljs-string">      ../build/stdio.o ../build/assert.o start.o&quot;</span><br><span class="hljs-attribute">DD_IN</span>=<span class="hljs-variable">$BIN</span><br><span class="hljs-attribute">DD_OUT</span>=<span class="hljs-string">&quot;/home/podest/bochs/hd60M.img&quot;</span> <br><br>nasm -f elf ./start.S -o ./start.o<br>ar rcs simple_crt.a <span class="hljs-variable">$OBJS</span> start.o<br><br>gcc -m32 <span class="hljs-variable">$CFLAGS</span> -I <span class="hljs-string">&quot;../lib/&quot;</span> -I <span class="hljs-string">&quot;../lib/kernel/&quot;</span> -I <span class="hljs-string">&quot;../lib/user/&quot;</span> -I <span class="hljs-string">&quot;../kernel/&quot;</span> -I <span class="hljs-string">&quot;../device/&quot;</span>  -I <span class="hljs-string">&quot;../thread/&quot;</span> -I <span class="hljs-string">&quot;../userprog/&quot;</span> -I <span class="hljs-string">&quot;../fs/&quot;</span> -I <span class="hljs-string">&quot;../shell/&quot;</span>  -o  <span class="hljs-variable">$BIN</span><span class="hljs-string">&quot;.o&quot;</span> <span class="hljs-variable">$BIN</span><span class="hljs-string">&quot;.c&quot;</span><br>ld -m elf_i386  <span class="hljs-variable">$BIN</span><span class="hljs-string">&quot;.o&quot;</span> simple_crt.a -o <span class="hljs-variable">$BIN</span><br><span class="hljs-attribute">SEC_CNT</span>=$(ls -l <span class="hljs-variable">$BIN</span>|awk <span class="hljs-string">&#x27;&#123;printf(&quot;%d&quot;, ($5+511)/512)&#125;&#x27;</span>)<br><br><span class="hljs-keyword">if</span> [[ -f <span class="hljs-variable">$BIN</span> ]];then<br>   dd <span class="hljs-attribute">if</span>=./$DD_IN <span class="hljs-attribute">of</span>=<span class="hljs-variable">$DD_OUT</span> <span class="hljs-attribute">bs</span>=512 \<br>   <span class="hljs-attribute">count</span>=<span class="hljs-variable">$SEC_CNT</span> <span class="hljs-attribute">seek</span>=300 <span class="hljs-attribute">conv</span>=notrunc<br>fi<br></code></pre></td></tr></table></figure><h3 id="shellshellc修改"><a class="markdownIt-Anchor" href="#shellshellc修改"></a> shell/shell.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 简单的shell */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">my_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   cwd_cache[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;/&#x27;</span>;<br>   <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>      print_prompt(); <br>      <span class="hljs-built_in">memset</span>(final_path, <span class="hljs-number">0</span>, MAX_PATH_LEN);<br>      <span class="hljs-built_in">memset</span>(cmd_line, <span class="hljs-number">0</span>, MAX_PATH_LEN);<br>      readline(cmd_line, MAX_PATH_LEN);<br>      <span class="hljs-keyword">if</span> (cmd_line[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 若只键入了一个回车</span><br>      <span class="hljs-keyword">continue</span>;<br>      &#125;<br><br>      argc = <span class="hljs-number">-1</span>;<br>      argc = cmd_parse(cmd_line, argv, <span class="hljs-string">&#x27; &#x27;</span>);<br>      <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num of arguments exceed %d\n&quot;</span>, MAX_ARG_NR);<br>      <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;ls&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>      buildin_ls(argc, argv);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;cd&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>      <span class="hljs-keyword">if</span> (buildin_cd(argc, argv) != <span class="hljs-literal">NULL</span>) &#123;<br>      <span class="hljs-built_in">memset</span>(cwd_cache, <span class="hljs-number">0</span>, MAX_PATH_LEN);<br>      <span class="hljs-built_in">strcpy</span>(cwd_cache, final_path);<br>      &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;pwd&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>      buildin_pwd(argc, argv);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;ps&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>      buildin_ps(argc, argv);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;clear&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>      buildin_clear(argc, argv);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;mkdir&quot;</span>, argv[<span class="hljs-number">0</span>]))&#123;<br>      buildin_mkdir(argc, argv);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;rmdir&quot;</span>, argv[<span class="hljs-number">0</span>]))&#123;<br>      buildin_rmdir(argc, argv);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;rm&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>      buildin_rm(argc, argv);<br>      &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-comment">// 如果是外部命令,需要从磁盘上加载</span><br>      <span class="hljs-type">int32_t</span> pid = fork();<br>      <span class="hljs-keyword">if</span> (pid) &#123;   <span class="hljs-comment">// 父进程</span><br>         <span class="hljs-type">int32_t</span> status;<br>         <span class="hljs-type">int32_t</span> child_pid = wait(&amp;status);          <span class="hljs-comment">// 此时子进程若没有执行exit,my_shell会被阻塞,不再响应键入的命令</span><br>         <span class="hljs-keyword">if</span> (child_pid == <span class="hljs-number">-1</span>) &#123;     <span class="hljs-comment">// 按理说程序正确的话不会执行到这句,fork出的进程便是shell子进程</span><br>            PANIC(<span class="hljs-string">&quot;my_shell: no child\n&quot;</span>);<br>         &#125;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child_pid %d, it&#x27;s status: %d\n&quot;</span>, child_pid, status);<br>      &#125; <span class="hljs-keyword">else</span> &#123;   <span class="hljs-comment">// 子进程</span><br>            make_clear_abs_path(argv[<span class="hljs-number">0</span>], final_path);<br>            argv[<span class="hljs-number">0</span>] = final_path;<br>            <span class="hljs-comment">/* 先判断下文件是否存在 */</span><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">file_stat</span>;</span><br>            <span class="hljs-built_in">memset</span>(&amp;file_stat, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> stat));<br>            <span class="hljs-keyword">if</span> (stat(argv[<span class="hljs-number">0</span>], &amp;file_stat) == <span class="hljs-number">-1</span>) &#123;<br>               <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;my_shell: cannot access %s: No such file or directory\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>               <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>               execv(argv[<span class="hljs-number">0</span>], argv);<br>            &#125;<br>      &#125;<br>      &#125;<br>      <span class="hljs-type">int32_t</span> arg_idx = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span>(arg_idx &lt; MAX_ARG_NR) &#123;<br>   argv[arg_idx] = <span class="hljs-literal">NULL</span>;<br>   arg_idx++;<br>      &#125;<br>   &#125;<br>   PANIC(<span class="hljs-string">&quot;my_shell: should not be here&quot;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-3"><a class="markdownIt-Anchor" href="#kernelmainc修改-3"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../shell/shell.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br>   intr_enable();<br><br><br><span class="hljs-comment">/*************    写入应用程序    *************/</span><br>   <span class="hljs-type">uint32_t</span> file_size = <span class="hljs-number">5553</span>; <br>   <span class="hljs-type">uint32_t</span> sec_cnt = DIV_ROUND_UP(file_size, <span class="hljs-number">512</span>);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">sda</span> =</span> &amp;channels[<span class="hljs-number">0</span>].devices[<span class="hljs-number">0</span>];<br>   <span class="hljs-type">void</span>* prog_buf = sys_malloc(file_size);<br>   ide_read(sda, <span class="hljs-number">300</span>, prog_buf, sec_cnt);<br>   <span class="hljs-type">int32_t</span> fd = sys_open(<span class="hljs-string">&quot;/cat&quot;</span>, O_CREAT|O_RDWR);<br>   <span class="hljs-keyword">if</span> (fd != <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-keyword">if</span>(sys_write(fd, prog_buf, file_size) == <span class="hljs-number">-1</span>) &#123;<br>         printk(<span class="hljs-string">&quot;file write error!\n&quot;</span>);<br>         <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>      &#125;<br>   &#125;<br><span class="hljs-comment">/*************    写入应用程序结束   *************/</span><br>   cls_screen();<br>   console_put_str(<span class="hljs-string">&quot;[rabbit@localhost /]$ &quot;</span>);<br>   thread_exit(running_thread(), <span class="hljs-literal">true</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* init进程 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> ret_pid = fork();<br>   <span class="hljs-keyword">if</span>(ret_pid) &#123;  <span class="hljs-comment">// 父进程</span><br><span class="hljs-type">int</span> status;<br><span class="hljs-type">int</span> child_pid;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>child_pid = wait(&amp;status);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I&#x27;m init, My pid is 1, I recieve a child, It&#x27;s pid is %d, status is %d\n&quot;</span>, child_pid, status);<br>&#125;<br>   &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 子进程</span><br>      my_shell();<br>    &#125;<br>   PANIC(<span class="hljs-string">&quot;init: should not be here&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-3"><a class="markdownIt-Anchor" href="#运行结果-3"></a> 运行结果</h3><p><img src="/img/os/os15.9.png" alt="图为bochs运行界面" /></p><h2 id="实现管道"><a class="markdownIt-Anchor" href="#实现管道"></a> 实现管道</h2><h3 id="shellpipeh创建"><a class="markdownIt-Anchor" href="#shellpipeh创建"></a> shell/pipe.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __SHELL_PIPE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __SHELL_PIPE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIPE_FLAG 0xFFFF</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">is_pipe</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> local_fd)</span>;<br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_pipe</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> pipefd[<span class="hljs-number">2</span>])</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">pipe_read</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">pipe_write</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="shellpipec创建"><a class="markdownIt-Anchor" href="#shellpipec创建"></a> shell/pipe.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pipe.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><br><span class="hljs-comment">/* 判断文件描述符local_fd是否是管道 */</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">is_pipe</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> local_fd)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> global_fd = fd_local2global(local_fd); <br>   <span class="hljs-keyword">return</span> file_table[global_fd].fd_flag == PIPE_FLAG;<br>&#125;<br><br><span class="hljs-comment">/* 创建管道,成功返回0,失败返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_pipe</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> pipefd[<span class="hljs-number">2</span>])</span> &#123;<br>   <span class="hljs-type">int32_t</span> global_fd = get_free_slot_in_global();<br><br>   <span class="hljs-comment">/* 申请一页内核内存做环形缓冲区 */</span><br>   file_table[global_fd].fd_inode = get_kernel_pages(<span class="hljs-number">1</span>); <br><br>   <span class="hljs-comment">/* 初始化环形缓冲区 */</span><br>   ioqueue_init((<span class="hljs-keyword">struct</span> ioqueue*)file_table[global_fd].fd_inode);<br>   <span class="hljs-keyword">if</span> (file_table[global_fd].fd_inode == <span class="hljs-literal">NULL</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>  <br>   <span class="hljs-comment">/* 将fd_flag复用为管道标志 */</span><br>   file_table[global_fd].fd_flag = PIPE_FLAG;<br><br>   <span class="hljs-comment">/* 将fd_pos复用为管道打开数 */</span><br>   file_table[global_fd].fd_pos = <span class="hljs-number">2</span>;<br>   pipefd[<span class="hljs-number">0</span>] = pcb_fd_install(global_fd);<br>   pipefd[<span class="hljs-number">1</span>] = pcb_fd_install(global_fd);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 从管道中读数据 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">pipe_read</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span> &#123;<br>   <span class="hljs-type">char</span>* buffer = buf;<br>   <span class="hljs-type">uint32_t</span> bytes_read = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">uint32_t</span> global_fd = fd_local2global(fd);<br><br>   <span class="hljs-comment">/* 获取管道的环形缓冲区 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ioqueue</span>* <span class="hljs-title">ioq</span> =</span> (<span class="hljs-keyword">struct</span> ioqueue*)file_table[global_fd].fd_inode;<br><br>   <span class="hljs-comment">/* 选择较小的数据读取量,避免阻塞 */</span><br>   <span class="hljs-type">uint32_t</span> ioq_len = ioq_length(ioq);<br>   <span class="hljs-type">uint32_t</span> size = ioq_len &gt; count ? count : ioq_len;<br>   <span class="hljs-keyword">while</span> (bytes_read &lt; size) &#123;<br>      *buffer = ioq_getchar(ioq);<br>      bytes_read++;<br>      buffer++;<br>   &#125;<br>   <span class="hljs-keyword">return</span> bytes_read;<br>&#125;<br><br><span class="hljs-comment">/* 往管道中写数据 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">pipe_write</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> bytes_write = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">uint32_t</span> global_fd = fd_local2global(fd);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ioqueue</span>* <span class="hljs-title">ioq</span> =</span> (<span class="hljs-keyword">struct</span> ioqueue*)file_table[global_fd].fd_inode;<br><br>   <span class="hljs-comment">/* 选择较小的数据写入量,避免阻塞 */</span><br>   <span class="hljs-type">uint32_t</span> ioq_left = bufsize - ioq_length(ioq);<br>   <span class="hljs-type">uint32_t</span> size = ioq_left &gt; count ? count : ioq_left;<br><br>   <span class="hljs-type">const</span> <span class="hljs-type">char</span>* buffer = buf;<br>   <span class="hljs-keyword">while</span> (bytes_write &lt; size) &#123;<br>      ioq_putchar(ioq, *buffer);<br>      bytes_write++;<br>      buffer++;<br>   &#125;<br>   <span class="hljs-keyword">return</span> bytes_write;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fsfsc修改"><a class="markdownIt-Anchor" href="#fsfsc修改"></a> fs/fs.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">/* 关闭文件描述符fd指向的文件,成功返回0,否则返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_close</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd)</span> &#123;<br>   <span class="hljs-type">int32_t</span> ret = <span class="hljs-number">-1</span>;   <span class="hljs-comment">// 返回值默认为-1,即失败</span><br>   <span class="hljs-keyword">if</span> (fd &gt; <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-type">uint32_t</span> global_fd = fd_local2global(fd);<br>      <span class="hljs-keyword">if</span> (is_pipe(fd)) &#123;<br> <span class="hljs-comment">/* 如果此管道上的描述符都被关闭,释放管道的环形缓冲区 */</span><br> <span class="hljs-keyword">if</span> (--file_table[global_fd].fd_pos == <span class="hljs-number">0</span>) &#123;<br>    mfree_page(PF_KERNEL, file_table[global_fd].fd_inode, <span class="hljs-number">1</span>);<br>    file_table[global_fd].fd_inode = <span class="hljs-literal">NULL</span>;<br> &#125;<br> ret = <span class="hljs-number">0</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br> ret = file_close(&amp;file_table[global_fd]);<br>      &#125;<br>      running_thread()-&gt;fd_table[fd] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 使该文件描述符位可用</span><br>   &#125;<br>   <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">/* 从文件描述符fd指向的文件中读取count个字节到buf,若成功则返回读出的字节数,到文件尾则返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_read</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span> &#123;<br>   ASSERT(buf != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">int32_t</span> ret = <span class="hljs-number">-1</span>;<br>   <span class="hljs-type">uint32_t</span> global_fd = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span> || fd == stdout_no || fd == stderr_no) &#123;<br>      printk(<span class="hljs-string">&quot;sys_read: fd error\n&quot;</span>);<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fd == stdin_no) &#123;<br>      <span class="hljs-comment">/* 标准输入有可能被重定向为管道缓冲区, 因此要判断 */</span><br>      <span class="hljs-keyword">if</span> (is_pipe(fd)) &#123;<br> ret = pipe_read(fd, buf, count);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br> <span class="hljs-type">char</span>* buffer = buf;<br> <span class="hljs-type">uint32_t</span> bytes_read = <span class="hljs-number">0</span>;<br> <span class="hljs-keyword">while</span> (bytes_read &lt; count) &#123;<br>    *buffer = ioq_getchar(&amp;kbd_buf);<br>    bytes_read++;<br>    buffer++;<br> &#125;<br> ret = (bytes_read == <span class="hljs-number">0</span> ? <span class="hljs-number">-1</span> : (<span class="hljs-type">int32_t</span>)bytes_read);<br>      &#125;<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (is_pipe(fd)) &#123; <span class="hljs-comment">/* 若是管道就调用管道的方法 */</span><br>      ret = pipe_read(fd, buf, count);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      global_fd = fd_local2global(fd);<br>      ret = file_read(&amp;file_table[global_fd], buf, count);   <br>   &#125;<br>   <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">/* 将buf中连续count个字节写入文件描述符fd,成功则返回写入的字节数,失败返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_write</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span> &#123;<br>   <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>      printk(<span class="hljs-string">&quot;sys_write: fd error\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (fd == stdout_no) &#123;  <br>      <span class="hljs-comment">/* 标准输出有可能被重定向为管道缓冲区, 因此要判断 */</span><br>      <span class="hljs-keyword">if</span> (is_pipe(fd)) &#123;<br> <span class="hljs-keyword">return</span> pipe_write(fd, buf, count);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br> <span class="hljs-type">char</span> tmp_buf[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br> <span class="hljs-built_in">memcpy</span>(tmp_buf, buf, count);<br> console_put_str(tmp_buf);<br> <span class="hljs-keyword">return</span> count;<br>      &#125;<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (is_pipe(fd))&#123;    <span class="hljs-comment">/* 若是管道就调用管道的方法 */</span><br>      <span class="hljs-keyword">return</span> pipe_write(fd, buf, count);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-type">uint32_t</span> _fd = fd_local2global(fd);<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span>* <span class="hljs-title">wr_file</span> =</span> &amp;file_table[_fd];<br>      <span class="hljs-keyword">if</span> (wr_file-&gt;fd_flag &amp; O_WRONLY || wr_file-&gt;fd_flag &amp; O_RDWR) &#123;<br> <span class="hljs-type">uint32_t</span> bytes_written  = file_write(wr_file, buf, count);<br> <span class="hljs-keyword">return</span> bytes_written;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br> console_put_str(<span class="hljs-string">&quot;sys_write: not allowed to write file without flag O_RDWR or O_WRONLY\n&quot;</span>);<br> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="userprogforkc新增"><a class="markdownIt-Anchor" href="#userprogforkc新增"></a> userprog/fork.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">/* 更新inode打开数 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">update_inode_open_cnts</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* thread)</span> &#123;<br>   <span class="hljs-type">int32_t</span> local_fd = <span class="hljs-number">3</span>, global_fd = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (local_fd &lt; MAX_FILES_OPEN_PER_PROC) &#123;<br>      global_fd = thread-&gt;fd_table[local_fd];<br>      ASSERT(global_fd &lt; MAX_FILE_OPEN);<br>      <span class="hljs-keyword">if</span> (global_fd != <span class="hljs-number">-1</span>) &#123;<br> <span class="hljs-keyword">if</span> (is_pipe(local_fd)) &#123;<br>    file_table[global_fd].fd_pos++;<br> &#125; <span class="hljs-keyword">else</span> &#123;<br>    file_table[global_fd].fd_inode-&gt;i_open_cnts++;<br> &#125;<br>      &#125;<br>      local_fd++;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="userprogwait_exitc修改"><a class="markdownIt-Anchor" href="#userprogwait_exitc修改"></a> userprog/wait_exit.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 释放用户进程资源: </span><br><span class="hljs-comment"> * 1 页表中对应的物理页</span><br><span class="hljs-comment"> * 2 虚拟内存池占物理页框</span><br><span class="hljs-comment"> * 3 关闭打开的文件 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">release_prog_resource</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* release_thread)</span> &#123;<br>   <span class="hljs-type">uint32_t</span>* pgdir_vaddr = release_thread-&gt;pgdir;<br>   <span class="hljs-type">uint16_t</span> user_pde_nr = <span class="hljs-number">768</span>, pde_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">uint32_t</span> pde = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">uint32_t</span>* v_pde_ptr = <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">// v表示var,和函数pde_ptr区分</span><br><br>   <span class="hljs-type">uint16_t</span> user_pte_nr = <span class="hljs-number">1024</span>, pte_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">uint32_t</span> pte = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">uint32_t</span>* v_pte_ptr = <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">// 加个v表示var,和函数pte_ptr区分</span><br><br>   <span class="hljs-type">uint32_t</span>* first_pte_vaddr_in_pde = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">// 用来记录pde中第0个pte的地址</span><br>   <span class="hljs-type">uint32_t</span> pg_phy_addr = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">/* 回收页表中用户空间的页框 */</span><br>   <span class="hljs-keyword">while</span> (pde_idx &lt; user_pde_nr) &#123;<br>      v_pde_ptr = pgdir_vaddr + pde_idx;<br>      pde = *v_pde_ptr;<br>      <span class="hljs-keyword">if</span> (pde &amp; <span class="hljs-number">0x00000001</span>) &#123;   <span class="hljs-comment">// 如果页目录项p位为1,表示该页目录项下可能有页表项</span><br> first_pte_vaddr_in_pde = pte_ptr(pde_idx * <span class="hljs-number">0x400000</span>);  <span class="hljs-comment">// 一个页表表示的内存容量是4M,即0x400000</span><br> pte_idx = <span class="hljs-number">0</span>;<br> <span class="hljs-keyword">while</span> (pte_idx &lt; user_pte_nr) &#123;<br>    v_pte_ptr = first_pte_vaddr_in_pde + pte_idx;<br>    pte = *v_pte_ptr;<br>    <span class="hljs-keyword">if</span> (pte &amp; <span class="hljs-number">0x00000001</span>) &#123;<br>       <span class="hljs-comment">/* 将pte中记录的物理页框直接在相应内存池的位图中清0 */</span><br>       pg_phy_addr = pte &amp; <span class="hljs-number">0xfffff000</span>;<br>       free_a_phy_page(pg_phy_addr);<br>    &#125;<br>    pte_idx++;<br> &#125;<br> <span class="hljs-comment">/* 将pde中记录的物理页框直接在相应内存池的位图中清0 */</span><br> pg_phy_addr = pde &amp; <span class="hljs-number">0xfffff000</span>;<br> free_a_phy_page(pg_phy_addr);<br>      &#125;<br>      pde_idx++;<br>   &#125;<br><br>   <span class="hljs-comment">/* 回收用户虚拟地址池所占的物理内存*/</span><br>   <span class="hljs-type">uint32_t</span> bitmap_pg_cnt = (release_thread-&gt;userprog_vaddr.vaddr_bitmap.btmp_bytes_len) / PG_SIZE;<br>   <span class="hljs-type">uint8_t</span>* user_vaddr_pool_bitmap = release_thread-&gt;userprog_vaddr.vaddr_bitmap.bits;<br>   mfree_page(PF_KERNEL, user_vaddr_pool_bitmap, bitmap_pg_cnt);<br><br>    <span class="hljs-comment">/* 关闭进程打开的文件 */</span><br>   <span class="hljs-type">uint8_t</span> local_fd = <span class="hljs-number">3</span>;<br>   <span class="hljs-keyword">while</span>(local_fd &lt; MAX_FILES_OPEN_PER_PROC) &#123;<br>      <span class="hljs-keyword">if</span> (release_thread-&gt;fd_table[local_fd] != <span class="hljs-number">-1</span>) &#123;<br>         <span class="hljs-keyword">if</span> (is_pipe(local_fd)) &#123;<br>            <span class="hljs-type">uint32_t</span> global_fd = fd_local2global(local_fd);  <br>            <span class="hljs-keyword">if</span> (--file_table[global_fd].fd_pos == <span class="hljs-number">0</span>) &#123;<br>               mfree_page(PF_KERNEL, file_table[global_fd].fd_inode, <span class="hljs-number">1</span>);<br>               file_table[global_fd].fd_inode = <span class="hljs-literal">NULL</span>;<br>            &#125;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            sys_close(local_fd);<br>         &#125;<br>      &#125;<br>      local_fd++;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="增加系统调用略"><a class="markdownIt-Anchor" href="#增加系统调用略"></a> 增加系统调用（略）</h3><p>syscall.c<br />syscall.h<br />syscall_init.c</p><h3 id="commandprog_pipec创建"><a class="markdownIt-Anchor" href="#commandprog_pipec创建"></a> command/prog_pipe.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/string.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br>   <span class="hljs-type">int32_t</span> fd[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">-1</span>&#125;;<br>   pipe(fd);<br>   <span class="hljs-type">int32_t</span> pid = fork();<br>   <span class="hljs-keyword">if</span>(pid) &#123;  <span class="hljs-comment">// 父进程</span><br>      close(fd[<span class="hljs-number">0</span>]);  <span class="hljs-comment">// 关闭输入</span><br>      write(fd[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;Hi, my son, I love you!&quot;</span>, <span class="hljs-number">24</span>);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nI`m father, my pid is %d\n&quot;</span>, getpid());<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">8</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      close(fd[<span class="hljs-number">1</span>]);  <span class="hljs-comment">// 关闭输出</span><br>      <span class="hljs-type">char</span> buf[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>      read(fd[<span class="hljs-number">0</span>], buf, <span class="hljs-number">24</span>);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nI`m child, my pid is %d\n&quot;</span>, getpid());<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I`m child, my father said to me: \&quot;%s\&quot;\n&quot;</span>, buf);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="commandcompile4sh创建"><a class="markdownIt-Anchor" href="#commandcompile4sh创建"></a> command/compile4.sh创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c">####  此脚本应该在command目录下执行<br><br><span class="hljs-keyword">if</span> [[ ! -d <span class="hljs-string">&quot;../lib&quot;</span> || ! -d <span class="hljs-string">&quot;../build&quot;</span> ]];then<br>   echo <span class="hljs-string">&quot;dependent dir don\`t exist!&quot;</span><br>   cwd=$(pwd)<br>   cwd=$&#123;cwd##*/&#125;<br>   cwd=$&#123;cwd%/&#125;<br>   <span class="hljs-keyword">if</span> [[ $cwd != <span class="hljs-string">&quot;command&quot;</span> ]];then<br>      echo -e <span class="hljs-string">&quot;you\`d better in command dir\n&quot;</span><br>   fi <br>   <span class="hljs-built_in">exit</span><br>fi<br><br>BIN=<span class="hljs-string">&quot;prog_pipe&quot;</span><br>CFLAGS=<span class="hljs-string">&quot;-Wall -c -fno-builtin -W -Wstrict-prototypes \</span><br><span class="hljs-string">      -Wmissing-prototypes -Wsystem-headers -fno-stack-protector&quot;</span><br>#LIBS= <span class="hljs-string">&quot;-I ../lib -I ../lib/user -I ../fs&quot;</span><br>OBJS=<span class="hljs-string">&quot;../build/string.o ../build/syscall.o \</span><br><span class="hljs-string">      ../build/stdio.o ../build/assert.o start.o&quot;</span><br>DD_IN=$BIN<br>DD_OUT=<span class="hljs-string">&quot;/home/podest/bochs/hd60M.img&quot;</span> <br><br>nasm -f elf ./start.S -o ./start.o<br>ar rcs simple_crt.a $OBJS start.o<br><br>gcc -m32 $CFLAGS -I <span class="hljs-string">&quot;../lib/&quot;</span> -I <span class="hljs-string">&quot;../lib/kernel/&quot;</span> -I <span class="hljs-string">&quot;../lib/user/&quot;</span> -I <span class="hljs-string">&quot;../kernel/&quot;</span> -I <span class="hljs-string">&quot;../device/&quot;</span>  -I <span class="hljs-string">&quot;../thread/&quot;</span> -I <span class="hljs-string">&quot;../userprog/&quot;</span> -I <span class="hljs-string">&quot;../fs/&quot;</span> -I <span class="hljs-string">&quot;../shell/&quot;</span>  -o  $BIN<span class="hljs-string">&quot;.o&quot;</span> $BIN<span class="hljs-string">&quot;.c&quot;</span><br>ld -m elf_i386  $BIN<span class="hljs-string">&quot;.o&quot;</span> simple_crt.a -o $BIN<br>SEC_CNT=$(ls -l $BIN|awk <span class="hljs-string">&#x27;&#123;printf(&quot;%d&quot;, ($5+511)/512)&#125;&#x27;</span>)<br><br><span class="hljs-keyword">if</span> [[ -f $BIN ]];then<br>   dd <span class="hljs-keyword">if</span>=./$DD_IN of=$DD_OUT bs=<span class="hljs-number">512</span> \<br>   count=$SEC_CNT seek=<span class="hljs-number">300</span> conv=notrunc<br>fi<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-4"><a class="markdownIt-Anchor" href="#kernelmainc修改-4"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../shell/shell.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../shell/pipe.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br><br><span class="hljs-comment">/*************    写入应用程序    *************/</span><br>  <span class="hljs-type">uint32_t</span> file_size = <span class="hljs-number">5343</span>; <br>  <span class="hljs-type">uint32_t</span> sec_cnt = DIV_ROUND_UP(file_size, <span class="hljs-number">512</span>);<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">sda</span> =</span> &amp;channels[<span class="hljs-number">0</span>].devices[<span class="hljs-number">0</span>];<br>  <span class="hljs-type">void</span>* prog_buf = sys_malloc(file_size);<br>  ide_read(sda, <span class="hljs-number">300</span>, prog_buf, sec_cnt);<br>  <span class="hljs-type">int32_t</span> fd = sys_open(<span class="hljs-string">&quot;/prog_pipe&quot;</span>, O_CREAT|O_RDWR);<br>  <span class="hljs-keyword">if</span> (fd != <span class="hljs-number">-1</span>) &#123;<br>     <span class="hljs-keyword">if</span>(sys_write(fd, prog_buf, file_size) == <span class="hljs-number">-1</span>) &#123;<br>        printk(<span class="hljs-string">&quot;file write error!\n&quot;</span>);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>     &#125;<br>  &#125;<br><span class="hljs-comment">/*************    写入应用程序结束   *************/</span><br>   cls_screen();<br>   console_put_str(<span class="hljs-string">&quot;[rabbit@localhost /]$ &quot;</span>);<br>   thread_exit(running_thread(), <span class="hljs-literal">true</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* init进程 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> ret_pid = fork();<br>   <span class="hljs-keyword">if</span>(ret_pid) &#123;  <span class="hljs-comment">// 父进程</span><br>      <span class="hljs-type">int</span> status;<br>      <span class="hljs-type">int</span> child_pid;<br>       <span class="hljs-comment">/* init在此处不停的回收僵尸进程 */</span><br>       <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>  child_pid = wait(&amp;status);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I`m init, My pid is 1, I recieve a child, It`s pid is %d, status is %d\n&quot;</span>, child_pid, status);<br>       &#125;<br>   &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 子进程</span><br>      my_shell();<br>   &#125;<br>   PANIC(<span class="hljs-string">&quot;init: should not be here&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="makefile修改"><a class="markdownIt-Anchor" href="#makefile修改"></a> makefile修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><code class="hljs shell">BUILD_DIR = ./build<br>ENTRY_POINT = 0xc0001500<br>AS = nasm<br>CC = gcc<br>LD = ld<br>LIB = -I lib/ -I lib/kernel/ -I lib/user/ -I kernel/ -I device/ <br>ASFLAGS = -f elf<br>CFLAGS = -Wall -m32 -fno-stack-protector $(LIB) -c -fno-builtin -W -Wstrict-prototypes -Wmissing-prototypes<br>LDFLAGS =  -m elf_i386 -Ttext $(ENTRY_POINT) -e main -Map $(BUILD_DIR)/kernel.map<br>OBJS = $(BUILD_DIR)/main.o $(BUILD_DIR)/init.o $(BUILD_DIR)/interrupt.o \<br>      $(BUILD_DIR)/timer.o $(BUILD_DIR)/kernel.o $(BUILD_DIR)/print.o $(BUILD_DIR)/switch.o \<br>      $(BUILD_DIR)/debug.o $(BUILD_DIR)/string.o $(BUILD_DIR)/memory.o \<br>      $(BUILD_DIR)/bitmap.o $(BUILD_DIR)/thread.o $(BUILD_DIR)/list.o \<br>      $(BUILD_DIR)/sync.o $(BUILD_DIR)/console.o $(BUILD_DIR)/keyboard.o \<br>      $(BUILD_DIR)/ioqueue.o $(BUILD_DIR)/tss.o $(BUILD_DIR)/process.o \<br>      $(BUILD_DIR)/syscall-init.o $(BUILD_DIR)/syscall.o $(BUILD_DIR)/stdio.o \<br>      $(BUILD_DIR)/stdio-kernel.o $(BUILD_DIR)/ide.o $(BUILD_DIR)/fs.o $(BUILD_DIR)/inode.o \<br>      $(BUILD_DIR)/file.o $(BUILD_DIR)/dir.o $(BUILD_DIR)/fork.o $(BUILD_DIR)/shell.o \<br>      $(BUILD_DIR)/buildin_cmd.o $(BUILD_DIR)/assert.o $(BUILD_DIR)/exec.o \<br><span class="hljs-meta prompt_">  $</span><span class="language-bash">(BUILD_DIR)/wait_exit.o $(BUILD_DIR)/pipe.o</span><br>      <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############     c代码编译     ###############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/main.o: kernel/main.c lib/kernel/print.h \</span><br><span class="language-bash">        lib/stdint.h kernel/init.h lib/string.h kernel/memory.h \</span><br><span class="language-bash">        thread/thread.h kernel/interrupt.h device/console.h \</span><br><span class="language-bash">        device/keyboard.h device/ioqueue.h userprog/process.h \</span><br><span class="language-bash">        lib/user/syscall.h userprog/syscall-init.h lib/stdio.h \</span><br><span class="language-bash">        lib/kernel/stdio-kernel.h fs/file.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/init.o: kernel/init.c kernel/init.h lib/kernel/print.h \</span><br><span class="language-bash">        lib/stdint.h kernel/interrupt.h device/timer.h kernel/memory.h \</span><br><span class="language-bash">        thread/thread.h device/console.h device/keyboard.h userprog/tss.h \</span><br><span class="language-bash">        userprog/syscall-init.h device/ide.h fs/fs.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/interrupt.o: kernel/interrupt.c kernel/interrupt.h \</span><br><span class="language-bash">        lib/stdint.h kernel/global.h lib/kernel/io.h lib/kernel/print.h \</span><br><span class="language-bash">        kernel/kernel.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/timer.o: device/timer.c device/timer.h lib/kernel/io.h lib/kernel/print.h \</span><br><span class="language-bash">        kernel/interrupt.h thread/thread.h kernel/debug.h kernel/global.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/debug.o: kernel/debug.c kernel/debug.h \</span><br><span class="language-bash">        lib/kernel/print.h lib/stdint.h kernel/interrupt.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/string.o: lib/string.c lib/string.h \</span><br><span class="language-bash">kernel/debug.h kernel/global.h lib/user/assert.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/memory.o: kernel/memory.c kernel/memory.h \</span><br><span class="language-bash">lib/stdint.h lib/kernel/bitmap.h kernel/debug.h lib/string.h kernel/global.h \</span><br><span class="language-bash">thread/sync.h thread/thread.h lib/kernel/list.h kernel/interrupt.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/bitmap.o: lib/kernel/bitmap.c lib/kernel/bitmap.h kernel/global.h \</span><br><span class="language-bash">lib/string.h kernel/interrupt.h lib/kernel/print.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/thread.o: thread/thread.c thread/thread.h \</span><br><span class="language-bash">lib/stdint.h lib/string.h kernel/global.h kernel/memory.h \</span><br><span class="language-bash">kernel/debug.h kernel/interrupt.h lib/kernel/print.h \</span><br><span class="language-bash">userprog/process.h thread/sync.h lib/user/syscall.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/list.o: lib/kernel/list.c lib/kernel/list.h \</span><br><span class="language-bash">kernel/interrupt.h lib/stdint.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/sync.o: thread/sync.c thread/sync.h \</span><br><span class="language-bash">lib/stdint.h thread/thread.h kernel/debug.h kernel/interrupt.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/console.o: device/console.c device/console.h \</span><br><span class="language-bash">lib/kernel/print.h thread/sync.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/keyboard.o: device/keyboard.c device/keyboard.h \</span><br><span class="language-bash">lib/kernel/print.h lib/kernel/io.h kernel/interrupt.h \</span><br><span class="language-bash">kernel/global.h lib/stdint.h device/ioqueue.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/ioqueue.o: device/ioqueue.c device/ioqueue.h \</span><br><span class="language-bash">kernel/interrupt.h kernel/global.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/tss.o: userprog/tss.c userprog/tss.h \</span><br><span class="language-bash">kernel/global.h thread/thread.h lib/kernel/print.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/process.o: userprog/process.c userprog/process.h \</span><br><span class="language-bash">lib/string.h kernel/global.h kernel/memory.h lib/kernel/print.h \</span><br><span class="language-bash">thread/thread.h kernel/interrupt.h kernel/debug.h device/console.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/syscall-init.o: userprog/syscall-init.c userprog/syscall-init.h \</span><br><span class="language-bash">lib/user/syscall.h lib/stdint.h lib/kernel/print.h kernel/interrupt.h thread/thread.h \</span><br><span class="language-bash">kernel/memory.h fs/file.h userprog/fork.h lib/kernel/stdio-kernel.h userprog/exec.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/syscall.o: lib/user/syscall.c lib/user/syscall.h fs/file.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/stdio.o: lib/stdio.c lib/stdio.h lib/stdint.h lib/string.h lib/user/syscall.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/stdio-kernel.o: lib/kernel/stdio-kernel.c lib/kernel/stdio-kernel.h \</span><br><span class="language-bash">lib/stdio.h device/console.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/ide.o: device/ide.c device/ide.h lib/stdint.h kernel/debug.h \</span><br><span class="language-bash">lib/kernel/stdio-kernel.h lib/stdio.h kernel/global.h thread/sync.h \</span><br><span class="language-bash">lib/kernel/io.h device/timer.h kernel/interrupt.h lib/kernel/list.h fs/fs.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/fs.o: fs/fs.c fs/fs.h lib/stdint.h kernel/global.h device/ide.h fs/inode.h fs/dir.h \</span><br><span class="language-bash">fs/super_block.h lib/kernel/stdio-kernel.h lib/string.h kernel/debug.h lib/kernel/list.h \</span><br><span class="language-bash">fs/file.h thread/thread.h device/ioqueue.h device/keyboard.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/inode.o: fs/inode.c fs/inode.h device/ide.h kernel/debug.h thread/thread.h \</span><br><span class="language-bash">kernel/memory.h lib/string.h lib/kernel/list.h kernel/interrupt.h lib/kernel/bitmap.h \</span><br><span class="language-bash">fs/file.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/file.o: fs/file.c fs/file.h lib/kernel/stdio-kernel.h thread/thread.h device/ide.h \</span><br><span class="language-bash">fs/file.h kernel/global.h kernel/interrupt.h device/console.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/dir.o: fs/dir.c fs/dir.h device/ide.h fs/fs.h fs/inode.h kernel/memory.h lib/string.h lib/stdint.h \</span><br><span class="language-bash">lib/kernel/stdio-kernel.h kernel/debug.h fs/file.h kernel/memory.h lib/string.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/fork.o: userprog/fork.c userprog/fork.h kernel/global.h lib/stdint.h lib/string.h \</span><br><span class="language-bash">kernel/memory.h kernel/interrupt.h thread/sync.h thread/thread.h  kernel/debug.h userprog/process.h \</span><br><span class="language-bash">lib/kernel/stdio-kernel.h fs/file.h lib/kernel/list.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/shell.o: shell/shell.c shell/shell.h kernel/global.h lib/stdint.h lib/string.h \</span><br><span class="language-bash">lib/user/syscall.h lib/stdio.h fs/file.h kernel/debug.h shell/buildin_cmd.h fs/fs.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/buildin_cmd.o: shell/buildin_cmd.c shell/buildin_cmd.h fs/file.h fs/fs.h kernel/debug.h \</span><br><span class="language-bash">lib/string.h lib/user/syscall.h fs/dir.h fs/fs.h lib/stdio.h shell/shell.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/assert.o: lib/user/assert.c lib/user/assert.h lib/stdio.h lib/stdint.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/exec.o: userprog/exec.c userprog/exec.h thread/thread.h lib/stdint.h \</span><br><span class="language-bash">    lib/kernel/list.h kernel/global.h lib/kernel/bitmap.h kernel/memory.h \</span><br><span class="language-bash">     lib/kernel/stdio-kernel.h fs/fs.h lib/string.h lib/stdint.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/wait_exit.o: userprog/wait_exit.c userprog/wait_exit.h \</span><br><span class="language-bash">    thread/thread.h lib/stdint.h lib/kernel/list.h \</span><br><span class="language-bash">     kernel/global.h lib/kernel/bitmap.h kernel/memory.h kernel/debug.h \</span><br><span class="language-bash">      thread/thread.h lib/kernel/stdio-kernel.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/pipe.o: shell/pipe.c shell/pipe.h lib/stdint.h kernel/memory.h \</span><br><span class="language-bash">    lib/kernel/bitmap.h kernel/global.h lib/kernel/list.h fs/fs.h fs/file.h \</span><br><span class="language-bash">     device/ide.h thread/sync.h thread/thread.h fs/dir.h fs/inode.h fs/fs.h \</span><br><span class="language-bash">      device/ioqueue.h thread/thread.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############    汇编代码编译    ###############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/kernel.o: kernel/kernel.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/print.o: lib/kernel/print.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/switch.o: thread/switch.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############    链接所有目标文件    #############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/kernel.bin: $(OBJS)</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(LD) $(LDFLAGS) $^ -o <span class="hljs-variable">$@</span></span><br><br>.PHONY : mk_dir hd clean all<br><br>mk_dir:<br>if [ ! -d $(BUILD_DIR) ]; then mkdir $(BUILD_DIR); fi<br><br>hd:<br>dd if=$(BUILD_DIR)/kernel.bin \<br>           of=/home/podest/bochs/hd60M.img \<br>           bs=512 count=200 seek=9 conv=notrunc<br><br>clean:<br>cd $(BUILD_DIR) &amp;&amp; rm -f  ./*<br><br>build: $(BUILD_DIR)/kernel.bin<br><br>all: mk_dir build hd<br></code></pre></td></tr></table></figure><h3 id="运行结果-4"><a class="markdownIt-Anchor" href="#运行结果-4"></a> 运行结果</h3><p><img src="/img/os/os15.10.png" alt="图为bochs运行界面" /></p><h3 id="shellpipeh新增"><a class="markdownIt-Anchor" href="#shellpipeh新增"></a> shell/pipe.h新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sys_fd_redirect</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> old_local_fd, <span class="hljs-type">uint32_t</span> new_local_fd)</span>;<br></code></pre></td></tr></table></figure><h3 id="shellpipec新增"><a class="markdownIt-Anchor" href="#shellpipec新增"></a> shell/pipe.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 将文件描述符old_local_fd重定向为new_local_fd */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sys_fd_redirect</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> old_local_fd, <span class="hljs-type">uint32_t</span> new_local_fd)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();<br>   <span class="hljs-comment">/* 针对恢复标准描述符 */</span><br>   <span class="hljs-keyword">if</span> (new_local_fd &lt; <span class="hljs-number">3</span>) &#123;<br>      cur-&gt;fd_table[old_local_fd] = new_local_fd;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-type">uint32_t</span> new_global_fd = cur-&gt;fd_table[new_local_fd];<br>      cur-&gt;fd_table[old_local_fd] = new_global_fd;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="shellshellh修改"><a class="markdownIt-Anchor" href="#shellshellh修改"></a> shell/shell.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __SHELL_SHELL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __SHELL_SHELL_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_prompt</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">readline</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf,<span class="hljs-type">int32_t</span> count)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">my_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int32_t</span> <span class="hljs-title function_">cmd_parse</span><span class="hljs-params">(<span class="hljs-type">char</span>* cmd_str,<span class="hljs-type">char</span>** argv,<span class="hljs-type">char</span> token)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">cmd_execute</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc, <span class="hljs-type">char</span>** argv)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="shellshellc新增"><a class="markdownIt-Anchor" href="#shellshellc新增"></a> shell/shell.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 执行命令 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">cmd_execute</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br>   <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;ls&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>      buildin_ls(argc, argv);<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;cd&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>      <span class="hljs-keyword">if</span> (buildin_cd(argc, argv) != <span class="hljs-literal">NULL</span>) &#123;<br> <span class="hljs-built_in">memset</span>(cwd_cache, <span class="hljs-number">0</span>, MAX_PATH_LEN);<br> <span class="hljs-built_in">strcpy</span>(cwd_cache, final_path);<br>      &#125;<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;pwd&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>      buildin_pwd(argc, argv);<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;ps&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>      buildin_ps(argc, argv);<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;clear&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>      buildin_clear(argc, argv);<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;mkdir&quot;</span>, argv[<span class="hljs-number">0</span>]))&#123;<br>      buildin_mkdir(argc, argv);<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;rmdir&quot;</span>, argv[<span class="hljs-number">0</span>]))&#123;<br>      buildin_rmdir(argc, argv);<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;rm&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>      buildin_rm(argc, argv);<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;help&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>      buildin_help(argc, argv);<br>   &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-comment">// 如果是外部命令,需要从磁盘上加载</span><br>      <span class="hljs-type">int32_t</span> pid = fork();<br>      <span class="hljs-keyword">if</span> (pid) &#123;   <span class="hljs-comment">// 父进程</span><br> <span class="hljs-type">int32_t</span> status;<br> <span class="hljs-type">int32_t</span> child_pid = wait(&amp;status);          <span class="hljs-comment">// 此时子进程若没有执行exit,my_shell会被阻塞,不再响应键入的命令</span><br> <span class="hljs-keyword">if</span> (child_pid == <span class="hljs-number">-1</span>) &#123;     <span class="hljs-comment">// 按理说程序正确的话不会执行到这句,fork出的进程便是shell子进程</span><br>    PANIC(<span class="hljs-string">&quot;my_shell: no child\n&quot;</span>);<br> &#125;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child_pid %d, it&#x27;s status: %d\n&quot;</span>, child_pid, status);<br>      &#125; <span class="hljs-keyword">else</span> &#123;   <span class="hljs-comment">// 子进程</span><br> make_clear_abs_path(argv[<span class="hljs-number">0</span>], final_path);<br> argv[<span class="hljs-number">0</span>] = final_path;<br><br> <span class="hljs-comment">/* 先判断下文件是否存在 */</span><br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">file_stat</span>;</span><br> <span class="hljs-built_in">memset</span>(&amp;file_stat, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> stat));<br> <span class="hljs-keyword">if</span> (stat(argv[<span class="hljs-number">0</span>], &amp;file_stat) == <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;my_shell: cannot access %s: No such file or directory\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br> &#125; <span class="hljs-keyword">else</span> &#123;<br>    execv(argv[<span class="hljs-number">0</span>], argv);<br> &#125;<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fsfsh新增"><a class="markdownIt-Anchor" href="#fsfsh新增"></a> fs/fs.h新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sys_help</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><h3 id="fsfsc新增"><a class="markdownIt-Anchor" href="#fsfsc新增"></a> fs/fs.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">* 显示系统支持的内部命令 */<br><span class="hljs-type">void</span> <span class="hljs-title function_">sys_help</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   printk(<span class="hljs-string">&quot;\</span><br><span class="hljs-string"> buildin commands:\n\</span><br><span class="hljs-string">       ls: show directory or file information\n\</span><br><span class="hljs-string">       cd: change current work directory\n\</span><br><span class="hljs-string">       mkdir: create a directory\n\</span><br><span class="hljs-string">       rmdir: remove a empty directory\n\</span><br><span class="hljs-string">       rm: remove a regular file\n\</span><br><span class="hljs-string">       pwd: show current work directory\n\</span><br><span class="hljs-string">       ps: show process information\n\</span><br><span class="hljs-string">       clear: clear screen\n\</span><br><span class="hljs-string"> shortcut key:\n\</span><br><span class="hljs-string">       ctrl+l: clear screen\n\</span><br><span class="hljs-string">       ctrl+u: clear input\n\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="shellbuildin_cmdh新增"><a class="markdownIt-Anchor" href="#shellbuildin_cmdh新增"></a> shell/buildin_cmd.h新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">buildin_help</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc, <span class="hljs-type">char</span>** argv)</span>;<br></code></pre></td></tr></table></figure><h3 id="shellbuildin_cmdc新增"><a class="markdownIt-Anchor" href="#shellbuildin_cmdc新增"></a> shell/buildin_cmd.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 显示内建命令列表 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">buildin_help</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br>   help();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="增加系统调用略-2"><a class="markdownIt-Anchor" href="#增加系统调用略-2"></a> 增加系统调用（略）</h3><p>syscall.c<br />syscall.h<br />syscall_init.c</p><h3 id="kernelmainc修改-5"><a class="markdownIt-Anchor" href="#kernelmainc修改-5"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../shell/shell.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../shell/pipe.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br><br><span class="hljs-comment">/*************    写入应用程序    *************/</span><br>  <span class="hljs-type">uint32_t</span> file_size = <span class="hljs-number">5580</span>; <br>  <span class="hljs-type">uint32_t</span> sec_cnt = DIV_ROUND_UP(file_size, <span class="hljs-number">512</span>);<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">sda</span> =</span> &amp;channels[<span class="hljs-number">0</span>].devices[<span class="hljs-number">0</span>];<br>  <span class="hljs-type">void</span>* prog_buf = sys_malloc(file_size);<br>  ide_read(sda, <span class="hljs-number">300</span>, prog_buf, sec_cnt);<br>  <span class="hljs-type">int32_t</span> fd = sys_open(<span class="hljs-string">&quot;/cat&quot;</span>, O_CREAT|O_RDWR);<br>  <span class="hljs-keyword">if</span> (fd != <span class="hljs-number">-1</span>) &#123;<br>     <span class="hljs-keyword">if</span>(sys_write(fd, prog_buf, file_size) == <span class="hljs-number">-1</span>) &#123;<br>        printk(<span class="hljs-string">&quot;file write error!\n&quot;</span>);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>     &#125;<br>  &#125;<br><span class="hljs-comment">/*************    写入应用程序结束   *************/</span><br>   cls_screen();<br>   console_put_str(<span class="hljs-string">&quot;[rabbit@localhost /]$ &quot;</span>);<br>   thread_exit(running_thread(), <span class="hljs-literal">true</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* init进程 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> ret_pid = fork();<br>   <span class="hljs-keyword">if</span>(ret_pid) &#123;  <span class="hljs-comment">// 父进程</span><br>      <span class="hljs-type">int</span> status;<br>      <span class="hljs-type">int</span> child_pid;<br>       <span class="hljs-comment">/* init在此处不停的回收僵尸进程 */</span><br>       <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>  child_pid = wait(&amp;status);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I`m init, My pid is 1, I recieve a child, It`s pid is %d, status is %d\n&quot;</span>, child_pid, status);<br>       &#125;<br>   &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 子进程</span><br>      my_shell();<br>   &#125;<br>   PANIC(<span class="hljs-string">&quot;init: should not be here&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="makefile修改-2"><a class="markdownIt-Anchor" href="#makefile修改-2"></a> makefile修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><code class="hljs c">BUILD_DIR = ./build<br>ENTRY_POINT = <span class="hljs-number">0xc0001500</span><br>AS = nasm<br>CC = gcc<br>LD = ld<br>LIB = -I lib/ -I lib/kernel/ -I lib/user/ -I kernel/ -I device/ <br>ASFLAGS = -f elf<br>CFLAGS = -Wall -m32 -fno-<span class="hljs-built_in">stack</span>-protector $(LIB) -c -fno-builtin -W -Wstrict-prototypes -Wmissing-prototypes<br>LDFLAGS =  -m elf_i386 -Ttext $(ENTRY_POINT) -e main -Map $(BUILD_DIR)/kernel.<span class="hljs-built_in">map</span><br>OBJS = $(BUILD_DIR)/main.o $(BUILD_DIR)/init.o $(BUILD_DIR)/interrupt.o \<br>      $(BUILD_DIR)/timer.o $(BUILD_DIR)/kernel.o $(BUILD_DIR)/print.o $(BUILD_DIR)/<span class="hljs-keyword">switch</span>.o \<br>      $(BUILD_DIR)/debug.o $(BUILD_DIR)/<span class="hljs-built_in">string</span>.o $(BUILD_DIR)/memory.o \<br>      $(BUILD_DIR)/bitmap.o $(BUILD_DIR)/thread.o $(BUILD_DIR)/<span class="hljs-built_in">list</span>.o \<br>      $(BUILD_DIR)/sync.o $(BUILD_DIR)/console.o $(BUILD_DIR)/keyboard.o \<br>      $(BUILD_DIR)/ioqueue.o $(BUILD_DIR)/tss.o $(BUILD_DIR)/process.o \<br>      $(BUILD_DIR)/syscall-init.o $(BUILD_DIR)/syscall.o $(BUILD_DIR)/stdio.o \<br>      $(BUILD_DIR)/stdio-kernel.o $(BUILD_DIR)/ide.o $(BUILD_DIR)/fs.o $(BUILD_DIR)/inode.o \<br>      $(BUILD_DIR)/file.o $(BUILD_DIR)/dir.o $(BUILD_DIR)/fork.o $(BUILD_DIR)/shell.o \<br>      $(BUILD_DIR)/buildin_cmd.o $(BUILD_DIR)/assert.o $(BUILD_DIR)/exec.o \<br>  $(BUILD_DIR)/wait_exit.o $(BUILD_DIR)/pipe.o<br>      <br>#############<span class="hljs-meta">#     c代码编译     ###############</span><br>$(BUILD_DIR)/main.o: kernel/main.c lib/kernel/print.h \<br>        lib/stdint.h kernel/init.h lib/<span class="hljs-built_in">string</span>.h kernel/memory.h \<br>        thread/thread.h kernel/interrupt.h device/console.h \<br>        device/keyboard.h device/ioqueue.h userprog/process.h \<br>        lib/user/syscall.h userprog/syscall-init.h lib/stdio.h \<br>        lib/kernel/stdio-kernel.h fs/file.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/init.o: kernel/init.c kernel/init.h lib/kernel/print.h \<br>        lib/stdint.h kernel/interrupt.h device/timer.h kernel/memory.h \<br>        thread/thread.h device/console.h device/keyboard.h userprog/tss.h \<br>        userprog/syscall-init.h device/ide.h fs/fs.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/interrupt.o: kernel/interrupt.c kernel/interrupt.h \<br>        lib/stdint.h kernel/global.h lib/kernel/io.h lib/kernel/print.h \<br>        kernel/kernel.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/timer.o: device/timer.c device/timer.h lib/kernel/io.h lib/kernel/print.h \<br>        kernel/interrupt.h thread/thread.h kernel/debug.h kernel/global.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/debug.o: kernel/debug.c kernel/debug.h \<br>        lib/kernel/print.h lib/stdint.h kernel/interrupt.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/<span class="hljs-built_in">string</span>.o: lib/<span class="hljs-built_in">string</span>.c lib/<span class="hljs-built_in">string</span>.h \<br>kernel/debug.h kernel/global.h lib/user/assert.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/memory.o: kernel/memory.c kernel/memory.h \<br>lib/stdint.h lib/kernel/bitmap.h kernel/debug.h lib/<span class="hljs-built_in">string</span>.h kernel/global.h \<br>thread/sync.h thread/thread.h lib/kernel/<span class="hljs-built_in">list</span>.h kernel/interrupt.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/bitmap.o: lib/kernel/bitmap.c lib/kernel/bitmap.h kernel/global.h \<br>lib/<span class="hljs-built_in">string</span>.h kernel/interrupt.h lib/kernel/print.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/thread.o: thread/thread.c thread/thread.h \<br>lib/stdint.h lib/<span class="hljs-built_in">string</span>.h kernel/global.h kernel/memory.h \<br>kernel/debug.h kernel/interrupt.h lib/kernel/print.h \<br>userprog/process.h thread/sync.h lib/user/syscall.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/<span class="hljs-built_in">list</span>.o: lib/kernel/<span class="hljs-built_in">list</span>.c lib/kernel/<span class="hljs-built_in">list</span>.h \<br>kernel/interrupt.h lib/stdint.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/sync.o: thread/sync.c thread/sync.h \<br>lib/stdint.h thread/thread.h kernel/debug.h kernel/interrupt.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/console.o: device/console.c device/console.h \<br>lib/kernel/print.h thread/sync.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/keyboard.o: device/keyboard.c device/keyboard.h \<br>lib/kernel/print.h lib/kernel/io.h kernel/interrupt.h \<br>kernel/global.h lib/stdint.h device/ioqueue.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/ioqueue.o: device/ioqueue.c device/ioqueue.h \<br>kernel/interrupt.h kernel/global.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/tss.o: userprog/tss.c userprog/tss.h \<br>kernel/global.h thread/thread.h lib/kernel/print.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/process.o: userprog/process.c userprog/process.h \<br>lib/<span class="hljs-built_in">string</span>.h kernel/global.h kernel/memory.h lib/kernel/print.h \<br>thread/thread.h kernel/interrupt.h kernel/debug.h device/console.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/syscall-init.o: userprog/syscall-init.c userprog/syscall-init.h \<br>lib/user/syscall.h lib/stdint.h lib/kernel/print.h kernel/interrupt.h thread/thread.h \<br>kernel/memory.h fs/file.h userprog/fork.h lib/kernel/stdio-kernel.h userprog/exec.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/syscall.o: lib/user/syscall.c lib/user/syscall.h fs/file.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/stdio.o: lib/stdio.c lib/stdio.h lib/stdint.h lib/<span class="hljs-built_in">string</span>.h lib/user/syscall.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/stdio-kernel.o: lib/kernel/stdio-kernel.c lib/kernel/stdio-kernel.h \<br>lib/stdio.h device/console.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/ide.o: device/ide.c device/ide.h lib/stdint.h kernel/debug.h \<br>lib/kernel/stdio-kernel.h lib/stdio.h kernel/global.h thread/sync.h \<br>lib/kernel/io.h device/timer.h kernel/interrupt.h lib/kernel/<span class="hljs-built_in">list</span>.h fs/fs.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/fs.o: fs/fs.c fs/fs.h lib/stdint.h kernel/global.h device/ide.h fs/inode.h fs/dir.h \<br>fs/super_block.h lib/kernel/stdio-kernel.h lib/<span class="hljs-built_in">string</span>.h kernel/debug.h lib/kernel/<span class="hljs-built_in">list</span>.h \<br>fs/file.h thread/thread.h device/ioqueue.h device/keyboard.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/inode.o: fs/inode.c fs/inode.h device/ide.h kernel/debug.h thread/thread.h \<br>kernel/memory.h lib/<span class="hljs-built_in">string</span>.h lib/kernel/<span class="hljs-built_in">list</span>.h kernel/interrupt.h lib/kernel/bitmap.h \<br>fs/file.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/file.o: fs/file.c fs/file.h lib/kernel/stdio-kernel.h thread/thread.h device/ide.h \<br>fs/file.h kernel/global.h kernel/interrupt.h device/console.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/dir.o: fs/dir.c fs/dir.h device/ide.h fs/fs.h fs/inode.h kernel/memory.h lib/<span class="hljs-built_in">string</span>.h lib/stdint.h \<br>lib/kernel/stdio-kernel.h kernel/debug.h fs/file.h kernel/memory.h lib/<span class="hljs-built_in">string</span>.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/fork.o: userprog/fork.c userprog/fork.h kernel/global.h lib/stdint.h lib/<span class="hljs-built_in">string</span>.h \<br>kernel/memory.h kernel/interrupt.h thread/sync.h thread/thread.h  kernel/debug.h userprog/process.h \<br>lib/kernel/stdio-kernel.h fs/file.h lib/kernel/<span class="hljs-built_in">list</span>.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/shell.o: shell/shell.c shell/shell.h lib/stdint.h fs/fs.h \<br>    lib/user/syscall.h lib/stdio.h lib/stdint.h kernel/global.h lib/user/assert.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/buildin_cmd.o: shell/buildin_cmd.c shell/buildin_cmd.h fs/file.h fs/fs.h kernel/debug.h \<br>lib/<span class="hljs-built_in">string</span>.h lib/user/syscall.h fs/dir.h fs/fs.h lib/stdio.h shell/shell.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/assert.o: lib/user/assert.c lib/user/assert.h lib/stdio.h lib/stdint.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/exec.o: userprog/exec.c userprog/exec.h thread/thread.h lib/stdint.h \<br>    lib/kernel/<span class="hljs-built_in">list</span>.h kernel/global.h lib/kernel/bitmap.h kernel/memory.h \<br>     lib/kernel/stdio-kernel.h fs/fs.h lib/<span class="hljs-built_in">string</span>.h lib/stdint.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/wait_exit.o: userprog/wait_exit.c userprog/wait_exit.h \<br>    thread/thread.h lib/stdint.h lib/kernel/<span class="hljs-built_in">list</span>.h \<br>     kernel/global.h lib/kernel/bitmap.h kernel/memory.h kernel/debug.h \<br>      thread/thread.h lib/kernel/stdio-kernel.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/pipe.o: shell/pipe.c shell/pipe.h lib/stdint.h kernel/memory.h \<br>    lib/kernel/bitmap.h kernel/global.h lib/kernel/<span class="hljs-built_in">list</span>.h fs/fs.h fs/file.h \<br>     device/ide.h thread/sync.h thread/thread.h fs/dir.h fs/inode.h fs/fs.h \<br>      device/ioqueue.h thread/thread.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>##############    汇编代码编译    ###############<br>$(BUILD_DIR)/kernel.o: kernel/kernel.S<br>$(AS) $(ASFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/print.o: lib/kernel/print.S<br>$(AS) $(ASFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/<span class="hljs-keyword">switch</span>.o: thread/<span class="hljs-keyword">switch</span>.S<br>$(AS) $(ASFLAGS) $&lt; -o $@<br><br>##############    链接所有目标文件    #############<br>$(BUILD_DIR)/kernel.bin: $(OBJS)<br>$(LD) $(LDFLAGS) $^ -o $@<br><br>.PHONY : mk_dir hd clean all<br><br>mk_dir:<br><span class="hljs-keyword">if</span> [ ! -d $(BUILD_DIR) ]; then mkdir $(BUILD_DIR); fi<br><br>hd:<br>dd <span class="hljs-keyword">if</span>=$(BUILD_DIR)/kernel.bin \<br>           of=/home/podest/bochs/hd60M.img \<br>           bs=<span class="hljs-number">512</span> count=<span class="hljs-number">200</span> seek=<span class="hljs-number">9</span> conv=notrunc<br><br>clean:<br>cd $(BUILD_DIR) &amp;&amp; rm -f  .<span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">build: $(BUILD_DIR)/kernel.bin</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">all: mk_dir build hd</span><br></code></pre></td></tr></table></figure><h3 id="运行结果-5"><a class="markdownIt-Anchor" href="#运行结果-5"></a> 运行结果</h3><p><img src="/img/os/os15.11.png" alt="图为bochs运行界面" /></p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>终于完成，写个简单的总结吧。从7月5日拿到这本书到今天8月10日，历时1个月多一点的时间，总的来说效果还是非常好的，这也是我真正意义上的第一个项目，接触了许多硬件交互、汇编，还有os的一些算法，等以后能力提升了可能再会翻看一下这本书的某些章节，补充下博客，不过那都是后话了。虽然成品还是非常简陋的，不过还是非常高兴的。更令我自己没想到的是，这一个月同步进行了数学建模的集训、模拟和学生会的一些琐事，最终也是全部顺利完成了。下一步的话，准备回顾一下寒假时学的计网，写一下自顶向下的lab，实操一下，也会同步在博客上。顺带提一下，os的全部代码我上传到github上了，有兴趣的同学可以自行翻阅。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十五章 终章 呈现系统交互界面(中)</title>
    <link href="/2022/08/09/os(15-2)/"/>
    <url>/2022/08/09/os(15-2)/</url>
    
    <content type="html"><![CDATA[<h1 id="第十五章-终章-呈现系统交互界面中"><a class="markdownIt-Anchor" href="#第十五章-终章-呈现系统交互界面中"></a> 第十五章 终章 呈现系统交互界面(中)</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>这一中章全都是书上实现shell这一部分，为了呈现方便，直接采用了最终的代码，没有一步步按照书上的代码去展示。</p><h2 id="实现shell"><a class="markdownIt-Anchor" href="#实现shell"></a> 实现shell</h2><h3 id="shellshellh创建"><a class="markdownIt-Anchor" href="#shellshellh创建"></a> shell/shell.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __SHELL_SHELL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __SHELL_SHELL_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_prompt</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">readline</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf,<span class="hljs-type">int32_t</span> count)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">my_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int32_t</span> <span class="hljs-title function_">cmd_parse</span><span class="hljs-params">(<span class="hljs-type">char</span>* cmd_str,<span class="hljs-type">char</span>** argv,<span class="hljs-type">char</span> token)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="shellshellc创建"><a class="markdownIt-Anchor" href="#shellshellc创建"></a> shell/shell.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;shell.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../kernel/debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;buildin_cmd.h&quot;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_ARG_NR 16   <span class="hljs-comment">// 加上命令名外,最多支持15个参数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmd_len 128    <span class="hljs-comment">//最大支持键入128个字符的命令行输入</span></span><br><br><span class="hljs-comment">/* 存储输入的命令 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> cmd_line[cmd_len] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">char</span> final_path[MAX_PATH_LEN] = &#123;<span class="hljs-number">0</span>&#125;;      <span class="hljs-comment">// 用于洗路径时的缓冲</span><br><br><span class="hljs-comment">/* 用来记录当前目录,是当前目录的缓存,每次执行cd命令时会更新此内容 */</span><br><span class="hljs-type">char</span> cwd_cache[<span class="hljs-number">64</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">char</span>* argv[MAX_ARG_NR] = &#123;<span class="hljs-literal">NULL</span>&#125;;<br><span class="hljs-type">int32_t</span> argc = <span class="hljs-number">-1</span>;<br><br><span class="hljs-comment">/* 输出提示符 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_prompt</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[rabbit@localhost %s]$ &quot;</span>, cwd_cache);<br>&#125;<br><br><span class="hljs-comment">/* 从键盘缓冲区中最多读入count个字节到buf。*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">readline</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">int32_t</span> count)</span> &#123;<br>   ASSERT(buf != <span class="hljs-literal">NULL</span> &amp;&amp; count &gt; <span class="hljs-number">0</span>);<br>   <span class="hljs-type">char</span>* pos = buf;<br><br>   <span class="hljs-keyword">while</span> (read(stdin_no, pos, <span class="hljs-number">1</span>) != <span class="hljs-number">-1</span> &amp;&amp; (pos - buf) &lt; count) &#123; <span class="hljs-comment">// 在不出错情况下,直到找到回车符才返回</span><br>      <span class="hljs-keyword">switch</span> (*pos) &#123;<br>       <span class="hljs-comment">/* 找到回车或换行符后认为键入的命令结束,直接返回 */</span><br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\n&#x27;</span>:<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\r&#x27;</span>:<br>    *pos = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 添加cmd_line的终止字符0</span><br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    <span class="hljs-keyword">return</span>;<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\b&#x27;</span>:<br>    <span class="hljs-keyword">if</span> (buf[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;\b&#x27;</span>) &#123;<span class="hljs-comment">// 阻止删除非本次输入的信息</span><br>       --pos;   <span class="hljs-comment">// 退回到缓冲区cmd_line中上一个字符</span><br>       <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\b&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-comment">/* ctrl+l 清屏 */</span><br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;l&#x27;</span> - <span class="hljs-string">&#x27;a&#x27;</span>: <br>    <span class="hljs-comment">/* 1 先将当前的字符&#x27;l&#x27;-&#x27;a&#x27;置为0 */</span><br>    *pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">/* 2 再将屏幕清空 */</span><br>    clear();<br>    <span class="hljs-comment">/* 3 打印提示符 */</span><br>    print_prompt();<br>    <span class="hljs-comment">/* 4 将之前键入的内容再次打印 */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, buf);<br>    <span class="hljs-keyword">break</span>;<br><br> <span class="hljs-comment">/* ctrl+u 清掉输入 */</span><br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;u&#x27;</span> - <span class="hljs-string">&#x27;a&#x27;</span>:<br>    <span class="hljs-keyword">while</span> (buf != pos) &#123;<br>       <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\b&#x27;</span>);<br>       *(pos--) = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br> <span class="hljs-comment">/* 非控制键则输出字符 */</span><br> <span class="hljs-keyword">default</span>:<br>    <span class="hljs-built_in">putchar</span>(*pos);<br>    pos++;<br>      &#125;<br>   &#125;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;readline: can`t find enter_key in the cmd_line, max num of char is 128\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/* 分析字符串cmd_str中以token为分隔符的单词,将各单词的指针存入argv数组 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int32_t</span> <span class="hljs-title function_">cmd_parse</span><span class="hljs-params">(<span class="hljs-type">char</span>* cmd_str, <span class="hljs-type">char</span>** argv, <span class="hljs-type">char</span> token)</span> &#123;<br>   ASSERT(cmd_str != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">int32_t</span> arg_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span>(arg_idx &lt; MAX_ARG_NR) &#123;<br>      argv[arg_idx] = <span class="hljs-literal">NULL</span>;<br>      arg_idx++;<br>   &#125;<br>   <span class="hljs-type">char</span>* next = cmd_str;<br>   <span class="hljs-type">int32_t</span> argc = <span class="hljs-number">0</span>;<br>   <span class="hljs-comment">/* 外层循环处理整个命令行 */</span><br>   <span class="hljs-keyword">while</span>(*next) &#123;<br>      <span class="hljs-comment">/* 去除命令字或参数之间的空格 */</span><br>      <span class="hljs-keyword">while</span>(*next == token) &#123;<br> next++;<br>      &#125;<br>      <span class="hljs-comment">/* 处理最后一个参数后接空格的情况,如&quot;ls dir2 &quot; */</span><br>      <span class="hljs-keyword">if</span> (*next == <span class="hljs-number">0</span>) &#123;<br> <span class="hljs-keyword">break</span>; <br>      &#125;<br>      argv[argc] = next;<br><br>     <span class="hljs-comment">/* 内层循环处理命令行中的每个命令字及参数 */</span><br>      <span class="hljs-keyword">while</span> (*next &amp;&amp; *next != token) &#123;  <span class="hljs-comment">// 在字符串结束前找单词分隔符</span><br> next++;<br>      &#125;<br><br>      <span class="hljs-comment">/* 如果未结束(是token字符),使tocken变成0 */</span><br>      <span class="hljs-keyword">if</span> (*next) &#123;<br> *next++ = <span class="hljs-number">0</span>;<span class="hljs-comment">// 将token字符替换为字符串结束符0,做为一个单词的结束,并将字符指针next指向下一个字符</span><br>      &#125;<br>   <br>      <span class="hljs-comment">/* 避免argv数组访问越界,参数过多则返回0 */</span><br>      <span class="hljs-keyword">if</span> (argc &gt; MAX_ARG_NR) &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      &#125;<br>      argc++;<br>   &#125;<br>   <span class="hljs-keyword">return</span> argc;<br>&#125;<br><br><span class="hljs-comment">/* 简单的shell */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">my_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   cwd_cache[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;/&#x27;</span>;<br>   <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>      print_prompt(); <br>      <span class="hljs-built_in">memset</span>(final_path, <span class="hljs-number">0</span>, MAX_PATH_LEN);<br>      <span class="hljs-built_in">memset</span>(cmd_line, <span class="hljs-number">0</span>, cmd_len);<br>      readline(cmd_line, cmd_len);<br><br>      <span class="hljs-keyword">if</span> (cmd_line[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 若只键入了一个回车</span><br>      <span class="hljs-keyword">continue</span>;<br>      &#125;<br><br>      argc = <span class="hljs-number">-1</span>;<br>      argc = cmd_parse(cmd_line, argv, <span class="hljs-string">&#x27; &#x27;</span>);<br>      <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">-1</span>) &#123;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num of arguments exceed %d\n&quot;</span>, MAX_ARG_NR);<br>         <span class="hljs-keyword">continue</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;ls&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>         buildin_ls(argc, argv);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;cd&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>         <span class="hljs-keyword">if</span> (buildin_cd(argc, argv) != <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">memset</span>(cwd_cache, <span class="hljs-number">0</span>, MAX_PATH_LEN);<br>            <span class="hljs-built_in">strcpy</span>(cwd_cache, final_path);<br>         &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;pwd&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>         buildin_pwd(argc, argv);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;ps&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>         buildin_ps(argc, argv);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;clear&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>         buildin_clear(argc, argv);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;mkdir&quot;</span>, argv[<span class="hljs-number">0</span>]))&#123;<br>         buildin_mkdir(argc, argv);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;rmdir&quot;</span>, argv[<span class="hljs-number">0</span>]))&#123;<br>         buildin_rmdir(argc, argv);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;rm&quot;</span>, argv[<span class="hljs-number">0</span>])) &#123;<br>         buildin_rm(argc, argv);<br>      &#125; <br>  &#125;<br>   panic(<span class="hljs-string">&quot;my_shell: should not be here&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="devicekeyboardc修改"><a class="markdownIt-Anchor" href="#devicekeyboardc修改"></a> device/keyboard.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;io.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ioqueue.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KBD_BUF_PORT 0X60</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KBD_BUF_PORT 0X60</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> esc <span class="hljs-string">&#x27;\033&#x27;</span><span class="hljs-comment">//esc 和 delete都没有</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> delete <span class="hljs-string">&#x27;\0177&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> enter <span class="hljs-string">&#x27;\r&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tab <span class="hljs-string">&#x27;\t&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> backspace <span class="hljs-string">&#x27;\b&#x27;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> char_invisible 0<span class="hljs-comment">//功能性 不可见字符均设置为0</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ctrl_l_char char_invisible</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ctrl_r_char char_invisible </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> shift_l_char char_invisible</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> shift_r_char char_invisible</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> alt_l_char char_invisible</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> alt_r_char char_invisible</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> caps_lock_char char_invisible</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> shift_l_make 0x2a</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> shift_r_make 0x36</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> alt_l_make 0x38</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> alt_r_make 0xe038</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> alt_r_break 0xe0b8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ctrl_l_make 0x1d</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ctrl_r_make 0xe01d</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ctrl_r_break 0xe09d</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> caps_lock_make 0x3a</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ioqueue</span> <span class="hljs-title">kbd_buf</span>;</span>   <span class="hljs-comment">// 定义键盘缓冲区</span><br><br><span class="hljs-type">bool</span> ctrl_status = <span class="hljs-literal">false</span>,shift_status = <span class="hljs-literal">false</span>,alt_status = <span class="hljs-literal">false</span>,caps_lock_status = <span class="hljs-literal">false</span>,ext_scancode = <span class="hljs-literal">false</span>;<br><br><br><span class="hljs-type">char</span> keymap[][<span class="hljs-number">2</span>] = &#123;<br><span class="hljs-comment">/* 0x00 */</span>&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,<br><span class="hljs-comment">/* 0x01 */</span>&#123;esc,esc&#125;,<br><span class="hljs-comment">/* 0x02 */</span>&#123;<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;!&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x03 */</span>&#123;<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;@&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x04 */</span>&#123;<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;#&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x05 */</span>&#123;<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;$&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x06 */</span>&#123;<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;%&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x07 */</span>&#123;<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;^&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x08 */</span>&#123;<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x09 */</span>&#123;<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x0A */</span>&#123;<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;(&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x0B */</span>&#123;<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;)&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x0C */</span>&#123;<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x0D */</span>&#123;<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;+&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x0E */</span>&#123;backspace, backspace&#125;,<br><span class="hljs-comment">/* 0x0F */</span>&#123;tab,tab&#125;,<br><span class="hljs-comment">/* 0x10 */</span>&#123;<span class="hljs-string">&#x27;q&#x27;</span>,<span class="hljs-string">&#x27;Q&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x11 */</span>&#123;<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;W&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x12 */</span>&#123;<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x13 */</span>&#123;<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;R&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x14 */</span>&#123;<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;T&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x15 */</span>&#123;<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x16 */</span>&#123;<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;U&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x17 */</span>&#123;<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;I&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x18 */</span>&#123;<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;O&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x19 */</span>&#123;<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;P&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x1A */</span>&#123;<span class="hljs-string">&#x27;[&#x27;</span>,<span class="hljs-string">&#x27;&#123;&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x1B */</span>&#123;<span class="hljs-string">&#x27;]&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x1C */</span>&#123;enter,  enter&#125;,<br><span class="hljs-comment">/* 0x1D */</span>&#123;ctrl_l_char, ctrl_l_char&#125;,<br><span class="hljs-comment">/* 0x1E */</span>&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x1F */</span>&#123;<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;S&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x20 */</span>&#123;<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x21 */</span>&#123;<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x22 */</span>&#123;<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;G&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x23 */</span>&#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;H&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x24 */</span>&#123;<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;J&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x25 */</span>&#123;<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;K&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x26 */</span>&#123;<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x27 */</span>&#123;<span class="hljs-string">&#x27;;&#x27;</span>,<span class="hljs-string">&#x27;:&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x28 */</span>&#123;<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&quot;&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x29 */</span>&#123;<span class="hljs-string">&#x27;`&#x27;</span>,<span class="hljs-string">&#x27;~&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x2A */</span>&#123;shift_l_char, shift_l_char&#125;,<br><span class="hljs-comment">/* 0x2B */</span>&#123;<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;|&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x2C */</span>&#123;<span class="hljs-string">&#x27;z&#x27;</span>,<span class="hljs-string">&#x27;Z&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x2D */</span>&#123;<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;X&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x2E */</span>&#123;<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x2F */</span>&#123;<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-string">&#x27;V&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x30 */</span>&#123;<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x31 */</span>&#123;<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;N&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x32 */</span>&#123;<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x33 */</span>&#123;<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x34 */</span>&#123;<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x35 */</span>&#123;<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-string">&#x27;?&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x36*/</span>&#123;shift_r_char, shift_r_char&#125;,<br><span class="hljs-comment">/* 0x37 */</span>&#123;<span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>&#125;,    <br><span class="hljs-comment">/* 0x38 */</span>&#123;alt_l_char, alt_l_char&#125;,<br><span class="hljs-comment">/* 0x39 */</span>&#123;<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x3A */</span>&#123;caps_lock_char, caps_lock_char&#125;<br>&#125;;<br><br><span class="hljs-comment">/* 键盘初始化 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">keyboard_init</span><span class="hljs-params">()</span> <br>&#123;<br>put_str(<span class="hljs-string">&quot;keyboard init start\n&quot;</span>);<br>ioqueue_init(&amp;kbd_buf);<br>register_handler(<span class="hljs-number">0x21</span>, intr_keyboard_handler);<br>put_str(<span class="hljs-string">&quot;keyboard init done\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">intr_keyboard_handler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">bool</span> ctrl_down_last = ctrl_status;<br>    <span class="hljs-type">bool</span> shift_down_last = shift_status;<br>    <span class="hljs-type">bool</span> caps_lock_last = caps_lock_status;<br>    <br>    <span class="hljs-type">bool</span> break_code;<br>    <span class="hljs-type">uint16_t</span> scancode = inb(KBD_BUF_PORT);<br>    <br>    <span class="hljs-keyword">if</span>(scancode == <span class="hljs-number">0xe0</span>)<span class="hljs-comment">//多字节处理</span><br>    &#123;<br>    ext_scancode = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    break_code = ((scancode &amp; <span class="hljs-number">0x0080</span>) != <span class="hljs-number">0</span>); <span class="hljs-comment">//断码 = 通码 + 0x80 通码最小比0x80小 则只有断码才可以有</span><br>    <br>    <span class="hljs-keyword">if</span>(break_code)<br>    &#123;<br>    <span class="hljs-type">uint16_t</span> make_code = (scancode &amp;= <span class="hljs-number">0xff7f</span>); <span class="hljs-comment">//多字节不处理</span><br>    <span class="hljs-keyword">if</span>(make_code == ctrl_l_make || make_code == ctrl_r_make) ctrl_status = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(make_code == shift_l_make || make_code == shift_r_make) shift_status = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(make_code == alt_l_make || make_code == alt_r_make) alt_status = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((scancode &gt; <span class="hljs-number">0x00</span> &amp;&amp; scancode &lt; <span class="hljs-number">0x3b</span>) || (scancode == alt_r_make) || (scancode == ctrl_r_make))<br>    &#123;<br>    <span class="hljs-type">bool</span> shift = <span class="hljs-literal">false</span>; <span class="hljs-comment">//先默认设置成false</span><br>    <span class="hljs-keyword">if</span>((scancode &lt; <span class="hljs-number">0x0e</span>) || (scancode == <span class="hljs-number">0x29</span>) || (scancode == <span class="hljs-number">0x1a</span>) || \<br>    (scancode == <span class="hljs-number">0x1b</span>) || (scancode == <span class="hljs-number">0x2b</span>) || (scancode == <span class="hljs-number">0x27</span>) || \<br>    (scancode == <span class="hljs-number">0x28</span>) || (scancode == <span class="hljs-number">0x33</span>) || (scancode == <span class="hljs-number">0x34</span>) || \<br>    (scancode == <span class="hljs-number">0x35</span>))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(shift_down_last)shift = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(shift_down_last &amp;&amp; caps_lock_last)shift = <span class="hljs-literal">false</span>; <span class="hljs-comment">//效果确实是这样子的 我试了一下</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(shift_down_last || caps_lock_last) shift = <span class="hljs-literal">true</span>; <span class="hljs-comment">//其中任意一个都是大写的作用</span><br>        <span class="hljs-keyword">else</span> shift = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">uint8_t</span> index = (scancode &amp; <span class="hljs-number">0x00ff</span>);<br>        <span class="hljs-type">char</span> cur_char = keymap[index][shift];<br>        <br>        <span class="hljs-keyword">if</span>((ctrl_down_last &amp;&amp; cur_char == <span class="hljs-string">&#x27;l&#x27;</span>) || (ctrl_down_last &amp;&amp; cur_char == <span class="hljs-string">&#x27;u&#x27;</span>))<br>            cur_char -= <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <br>        <span class="hljs-keyword">if</span>(cur_char)<br>        &#123;<br>        <span class="hljs-keyword">if</span>(!ioq_full(&amp;kbd_buf))<br>        ioq_putchar(&amp;kbd_buf,cur_char);<br>        <span class="hljs-comment">//put_char(cur_char);</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br>    <br><span class="hljs-keyword">if</span>(scancode == ctrl_l_make || scancode == ctrl_r_make)    <br>    ctrl_status = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scancode == shift_l_make || scancode == shift_r_make)<br>            shift_status = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scancode == alt_l_make || scancode == alt_r_make)<br>    alt_status = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scancode == caps_lock_make)<br>    caps_lock_status = !caps_lock_status;<br><span class="hljs-keyword">else</span> put_str(<span class="hljs-string">&quot;unknown key\n&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="libusersyscallh修改"><a class="markdownIt-Anchor" href="#libusersyscallh修改"></a> lib/user/syscall.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LIB_USER_SYSCALL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LIB_USER_SYSCALL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SYSCALL_NR</span> &#123;</span><br>   SYS_GETPID,<br>   SYS_WRITE,<br>   SYS_MALLOC,<br>   SYS_FREE,<br>   SYS_FORK,<br>   SYS_READ,<br>   SYS_PUTCHAR,<br>   SYS_CLEAR,<br>   SYS_GETCWD,<br>   SYS_OPEN,<br>   SYS_CLOSE,<br>   SYS_LSEEK,<br>   SYS_UNLINK,<br>   SYS_MKDIR,<br>   SYS_OPENDIR,<br>   SYS_CLOSEDIR,<br>   SYS_CHDIR,<br>   SYS_RMDIR,<br>   SYS_READDIR,<br>   SYS_REWINDDIR,<br>   SYS_STAT,<br>   SYS_PS<br>&#125;;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> size)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr)</span>;<br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="libusersyscallc修改"><a class="markdownIt-Anchor" href="#libusersyscallc修改"></a> lib/user/syscall.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall.h&quot;</span></span><br><br><span class="hljs-comment">/* 无参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall0(NUMBER) (&#123;       \</span><br><span class="hljs-meta">   int retval;               \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><br><span class="hljs-comment">/* 一个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall1(NUMBER, ARG1) (&#123;       \</span><br><span class="hljs-meta">   int retval;               \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 两个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall2(NUMBER, ARG1, ARG2) (&#123;       \</span><br><span class="hljs-meta">   int retval;       \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1), <span class="hljs-string">&quot;c&quot;</span> (ARG2)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 三个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall3(NUMBER, ARG1, ARG2, ARG3) (&#123;       \</span><br><span class="hljs-meta">   int retval;       \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">      <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1), <span class="hljs-string">&quot;c&quot;</span> (ARG2), <span class="hljs-string">&quot;d&quot;</span> (ARG3)       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 返回当前任务pid */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">()</span> <br>&#123;<br>   <span class="hljs-keyword">return</span> _syscall0(SYS_GETPID);<br>&#125;<br><br><span class="hljs-comment">/* 把buf中count个字符写入文件描述符fd */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall3(SYS_WRITE, fd, buf, count);<br>&#125;<br><br><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> size)</span><br>&#123;<br>   <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)_syscall1(SYS_MALLOC, size);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr)</span><br>&#123;<br>   _syscall1(SYS_FREE, ptr);<br>&#125;<br><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>   <span class="hljs-keyword">return</span> _syscall0(SYS_FORK);<br>&#125;<br><br><span class="hljs-comment">/* 从文件描述符fd中读取count个字节到buf */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall3(SYS_READ, fd, buf, count);<br>&#125;<br><br><span class="hljs-comment">/* 输出一个字符 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">putchar</span><span class="hljs-params">(<span class="hljs-type">char</span> char_asci)</span> &#123;<br>   _syscall1(SYS_PUTCHAR, char_asci);<br>&#125;<br><br><span class="hljs-comment">/* 清空屏幕 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   _syscall0(SYS_CLEAR);<br>&#125;<br><br><span class="hljs-comment">/* 获取当前工作目录 */</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">getcwd</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">uint32_t</span> size)</span> &#123;<br>   <span class="hljs-keyword">return</span> (<span class="hljs-type">char</span>*)_syscall2(SYS_GETCWD, buf, size);<br>&#125;<br><br><span class="hljs-comment">/* 以flag方式打开文件pathname */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">open</span><span class="hljs-params">(<span class="hljs-type">char</span>* pathname, <span class="hljs-type">uint8_t</span> flag)</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall2(SYS_OPEN, pathname, flag);<br>&#125;<br><br><span class="hljs-comment">/* 关闭文件fd */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">close</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd)</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall1(SYS_CLOSE, fd);<br>&#125;<br><br><span class="hljs-comment">/* 设置文件偏移量 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">lseek</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">int32_t</span> offset, <span class="hljs-type">uint8_t</span> whence)</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall3(SYS_LSEEK, fd, offset, whence);<br>&#125;<br><br><span class="hljs-comment">/* 删除文件pathname */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">unlink</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname)</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall1(SYS_UNLINK, pathname);<br>&#125;<br><br><span class="hljs-comment">/* 创建目录pathname */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">mkdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname)</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall1(SYS_MKDIR, pathname);<br>&#125;<br><br><span class="hljs-comment">/* 打开目录name */</span><br><span class="hljs-keyword">struct</span> dir* <span class="hljs-title function_">opendir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span> &#123;<br>   <span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> dir*)_syscall1(SYS_OPENDIR, name);<br>&#125;<br><br><span class="hljs-comment">/* 关闭目录dir */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">closedir</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* dir)</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall1(SYS_CLOSEDIR, dir);<br>&#125;<br><br><span class="hljs-comment">/* 删除目录pathname */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">rmdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname)</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall1(SYS_RMDIR, pathname);<br>&#125;<br><br><span class="hljs-comment">/* 读取目录dir */</span><br><span class="hljs-keyword">struct</span> dir_entry* <span class="hljs-title function_">readdir</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* dir)</span> &#123;<br>   <span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> dir_entry*)_syscall1(SYS_READDIR, dir);<br>&#125;<br><br><span class="hljs-comment">/* 回归目录指针 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">rewinddir</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* dir)</span> &#123;<br>   _syscall1(SYS_REWINDDIR, dir);<br>&#125;<br><br><span class="hljs-comment">/* 获取path属性到buf中 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">stat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* path, <span class="hljs-keyword">struct</span> stat* buf)</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall2(SYS_STAT, path, buf);<br>&#125;<br><br><span class="hljs-comment">/* 改变工作目录为path */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">chdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* path)</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall1(SYS_CHDIR, path);<br>&#125;<br><br><span class="hljs-comment">/* 显示任务列表 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ps</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   _syscall0(SYS_PS);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="userprogsyscall-initc修改"><a class="markdownIt-Anchor" href="#userprogsyscall-initc修改"></a> userprog/syscall-init.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../kernel/memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fork.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> syscall_nr 32 </span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span>* syscall;<br>syscall syscall_table[syscall_nr];<br><br><span class="hljs-comment">/* 返回当前任务的pid */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">sys_getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>   <span class="hljs-keyword">return</span> running_thread()-&gt;pid;<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化系统调用 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">syscall_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;syscall_init start\n&quot;</span>);<br>   syscall_table[SYS_GETPID]= sys_getpid;<br>   syscall_table[SYS_WRITE]    = sys_write;<br>   syscall_table[SYS_MALLOC]= sys_malloc;<br>   syscall_table[SYS_FREE]    = sys_free;<br>   syscall_table[SYS_FORK]    = sys_fork;<br>   syscall_table[SYS_READ]    = sys_read;<br>   syscall_table[SYS_PUTCHAR]= console_put_char;<br>   syscall_table[SYS_CLEAR]    = cls_screen;<br>   syscall_table[SYS_GETCWD]= sys_getcwd;<br>   syscall_table[SYS_OPEN]    = sys_open;<br>   syscall_table[SYS_CLOSE]    = sys_close;<br>   syscall_table[SYS_LSEEK]    = sys_lseek;<br>   syscall_table[SYS_UNLINK]= sys_unlink;<br>   syscall_table[SYS_MKDIR]    = sys_mkdir;<br>   syscall_table[SYS_OPENDIR]= sys_opendir;<br>   syscall_table[SYS_CLOSEDIR]= sys_closedir;<br>   syscall_table[SYS_CHDIR]    = sys_chdir;<br>   syscall_table[SYS_RMDIR]    = sys_rmdir;<br>   syscall_table[SYS_READDIR]= sys_readdir;<br>   syscall_table[SYS_REWINDDIR]= sys_rewinddir;<br>   syscall_table[SYS_STAT]    = sys_stat;<br>   syscall_table[SYS_PS]    = sys_ps;<br><br>   put_str(<span class="hljs-string">&quot;syscall_init done\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="threadthreadc新增"><a class="markdownIt-Anchor" href="#threadthreadc新增"></a> thread/thread.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">pad_print</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf,<span class="hljs-type">int32_t</span> buf_len,<span class="hljs-type">void</span>* ptr,<span class="hljs-type">char</span> format)</span><br>&#123;<br>    <span class="hljs-built_in">memset</span>(buf,<span class="hljs-number">0</span>,buf_len);<br>    <span class="hljs-type">uint8_t</span> out_pad_0idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">switch</span>(format)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>            out_pad_0idx = <span class="hljs-built_in">sprintf</span>(buf,<span class="hljs-string">&quot;%s&quot;</span>,ptr);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>            out_pad_0idx = <span class="hljs-built_in">sprintf</span>(buf,<span class="hljs-string">&quot;%d&quot;</span>,*((<span class="hljs-type">int16_t</span>*)ptr));<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;x&#x27;</span>:<br>            out_pad_0idx = <span class="hljs-built_in">sprintf</span>(buf,<span class="hljs-string">&quot;%x&quot;</span>,*((<span class="hljs-type">uint32_t</span>*)ptr));   <br>    &#125;<br>    <span class="hljs-keyword">while</span>(out_pad_0idx &lt; buf_len)<br>    &#123;<br>        buf[out_pad_0idx] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        out_pad_0idx++;<br>    &#125;<br>    sys_write(stdout_no,buf,buf_len<span class="hljs-number">-1</span>);<br>&#125;<br><br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">elem2thread_info</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* pelem,<span class="hljs-type">int</span> arg)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">pthread</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> task_struct,all_list_tag,pelem);<br>    <span class="hljs-type">char</span> out_pad[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    pad_print(out_pad,<span class="hljs-number">16</span>,&amp;pthread-&gt;pid,<span class="hljs-string">&#x27;d&#x27;</span>);<br>    <br>    <span class="hljs-keyword">if</span>(pthread-&gt;parent_pid == <span class="hljs-number">-1</span>)<br>    pad_print(out_pad,<span class="hljs-number">16</span>,<span class="hljs-string">&quot;NULL&quot;</span>,<span class="hljs-string">&#x27;s&#x27;</span>);<br>    <span class="hljs-keyword">else</span><br>        pad_print(out_pad,<span class="hljs-number">16</span>,&amp;pthread-&gt;parent_pid,<span class="hljs-string">&#x27;d&#x27;</span>);<br>        <br>    <span class="hljs-keyword">switch</span>(pthread-&gt;status)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            pad_print(out_pad,<span class="hljs-number">16</span>,<span class="hljs-string">&quot;RUNNING&quot;</span>,<span class="hljs-string">&#x27;s&#x27;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            pad_print(out_pad,<span class="hljs-number">16</span>,<span class="hljs-string">&quot;READY&quot;</span>,<span class="hljs-string">&#x27;s&#x27;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            pad_print(out_pad,<span class="hljs-number">16</span>,<span class="hljs-string">&quot;BLOCKED&quot;</span>,<span class="hljs-string">&#x27;s&#x27;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            pad_print(out_pad,<span class="hljs-number">16</span>,<span class="hljs-string">&quot;WAITING&quot;</span>,<span class="hljs-string">&#x27;s&#x27;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            pad_print(out_pad,<span class="hljs-number">16</span>,<span class="hljs-string">&quot;HANGING&quot;</span>,<span class="hljs-string">&#x27;s&#x27;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            pad_print(out_pad,<span class="hljs-number">16</span>,<span class="hljs-string">&quot;DIED&quot;</span>,<span class="hljs-string">&#x27;s&#x27;</span>);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    pad_print(out_pad,<span class="hljs-number">16</span>,&amp;pthread-&gt;elapsed_ticks,<span class="hljs-string">&#x27;x&#x27;</span>);<br>    <br>    <span class="hljs-built_in">memset</span>(out_pad,<span class="hljs-number">0</span>,<span class="hljs-number">16</span>);<br>    ASSERT(<span class="hljs-built_in">strlen</span>(pthread-&gt;name) &lt; <span class="hljs-number">17</span>);<br>    <span class="hljs-built_in">memcpy</span>(out_pad,pthread-&gt;name,<span class="hljs-built_in">strlen</span>(pthread-&gt;name));<br>    <span class="hljs-built_in">strcat</span>(out_pad,<span class="hljs-string">&quot;\n&quot;</span>);<br>    sys_write(stdout_no,out_pad,<span class="hljs-built_in">strlen</span>(out_pad));<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><br><span class="hljs-comment">//打印任务列表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sys_ps</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span>* ps_title = <span class="hljs-string">&quot;PID             PPID            STAT             TICKS            COMMAND\n&quot;</span>;<br>    sys_write(stdout_no,ps_title,<span class="hljs-built_in">strlen</span>(ps_title));<br>    list_traversal(&amp;thread_all_list,elem2thread_info,<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="shellbuildin_cmdh创建"><a class="markdownIt-Anchor" href="#shellbuildin_cmdh创建"></a> shell/buildin_cmd.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __SHELL_BUILDIN_CMD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __SHELL_BUILDIN_CMD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wash_path</span><span class="hljs-params">(<span class="hljs-type">char</span>* old_abs_path,<span class="hljs-type">char</span>* new_abs_path)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">make_clear_abs_path</span><span class="hljs-params">(<span class="hljs-type">char</span>* path,<span class="hljs-type">char</span>* final_path)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">buildin_pwd</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span>;<br><span class="hljs-type">char</span>* <span class="hljs-title function_">buildin_cd</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">buildin_ls</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">buildin_ps</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">buildin_clear</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span>;<br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">buildin_mkdir</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span>;<br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">buildin_rmdir</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span>;<br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">buildin_rm</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="shellbuildin_cmdc创建"><a class="markdownIt-Anchor" href="#shellbuildin_cmdc创建"></a> shell/buildin_cmd.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;buildin_cmd.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/dir.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;shell.h&quot;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> final_path[<span class="hljs-number">160</span>];<br><br><span class="hljs-comment">//在用户态就把路径给解析出来</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">wash_path</span><span class="hljs-params">(<span class="hljs-type">char</span>* old_abs_path,<span class="hljs-type">char</span>* new_abs_path)</span><br>&#123;<br>    ASSERT(old_abs_path[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span>);<br>    <span class="hljs-type">char</span> name[MAX_FILE_NAME_LEN] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">char</span>* sub_path = old_abs_path;<br>    sub_path = path_parse(sub_path,name);<br>    <br>    <span class="hljs-comment">//如果直接就是根目录 直接返回即可</span><br>    <span class="hljs-keyword">if</span>(name[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>)<br>    &#123;<br>        new_abs_path[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;/&#x27;</span>;<br>        new_abs_path[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    new_abs_path[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <br>    <span class="hljs-built_in">strcat</span>(new_abs_path,<span class="hljs-string">&quot;/&quot;</span>);<br>    <span class="hljs-keyword">while</span>(name[<span class="hljs-number">0</span>])<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;..&quot;</span>,name))   <span class="hljs-comment">//返回上级</span><br>        &#123;<br>            <span class="hljs-type">char</span>* slash_ptr = <span class="hljs-built_in">strrchr</span>(new_abs_path,<span class="hljs-string">&#x27;/&#x27;</span>); <span class="hljs-comment">//等于移动到最偏右的/位置去</span><br>            <span class="hljs-keyword">if</span>(slash_ptr != new_abs_path)   <span class="hljs-comment">//如果为 /aaa 那么移动之后就到/的位置了 如果是/aaa/bbb 那么就会回到/aaa/</span><br>                *slash_ptr = <span class="hljs-number">0</span>; <span class="hljs-comment">// 把/变成0</span><br>            <span class="hljs-keyword">else</span><br>        *(slash_ptr+<span class="hljs-number">1</span>) = <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果是 / 或者 /aaa 那么都回到/ 则把最右边+1置零位即可</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;.&quot;</span>,name))  <span class="hljs-comment">//如果不是到. 增加到后米纳即可 .等于没有作用 继续遍历即可</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(new_abs_path,<span class="hljs-string">&quot;/&quot;</span>))  <span class="hljs-comment">//不是 / 防止出现// 的情况</span><br>                <span class="hljs-built_in">strcat</span>(new_abs_path,<span class="hljs-string">&quot;/&quot;</span>);<br>            <span class="hljs-built_in">strcat</span>(new_abs_path,name);<br>        &#125;<br>        <br>        <span class="hljs-built_in">memset</span>(name,<span class="hljs-number">0</span>,MAX_FILE_NAME_LEN);<br>        <span class="hljs-keyword">if</span>(sub_path)<br>            sub_path = path_parse(sub_path,name);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//把path处理 . ..去掉 储存在final_path getcwd得到当前工作目录 + 相对路径 即绝对路径</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">make_clear_abs_path</span><span class="hljs-params">(<span class="hljs-type">char</span>* path,<span class="hljs-type">char</span>* final_path)</span><br>&#123;<br>    <span class="hljs-type">char</span> abs_path[MAX_PATH_LEN] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">if</span>(path[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;/&#x27;</span>)  <span class="hljs-comment">//如果不是绝对路径就弄成绝对路径</span><br>    &#123;<br>        <span class="hljs-built_in">memset</span>(abs_path,<span class="hljs-number">0</span>,MAX_PATH_LEN);<br>        <span class="hljs-keyword">if</span>(getcwd(abs_path,MAX_PATH_LEN) != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!((abs_path[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) &amp;&amp; abs_path[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>))<br>                <span class="hljs-built_in">strcat</span>(abs_path,<span class="hljs-string">&quot;/&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//把path 加到工作目录的头上</span><br>    <span class="hljs-built_in">strcat</span>(abs_path,path);<br>    wash_path(abs_path,final_path);<br>&#125;<br><br><span class="hljs-comment">// pwd命令中的内建函数 得到当前工作目录</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">buildin_pwd</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span><br>&#123;<br>    <span class="hljs-comment">//没有参数才可以</span><br>    <span class="hljs-keyword">if</span>(argc != <span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pwd: no argument support!\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(getcwd(final_path,MAX_PATH_LEN) != <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,final_path);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pwd: get current work directory failed\n&quot;</span>);<br>    &#125;   <br>&#125;<br><br><span class="hljs-comment">// 支持一个参数 改变当前工作目录</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">buildin_cd</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(argc &gt; <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cd: only support 1 argument!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(argc == <span class="hljs-number">1</span>)<br>    &#123;<br>        final_path[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;/&#x27;</span>;<br>        final_path[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>    make_clear_abs_path(argv[<span class="hljs-number">1</span>],final_path);<br>    <br>    <span class="hljs-keyword">if</span>(chdir(final_path) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cd: no such directory %s\n&quot;</span>,final_path);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> final_path;   <br>&#125;<br><br><span class="hljs-comment">// ls内建函数 仅支持-l -h -h等于不支持 哈哈</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">buildin_ls</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span><br>&#123;<br>    <span class="hljs-type">char</span>* pathname = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">file_stat</span>;</span><br>    <span class="hljs-built_in">memset</span>(&amp;file_stat,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> stat));<br>    <span class="hljs-type">bool</span> long_info = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">uint32_t</span> arg_path_nr = <span class="hljs-number">0</span>;  <br>    <span class="hljs-type">uint32_t</span> arg_idx = <span class="hljs-number">1</span>;    <span class="hljs-comment">//第一个字符串是 ls 跳过</span><br>    <span class="hljs-keyword">while</span>(arg_idx &lt; argc)    <span class="hljs-comment">//仅仅支持 ls 或者 ls -l 或者 ls -l path的形式</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(argv[arg_idx][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;-l&quot;</span>,argv[arg_idx]))<br>                long_info = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;-h&quot;</span>,argv[arg_idx]))<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;usage: -l list all all information about the file.\nnot support -h now sry - -\n&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ls: invaild option %s\nTry &#x27;ls -l&#x27; u can get what u want\n&quot;</span>,argv[arg_idx]);<br>                <span class="hljs-keyword">return</span>; <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(arg_path_nr == <span class="hljs-number">0</span>)<br>            &#123;<br>                pathname = argv[arg_idx];<br>                arg_path_nr = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ls: only support one path\n&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        ++arg_idx;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(pathname == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//ls 或者 ls -l</span><br>    &#123;<br>        <span class="hljs-comment">//得到工作目录</span><br>        <span class="hljs-keyword">if</span>(getcwd(final_path,MAX_PATH_LEN) != <span class="hljs-literal">NULL</span>)<br>    pathname = final_path;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ls: getcwd for default path failed\n&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        make_clear_abs_path(pathname,final_path);<br>        pathname = final_path;<br>    &#125;<br>    <br>    <span class="hljs-comment">//目录下的文件</span><br>    <span class="hljs-keyword">if</span>(stat(pathname,&amp;file_stat) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ls: cannot access %s: No such file or directory\n&quot;</span>,pathname);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(file_stat.st_filetype == FT_DIRECTORY)  <span class="hljs-comment">//得到目录文件才继续</span><br>    &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span>* <span class="hljs-title">dir</span> =</span> opendir(pathname); <span class="hljs-comment">//得到目录指针</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">dir_e</span> =</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-type">char</span> sub_pathname[MAX_PATH_LEN] = &#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-type">uint32_t</span> pathname_len   = <span class="hljs-built_in">strlen</span>(pathname);<br>        <span class="hljs-type">uint32_t</span> last_char_idx  = pathname_len - <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">memcpy</span>(sub_pathname,pathname,pathname_len);<br>        <br>        <span class="hljs-comment">//方便后面得到当前目录下的文件stat信息 </span><br>        <span class="hljs-comment">//加个/ 之后每个文件加文件名stat即可</span><br>        <span class="hljs-keyword">if</span>(sub_pathname[last_char_idx] != <span class="hljs-string">&#x27;/&#x27;</span>) <br>        &#123;<br>            sub_pathname[pathname_len] = <span class="hljs-string">&#x27;/&#x27;</span>; <br>            ++pathname_len;<br>        &#125;<br>        <br>        rewinddir(dir);  <span class="hljs-comment">//目录指针指向0  方便readdir遍历目录项</span><br>        <span class="hljs-keyword">if</span>(long_info)    <span class="hljs-comment">// ls -l 这里是目录的ls</span><br>        &#123;<br>            <span class="hljs-type">char</span> ftype;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;total: %d\n&quot;</span>,file_stat.st_size);<br>            <span class="hljs-keyword">while</span>((dir_e = readdir(dir)))    <span class="hljs-comment">//通过readdir来遍历目录项 我还专门回去看了看这个函数</span><br>            &#123;<br>                ftype = <span class="hljs-string">&#x27;d&#x27;</span>;<br>                <span class="hljs-keyword">if</span>(dir_e-&gt;f_type == FT_REGULAR)<br>                    ftype = <span class="hljs-string">&#x27;-&#x27;</span>;<br>                sub_pathname[pathname_len] = <span class="hljs-number">0</span>; <span class="hljs-comment">//把字符串末尾设0 方便strcat函数</span><br>                <span class="hljs-built_in">strcat</span>(sub_pathname,dir_e-&gt;filename);<br>                <span class="hljs-built_in">memset</span>(&amp;file_stat,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> stat));<br>                <span class="hljs-keyword">if</span>(stat(sub_pathname,&amp;file_stat) == <span class="hljs-number">-1</span>)<br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ls: cannot access %s:No such file or directory\n&quot;</span>,dir_e-&gt;filename);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c    %d    %d    %s\n&quot;</span>,ftype,dir_e-&gt;i_no,file_stat.st_size,dir_e-&gt;filename);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>  <span class="hljs-comment">//仅仅是ls 把文件名写出来即可</span><br>        &#123;<br>            <span class="hljs-keyword">while</span>((dir_e = readdir(dir)))<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s  &quot;</span>,dir_e-&gt;filename);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        closedir(dir);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(long_info)<br>             <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-    %d    %d    %s\n&quot;</span>,file_stat.st_ino,file_stat.st_size,pathname);<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,pathname);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">buildin_ps</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span><br>&#123;<br>     <span class="hljs-comment">//不应该有参数</span><br>    <span class="hljs-keyword">if</span>(argc != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ps: no argument support!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    ps();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">buildin_clear</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(argc != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;clear: no argument support!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    clear();<br>&#125;<br><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">buildin_mkdir</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span><br>&#123;<br>    <span class="hljs-comment">//必须要有一个 安装路径参数</span><br>    <span class="hljs-type">int32_t</span> ret = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(argc != <span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;mkdir: only support 1 argument!\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        make_clear_abs_path(argv[<span class="hljs-number">1</span>],final_path);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;/&quot;</span>,final_path))  <span class="hljs-comment">//不是根目录 根目录一直都在</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(mkdir(final_path) == <span class="hljs-number">0</span>)<br>                ret = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;mkdir: create directory %s failed.\n&quot;</span>,argv[<span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">buildin_rmdir</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span><br>&#123;<br>    <span class="hljs-type">int32_t</span> ret = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(argc != <span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;rmdir: only support 1 argument!\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        make_clear_abs_path(argv[<span class="hljs-number">1</span>],final_path);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;/&quot;</span>,final_path)) <span class="hljs-comment">// 不能删除根目录</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(rmdir(final_path) == <span class="hljs-number">0</span>)<br>                ret = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;rmdir: remove %s failed\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">buildin_rm</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> argc,<span class="hljs-type">char</span>** argv)</span><br>&#123;<br>    <span class="hljs-type">int32_t</span> ret = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(argc != <span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;rm: only support 1 argument!\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        make_clear_abs_path(argv[<span class="hljs-number">1</span>],final_path);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;/&quot;</span>,final_path))<br>        &#123;<br>            <span class="hljs-keyword">if</span>(unlink(final_path) == <span class="hljs-number">0</span>)<br>                ret = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;rm: delete %s failed\n&quot;</span>,argv[<span class="hljs-number">1</span>]); <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="libuserasserth创建"><a class="markdownIt-Anchor" href="#libuserasserth创建"></a> lib/user/assert.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LIB_USER_ASSERT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LIB_USER_ASSERT_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NULL ((void*)0)</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">user_spin</span><span class="hljs-params">(<span class="hljs-type">char</span>* filename, <span class="hljs-type">int</span> line, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* func, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* condition)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> panic(...) user_spin(__FILE__, __LINE__, __func__, __VA_ARGS__)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> NDEBUG</span><br>   <span class="hljs-meta">#<span class="hljs-keyword">define</span> assert(CONDITION) ((void)0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>   <span class="hljs-meta">#<span class="hljs-keyword">define</span> assert(CONDITION)  \</span><br><span class="hljs-meta">      <span class="hljs-keyword">if</span> (!(CONDITION)) &#123;     \</span><br><span class="hljs-meta"> panic(#CONDITION);   \</span><br><span class="hljs-meta">      &#125;    </span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">/*NDEBUG*/</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">/*__LIB_USER_ASSERT_H*/</span></span><br></code></pre></td></tr></table></figure><h3 id="libuserassertc创建"><a class="markdownIt-Anchor" href="#libuserassertc创建"></a> lib/user/assert.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;assert.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">user_spin</span><span class="hljs-params">(<span class="hljs-type">char</span>* filename, <span class="hljs-type">int</span> line, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* func, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* condition)</span> &#123;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n\nfilename %s\nline %d\nfunction %s\ncondition %s\n&quot;</span>, filename, line, func, condition);<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改"><a class="markdownIt-Anchor" href="#kernelmainc修改"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../shell/shell.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br>   intr_enable();<br>cls_screen();<br>console_put_str(<span class="hljs-string">&quot;[rabbit@localhost /]$ &quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* init进程 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> ret_pid = fork();<br>   <span class="hljs-keyword">if</span>(ret_pid) &#123;  <span class="hljs-comment">// 父进程</span><br>       <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 子进程</span><br>      my_shell();<br>   &#125;<br>   PANIC(<span class="hljs-string">&quot;init: should not be here&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="makefile修改"><a class="markdownIt-Anchor" href="#makefile修改"></a> makefile修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs c">BUILD_DIR = ./build<br>ENTRY_POINT = <span class="hljs-number">0xc0001500</span><br>AS = nasm<br>CC = gcc<br>LD = ld<br>LIB = -I lib/ -I lib/kernel/ -I lib/user/ -I kernel/ -I device/ <br>ASFLAGS = -f elf<br>CFLAGS = -Wall -m32 -fno-<span class="hljs-built_in">stack</span>-protector $(LIB) -c -fno-builtin -W -Wstrict-prototypes -Wmissing-prototypes<br>LDFLAGS =  -m elf_i386 -Ttext $(ENTRY_POINT) -e main -Map $(BUILD_DIR)/kernel.<span class="hljs-built_in">map</span><br>OBJS = $(BUILD_DIR)/main.o $(BUILD_DIR)/init.o $(BUILD_DIR)/interrupt.o \<br>      $(BUILD_DIR)/timer.o $(BUILD_DIR)/kernel.o $(BUILD_DIR)/print.o $(BUILD_DIR)/<span class="hljs-keyword">switch</span>.o \<br>      $(BUILD_DIR)/debug.o $(BUILD_DIR)/<span class="hljs-built_in">string</span>.o $(BUILD_DIR)/memory.o \<br>      $(BUILD_DIR)/bitmap.o $(BUILD_DIR)/thread.o $(BUILD_DIR)/<span class="hljs-built_in">list</span>.o \<br>      $(BUILD_DIR)/sync.o $(BUILD_DIR)/console.o $(BUILD_DIR)/keyboard.o \<br>      $(BUILD_DIR)/ioqueue.o $(BUILD_DIR)/tss.o $(BUILD_DIR)/process.o \<br>      $(BUILD_DIR)/syscall-init.o $(BUILD_DIR)/syscall.o $(BUILD_DIR)/stdio.o \<br>      $(BUILD_DIR)/stdio-kernel.o $(BUILD_DIR)/ide.o $(BUILD_DIR)/fs.o $(BUILD_DIR)/inode.o \<br>      $(BUILD_DIR)/file.o $(BUILD_DIR)/dir.o $(BUILD_DIR)/fork.o $(BUILD_DIR)/shell.o \<br>      $(BUILD_DIR)/buildin_cmd.o<br>      <br>#############<span class="hljs-meta">#     c代码编译     ###############</span><br>$(BUILD_DIR)/main.o: kernel/main.c lib/kernel/print.h \<br>        lib/stdint.h kernel/init.h lib/<span class="hljs-built_in">string</span>.h kernel/memory.h \<br>        thread/thread.h kernel/interrupt.h device/console.h \<br>        device/keyboard.h device/ioqueue.h userprog/process.h \<br>        lib/user/syscall.h userprog/syscall-init.h lib/stdio.h \<br>        lib/kernel/stdio-kernel.h fs/file.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/init.o: kernel/init.c kernel/init.h lib/kernel/print.h \<br>        lib/stdint.h kernel/interrupt.h device/timer.h kernel/memory.h \<br>        thread/thread.h device/console.h device/keyboard.h userprog/tss.h \<br>        userprog/syscall-init.h device/ide.h fs/fs.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/interrupt.o: kernel/interrupt.c kernel/interrupt.h \<br>        lib/stdint.h kernel/global.h lib/kernel/io.h lib/kernel/print.h \<br>        kernel/kernel.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/timer.o: device/timer.c device/timer.h lib/kernel/io.h lib/kernel/print.h \<br>        kernel/interrupt.h thread/thread.h kernel/debug.h kernel/global.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/debug.o: kernel/debug.c kernel/debug.h \<br>        lib/kernel/print.h lib/stdint.h kernel/interrupt.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/<span class="hljs-built_in">string</span>.o: lib/<span class="hljs-built_in">string</span>.c lib/<span class="hljs-built_in">string</span>.h \<br>kernel/debug.h kernel/global.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/memory.o: kernel/memory.c kernel/memory.h \<br>lib/stdint.h lib/kernel/bitmap.h kernel/debug.h lib/<span class="hljs-built_in">string</span>.h kernel/global.h \<br>thread/sync.h thread/thread.h lib/kernel/<span class="hljs-built_in">list</span>.h kernel/interrupt.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/bitmap.o: lib/kernel/bitmap.c lib/kernel/bitmap.h kernel/global.h \<br>lib/<span class="hljs-built_in">string</span>.h kernel/interrupt.h lib/kernel/print.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/thread.o: thread/thread.c thread/thread.h \<br>lib/stdint.h lib/<span class="hljs-built_in">string</span>.h kernel/global.h kernel/memory.h \<br>kernel/debug.h kernel/interrupt.h lib/kernel/print.h \<br>userprog/process.h thread/sync.h lib/user/syscall.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/<span class="hljs-built_in">list</span>.o: lib/kernel/<span class="hljs-built_in">list</span>.c lib/kernel/<span class="hljs-built_in">list</span>.h \<br>kernel/interrupt.h lib/stdint.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/sync.o: thread/sync.c thread/sync.h \<br>lib/stdint.h thread/thread.h kernel/debug.h kernel/interrupt.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/console.o: device/console.c device/console.h \<br>lib/kernel/print.h thread/sync.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/keyboard.o: device/keyboard.c device/keyboard.h \<br>lib/kernel/print.h lib/kernel/io.h kernel/interrupt.h \<br>kernel/global.h lib/stdint.h device/ioqueue.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/ioqueue.o: device/ioqueue.c device/ioqueue.h \<br>kernel/interrupt.h kernel/global.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/tss.o: userprog/tss.c userprog/tss.h \<br>kernel/global.h thread/thread.h lib/kernel/print.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/process.o: userprog/process.c userprog/process.h \<br>lib/<span class="hljs-built_in">string</span>.h kernel/global.h kernel/memory.h lib/kernel/print.h \<br>thread/thread.h kernel/interrupt.h kernel/debug.h device/console.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/syscall-init.o: userprog/syscall-init.c userprog/syscall-init.h \<br>lib/user/syscall.h lib/stdint.h lib/kernel/print.h kernel/interrupt.h thread/thread.h \<br>kernel/memory.h fs/file.h userprog/fork.h lib/kernel/stdio-kernel.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/syscall.o: lib/user/syscall.c lib/user/syscall.h fs/file.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/stdio.o: lib/stdio.c lib/stdio.h lib/stdint.h lib/<span class="hljs-built_in">string</span>.h lib/user/syscall.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/stdio-kernel.o: lib/kernel/stdio-kernel.c lib/kernel/stdio-kernel.h \<br>lib/stdio.h device/console.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/ide.o: device/ide.c device/ide.h lib/stdint.h kernel/debug.h \<br>lib/kernel/stdio-kernel.h lib/stdio.h kernel/global.h thread/sync.h \<br>lib/kernel/io.h device/timer.h kernel/interrupt.h lib/kernel/<span class="hljs-built_in">list</span>.h fs/fs.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/fs.o: fs/fs.c fs/fs.h lib/stdint.h kernel/global.h device/ide.h fs/inode.h fs/dir.h \<br>fs/super_block.h lib/kernel/stdio-kernel.h lib/<span class="hljs-built_in">string</span>.h kernel/debug.h lib/kernel/<span class="hljs-built_in">list</span>.h \<br>fs/file.h thread/thread.h device/ioqueue.h device/keyboard.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/inode.o: fs/inode.c fs/inode.h device/ide.h kernel/debug.h thread/thread.h \<br>kernel/memory.h lib/<span class="hljs-built_in">string</span>.h lib/kernel/<span class="hljs-built_in">list</span>.h kernel/interrupt.h lib/kernel/bitmap.h \<br>fs/file.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/file.o: fs/file.c fs/file.h lib/kernel/stdio-kernel.h thread/thread.h device/ide.h \<br>fs/file.h kernel/global.h kernel/interrupt.h device/console.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/dir.o: fs/dir.c fs/dir.h device/ide.h fs/fs.h fs/inode.h kernel/memory.h lib/<span class="hljs-built_in">string</span>.h lib/stdint.h \<br>lib/kernel/stdio-kernel.h kernel/debug.h fs/file.h kernel/memory.h lib/<span class="hljs-built_in">string</span>.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/fork.o: userprog/fork.c userprog/fork.h kernel/global.h lib/stdint.h lib/<span class="hljs-built_in">string</span>.h \<br>kernel/memory.h kernel/interrupt.h thread/sync.h thread/thread.h  kernel/debug.h userprog/process.h \<br>lib/kernel/stdio-kernel.h fs/file.h lib/kernel/<span class="hljs-built_in">list</span>.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/shell.o: shell/shell.c shell/shell.h kernel/global.h lib/stdint.h lib/<span class="hljs-built_in">string</span>.h \<br>lib/user/syscall.h lib/stdio.h fs/file.h kernel/debug.h shell/buildin_cmd.h fs/fs.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/buildin_cmd.o: shell/buildin_cmd.c shell/buildin_cmd.h fs/file.h fs/fs.h kernel/debug.h \<br>lib/<span class="hljs-built_in">string</span>.h lib/user/syscall.h fs/dir.h fs/fs.h lib/stdio.h shell/shell.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>##############    汇编代码编译    ###############<br>$(BUILD_DIR)/kernel.o: kernel/kernel.S<br>$(AS) $(ASFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/print.o: lib/kernel/print.S<br>$(AS) $(ASFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/<span class="hljs-keyword">switch</span>.o: thread/<span class="hljs-keyword">switch</span>.S<br>$(AS) $(ASFLAGS) $&lt; -o $@<br><br>##############    链接所有目标文件    #############<br>$(BUILD_DIR)/kernel.bin: $(OBJS)<br>$(LD) $(LDFLAGS) $^ -o $@<br><br>.PHONY : mk_dir hd clean all<br><br>mk_dir:<br><span class="hljs-keyword">if</span> [ ! -d $(BUILD_DIR) ]; then mkdir $(BUILD_DIR); fi<br><br>hd:<br>dd <span class="hljs-keyword">if</span>=$(BUILD_DIR)/kernel.bin \<br>           of=/home/podest/bochs/hd60M.img \<br>           bs=<span class="hljs-number">512</span> count=<span class="hljs-number">200</span> seek=<span class="hljs-number">9</span> conv=notrunc<br><br>clean:<br>cd $(BUILD_DIR) &amp;&amp; rm -f  .<span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">build: $(BUILD_DIR)/kernel.bin</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">all: mk_dir build hd</span><br></code></pre></td></tr></table></figure><h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h3><p><img src="/img/os/os15.2.png" alt="图为bochs运行界面" /><br /><img src="/img/os/os15.3.png" alt="图为bochs运行界面" /><br /><img src="/img/os/os15.4.png" alt="图为bochs运行界面" /><br /><img src="/img/os/os15.5.png" alt="图为bochs运行界面" /></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十五章 终章 呈现系统交互界面(上)</title>
    <link href="/2022/08/09/os(15-1)/"/>
    <url>/2022/08/09/os(15-1)/</url>
    
    <content type="html"><![CDATA[<h1 id="第十五章-终章-呈现系统交互界面上"><a class="markdownIt-Anchor" href="#第十五章-终章-呈现系统交互界面上"></a> 第十五章 终章 呈现系统交互界面(上)</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>今儿8月9日，必拿下！</p><h2 id="fork实现"><a class="markdownIt-Anchor" href="#fork实现"></a> fork实现</h2><h3 id="threadthreadh修改"><a class="markdownIt-Anchor" href="#threadthreadh修改"></a> thread/thread.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../kernel/memory.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK_NAME_LEN 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_FILES_OPEN_PER_PROC 8</span><br><span class="hljs-comment">/* 自定义通用函数类型,它将在很多线程函数中做为形参类型 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> <span class="hljs-title function_">thread_func</span><span class="hljs-params">(<span class="hljs-type">void</span>*)</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int16_t</span> <span class="hljs-type">pid_t</span>;<br><br><span class="hljs-comment">/* 进程或线程的状态 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> </span><br><span class="hljs-class">&#123;</span><br>   TASK_RUNNING,<br>   TASK_READY,<br>   TASK_BLOCKED,<br>   TASK_WAITING,<br>   TASK_HANGING,<br>   TASK_DIED<br>&#125;;<br><br><span class="hljs-comment">/***********   中断栈intr_stack   ***********</span><br><span class="hljs-comment"> * 此结构用于中断发生时保护程序(线程或进程)的上下文环境:</span><br><span class="hljs-comment"> * 进程或线程被外部中断或软中断打断时,会按照此结构压入上下文</span><br><span class="hljs-comment"> * 寄存器,  intr_exit中的出栈操作是此结构的逆操作</span><br><span class="hljs-comment"> * 此栈在线程自己的内核栈中位置固定,所在页的最顶端</span><br><span class="hljs-comment">********************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">intr_stack</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">uint32_t</span> vec_no; <span class="hljs-comment">// kernel.S 宏VECTOR中push %1压入的中断号</span><br>    <span class="hljs-type">uint32_t</span> edi;<br>    <span class="hljs-type">uint32_t</span> esi;<br>    <span class="hljs-type">uint32_t</span> ebp;<br>    <span class="hljs-type">uint32_t</span> esp_dummy; <span class="hljs-comment">// 虽然pushad把esp也压入,但esp是不断变化的,所以会被popad忽略</span><br>    <span class="hljs-type">uint32_t</span> ebx;<br>    <span class="hljs-type">uint32_t</span> edx;<br>    <span class="hljs-type">uint32_t</span> ecx;<br>    <span class="hljs-type">uint32_t</span> eax;<br>    <span class="hljs-type">uint32_t</span> gs;<br>    <span class="hljs-type">uint32_t</span> fs;<br>    <span class="hljs-type">uint32_t</span> es;<br>    <span class="hljs-type">uint32_t</span> ds;<br><br><span class="hljs-comment">/* 以下由cpu从低特权级进入高特权级时压入 */</span><br>    <span class="hljs-type">uint32_t</span> err_code; <span class="hljs-comment">// err_code会被压入在eip之后</span><br>    <span class="hljs-type">void</span> (*eip) (<span class="hljs-type">void</span>);<br>    <span class="hljs-type">uint32_t</span> cs;<br>    <span class="hljs-type">uint32_t</span> eflags;<br>    <span class="hljs-type">void</span>* esp;<br>    <span class="hljs-type">uint32_t</span> ss;<br>&#125;;<br><br><span class="hljs-comment">/***********  线程栈thread_stack  ***********</span><br><span class="hljs-comment"> * 线程自己的栈,用于存储线程中待执行的函数</span><br><span class="hljs-comment"> * 此结构在线程自己的内核栈中位置不固定,</span><br><span class="hljs-comment"> * 用在switch_to时保存线程环境。</span><br><span class="hljs-comment"> * 实际位置取决于实际运行情况。</span><br><span class="hljs-comment"> ******************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint32_t</span> ebp;<br>   <span class="hljs-type">uint32_t</span> ebx;<br>   <span class="hljs-type">uint32_t</span> edi;<br>   <span class="hljs-type">uint32_t</span> esi;<br><br><span class="hljs-comment">/* 线程第一次执行时,eip指向待调用的函数kernel_thread </span><br><span class="hljs-comment">其它时候,eip是指向switch_to的返回地址*/</span><br>   <span class="hljs-type">void</span> (*eip) (thread_func* func, <span class="hljs-type">void</span>* func_arg);<br><br><span class="hljs-comment">/*****   以下仅供第一次被调度上cpu时使用   ****/</span><br><br><span class="hljs-comment">/* 参数unused_ret只为占位置充数为返回地址 */</span><br>   <span class="hljs-type">void</span> (*unused_retaddr);<br>   thread_func* function;   <span class="hljs-comment">// 由Kernel_thread所调用的函数名</span><br>   <span class="hljs-type">void</span>* func_arg;    <span class="hljs-comment">// 由Kernel_thread所调用的函数所需的参数</span><br>&#125;;<br><br><span class="hljs-comment">/* 进程或线程的pcb,程序控制块 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint32_t</span>* self_kstack; <span class="hljs-comment">// 各内核线程都用自己的内核栈</span><br>   <span class="hljs-type">pid_t</span> pid;<br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> <span class="hljs-title">status</span>;</span><br>   <span class="hljs-type">char</span> name[TASK_NAME_LEN];<br>   <span class="hljs-type">uint8_t</span> priority;<br>   <span class="hljs-type">uint8_t</span> ticks;   <span class="hljs-comment">// 每次在处理器上执行的时间嘀嗒数</span><br><span class="hljs-comment">/* 此任务自上cpu运行后至今占用了多少cpu嘀嗒数,</span><br><span class="hljs-comment"> * 也就是此任务执行了多久*/</span><br>   <span class="hljs-type">uint32_t</span> elapsed_ticks;<br><span class="hljs-comment">/* general_tag的作用是用于线程在一般的队列中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">general_tag</span>;</span>    <br><span class="hljs-comment">/* all_list_tag的作用是用于线程队列thread_all_list中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">all_list_tag</span>;</span><br>   <span class="hljs-type">uint32_t</span>* pgdir;              <span class="hljs-comment">// 进程自己页表的虚拟地址</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> <span class="hljs-title">userprog_vaddr</span>;</span>   <span class="hljs-comment">// 用户进程的虚拟地址 </span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block_desc</span> <span class="hljs-title">u_block_desc</span>[<span class="hljs-title">DESC_CNT</span>];</span>   <span class="hljs-comment">// 用户进程内存块描述符</span><br>   <span class="hljs-type">uint32_t</span> stack_magic; <span class="hljs-comment">// 用这串数字做栈的边界标记,用于检测栈的溢出</span><br>   <span class="hljs-type">int32_t</span> fd_table[MAX_FILES_OPEN_PER_PROC];<span class="hljs-comment">// 已打开文件数组</span><br>   <span class="hljs-type">uint32_t</span> cwd_inode_nr;<span class="hljs-comment">//进程所在工作目录inode的编号</span><br>   <span class="hljs-type">int16_t</span> parent_pid;     <span class="hljs-comment">// 父进程的pid</span><br>&#125;;<br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_ready_list</span>;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_all_list</span>;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">running_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">kernel_thread</span><span class="hljs-params">(thread_func* function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread,thread_func function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread,<span class="hljs-type">char</span>* name,<span class="hljs-type">int</span> prio)</span>;<br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name,<span class="hljs-type">int</span> prio,thread_func function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_main_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">schedule</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_block</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> task_status stat)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_unblock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> <span class="hljs-title function_">allocate_pid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_yield</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">idle</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="threadthreadc修改"><a class="markdownIt-Anchor" href="#threadthreadc修改"></a> thread/thread.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;thread.h&quot;</span>   <span class="hljs-comment">//函数声明 各种结构体</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span>   <span class="hljs-comment">//前缀</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span>   <span class="hljs-comment">//memset</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span>   <span class="hljs-comment">//不清楚</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span>   <span class="hljs-comment">//分配页需要</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/sync.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/fork.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_SIZE 4096</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">main_thread</span>;</span>    <span class="hljs-comment">// 主线程PCB</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">idle_thread</span>;</span>    <span class="hljs-comment">// idle线程</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_ready_list</span>;</span>    <span class="hljs-comment">// 就绪队列</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_all_list</span>;</span>    <span class="hljs-comment">// 所有任务队列</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">thread_tag</span>;</span><span class="hljs-comment">// 用于保存队列中的线程结点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lock</span> <span class="hljs-title">pid_lock</span>;</span><br><br><br><span class="hljs-comment">/* 获取当前线程pcb指针 */</span><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">running_thread</span><span class="hljs-params">()</span> <br>&#123;<br>   <span class="hljs-type">uint32_t</span> esp; <br><span class="hljs-keyword">asm</span> (<span class="hljs-string">&quot;mov %%esp, %0&quot;</span> : <span class="hljs-string">&quot;=g&quot;</span> (esp));<br><span class="hljs-comment">/* 取esp整数部分即pcb起始地址 */</span><br><span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> task_struct*)(esp &amp; <span class="hljs-number">0xfffff000</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 由kernel_thread去执行function(func_arg) */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">kernel_thread</span><span class="hljs-params">(thread_func* function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* 执行function前要开中断,避免后面的时钟中断被屏蔽,而无法调度其它线程 */</span><br>intr_enable();<br>function(func_arg); <br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程栈thread_stack,将待执行的函数和参数放到thread_stack中相应的位置 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, thread_func function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* 先预留中断使用栈的空间,可见thread.h中定义的结构 */</span><br>pthread-&gt;self_kstack -= <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> intr_stack);<br><br><span class="hljs-comment">/* 再留出线程栈空间,可见thread.h中定义 */</span><br>pthread-&gt;self_kstack -= <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> thread_stack);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span>* <span class="hljs-title">kthread_stack</span> =</span> (<span class="hljs-keyword">struct</span> thread_stack*)pthread-&gt;self_kstack;<br>kthread_stack-&gt;eip = kernel_thread;<br>kthread_stack-&gt;function = function;<br>kthread_stack-&gt;func_arg = func_arg;<br>kthread_stack-&gt;ebp = kthread_stack-&gt;ebx = kthread_stack-&gt;esi = kthread_stack-&gt;edi = <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程基本信息 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, <span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio)</span> <br>&#123;<br><span class="hljs-built_in">memset</span>(pthread, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*pthread));<br>   pthread-&gt;pid = allocate_pid();<br>   <span class="hljs-built_in">strcpy</span>(pthread-&gt;name, name);<br><br><span class="hljs-keyword">if</span> (pthread == main_thread) <br>&#123;<br><span class="hljs-comment">/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */</span><br>pthread-&gt;status = TASK_RUNNING;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>pthread-&gt;status = TASK_READY;<br>&#125;<br><br><span class="hljs-comment">/* self_kstack是线程自己在内核态下使用的栈顶地址 */</span><br>pthread-&gt;self_kstack = (<span class="hljs-type">uint32_t</span>*)((<span class="hljs-type">uint32_t</span>)pthread + PG_SIZE);<br>pthread-&gt;priority = prio;<br>pthread-&gt;ticks = prio;<br>pthread-&gt;elapsed_ticks = <span class="hljs-number">0</span>;<br>pthread-&gt;pgdir = <span class="hljs-literal">NULL</span>;<br>pthread-&gt;cwd_inode_nr = <span class="hljs-number">0</span>; <span class="hljs-comment">//以根目录为默认的工作路径</span><br>pthread-&gt;stack_magic = <span class="hljs-number">0x19870916</span>;  <span class="hljs-comment">// 自定义的魔数</span><br>pthread-&gt;parent_pid = <span class="hljs-number">-1</span>;<br><span class="hljs-comment">/* 标准输入输出先空出来 */</span><br>pthread-&gt;fd_table[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>pthread-&gt;fd_table[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>pthread-&gt;fd_table[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-comment">/* 其余的全置为-1 */</span><br><span class="hljs-type">uint8_t</span> fd_idx = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">while</span> (fd_idx &lt; MAX_FILES_OPEN_PER_PROC) &#123;<br>pthread-&gt;fd_table[fd_idx] = <span class="hljs-number">-1</span>;<br>fd_idx++;<br>&#125;<br><br>&#125;<br><br><br><span class="hljs-comment">/* 创建一优先级为prio的线程,线程名为name,线程所执行的函数是function(func_arg) */</span><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio, thread_func function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">thread</span> =</span> get_kernel_pages(<span class="hljs-number">1</span>);<br>init_thread(thread, name, prio);<br>thread_create(thread, function, func_arg);<br><br><span class="hljs-comment">/* 确保之前不在队列中 */</span><br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;thread-&gt;general_tag));<br><span class="hljs-comment">/* 加入就绪线程队列 */</span><br>list_append(&amp;thread_ready_list, &amp;thread-&gt;general_tag);<br><br><span class="hljs-comment">/* 确保之前不在队列中 */</span><br>ASSERT(!elem_find(&amp;thread_all_list, &amp;thread-&gt;all_list_tag));<br><span class="hljs-comment">/* 加入全部线程队列 */</span><br>list_append(&amp;thread_all_list, &amp;thread-&gt;all_list_tag);<br><br><span class="hljs-keyword">return</span> thread;<br>&#125;<br><br><br><span class="hljs-comment">/* 将kernel中的main函数完善为主线程 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_main_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br><span class="hljs-comment">/* 因为main线程早已运行,咱们在loader.S中进入内核时的mov esp,0xc009f000,</span><br><span class="hljs-comment">就是为其预留了tcb,地址为0xc009e000,因此不需要通过get_kernel_page另分配一页*/</span><br>main_thread = running_thread();<br>init_thread(main_thread, <span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-number">31</span>);<br><br><span class="hljs-comment">/* main函数是当前线程,当前线程不在thread_ready_list中,</span><br><span class="hljs-comment"> * 所以只将其加在thread_all_list中. */</span><br>ASSERT(!elem_find(&amp;thread_all_list, &amp;main_thread-&gt;all_list_tag));<br>list_append(&amp;thread_all_list, &amp;main_thread-&gt;all_list_tag);<br>&#125;<br><br><br><span class="hljs-comment">/* 实现任务调度 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">schedule</span><span class="hljs-params">()</span> <br>&#123;<br>ASSERT(intr_get_status() == INTR_OFF);<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread(); <br><span class="hljs-keyword">if</span> (cur-&gt;status == TASK_RUNNING) <span class="hljs-comment">// 若此线程只是cpu时间片到了,将其加入到就绪队列尾</span><br>&#123; <br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;cur-&gt;general_tag));<br>list_append(&amp;thread_ready_list, &amp;cur-&gt;general_tag);<br>cur-&gt;ticks = cur-&gt;priority;     <span class="hljs-comment">// 重新将当前线程的ticks再重置为其priority;</span><br>cur-&gt;status = TASK_READY;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123; <br><span class="hljs-comment">/* 若此线程需要某事件发生后才能继续上cpu运行,</span><br><span class="hljs-comment">不需要将其加入队列,因为当前线程不在就绪队列中。*/</span><br>&#125;<br><br><span class="hljs-comment">/* 如果就绪队列中没有可运行的任务,就唤醒idle */</span><br><span class="hljs-keyword">if</span> (list_empty(&amp;thread_ready_list)) <br>&#123;<br>thread_unblock(idle_thread);<br>&#125;<br><br>ASSERT(!list_empty(&amp;thread_ready_list));<br>thread_tag = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// thread_tag清空</span><br><span class="hljs-comment">/* 将thread_ready_list队列中的第一个就绪线程弹出,准备将其调度上cpu. */</span><br>thread_tag = list_pop(&amp;thread_ready_list);   <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">next</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> task_struct, general_tag, thread_tag);<br>next-&gt;status = TASK_RUNNING;<br><br>process_activate(next);<br>switch_to(cur, next);<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程环境 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>put_str(<span class="hljs-string">&quot;thread_init start\n&quot;</span>);<br><br>list_init(&amp;thread_ready_list);<br>list_init(&amp;thread_all_list);<br>lock_init(&amp;pid_lock);<br>process_execute(init,<span class="hljs-string">&quot;init&quot;</span>);<br><span class="hljs-comment">/* 将当前main函数创建为线程 */</span><br>make_main_thread();<br><span class="hljs-comment">/* 创建idle线程 */</span><br>  idle_thread = thread_start(<span class="hljs-string">&quot;idle&quot;</span>, <span class="hljs-number">10</span>, idle, <span class="hljs-literal">NULL</span>);<br>put_str(<span class="hljs-string">&quot;thread_init done\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">/* 当前线程将自己阻塞,标志其状态为stat. */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_block</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> task_status stat)</span> <br>&#123;<br><span class="hljs-comment">/* stat取值为TASK_BLOCKED,TASK_WAITING,TASK_HANGING,也就是只有这三种状态才不会被调度*/</span><br>ASSERT(((stat == TASK_BLOCKED) || (stat == TASK_WAITING) || (stat == TASK_HANGING)));<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur_thread</span> =</span> running_thread();<br>cur_thread-&gt;status = stat; <span class="hljs-comment">// 置其状态为stat </span><br>schedule();      <span class="hljs-comment">// 将当前线程换下处理器</span><br><span class="hljs-comment">/* 待当前线程被解除阻塞后才继续运行下面的intr_set_status */</span><br>   intr_set_status(old_status);<br>&#125;<br><br><br><span class="hljs-comment">/* 将线程pthread解除阻塞 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_unblock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread)</span> <br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>ASSERT(((pthread-&gt;status == TASK_BLOCKED) || (pthread-&gt;status == TASK_WAITING) || (pthread-&gt;status == TASK_HANGING)));<br><span class="hljs-keyword">if</span> (pthread-&gt;status != TASK_READY) <br>&#123;<br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;pthread-&gt;general_tag));<br><span class="hljs-keyword">if</span> (elem_find(&amp;thread_ready_list, &amp;pthread-&gt;general_tag)) <br>&#123;<br>PANIC(<span class="hljs-string">&quot;thread_unblock: blocked thread in ready_list\n&quot;</span>);<br>&#125;<br>list_push(&amp;thread_ready_list, &amp;pthread-&gt;general_tag);    <span class="hljs-comment">// 放到队列的最前面,使其尽快得到调度</span><br>pthread-&gt;status = TASK_READY;<br>&#125; <br>intr_set_status(old_status);<br>&#125;<br><br><br><span class="hljs-comment">/* 分配pid */</span><br><span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> <span class="hljs-title function_">allocate_pid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>   <span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> next_pid = <span class="hljs-number">0</span>;<br>   lock_acquire(&amp;pid_lock);<br>   next_pid++;<br>   lock_release(&amp;pid_lock);<br>   <span class="hljs-keyword">return</span> next_pid;<br>&#125;<br><br><br><span class="hljs-comment">/* 系统空闲时运行的线程 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">idle</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <br>&#123;<br>thread_block(TASK_BLOCKED);     <br><span class="hljs-comment">//执行hlt时必须要保证目前处在开中断的情况下</span><br><span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;sti; hlt&quot;</span> : : : <span class="hljs-string">&quot;memory&quot;</span>)</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 主动让出cpu,换其它线程运行 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_yield</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();   <br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>   ASSERT(!elem_find(&amp;thread_ready_list, &amp;cur-&gt;general_tag));<br>   list_append(&amp;thread_ready_list, &amp;cur-&gt;general_tag);<br>   cur-&gt;status = TASK_READY;<br>   schedule();<br>   intr_set_status(old_status);<br>&#125;<br><br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">fork_pid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">return</span> allocate_pid();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmemoryc新增"><a class="markdownIt-Anchor" href="#kernelmemoryc新增"></a> kernel/memory.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//得到1页大小内存并复制到页表中 专门针对fork时虚拟地址位图无需操作</span><br><span class="hljs-comment">//因为位图我们后面会复制父进程的 所以当然不用继续对虚拟位图操作了</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_a_page_without_opvaddrbitmap</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf,<span class="hljs-type">uint32_t</span> vaddr)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span>* <span class="hljs-title">mem_pool</span> =</span> (pf == PF_KERNEL) ? &amp;kernel_pool : &amp;user_pool;<br>    lock_acquire(&amp;mem_pool-&gt;lock);<br>    <span class="hljs-type">void</span>* page_phyaddr = palloc(mem_pool);<br>    <span class="hljs-comment">//分配失败</span><br>    <span class="hljs-keyword">if</span>(page_phyaddr == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        lock_release(&amp;mem_pool-&gt;lock);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    page_table_add((<span class="hljs-type">void</span>*)vaddr,page_phyaddr);<br>    lock_release(&amp;mem_pool-&gt;lock);<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)vaddr;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="userprogforkh创建"><a class="markdownIt-Anchor" href="#userprogforkh创建"></a> userprog/fork.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __USERPROG__FORK_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __USERPROG__FORK_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int32_t</span> <span class="hljs-title function_">copy_pcb_vaddrbitmap_stack0</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* child_thread,<span class="hljs-keyword">struct</span> task_struct* parent_thread)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">copy_body_stack3</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* parent_thread,<span class="hljs-keyword">struct</span> task_struct* child_thread,<span class="hljs-type">void</span>* buf_page)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int32_t</span> <span class="hljs-title function_">build_child_stack</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* child_thread)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">updata_inode_open_cnts</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* thread)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int32_t</span> <span class="hljs-title function_">copy_process</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* child_thread,<span class="hljs-keyword">struct</span> task_struct* parent_thread)</span>;<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">sys_fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="userprogforkc创建"><a class="markdownIt-Anchor" href="#userprogforkc创建"></a> userprog/fork.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fork.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/sync.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">intr_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">//复制父进程的pcb</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">copy_pcb_vaddrbitmap_stack0</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* child_thread,<span class="hljs-keyword">struct</span> task_struct* parent_thread)</span><br>&#123;<br>    <span class="hljs-comment">//直接先把pcb所在页 包括内核栈 中断栈全部一起复制过来 其他的需要修改的再一项项改</span><br>    <span class="hljs-built_in">memcpy</span>(child_thread,parent_thread,PG_SIZE);<br>    child_thread-&gt;pid = fork_pid();<br>    child_thread-&gt;elapsed_ticks = <span class="hljs-number">0</span>;<br>    child_thread-&gt;status = TASK_READY; <span class="hljs-comment">//之后要放到就绪队列 被调度的</span><br>    child_thread-&gt;ticks = child_thread-&gt;priority; <span class="hljs-comment">//时间片填满</span><br>    child_thread-&gt;parent_pid = parent_thread-&gt;pid; <span class="hljs-comment">//默认是-1 对于子进程的parent_pid 父进程的pid</span><br>    child_thread-&gt;general_tag.prev = child_thread-&gt;general_tag.next = <span class="hljs-literal">NULL</span>; <br>    child_thread-&gt;all_list_tag.prev = child_thread-&gt;all_list_tag.next = <span class="hljs-literal">NULL</span>;<br>    block_desc_init(child_thread-&gt;u_block_desc);<span class="hljs-comment">//malloc 内存块分配符初始化</span><br>    <span class="hljs-comment">//虚拟位图需要分配页 的页数 毕竟两个进程不能共享虚拟内存位图嘛 但是我们是需要把父进程的给复制了 </span><br>    <span class="hljs-type">uint32_t</span> bitmap_pg_cnt = DIV_ROUND_UP((<span class="hljs-number">0xc0000000</span> - USER_VADDR_START) / PG_SIZE / <span class="hljs-number">8</span> , PG_SIZE);  <br>    <span class="hljs-type">void</span>* vaddr_btmp = get_kernel_pages(bitmap_pg_cnt);<br>    <span class="hljs-comment">//复制父进程的虚拟内存位图 并把自己刚分配好的独立位图给我们的子进程赋值</span><br>    <span class="hljs-built_in">memcpy</span>(vaddr_btmp,child_thread-&gt;userprog_vaddr.vaddr_bitmap.bits,bitmap_pg_cnt * PG_SIZE);<br>    child_thread-&gt;userprog_vaddr.vaddr_bitmap.bits = vaddr_btmp;<br>    ASSERT(<span class="hljs-built_in">strlen</span>(child_thread-&gt;name) &lt; <span class="hljs-number">11</span>); <span class="hljs-comment">//进程后面加个名字</span><br>    <span class="hljs-built_in">strcat</span>(child_thread-&gt;name,<span class="hljs-string">&quot;_fork&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//设置子进程的进程体 用户栈</span><br><span class="hljs-comment">//把父进程的内存区全部复制下来 buf_page是因为用户进程间无法共享内存 看不见彼此 只能通过buf_page来作为过渡</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">copy_body_stack3</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* parent_thread,<span class="hljs-keyword">struct</span> task_struct* child_thread,<span class="hljs-type">void</span>* buf_page)</span><br>&#123;<br>    <span class="hljs-type">uint8_t</span>* vaddr_btmp = parent_thread-&gt;userprog_vaddr.vaddr_bitmap.bits;<br>    <span class="hljs-type">uint32_t</span> btmp_bytes_len = parent_thread-&gt;userprog_vaddr.vaddr_bitmap.btmp_bytes_len;<br>    <span class="hljs-type">uint32_t</span> vaddr_start = parent_thread-&gt;userprog_vaddr.vaddr_start;<br>    <span class="hljs-type">uint32_t</span> idx_byte = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> idx_bit = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> prog_vaddr = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//根据虚拟内存位图来看 我们只需要把位图中看看哪些页被用了</span><br>    <span class="hljs-comment">//我们把那些页给复制过去即可 同时也需要把页表在新进程中安装一下</span><br>    <span class="hljs-keyword">while</span>(idx_byte &lt; btmp_bytes_len)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(vaddr_btmp[idx_byte])<br>        &#123;<br>            idx_bit = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(idx_bit &lt; <span class="hljs-number">8</span>) <span class="hljs-comment">//一字节8位</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>((BITMAP_MASK &lt;&lt; idx_bit) &amp; vaddr_btmp[idx_byte])<br>                &#123;<br>                    prog_vaddr = (idx_byte * <span class="hljs-number">8</span> + idx_bit) * PG_SIZE + vaddr_start;<br>                    <span class="hljs-built_in">memcpy</span>(buf_page,(<span class="hljs-type">void</span>*)prog_vaddr,PG_SIZE);<br>                    page_dir_activate(child_thread); <span class="hljs-comment">//切换到用户页表 防止安装到父进程里面去了</span><br>                    get_a_page_without_opvaddrbitmap(PF_USER,prog_vaddr);<br>                    <span class="hljs-built_in">memcpy</span>((<span class="hljs-type">void</span>*)prog_vaddr,buf_page,PG_SIZE);<br>                    page_dir_activate(parent_thread); <span class="hljs-comment">//切换回父进程</span><br>                &#125;<br>                ++idx_bit;<br>            &#125;<br>        &#125;<br>        ++idx_byte;<br>    &#125;    <br>&#125;<br><br><span class="hljs-comment">//给子进程构建内核栈 且设置0 返回值</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">build_child_stack</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* child_thread)</span><br>&#123;<br>    <span class="hljs-comment">//内核栈的最高地址处 intr中断栈最低地址处</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">intr_stack</span>* <span class="hljs-title">intr_0_stack</span> =</span> \<br>      (<span class="hljs-keyword">struct</span> intr_stack*)((<span class="hljs-type">uint32_t</span>)child_thread + PG_SIZE - <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> intr_stack));<br>    <span class="hljs-comment">//返回值 0</span><br>    intr_0_stack-&gt;eax = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//这里我把其结构体搬过来了</span><br>    <span class="hljs-comment">/*struct thread_stack</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        uint32_t ebp;</span><br><span class="hljs-comment">        uint32_t ebx;</span><br><span class="hljs-comment">        uint32_t edi;</span><br><span class="hljs-comment">        uint32_t esi;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        void (*eip) (thread_func* func,void* func_arg); //和下面的相互照应 以ret 汇编代码进入kernel_thread函数调用</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">        void (*unused_retaddr);                         //占位数 在栈顶站住了返回地址的位置 因为是汇编ret </span><br><span class="hljs-comment">        thread_func* function;                          //进入kernel_thread要调用的函数地址</span><br><span class="hljs-comment">        void* func_arg;      //参数指针</span><br><span class="hljs-comment">    &#125;;*/</span><br>    <span class="hljs-comment">//返回地址毕竟是高地址</span><br>    <span class="hljs-type">uint32_t</span>* ret_addr_in_thread_stack = (<span class="hljs-type">uint32_t</span>*)intr_0_stack - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">uint32_t</span>* esi_ptr_in_thread_stack =  (<span class="hljs-type">uint32_t</span>*)intr_0_stack - <span class="hljs-number">2</span>;<br>    <span class="hljs-type">uint32_t</span>* edi_ptr_in_thread_stack =  (<span class="hljs-type">uint32_t</span>*)intr_0_stack - <span class="hljs-number">3</span>;<br>    <span class="hljs-type">uint32_t</span>* ebx_ptr_in_thread_stack =  (<span class="hljs-type">uint32_t</span>*)intr_0_stack - <span class="hljs-number">4</span>;<br>    <span class="hljs-type">uint32_t</span>* ebp_ptr_in_thread_stack =  (<span class="hljs-type">uint32_t</span>*)intr_0_stack - <span class="hljs-number">5</span>;<br>    <br>    *ret_addr_in_thread_stack = (<span class="hljs-type">uint32_t</span>)intr_exit;<br>    <span class="hljs-comment">//反正之后的pop都会覆盖</span><br>    *esi_ptr_in_thread_stack = *edi_ptr_in_thread_stack = *ebx_ptr_in_thread_stack = \<br>    *ebp_ptr_in_thread_stack = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//内核栈栈顶</span><br>    child_thread-&gt;self_kstack = ebp_ptr_in_thread_stack;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//更新inode打开数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">updata_inode_open_cnts</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* thread)</span><br>&#123;<br>    <span class="hljs-type">int32_t</span> local_fd = <span class="hljs-number">3</span>,global_fd = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(local_fd &lt; MAX_FILES_OPEN_PER_PROC)<br>    &#123;<br>        global_fd = thread-&gt;fd_table[local_fd];<br>        ASSERT(global_fd &lt; MAX_FILE_OPEN);<br>        <span class="hljs-keyword">if</span>(global_fd != <span class="hljs-number">-1</span>)<br>            ++file_table[global_fd].fd_inode-&gt;i_open_cnts;<br>        ++local_fd;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//汇总函数 包装 把父进程资源给子进程</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">copy_process</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* child_thread,<span class="hljs-keyword">struct</span> task_struct* parent_thread)</span><br>&#123;<br>    <span class="hljs-comment">//用于给memcpy 过渡的页面</span><br>    <span class="hljs-type">void</span>* buf_page = get_kernel_pages(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(buf_page == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        printk(<span class="hljs-string">&quot;copy_process: buf_page alloc fail\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(copy_pcb_vaddrbitmap_stack0(child_thread,parent_thread) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        printk(<span class="hljs-string">&quot;copy_process: copy_pcb_vaddrbitmap_stack0 fail\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <br>    child_thread-&gt;pgdir = create_page_dir();<br>    printk(<span class="hljs-string">&quot;child_thread-&gt;pgdir %x\nparent_thread-&gt;pgdir %x\n&quot;</span>,child_thread-&gt;pgdir,parent_thread-&gt;pgdir);<br>    <span class="hljs-keyword">if</span>(child_thread-&gt;pgdir == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        printk(<span class="hljs-string">&quot;copy_process: child_thread-&gt;pgdir create fail\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <br>    copy_body_stack3(parent_thread,child_thread,buf_page);<br>    build_child_stack(child_thread);<br>    updata_inode_open_cnts(child_thread);<br>    mfree_page(PF_KERNEL,buf_page,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//禁止从内核调用 只能从用户进程调用</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">sys_fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">parent_thread</span> =</span> running_thread();<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">child_thread</span>  =</span> get_kernel_pages(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(child_thread == <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <br>    ASSERT(INTR_OFF == intr_get_status() &amp;&amp; parent_thread-&gt;pgdir != <span class="hljs-literal">NULL</span>);<br>    <br>    <span class="hljs-keyword">if</span>(copy_process(child_thread,parent_thread) == <span class="hljs-number">-1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <br>    ASSERT(!elem_find(&amp;thread_ready_list,&amp;child_thread-&gt;general_tag));<br>    list_append(&amp;thread_ready_list,&amp;child_thread-&gt;general_tag);<br>    ASSERT(!elem_find(&amp;thread_all_list,&amp;child_thread-&gt;all_list_tag));<br>    list_append(&amp;thread_all_list,&amp;child_thread-&gt;all_list_tag);<br>    <br>    <span class="hljs-keyword">return</span> child_thread-&gt;pid;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改"><a class="markdownIt-Anchor" href="#kernelmainc修改"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>    put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>    init_all();<br>    intr_enable();<br>   <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> ret_pid = fork();<br>    <span class="hljs-keyword">if</span>(ret_pid)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i am father,my pid is %d, ret pid is %d\n&quot;</span>,getpid(),ret_pid);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i am child, my pid is %d, ret pid is %d\n&quot;</span>,getpid(),ret_pid);   <br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="makefile修改"><a class="markdownIt-Anchor" href="#makefile修改"></a> makefile修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs c">BUILD_DIR = ./build<br>ENTRY_POINT = <span class="hljs-number">0xc0001500</span><br>AS = nasm<br>CC = gcc<br>LD = ld<br>LIB = -I lib/ -I lib/kernel/ -I lib/user/ -I kernel/ -I device/ <br>ASFLAGS = -f elf<br>CFLAGS = -Wall -m32 -fno-<span class="hljs-built_in">stack</span>-protector $(LIB) -c -fno-builtin -W -Wstrict-prototypes -Wmissing-prototypes<br>LDFLAGS =  -m elf_i386 -Ttext $(ENTRY_POINT) -e main -Map $(BUILD_DIR)/kernel.<span class="hljs-built_in">map</span><br>OBJS = $(BUILD_DIR)/main.o $(BUILD_DIR)/init.o $(BUILD_DIR)/interrupt.o \<br>      $(BUILD_DIR)/timer.o $(BUILD_DIR)/kernel.o $(BUILD_DIR)/print.o $(BUILD_DIR)/<span class="hljs-keyword">switch</span>.o \<br>      $(BUILD_DIR)/debug.o $(BUILD_DIR)/<span class="hljs-built_in">string</span>.o $(BUILD_DIR)/memory.o \<br>      $(BUILD_DIR)/bitmap.o $(BUILD_DIR)/thread.o $(BUILD_DIR)/<span class="hljs-built_in">list</span>.o \<br>      $(BUILD_DIR)/sync.o $(BUILD_DIR)/console.o $(BUILD_DIR)/keyboard.o \<br>      $(BUILD_DIR)/ioqueue.o $(BUILD_DIR)/tss.o $(BUILD_DIR)/process.o \<br>      $(BUILD_DIR)/syscall-init.o $(BUILD_DIR)/syscall.o $(BUILD_DIR)/stdio.o \<br>      $(BUILD_DIR)/stdio-kernel.o $(BUILD_DIR)/ide.o $(BUILD_DIR)/fs.o $(BUILD_DIR)/inode.o \<br>      $(BUILD_DIR)/file.o $(BUILD_DIR)/dir.o $(BUILD_DIR)/fork.o<br>      <br>#############<span class="hljs-meta">#     c代码编译     ###############</span><br>$(BUILD_DIR)/main.o: kernel/main.c lib/kernel/print.h \<br>        lib/stdint.h kernel/init.h lib/<span class="hljs-built_in">string</span>.h kernel/memory.h \<br>        thread/thread.h kernel/interrupt.h device/console.h \<br>        device/keyboard.h device/ioqueue.h userprog/process.h \<br>        lib/user/syscall.h userprog/syscall-init.h lib/stdio.h \<br>        lib/kernel/stdio-kernel.h fs/file.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/init.o: kernel/init.c kernel/init.h lib/kernel/print.h \<br>        lib/stdint.h kernel/interrupt.h device/timer.h kernel/memory.h \<br>        thread/thread.h device/console.h device/keyboard.h userprog/tss.h \<br>        userprog/syscall-init.h device/ide.h fs/fs.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/interrupt.o: kernel/interrupt.c kernel/interrupt.h \<br>        lib/stdint.h kernel/global.h lib/kernel/io.h lib/kernel/print.h \<br>        kernel/kernel.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/timer.o: device/timer.c device/timer.h lib/kernel/io.h lib/kernel/print.h \<br>        kernel/interrupt.h thread/thread.h kernel/debug.h kernel/global.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/debug.o: kernel/debug.c kernel/debug.h \<br>        lib/kernel/print.h lib/stdint.h kernel/interrupt.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/<span class="hljs-built_in">string</span>.o: lib/<span class="hljs-built_in">string</span>.c lib/<span class="hljs-built_in">string</span>.h \<br>kernel/debug.h kernel/global.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/memory.o: kernel/memory.c kernel/memory.h \<br>lib/stdint.h lib/kernel/bitmap.h kernel/debug.h lib/<span class="hljs-built_in">string</span>.h kernel/global.h \<br>thread/sync.h thread/thread.h lib/kernel/<span class="hljs-built_in">list</span>.h kernel/interrupt.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/bitmap.o: lib/kernel/bitmap.c lib/kernel/bitmap.h kernel/global.h \<br>lib/<span class="hljs-built_in">string</span>.h kernel/interrupt.h lib/kernel/print.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/thread.o: thread/thread.c thread/thread.h \<br>lib/stdint.h lib/<span class="hljs-built_in">string</span>.h kernel/global.h kernel/memory.h \<br>kernel/debug.h kernel/interrupt.h lib/kernel/print.h \<br>userprog/process.h thread/sync.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/<span class="hljs-built_in">list</span>.o: lib/kernel/<span class="hljs-built_in">list</span>.c lib/kernel/<span class="hljs-built_in">list</span>.h \<br>kernel/interrupt.h lib/stdint.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/sync.o: thread/sync.c thread/sync.h \<br>lib/stdint.h thread/thread.h kernel/debug.h kernel/interrupt.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/console.o: device/console.c device/console.h \<br>lib/kernel/print.h thread/sync.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/keyboard.o: device/keyboard.c device/keyboard.h \<br>lib/kernel/print.h lib/kernel/io.h kernel/interrupt.h \<br>kernel/global.h lib/stdint.h device/ioqueue.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/ioqueue.o: device/ioqueue.c device/ioqueue.h \<br>kernel/interrupt.h kernel/global.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/tss.o: userprog/tss.c userprog/tss.h \<br>kernel/global.h thread/thread.h lib/kernel/print.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/process.o: userprog/process.c userprog/process.h \<br>lib/<span class="hljs-built_in">string</span>.h kernel/global.h kernel/memory.h lib/kernel/print.h \<br>thread/thread.h kernel/interrupt.h kernel/debug.h device/console.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/syscall-init.o: userprog/syscall-init.c userprog/syscall-init.h \<br>lib/user/syscall.h lib/stdint.h lib/kernel/print.h kernel/interrupt.h thread/thread.h \<br>kernel/memory.h fs/file.h userprog/fork.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/syscall.o: lib/user/syscall.c lib/user/syscall.h <br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/stdio.o: lib/stdio.c lib/stdio.h lib/stdint.h lib/<span class="hljs-built_in">string</span>.h lib/user/syscall.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/stdio-kernel.o: lib/kernel/stdio-kernel.c lib/kernel/stdio-kernel.h \<br>lib/stdio.h device/console.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/ide.o: device/ide.c device/ide.h lib/stdint.h kernel/debug.h \<br>lib/kernel/stdio-kernel.h lib/stdio.h kernel/global.h thread/sync.h \<br>lib/kernel/io.h device/timer.h kernel/interrupt.h lib/kernel/<span class="hljs-built_in">list</span>.h fs/fs.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/fs.o: fs/fs.c fs/fs.h lib/stdint.h kernel/global.h device/ide.h fs/inode.h fs/dir.h \<br>fs/super_block.h lib/kernel/stdio-kernel.h lib/<span class="hljs-built_in">string</span>.h kernel/debug.h lib/kernel/<span class="hljs-built_in">list</span>.h \<br>fs/file.h thread/thread.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/inode.o: fs/inode.c fs/inode.h device/ide.h kernel/debug.h thread/thread.h \<br>kernel/memory.h lib/<span class="hljs-built_in">string</span>.h lib/kernel/<span class="hljs-built_in">list</span>.h kernel/interrupt.h lib/kernel/bitmap.h \<br>fs/file.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/file.o: fs/file.c fs/file.h lib/kernel/stdio-kernel.h thread/thread.h device/ide.h \<br>fs/file.h kernel/global.h kernel/interrupt.h device/console.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/dir.o: fs/dir.c fs/dir.h device/ide.h fs/fs.h fs/inode.h kernel/memory.h lib/<span class="hljs-built_in">string</span>.h lib/stdint.h \<br>lib/kernel/stdio-kernel.h kernel/debug.h fs/file.h kernel/memory.h lib/<span class="hljs-built_in">string</span>.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/fork.o: userprog/fork.c userprog/fork.h kernel/global.h lib/stdint.h lib/<span class="hljs-built_in">string</span>.h \<br>kernel/memory.h kernel/interrupt.h thread/sync.h thread/thread.h  kernel/debug.h userprog/process.h \<br>lib/kernel/stdio-kernel.h fs/file.h lib/kernel/<span class="hljs-built_in">list</span>.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>##############    汇编代码编译    ###############<br>$(BUILD_DIR)/kernel.o: kernel/kernel.S<br>$(AS) $(ASFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/print.o: lib/kernel/print.S<br>$(AS) $(ASFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/<span class="hljs-keyword">switch</span>.o: thread/<span class="hljs-keyword">switch</span>.S<br>$(AS) $(ASFLAGS) $&lt; -o $@<br><br>##############    链接所有目标文件    #############<br>$(BUILD_DIR)/kernel.bin: $(OBJS)<br>$(LD) $(LDFLAGS) $^ -o $@<br><br>.PHONY : mk_dir hd clean all<br><br>mk_dir:<br><span class="hljs-keyword">if</span> [ ! -d $(BUILD_DIR) ]; then mkdir $(BUILD_DIR); fi<br><br>hd:<br>dd <span class="hljs-keyword">if</span>=$(BUILD_DIR)/kernel.bin \<br>           of=/home/podest/bochs/hd60M.img \<br>           bs=<span class="hljs-number">512</span> count=<span class="hljs-number">200</span> seek=<span class="hljs-number">9</span> conv=notrunc<br><br>clean:<br>cd $(BUILD_DIR) &amp;&amp; rm -f  .<span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">build: $(BUILD_DIR)/kernel.bin</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">all: mk_dir build hd</span><br></code></pre></td></tr></table></figure><h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h3><h2 id="添加read-putchar-clear系统调用"><a class="markdownIt-Anchor" href="#添加read-putchar-clear系统调用"></a> 添加read、putchar、clear系统调用</h2><h3 id="fsfsc修改"><a class="markdownIt-Anchor" href="#fsfsc修改"></a> fs/fs.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 从文件描述符fd指向的文件中读取count个字节到buf,若成功则返回读出的字节数,到文件尾则返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_read</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span> &#123;<br>   ASSERT(buf != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">int32_t</span> ret = <span class="hljs-number">-1</span>;<br>   <span class="hljs-type">uint32_t</span> global_fd = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span> || fd == stdout_no || fd == stderr_no) &#123;<br>      printk(<span class="hljs-string">&quot;sys_read: fd error\n&quot;</span>);<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fd == stdin_no) &#123;<br> <span class="hljs-type">char</span>* buffer = buf;<br> <span class="hljs-type">uint32_t</span> bytes_read = <span class="hljs-number">0</span>;<br> <span class="hljs-keyword">while</span> (bytes_read &lt; count) &#123;<br>    *buffer = ioq_getchar(&amp;kbd_buf);<br>    bytes_read++;<br>    buffer++;<br> &#125;<br> ret = (bytes_read == <span class="hljs-number">0</span> ? <span class="hljs-number">-1</span> : (<span class="hljs-type">int32_t</span>)bytes_read);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      global_fd = fd_local2global(fd);<br>      ret = file_read(&amp;file_table[global_fd], buf, count);   <br>   &#125;<br>   <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="libusersyscallh修改"><a class="markdownIt-Anchor" href="#libusersyscallh修改"></a> lib/user/syscall.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LIB_USER_SYSCALL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LIB_USER_SYSCALL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SYSCALL_NR</span> </span><br><span class="hljs-class">&#123;</span><br>   SYS_GETPID,<br>   SYS_WRITE,<br>   SYS_MALLOC,<br>   SYS_FREE,<br>   SYS_FORK,<br>   SYS_READ,<br>   SYS_PUTCHAR,<br>   SYS_CLEAR<br>&#125;;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> size)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr)</span>;<br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="libusersyscallc新增"><a class="markdownIt-Anchor" href="#libusersyscallc新增"></a> lib/user/syscall.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 从文件描述符fd中读取count个字节到buf */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall3(SYS_READ, fd, buf, count);<br>&#125;<br><br><span class="hljs-comment">/* 输出一个字符 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">putchar</span><span class="hljs-params">(<span class="hljs-type">char</span> char_asci)</span> &#123;<br>   _syscall1(SYS_PUTCHAR, char_asci);<br>&#125;<br><br><span class="hljs-comment">/* 清空屏幕 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   _syscall0(SYS_CLEAR);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="libkernelprints修改"><a class="markdownIt-Anchor" href="#libkernelprints修改"></a> lib/kernel/print.S修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c">;------------------------------------------------------------------------------<br>global cls_screen: <br>cls_screen:                               ; 连着set_cursor<br>   pushad                                ; 用户态不允许访问显存 只能由中断后进入内核态 故此为系统调用<br>   mov ax,SELECTOR_VIDEO                 ; ax做中转<br>   mov gs,ax                             ; 先放到gs里面 进入中断后再<br>   <br>   mov ebx,<span class="hljs-number">0</span><br>   mov ecx,<span class="hljs-number">80</span>*<span class="hljs-number">25</span>                         ;清屏幕<br>   <br> .cls:<br>   mov word [gs:ebx],<span class="hljs-number">0x720</span>   ;黑底白字空格键<br>   add ebx,<span class="hljs-number">2</span>                              ;一次两字节<br>   loop .cls        <br>   mov ebx,<span class="hljs-number">0</span><br> .set_cursor:<br>     ;将光标设为bx值<br>;;;;;;; <span class="hljs-number">1</span> 先设置高<span class="hljs-number">8</span>位 ;;;;;;;;<br>   mov dx, <span class="hljs-number">0x03d4</span>  ;索引寄存器<br>   mov al, <span class="hljs-number">0x0e</span>  ;用于提供光标位置的高<span class="hljs-number">8</span>位<br>   out dx, al<br>   mov dx, <span class="hljs-number">0x03d5</span>  ;通过读写数据端口<span class="hljs-number">0x3d5</span>来获得或设置光标位置 <br>   mov al, bh<br>   out dx, al<br><br>;;;;;;; <span class="hljs-number">2</span> 再设置低<span class="hljs-number">8</span>位 ;;;;;;;;;<br>   mov dx, <span class="hljs-number">0x03d4</span><br>   mov al, <span class="hljs-number">0x0f</span><br>   out dx, al<br>   mov dx, <span class="hljs-number">0x03d5</span> <br>   mov al, bl<br>   out dx, al<br> .put_char_done: <br>   popad<br>   ret<br>;------------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><h3 id="userprogsyscall-initc修改"><a class="markdownIt-Anchor" href="#userprogsyscall-initc修改"></a> userprog/syscall-init.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../kernel/memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fork.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> syscall_nr 32 </span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span>* syscall;<br>syscall syscall_table[syscall_nr];<br><br><span class="hljs-comment">/* 返回当前任务的pid */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">sys_getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>   <span class="hljs-keyword">return</span> running_thread()-&gt;pid;<br>&#125;<br><br><span class="hljs-comment">/* 初始化系统调用 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">syscall_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>put_str(<span class="hljs-string">&quot;syscall_init start\n&quot;</span>);<br>syscall_table[SYS_GETPID] = sys_getpid;<br>syscall_table[SYS_WRITE] = sys_write;<br>syscall_table[SYS_MALLOC] = sys_malloc;<br>syscall_table[SYS_FREE] = sys_free;<br>syscall_table[SYS_FORK] = sys_fork;<br>syscall_table[SYS_READ] = sys_read;<br>syscall_table[SYS_PUTCHAR] = console_put_char;<br>syscall_table[SYS_CLEAR] = cls_screen;<br>put_str(<span class="hljs-string">&quot;syscall_init done\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十四章 文件系统 最后的挑战(下)</title>
    <link href="/2022/08/08/os(14-3)/"/>
    <url>/2022/08/08/os(14-3)/</url>
    
    <content type="html"><![CDATA[<h1 id="第十四章-文件系统-最后的挑战下"><a class="markdownIt-Anchor" href="#第十四章-文件系统-最后的挑战下"></a> 第十四章 文件系统 最后的挑战(下)</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>由于代码长度增加，使得编辑器卡顿，所以这一章代码如果只是新增函数，我就只把新增的部分写出来了。</p><h2 id="文件的读取"><a class="markdownIt-Anchor" href="#文件的读取"></a> 文件的读取</h2><h3 id="fsfilec新增"><a class="markdownIt-Anchor" href="#fsfilec新增"></a> fs/file.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 从文件file中读取count个字节写入buf, 返回读出的字节数,若到文件尾则返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">file_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file* file, <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span> &#123;<br>   <span class="hljs-type">uint8_t</span>* buf_dst = (<span class="hljs-type">uint8_t</span>*)buf;<br>   <span class="hljs-type">uint32_t</span> size = count, size_left = size;<br><br>   <span class="hljs-comment">/* 若要读取的字节数超过了文件可读的剩余量, 就用剩余量做为待读取的字节数 */</span><br>   <span class="hljs-keyword">if</span> ((file-&gt;fd_pos + count) &gt; file-&gt;fd_inode-&gt;i_size)&#123;<br>      size = file-&gt;fd_inode-&gt;i_size - file-&gt;fd_pos;<br>      size_left = size;<br>      <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">// 若到文件尾则返回-1</span><br> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-type">uint8_t</span>* io_buf = sys_malloc(BLOCK_SIZE);<br>   <span class="hljs-keyword">if</span> (io_buf == <span class="hljs-literal">NULL</span>) &#123;<br>      printk(<span class="hljs-string">&quot;file_read: sys_malloc for io_buf failed\n&quot;</span>);<br>   &#125;<br>   <span class="hljs-type">uint32_t</span>* all_blocks = (<span class="hljs-type">uint32_t</span>*)sys_malloc(BLOCK_SIZE + <span class="hljs-number">48</span>);  <span class="hljs-comment">// 用来记录文件所有的块地址</span><br>   <span class="hljs-keyword">if</span> (all_blocks == <span class="hljs-literal">NULL</span>) &#123;<br>      printk(<span class="hljs-string">&quot;file_read: sys_malloc for all_blocks failed\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-type">uint32_t</span> block_read_start_idx = file-&gt;fd_pos / BLOCK_SIZE;       <span class="hljs-comment">// 数据所在块的起始地址</span><br>   <span class="hljs-type">uint32_t</span> block_read_end_idx = (file-&gt;fd_pos + size) / BLOCK_SIZE;       <span class="hljs-comment">// 数据所在块的终止地址</span><br>   <span class="hljs-type">uint32_t</span> read_blocks = block_read_start_idx - block_read_end_idx;       <span class="hljs-comment">// 如增量为0,表示数据在同一扇区</span><br>   ASSERT(block_read_start_idx &lt; <span class="hljs-number">139</span> &amp;&amp; block_read_end_idx &lt; <span class="hljs-number">139</span>);<br><br>   <span class="hljs-type">int32_t</span> indirect_block_table;       <span class="hljs-comment">// 用来获取一级间接表地址</span><br>   <span class="hljs-type">uint32_t</span> block_idx;       <span class="hljs-comment">// 获取待读的块地址 </span><br><br><span class="hljs-comment">/* 以下开始构建all_blocks块地址数组,专门存储用到的块地址(本程序中块大小同扇区大小) */</span><br>   <span class="hljs-keyword">if</span> (read_blocks == <span class="hljs-number">0</span>) &#123;       <span class="hljs-comment">// 在同一扇区内读数据,不涉及到跨扇区读取</span><br>      ASSERT(block_read_end_idx == block_read_start_idx);<br>      <span class="hljs-keyword">if</span> (block_read_end_idx &lt; <span class="hljs-number">12</span> ) &#123;   <span class="hljs-comment">// 待读的数据在12个直接块之内</span><br> block_idx = block_read_end_idx;<br> all_blocks[block_idx] = file-&gt;fd_inode-&gt;i_sectors[block_idx];<br>      &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 若用到了一级间接块表,需要将表中间接块读进来</span><br> indirect_block_table = file-&gt;fd_inode-&gt;i_sectors[<span class="hljs-number">12</span>];<br> ide_read(cur_part-&gt;my_disk, indirect_block_table, all_blocks + <span class="hljs-number">12</span>, <span class="hljs-number">1</span>);<br>      &#125;<br>   &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-comment">// 若要读多个块</span><br>   <span class="hljs-comment">/* 第一种情况: 起始块和终止块属于直接块*/</span><br>      <span class="hljs-keyword">if</span> (block_read_end_idx &lt; <span class="hljs-number">12</span> ) &#123;  <span class="hljs-comment">// 数据结束所在的块属于直接块</span><br> block_idx = block_read_start_idx; <br> <span class="hljs-keyword">while</span> (block_idx &lt;= block_read_end_idx) &#123;<br>    all_blocks[block_idx] = file-&gt;fd_inode-&gt;i_sectors[block_idx]; <br>    block_idx++;<br> &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (block_read_start_idx &lt; <span class="hljs-number">12</span> &amp;&amp; block_read_end_idx &gt;= <span class="hljs-number">12</span>) &#123;<br>   <span class="hljs-comment">/* 第二种情况: 待读入的数据跨越直接块和间接块两类*/</span><br>       <span class="hljs-comment">/* 先将直接块地址写入all_blocks */</span><br> block_idx = block_read_start_idx;<br> <span class="hljs-keyword">while</span> (block_idx &lt; <span class="hljs-number">12</span>) &#123;<br>    all_blocks[block_idx] = file-&gt;fd_inode-&gt;i_sectors[block_idx];<br>    block_idx++;<br> &#125;<br> ASSERT(file-&gt;fd_inode-&gt;i_sectors[<span class="hljs-number">12</span>] != <span class="hljs-number">0</span>);    <span class="hljs-comment">// 确保已经分配了一级间接块表</span><br><br>      <span class="hljs-comment">/* 再将间接块地址写入all_blocks */</span><br> indirect_block_table = file-&gt;fd_inode-&gt;i_sectors[<span class="hljs-number">12</span>];<br> ide_read(cur_part-&gt;my_disk, indirect_block_table, all_blocks + <span class="hljs-number">12</span>, <span class="hljs-number">1</span>);      <span class="hljs-comment">// 将一级间接块表读进来写入到第13个块的位置之后</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-comment">/* 第三种情况: 数据在间接块中*/</span><br> ASSERT(file-&gt;fd_inode-&gt;i_sectors[<span class="hljs-number">12</span>] != <span class="hljs-number">0</span>);    <span class="hljs-comment">// 确保已经分配了一级间接块表</span><br> indirect_block_table = file-&gt;fd_inode-&gt;i_sectors[<span class="hljs-number">12</span>];      <span class="hljs-comment">// 获取一级间接表地址</span><br> ide_read(cur_part-&gt;my_disk, indirect_block_table, all_blocks + <span class="hljs-number">12</span>, <span class="hljs-number">1</span>);      <span class="hljs-comment">// 将一级间接块表读进来写入到第13个块的位置之后</span><br>      &#125; <br>   &#125;<br><br>   <span class="hljs-comment">/* 用到的块地址已经收集到all_blocks中,下面开始读数据 */</span><br>   <span class="hljs-type">uint32_t</span> sec_idx, sec_lba, sec_off_bytes, sec_left_bytes, chunk_size;<br>   <span class="hljs-type">uint32_t</span> bytes_read = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (bytes_read &lt; size) &#123;      <span class="hljs-comment">// 直到读完为止</span><br>      sec_idx = file-&gt;fd_pos / BLOCK_SIZE;<br>      sec_lba = all_blocks[sec_idx];<br>      sec_off_bytes = file-&gt;fd_pos % BLOCK_SIZE;<br>      sec_left_bytes = BLOCK_SIZE - sec_off_bytes;<br>      chunk_size = size_left &lt; sec_left_bytes ? size_left : sec_left_bytes;     <span class="hljs-comment">// 待读入的数据大小</span><br><br>      <span class="hljs-built_in">memset</span>(io_buf, <span class="hljs-number">0</span>, BLOCK_SIZE);<br>      ide_read(cur_part-&gt;my_disk, sec_lba, io_buf, <span class="hljs-number">1</span>);<br>      <span class="hljs-built_in">memcpy</span>(buf_dst, io_buf + sec_off_bytes, chunk_size);<br><br>      buf_dst += chunk_size;<br>      file-&gt;fd_pos += chunk_size;<br>      bytes_read += chunk_size;<br>      size_left -= chunk_size;<br>   &#125;<br>   sys_free(all_blocks);<br>   sys_free(io_buf);<br>   <span class="hljs-keyword">return</span> bytes_read;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fsfsc新增"><a class="markdownIt-Anchor" href="#fsfsc新增"></a> fs/fs.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_read</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span> &#123;<br><span class="hljs-keyword">if</span>(fd&lt;<span class="hljs-number">0</span>)&#123;<br>printk(<span class="hljs-string">&quot;sys_read: fd error\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>ASSERT(buf != <span class="hljs-literal">NULL</span>);<br><span class="hljs-type">uint32_t</span> _fd = fd_local2global(fd);<br><span class="hljs-keyword">return</span> file_read(&amp;file_table[_fd], buf, count);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改"><a class="markdownIt-Anchor" href="#kernelmainc修改"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>init_all();<br><br>intr_enable();<br><br><br><span class="hljs-type">uint32_t</span> fd = sys_open(<span class="hljs-string">&quot;/file1&quot;</span>,O_RDWR);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open /file1,fd:%d\n&quot;</span>, fd);<br><span class="hljs-type">char</span> buf[<span class="hljs-number">64</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> read_bytes = sys_read(fd, buf, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1_ read %d bytes:\n%s\n&quot;</span>, read_bytes, buf);<br><br><span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>);<br>read_bytes = sys_read(fd, buf, <span class="hljs-number">6</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2_ read %d bytes:\n%s&quot;</span>, read_bytes, buf);<br><br><br><span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>);<br>read_bytes = sys_read(fd, buf, <span class="hljs-number">6</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3_ read %d bytes:\n%s&quot;</span>, read_bytes, buf);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;_____ close file1 and reopen ______\n&quot;</span>);<br>sys_close(fd);<br><br><br>fd = sys_open(<span class="hljs-string">&quot;/file1&quot;</span>,O_RDWR);<br><span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>);<br>read_bytes = sys_read(fd, buf, <span class="hljs-number">24</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4_ read %d bytes:\n%s&quot;</span>, read_bytes, buf);<br>sys_close(fd);<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h3><p><img src="/img/os/os14.6.png" alt="图为bochs运行界面" /></p><h2 id="实现文件读写指针定位功能"><a class="markdownIt-Anchor" href="#实现文件读写指针定位功能"></a> 实现文件读写指针定位功能</h2><h3 id="fsfsh新增"><a class="markdownIt-Anchor" href="#fsfsh新增"></a> fs/fs.h新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 文件读写位置偏移量 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">whence</span> &#123;</span><br>   SEEK_SET = <span class="hljs-number">1</span>,<br>   SEEK_CUR,<br>   SEEK_END<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="fsfsc新增-2"><a class="markdownIt-Anchor" href="#fsfsc新增-2"></a> fs/fs.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 重置用于文件读写操作的偏移指针,成功时返回新的偏移量,出错时返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_lseek</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">int32_t</span> offset, <span class="hljs-type">uint8_t</span> whence)</span> &#123;<br>   <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>      printk(<span class="hljs-string">&quot;sys_lseek: fd error\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   ASSERT(whence &gt; <span class="hljs-number">0</span> &amp;&amp; whence &lt; <span class="hljs-number">4</span>);<br>   <span class="hljs-type">uint32_t</span> _fd = fd_local2global(fd);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span>* <span class="hljs-title">pf</span> =</span> &amp;file_table[_fd];<br>   <span class="hljs-type">int32_t</span> new_pos = <span class="hljs-number">0</span>;   <span class="hljs-comment">//新的偏移量必须位于文件大小之内</span><br>   <span class="hljs-type">int32_t</span> file_size = (<span class="hljs-type">int32_t</span>)pf-&gt;fd_inode-&gt;i_size;<br>   <span class="hljs-keyword">switch</span> (whence) &#123;<br>      <span class="hljs-comment">/* SEEK_SET 新的读写位置是相对于文件开头再增加offset个位移量 */</span><br>      <span class="hljs-keyword">case</span> SEEK_SET:<br> new_pos = offset;<br> <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-comment">/* SEEK_CUR 新的读写位置是相对于当前的位置增加offset个位移量 */</span><br>      <span class="hljs-keyword">case</span> SEEK_CUR:<span class="hljs-comment">// offse可正可负</span><br> new_pos = (<span class="hljs-type">int32_t</span>)pf-&gt;fd_pos + offset;<br> <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-comment">/* SEEK_END 新的读写位置是相对于文件尺寸再增加offset个位移量 */</span><br>      <span class="hljs-keyword">case</span> SEEK_END:   <span class="hljs-comment">// 此情况下,offset应该为负值</span><br> new_pos = file_size + offset;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (new_pos &lt; <span class="hljs-number">0</span> || new_pos &gt; (file_size - <span class="hljs-number">1</span>)) &#123; <br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   pf-&gt;fd_pos = new_pos;<br>   <span class="hljs-keyword">return</span> pf-&gt;fd_pos;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-2"><a class="markdownIt-Anchor" href="#kernelmainc修改-2"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>init_all();<br><br>intr_enable();<br><br><span class="hljs-type">uint32_t</span> fd = sys_open(<span class="hljs-string">&quot;/file1&quot;</span>,O_RDWR);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open /file1,fd:%d\n&quot;</span>, fd);<br><span class="hljs-type">char</span> buf[<span class="hljs-number">64</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> read_bytes = sys_read(fd, buf, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1_ read %d bytes:\n%s\n&quot;</span>, read_bytes, buf);<br><br><span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>);<br>read_bytes = sys_read(fd, buf, <span class="hljs-number">6</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2_ read %d bytes:\n%s&quot;</span>, read_bytes, buf);<br><br><br><span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>);<br>read_bytes = sys_read(fd, buf, <span class="hljs-number">6</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3_ read %d bytes:\n%s&quot;</span>, read_bytes, buf);<br><br><br><br><span class="hljs-comment">//fd = sys_open(&quot;/file1&quot;,O_RDWR);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;_____ SEEK_SET 0 ______\n&quot;</span>);<br>sys_lseek(fd, <span class="hljs-number">0</span> ,SEEK_SET);<br><span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>);<br>read_bytes = sys_read(fd, buf, <span class="hljs-number">24</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4_ read %d bytes:\n%s&quot;</span>, read_bytes, buf);<br>sys_close(fd);<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-2"><a class="markdownIt-Anchor" href="#运行结果-2"></a> 运行结果</h3><p><img src="/img/os/os14.7.png" alt="图为bochs运行界面" /></p><h2 id="文件的删除"><a class="markdownIt-Anchor" href="#文件的删除"></a> 文件的删除</h2><h3 id="fsinodec新增"><a class="markdownIt-Anchor" href="#fsinodec新增"></a> fs/inode.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 将硬盘分区part上的inode清空 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">inode_delete</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part, <span class="hljs-type">uint32_t</span> inode_no, <span class="hljs-type">void</span>* io_buf)</span> &#123;<br>   ASSERT(inode_no &lt; <span class="hljs-number">4096</span>);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode_position</span> <span class="hljs-title">inode_pos</span>;</span><br>   inode_locate(part, inode_no, &amp;inode_pos);     <span class="hljs-comment">// inode位置信息会存入inode_pos</span><br>   ASSERT(inode_pos.sec_lba &lt;= (part-&gt;start_lba + part-&gt;sec_cnt));<br>   <br>   <span class="hljs-type">char</span>* inode_buf = (<span class="hljs-type">char</span>*)io_buf;<br>   <span class="hljs-keyword">if</span> (inode_pos.two_sec) &#123;   <span class="hljs-comment">// inode跨扇区,读入2个扇区</span><br>      <span class="hljs-comment">/* 将原硬盘上的内容先读出来 */</span><br>      ide_read(part-&gt;my_disk, inode_pos.sec_lba, inode_buf, <span class="hljs-number">2</span>);<br>      <span class="hljs-comment">/* 将inode_buf清0 */</span><br>      <span class="hljs-built_in">memset</span>((inode_buf + inode_pos.off_size), <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> inode));<br>      <span class="hljs-comment">/* 用清0的内存数据覆盖磁盘 */</span><br>      ide_write(part-&gt;my_disk, inode_pos.sec_lba, inode_buf, <span class="hljs-number">2</span>);<br>   &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// 未跨扇区,只读入1个扇区就好</span><br>      <span class="hljs-comment">/* 将原硬盘上的内容先读出来 */</span><br>      ide_read(part-&gt;my_disk, inode_pos.sec_lba, inode_buf, <span class="hljs-number">1</span>);<br>      <span class="hljs-comment">/* 将inode_buf清0 */</span><br>      <span class="hljs-built_in">memset</span>((inode_buf + inode_pos.off_size), <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> inode));<br>      <span class="hljs-comment">/* 用清0的内存数据覆盖磁盘 */</span><br>      ide_write(part-&gt;my_disk, inode_pos.sec_lba, inode_buf, <span class="hljs-number">1</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/* 回收inode的数据块和inode本身 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">inode_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part, <span class="hljs-type">uint32_t</span> inode_no)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">inode_to_del</span> =</span> inode_open(part, inode_no);<br>   ASSERT(inode_to_del-&gt;i_no == inode_no);<br><br><span class="hljs-comment">/* 1 回收inode占用的所有块 */</span><br>   <span class="hljs-type">uint8_t</span> block_idx = <span class="hljs-number">0</span>, block_cnt = <span class="hljs-number">12</span>;<br>   <span class="hljs-type">uint32_t</span> block_bitmap_idx;<br>   <span class="hljs-type">uint32_t</span> all_blocks[<span class="hljs-number">140</span>] = &#123;<span class="hljs-number">0</span>&#125;;  <span class="hljs-comment">//12个直接块+128个间接块</span><br><br>   <span class="hljs-comment">/* a 先将前12个直接块存入all_blocks */</span><br>   <span class="hljs-keyword">while</span> (block_idx &lt; <span class="hljs-number">12</span>) &#123;<br>      all_blocks[block_idx] = inode_to_del-&gt;i_sectors[block_idx];<br>      block_idx++;<br>   &#125;<br><br>   <span class="hljs-comment">/* b 如果一级间接块表存在,将其128个间接块读到all_blocks[12~], 并释放一级间接块表所占的扇区 */</span><br>   <span class="hljs-keyword">if</span> (inode_to_del-&gt;i_sectors[<span class="hljs-number">12</span>] != <span class="hljs-number">0</span>) &#123;<br>      ide_read(part-&gt;my_disk, inode_to_del-&gt;i_sectors[<span class="hljs-number">12</span>], all_blocks + <span class="hljs-number">12</span>, <span class="hljs-number">1</span>);<br>      block_cnt = <span class="hljs-number">140</span>;<br><br>      <span class="hljs-comment">/* 回收一级间接块表占用的扇区 */</span><br>      block_bitmap_idx = inode_to_del-&gt;i_sectors[<span class="hljs-number">12</span>] - part-&gt;sb-&gt;data_start_lba;<br>      ASSERT(block_bitmap_idx &gt; <span class="hljs-number">0</span>);<br>      bitmap_set(&amp;part-&gt;block_bitmap, block_bitmap_idx, <span class="hljs-number">0</span>);<br>      bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);<br>   &#125;<br>   <br>   <span class="hljs-comment">/* c inode所有的块地址已经收集到all_blocks中,下面逐个回收 */</span><br>   block_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (block_idx &lt; block_cnt) &#123;<br>      <span class="hljs-keyword">if</span> (all_blocks[block_idx] != <span class="hljs-number">0</span>) &#123;<br> block_bitmap_idx = <span class="hljs-number">0</span>;<br> block_bitmap_idx = all_blocks[block_idx] - part-&gt;sb-&gt;data_start_lba;<br> ASSERT(block_bitmap_idx &gt; <span class="hljs-number">0</span>);<br> bitmap_set(&amp;part-&gt;block_bitmap, block_bitmap_idx, <span class="hljs-number">0</span>);<br> bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);<br>      &#125;<br>      block_idx++; <br>   &#125;<br><br><span class="hljs-comment">/*2 回收该inode所占用的inode */</span><br>   bitmap_set(&amp;part-&gt;inode_bitmap, inode_no, <span class="hljs-number">0</span>);  <br>   bitmap_sync(cur_part, inode_no, INODE_BITMAP);<br><br>   <span class="hljs-comment">/******     以下inode_delete是调试用的    ******</span><br><span class="hljs-comment">   * 此函数会在inode_table中将此inode清0,</span><br><span class="hljs-comment">   * 但实际上是不需要的,inode分配是由inode位图控制的,</span><br><span class="hljs-comment">   * 硬盘上的数据不需要清0,可以直接覆盖*/</span><br>   <span class="hljs-type">void</span>* io_buf = sys_malloc(<span class="hljs-number">1024</span>);<br>   inode_delete(part, inode_no, io_buf);<br>   sys_free(io_buf);<br>   <span class="hljs-comment">/***********************************************/</span><br>    <br>   inode_close(inode_to_del);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fsdirc新增"><a class="markdownIt-Anchor" href="#fsdirc新增"></a> fs/dir.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 把分区part目录pdir中编号为inode_no的目录项删除 */</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">delete_dir_entry</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part, <span class="hljs-keyword">struct</span> dir* pdir, <span class="hljs-type">uint32_t</span> inode_no, <span class="hljs-type">void</span>* io_buf)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">dir_inode</span> =</span> pdir-&gt;inode;<br>   <span class="hljs-type">uint32_t</span> block_idx = <span class="hljs-number">0</span>, all_blocks[<span class="hljs-number">140</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>   <span class="hljs-comment">/* 收集目录全部块地址 */</span><br>   <span class="hljs-keyword">while</span> (block_idx &lt; <span class="hljs-number">12</span>) &#123;<br>      all_blocks[block_idx] = dir_inode-&gt;i_sectors[block_idx];<br>      block_idx++;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (dir_inode-&gt;i_sectors[<span class="hljs-number">12</span>]) &#123;<br>      ide_read(part-&gt;my_disk, dir_inode-&gt;i_sectors[<span class="hljs-number">12</span>], all_blocks + <span class="hljs-number">12</span>, <span class="hljs-number">1</span>);<br>   &#125;<br><br>   <span class="hljs-comment">/* 目录项在存储时保证不会跨扇区 */</span><br>   <span class="hljs-type">uint32_t</span> dir_entry_size = part-&gt;sb-&gt;dir_entry_size;<br>   <span class="hljs-type">uint32_t</span> dir_entrys_per_sec = (SECTOR_SIZE / dir_entry_size);       <span class="hljs-comment">// 每扇区最大的目录项数目</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">dir_e</span> =</span> (<span class="hljs-keyword">struct</span> dir_entry*)io_buf;   <br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">dir_entry_found</span> =</span> <span class="hljs-literal">NULL</span>;<br>   <span class="hljs-type">uint8_t</span> dir_entry_idx, dir_entry_cnt;<br>   <span class="hljs-type">bool</span> is_dir_first_block = <span class="hljs-literal">false</span>;     <span class="hljs-comment">// 目录的第1个块 </span><br><br>   <span class="hljs-comment">/* 遍历所有块,寻找目录项 */</span><br>   block_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (block_idx &lt; <span class="hljs-number">140</span>) &#123;<br>      is_dir_first_block = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">if</span> (all_blocks[block_idx] == <span class="hljs-number">0</span>) &#123;<br> block_idx++;<br> <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      dir_entry_idx = dir_entry_cnt = <span class="hljs-number">0</span>;<br>      <span class="hljs-built_in">memset</span>(io_buf, <span class="hljs-number">0</span>, SECTOR_SIZE);<br>      <span class="hljs-comment">/* 读取扇区,获得目录项 */</span><br>      ide_read(part-&gt;my_disk, all_blocks[block_idx], io_buf, <span class="hljs-number">1</span>);<br><br>      <span class="hljs-comment">/* 遍历所有的目录项,统计该扇区的目录项数量及是否有待删除的目录项 */</span><br>      <span class="hljs-keyword">while</span> (dir_entry_idx &lt; dir_entrys_per_sec) &#123;<br> <span class="hljs-keyword">if</span> ((dir_e + dir_entry_idx)-&gt;f_type != FT_UNKNOWN) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>((dir_e + dir_entry_idx)-&gt;filename, <span class="hljs-string">&quot;.&quot;</span>)) &#123; <br>       is_dir_first_block = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>((dir_e + dir_entry_idx)-&gt;filename, <span class="hljs-string">&quot;.&quot;</span>) &amp;&amp; <br>       <span class="hljs-built_in">strcmp</span>((dir_e + dir_entry_idx)-&gt;filename, <span class="hljs-string">&quot;..&quot;</span>)) &#123;<br>       dir_entry_cnt++;     <span class="hljs-comment">// 统计此扇区内的目录项个数,用来判断删除目录项后是否回收该扇区</span><br>       <span class="hljs-keyword">if</span> ((dir_e + dir_entry_idx)-&gt;i_no == inode_no) &#123;  <span class="hljs-comment">// 如果找到此i结点,就将其记录在dir_entry_found</span><br>  ASSERT(dir_entry_found == <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 确保目录中只有一个编号为inode_no的inode,找到一次后dir_entry_found就不再是NULL</span><br>  dir_entry_found = dir_e + dir_entry_idx;<br>  <span class="hljs-comment">/* 找到后也继续遍历,统计总共的目录项数 */</span><br>       &#125;<br>    &#125;<br> &#125;<br> dir_entry_idx++;<br>      &#125; <br><br>      <span class="hljs-comment">/* 若此扇区未找到该目录项,继续在下个扇区中找 */</span><br>      <span class="hljs-keyword">if</span> (dir_entry_found == <span class="hljs-literal">NULL</span>) &#123;<br> block_idx++;<br> <span class="hljs-keyword">continue</span>;<br>      &#125;<br><br>   <span class="hljs-comment">/* 在此扇区中找到目录项后,清除该目录项并判断是否回收扇区,随后退出循环直接返回 */</span><br>      ASSERT(dir_entry_cnt &gt;= <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">/* 除目录第1个扇区外,若该扇区上只有该目录项自己,则将整个扇区回收 */</span><br>      <span class="hljs-keyword">if</span> (dir_entry_cnt == <span class="hljs-number">1</span> &amp;&amp; !is_dir_first_block) &#123;<br> <span class="hljs-comment">/* a 在块位图中回收该块 */</span><br> <span class="hljs-type">uint32_t</span> block_bitmap_idx = all_blocks[block_idx] - part-&gt;sb-&gt;data_start_lba;<br> bitmap_set(&amp;part-&gt;block_bitmap, block_bitmap_idx, <span class="hljs-number">0</span>);<br> bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);<br><br> <span class="hljs-comment">/* b 将块地址从数组i_sectors或索引表中去掉 */</span><br> <span class="hljs-keyword">if</span> (block_idx &lt; <span class="hljs-number">12</span>) &#123;<br>    dir_inode-&gt;i_sectors[block_idx] = <span class="hljs-number">0</span>;<br> &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// 在一级间接索引表中擦除该间接块地址</span><br>    <span class="hljs-comment">/*先判断一级间接索引表中间接块的数量,如果仅有这1个间接块,连同间接索引表所在的块一同回收 */</span><br>    <span class="hljs-type">uint32_t</span> indirect_blocks = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> indirect_block_idx = <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">while</span> (indirect_block_idx &lt; <span class="hljs-number">140</span>) &#123;<br>       <span class="hljs-keyword">if</span> (all_blocks[indirect_block_idx] != <span class="hljs-number">0</span>) &#123;<br>  indirect_blocks++;<br>       &#125;<br>    &#125;<br>    ASSERT(indirect_blocks &gt;= <span class="hljs-number">1</span>);  <span class="hljs-comment">// 包括当前间接块</span><br><br>    <span class="hljs-keyword">if</span> (indirect_blocks &gt; <span class="hljs-number">1</span>) &#123;  <span class="hljs-comment">// 间接索引表中还包括其它间接块,仅在索引表中擦除当前这个间接块地址</span><br>       all_blocks[block_idx] = <span class="hljs-number">0</span>; <br>       ide_write(part-&gt;my_disk, dir_inode-&gt;i_sectors[<span class="hljs-number">12</span>], all_blocks + <span class="hljs-number">12</span>, <span class="hljs-number">1</span>); <br>    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 间接索引表中就当前这1个间接块,直接把间接索引表所在的块回收,然后擦除间接索引表块地址</span><br>       <span class="hljs-comment">/* 回收间接索引表所在的块 */</span><br>       block_bitmap_idx = dir_inode-&gt;i_sectors[<span class="hljs-number">12</span>] - part-&gt;sb-&gt;data_start_lba;<br>       bitmap_set(&amp;part-&gt;block_bitmap, block_bitmap_idx, <span class="hljs-number">0</span>);<br>       bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);<br>       <br>       <span class="hljs-comment">/* 将间接索引表地址清0 */</span><br>       dir_inode-&gt;i_sectors[<span class="hljs-number">12</span>] = <span class="hljs-number">0</span>;<br>    &#125;<br> &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 仅将该目录项清空</span><br> <span class="hljs-built_in">memset</span>(dir_entry_found, <span class="hljs-number">0</span>, dir_entry_size);<br> ide_write(part-&gt;my_disk, all_blocks[block_idx], io_buf, <span class="hljs-number">1</span>);<br>      &#125;<br><br>   <span class="hljs-comment">/* 更新i结点信息并同步到硬盘 */</span><br>      ASSERT(dir_inode-&gt;i_size &gt;= dir_entry_size);<br>      dir_inode-&gt;i_size -= dir_entry_size;<br>      <span class="hljs-built_in">memset</span>(io_buf, <span class="hljs-number">0</span>, SECTOR_SIZE * <span class="hljs-number">2</span>);<br>      inode_sync(part, dir_inode, io_buf);<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br>   <span class="hljs-comment">/* 所有块中未找到则返回false,若出现这种情况应该是serarch_file出错了 */</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fsfsc新增-3"><a class="markdownIt-Anchor" href="#fsfsc新增-3"></a> fs/fs.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 删除文件(非目录),成功返回0,失败返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_unlink</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname)</span> &#123;<br>   ASSERT(<span class="hljs-built_in">strlen</span>(pathname) &lt; MAX_PATH_LEN);<br><br>   <span class="hljs-comment">/* 先检查待删除的文件是否存在 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">path_search_record</span> <span class="hljs-title">searched_record</span>;</span><br>   <span class="hljs-built_in">memset</span>(&amp;searched_record, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> path_search_record));<br>   <span class="hljs-type">int</span> inode_no = search_file(pathname, &amp;searched_record);<br>   ASSERT(inode_no != <span class="hljs-number">0</span>);<br>   <span class="hljs-keyword">if</span> (inode_no == <span class="hljs-number">-1</span>) &#123;<br>      printk(<span class="hljs-string">&quot;file %s not found!\n&quot;</span>, pathname);<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (searched_record.file_type == FT_DIRECTORY) &#123;<br>      printk(<span class="hljs-string">&quot;can`t delete a direcotry with unlink(), use rmdir() to instead\n&quot;</span>);<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-comment">/* 检查是否在已打开文件列表(文件表)中 */</span><br>   <span class="hljs-type">uint32_t</span> file_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (file_idx &lt; MAX_FILE_OPEN) &#123;<br>      <span class="hljs-keyword">if</span> (file_table[file_idx].fd_inode != <span class="hljs-literal">NULL</span> &amp;&amp; (<span class="hljs-type">uint32_t</span>)inode_no == file_table[file_idx].fd_inode-&gt;i_no) &#123;<br> <span class="hljs-keyword">break</span>;<br>      &#125;<br>      file_idx++;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (file_idx &lt; MAX_FILE_OPEN) &#123;<br>      dir_close(searched_record.parent_dir);<br>      printk(<span class="hljs-string">&quot;file %s is in use, not allow to delete!\n&quot;</span>, pathname);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   ASSERT(file_idx == MAX_FILE_OPEN);<br>   <br>   <span class="hljs-comment">/* 为delete_dir_entry申请缓冲区 */</span><br>   <span class="hljs-type">void</span>* io_buf = sys_malloc(SECTOR_SIZE + SECTOR_SIZE);<br>   <span class="hljs-keyword">if</span> (io_buf == <span class="hljs-literal">NULL</span>) &#123;<br>      dir_close(searched_record.parent_dir);<br>      printk(<span class="hljs-string">&quot;sys_unlink: malloc for io_buf failed\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span>* <span class="hljs-title">parent_dir</span> =</span> searched_record.parent_dir;  <br>   delete_dir_entry(cur_part, parent_dir, inode_no, io_buf);<br>   inode_release(cur_part, inode_no);<br>   sys_free(io_buf);<br>   dir_close(searched_record.parent_dir);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">// 成功删除文件 </span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-3"><a class="markdownIt-Anchor" href="#kernelmainc修改-3"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>init_all();<br><br>intr_enable();<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/file1 delete %s!\n&quot;</span>, sys_unlink(<span class="hljs-string">&quot;/file1&quot;</span>) == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;done&quot;</span> : <span class="hljs-string">&quot;fall&quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-3"><a class="markdownIt-Anchor" href="#运行结果-3"></a> 运行结果</h3><p><img src="/img/os/os14.8.png" alt="图为bochs运行界面" /></p><h2 id="创建目录"><a class="markdownIt-Anchor" href="#创建目录"></a> 创建目录</h2><h3 id="fsfsc新增-4"><a class="markdownIt-Anchor" href="#fsfsc新增-4"></a> fs/fs.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 创建目录pathname,成功返回0,失败返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_mkdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname)</span> &#123;<br>   <span class="hljs-type">uint8_t</span> rollback_step = <span class="hljs-number">0</span>;       <span class="hljs-comment">// 用于操作失败时回滚各资源状态</span><br>   <span class="hljs-type">void</span>* io_buf = sys_malloc(SECTOR_SIZE * <span class="hljs-number">2</span>);<br>   <span class="hljs-keyword">if</span> (io_buf == <span class="hljs-literal">NULL</span>) &#123;<br>      printk(<span class="hljs-string">&quot;sys_mkdir: sys_malloc for io_buf failed\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">path_search_record</span> <span class="hljs-title">searched_record</span>;</span><br>   <span class="hljs-built_in">memset</span>(&amp;searched_record, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> path_search_record));<br>   <span class="hljs-type">int</span> inode_no = <span class="hljs-number">-1</span>;<br>   inode_no = search_file(pathname, &amp;searched_record);<br>   <span class="hljs-keyword">if</span> (inode_no != <span class="hljs-number">-1</span>) &#123;      <span class="hljs-comment">// 如果找到了同名目录或文件,失败返回</span><br>      printk(<span class="hljs-string">&quot;sys_mkdir: file or directory %s exist!\n&quot;</span>, pathname);<br>      rollback_step = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">goto</span> rollback;<br>   &#125; <span class="hljs-keyword">else</span> &#123;     <span class="hljs-comment">// 若未找到,也要判断是在最终目录没找到还是某个中间目录不存在</span><br>      <span class="hljs-type">uint32_t</span> pathname_depth = path_depth_cnt((<span class="hljs-type">char</span>*)pathname);<br>      <span class="hljs-type">uint32_t</span> path_searched_depth = path_depth_cnt(searched_record.searched_path);<br>      <span class="hljs-comment">/* 先判断是否把pathname的各层目录都访问到了,即是否在某个中间目录就失败了 */</span><br>      <span class="hljs-keyword">if</span> (pathname_depth != path_searched_depth) &#123;   <span class="hljs-comment">// 说明并没有访问到全部的路径,某个中间目录是不存在的</span><br> printk(<span class="hljs-string">&quot;sys_mkdir: can`t access %s, subpath %s is`t exist\n&quot;</span>, pathname, searched_record.searched_path);<br> rollback_step = <span class="hljs-number">1</span>;<br> <span class="hljs-keyword">goto</span> rollback;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span>* <span class="hljs-title">parent_dir</span> =</span> searched_record.parent_dir;<br>   <span class="hljs-comment">/* 目录名称后可能会有字符&#x27;/&#x27;,所以最好直接用searched_record.searched_path,无&#x27;/&#x27; */</span><br>   <span class="hljs-type">char</span>* dirname = <span class="hljs-built_in">strrchr</span>(searched_record.searched_path, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;<br><br>   inode_no = inode_bitmap_alloc(cur_part); <br>   <span class="hljs-keyword">if</span> (inode_no == <span class="hljs-number">-1</span>) &#123;<br>      printk(<span class="hljs-string">&quot;sys_mkdir: allocate inode failed\n&quot;</span>);<br>      rollback_step = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">goto</span> rollback;<br>   &#125;<br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> <span class="hljs-title">new_dir_inode</span>;</span><br>   inode_init(inode_no, &amp;new_dir_inode);    <span class="hljs-comment">// 初始化i结点</span><br><br>   <span class="hljs-type">uint32_t</span> block_bitmap_idx = <span class="hljs-number">0</span>;     <span class="hljs-comment">// 用来记录block对应于block_bitmap中的索引</span><br>   <span class="hljs-type">int32_t</span> block_lba = <span class="hljs-number">-1</span>;<br><span class="hljs-comment">/* 为目录分配一个块,用来写入目录.和.. */</span><br>   block_lba = block_bitmap_alloc(cur_part);<br>   <span class="hljs-keyword">if</span> (block_lba == <span class="hljs-number">-1</span>) &#123;<br>      printk(<span class="hljs-string">&quot;sys_mkdir: block_bitmap_alloc for create directory failed\n&quot;</span>);<br>      rollback_step = <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">goto</span> rollback;<br>   &#125;<br>   new_dir_inode.i_sectors[<span class="hljs-number">0</span>] = block_lba;<br>   <span class="hljs-comment">/* 每分配一个块就将位图同步到硬盘 */</span><br>   block_bitmap_idx = block_lba - cur_part-&gt;sb-&gt;data_start_lba;<br>   ASSERT(block_bitmap_idx != <span class="hljs-number">0</span>);<br>   bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);<br>   <br>   <span class="hljs-comment">/* 将当前目录的目录项&#x27;.&#x27;和&#x27;..&#x27;写入目录 */</span><br>   <span class="hljs-built_in">memset</span>(io_buf, <span class="hljs-number">0</span>, SECTOR_SIZE * <span class="hljs-number">2</span>); <span class="hljs-comment">// 清空io_buf</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">p_de</span> =</span> (<span class="hljs-keyword">struct</span> dir_entry*)io_buf;<br>   <br>   <span class="hljs-comment">/* 初始化当前目录&quot;.&quot; */</span><br>   <span class="hljs-built_in">memcpy</span>(p_de-&gt;filename, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-number">1</span>);<br>   p_de-&gt;i_no = inode_no ;<br>   p_de-&gt;f_type = FT_DIRECTORY;<br><br>   p_de++;<br>   <span class="hljs-comment">/* 初始化当前目录&quot;..&quot; */</span><br>   <span class="hljs-built_in">memcpy</span>(p_de-&gt;filename, <span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-number">2</span>);<br>   p_de-&gt;i_no = parent_dir-&gt;inode-&gt;i_no;<br>   p_de-&gt;f_type = FT_DIRECTORY;<br>   ide_write(cur_part-&gt;my_disk, new_dir_inode.i_sectors[<span class="hljs-number">0</span>], io_buf, <span class="hljs-number">1</span>);<br><br>   new_dir_inode.i_size = <span class="hljs-number">2</span> * cur_part-&gt;sb-&gt;dir_entry_size;<br><br>   <span class="hljs-comment">/* 在父目录中添加自己的目录项 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span> <span class="hljs-title">new_dir_entry</span>;</span><br>   <span class="hljs-built_in">memset</span>(&amp;new_dir_entry, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> dir_entry));<br>   create_dir_entry(dirname, inode_no, FT_DIRECTORY, &amp;new_dir_entry);<br>   <span class="hljs-built_in">memset</span>(io_buf, <span class="hljs-number">0</span>, SECTOR_SIZE * <span class="hljs-number">2</span>); <span class="hljs-comment">// 清空io_buf</span><br>   <span class="hljs-keyword">if</span> (!sync_dir_entry(parent_dir, &amp;new_dir_entry, io_buf)) &#123;  <span class="hljs-comment">// sync_dir_entry中将block_bitmap通过bitmap_sync同步到硬盘</span><br>      printk(<span class="hljs-string">&quot;sys_mkdir: sync_dir_entry to disk failed!\n&quot;</span>);<br>      rollback_step = <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">goto</span> rollback;<br>   &#125;<br><br>   <span class="hljs-comment">/* 父目录的inode同步到硬盘 */</span><br>   <span class="hljs-built_in">memset</span>(io_buf, <span class="hljs-number">0</span>, SECTOR_SIZE * <span class="hljs-number">2</span>);<br>   inode_sync(cur_part, parent_dir-&gt;inode, io_buf);<br><br>   <span class="hljs-comment">/* 将新创建目录的inode同步到硬盘 */</span><br>   <span class="hljs-built_in">memset</span>(io_buf, <span class="hljs-number">0</span>, SECTOR_SIZE * <span class="hljs-number">2</span>);<br>   inode_sync(cur_part, &amp;new_dir_inode, io_buf);<br><br>   <span class="hljs-comment">/* 将inode位图同步到硬盘 */</span><br>   bitmap_sync(cur_part, inode_no, INODE_BITMAP);<br><br>   sys_free(io_buf);<br><br>   <span class="hljs-comment">/* 关闭所创建目录的父目录 */</span><br>   dir_close(searched_record.parent_dir);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/*创建文件或目录需要创建相关的多个资源,若某步失败则会执行到下面的回滚步骤 */</span><br>rollback:     <span class="hljs-comment">// 因为某步骤操作失败而回滚</span><br>   <span class="hljs-keyword">switch</span> (rollback_step) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br> bitmap_set(&amp;cur_part-&gt;inode_bitmap, inode_no, <span class="hljs-number">0</span>); <span class="hljs-comment">// 如果新文件的inode创建失败,之前位图中分配的inode_no也要恢复 </span><br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br> <span class="hljs-comment">/* 关闭所创建目录的父目录 */</span><br> dir_close(searched_record.parent_dir);<br> <span class="hljs-keyword">break</span>;<br>   &#125;<br>   sys_free(io_buf);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-4"><a class="markdownIt-Anchor" href="#kernelmainc修改-4"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>init_all();<br><br>intr_enable();<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/dir1/subdir1 create %s!\n&quot;</span>,\<br>sys_mkdir(<span class="hljs-string">&quot;/dir1/subdir1&quot;</span>) == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;done&quot;</span> : <span class="hljs-string">&quot;fall&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/dir1 create %s!\n&quot;</span>, sys_mkdir(<span class="hljs-string">&quot;/dir1&quot;</span>)== <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;done&quot;</span> : <span class="hljs-string">&quot;fall&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;now /dir1/subdir1 create %s\n&quot;</span>, \<br>sys_mkdir(<span class="hljs-string">&quot;/dir1/subdir1&quot;</span>) == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;done&quot;</span>: <span class="hljs-string">&quot;fall&quot;</span>);<br><br><span class="hljs-type">int</span> fd = sys_open(<span class="hljs-string">&quot;/dir1/subdir1/file2&quot;</span>, O_CREAT|O_RDWR);<br><span class="hljs-keyword">if</span>(fd != <span class="hljs-number">-1</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dir1/subdir1/file2/ create done!\n&quot;</span>);<br>sys_write(fd, <span class="hljs-string">&quot;Catch me if you can!\n&quot;</span>, <span class="hljs-number">21</span>);<br>sys_lseek(fd, <span class="hljs-number">0</span>, SEEK_SET);<br><span class="hljs-type">char</span> buf[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>sys_read(fd, buf, <span class="hljs-number">21</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/dir1/subdir1/file2 says:\n%s&quot;</span>, buf);<br>sys_close(fd);<br>&#125;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-4"><a class="markdownIt-Anchor" href="#运行结果-4"></a> 运行结果</h3><p><img src="/img/os/os14.9.png" alt="图为bochs运行界面" /></p><h2 id="遍历目录"><a class="markdownIt-Anchor" href="#遍历目录"></a> 遍历目录</h2><h3 id="fsfsc新增-5"><a class="markdownIt-Anchor" href="#fsfsc新增-5"></a> fs/fs.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 目录打开成功后返回目录指针,失败返回NULL */</span><br><span class="hljs-keyword">struct</span> dir* <span class="hljs-title function_">sys_opendir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span> &#123;<br>   ASSERT(<span class="hljs-built_in">strlen</span>(name) &lt; MAX_PATH_LEN);<br>   <span class="hljs-comment">/* 如果是根目录&#x27;/&#x27;,直接返回&amp;root_dir */</span><br>   <span class="hljs-keyword">if</span> (name[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span> &amp;&amp; (name[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span> || name[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;.&#x27;</span>)) &#123;<br>      <span class="hljs-keyword">return</span> &amp;root_dir;<br>   &#125;<br><br>   <span class="hljs-comment">/* 先检查待打开的目录是否存在 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">path_search_record</span> <span class="hljs-title">searched_record</span>;</span><br>   <span class="hljs-built_in">memset</span>(&amp;searched_record, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> path_search_record));<br>   <span class="hljs-type">int</span> inode_no = search_file(name, &amp;searched_record);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span>* <span class="hljs-title">ret</span> =</span> <span class="hljs-literal">NULL</span>;<br>   <span class="hljs-keyword">if</span> (inode_no == <span class="hljs-number">-1</span>) &#123; <span class="hljs-comment">// 如果找不到目录,提示不存在的路径 </span><br>      printk(<span class="hljs-string">&quot;In %s, sub path %s not exist\n&quot;</span>, name, searched_record.searched_path); <br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (searched_record.file_type == FT_REGULAR) &#123;<br> printk(<span class="hljs-string">&quot;%s is regular file!\n&quot;</span>, name);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (searched_record.file_type == FT_DIRECTORY) &#123;<br> ret = dir_open(cur_part, inode_no);<br>      &#125;<br>   &#125;<br>   dir_close(searched_record.parent_dir);<br>   <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">/* 成功关闭目录dir返回0,失败返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_closedir</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* dir)</span> &#123;<br>   <span class="hljs-type">int32_t</span> ret = <span class="hljs-number">-1</span>;<br>   <span class="hljs-keyword">if</span> (dir != <span class="hljs-literal">NULL</span>) &#123;<br>      dir_close(dir);<br>      ret = <span class="hljs-number">0</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-5"><a class="markdownIt-Anchor" href="#kernelmainc修改-5"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>init_all();<br><br>intr_enable();<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span>* <span class="hljs-title">p_dir</span> =</span> sys_opendir(<span class="hljs-string">&quot;/dir1/subdir1&quot;</span>);<br><span class="hljs-keyword">if</span> (p_dir)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/dir1/subdir1 open done!\n&quot;</span>);<br><span class="hljs-keyword">if</span>(sys_closedir(p_dir) == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/dir1/subdir1 close done!\n&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/dir1/subdir1 close fail!\n&quot;</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/dir1/subdir1 open fail!\n&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-5"><a class="markdownIt-Anchor" href="#运行结果-5"></a> 运行结果</h3><p><img src="/img/os/os14.10.png" alt="图为bochs运行界面" /></p><h3 id="fsdirc新增-2"><a class="markdownIt-Anchor" href="#fsdirc新增-2"></a> fs/dir.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 读取目录,成功返回1个目录项,失败返回NULL */</span><br><span class="hljs-keyword">struct</span> dir_entry* <span class="hljs-title function_">dir_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* dir)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">dir_e</span> =</span> (<span class="hljs-keyword">struct</span> dir_entry*)dir-&gt;dir_buf;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">dir_inode</span> =</span> dir-&gt;inode; <br>   <span class="hljs-type">uint32_t</span> all_blocks[<span class="hljs-number">140</span>] = &#123;<span class="hljs-number">0</span>&#125;, block_cnt = <span class="hljs-number">12</span>;<br>   <span class="hljs-type">uint32_t</span> block_idx = <span class="hljs-number">0</span>, dir_entry_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (block_idx &lt; <span class="hljs-number">12</span>) &#123;<br>      all_blocks[block_idx] = dir_inode-&gt;i_sectors[block_idx];<br>      block_idx++;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (dir_inode-&gt;i_sectors[<span class="hljs-number">12</span>] != <span class="hljs-number">0</span>) &#123;     <span class="hljs-comment">// 若含有一级间接块表</span><br>      ide_read(cur_part-&gt;my_disk, dir_inode-&gt;i_sectors[<span class="hljs-number">12</span>], all_blocks + <span class="hljs-number">12</span>, <span class="hljs-number">1</span>);<br>      block_cnt = <span class="hljs-number">140</span>;<br>   &#125;<br>   block_idx = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-type">uint32_t</span> cur_dir_entry_pos = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 当前目录项的偏移,此项用来判断是否是之前已经返回过的目录项</span><br>   <span class="hljs-type">uint32_t</span> dir_entry_size = cur_part-&gt;sb-&gt;dir_entry_size;<br>   <span class="hljs-type">uint32_t</span> dir_entrys_per_sec = SECTOR_SIZE / dir_entry_size; <span class="hljs-comment">// 1扇区内可容纳的目录项个数</span><br>   <span class="hljs-comment">/* 因为此目录内可能删除了某些文件或子目录,所以要遍历所有块 */</span><br>   <span class="hljs-keyword">while</span> (block_idx &lt; block_cnt) &#123;<br>      <span class="hljs-keyword">if</span> (dir-&gt;dir_pos &gt;= dir_inode-&gt;i_size) &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (all_blocks[block_idx] == <span class="hljs-number">0</span>) &#123;     <span class="hljs-comment">// 如果此块地址为0,即空块,继续读出下一块</span><br> block_idx++;<br> <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-built_in">memset</span>(dir_e, <span class="hljs-number">0</span>, SECTOR_SIZE);<br>      ide_read(cur_part-&gt;my_disk, all_blocks[block_idx], dir_e, <span class="hljs-number">1</span>);<br>      dir_entry_idx = <span class="hljs-number">0</span>;<br>      <span class="hljs-comment">/* 遍历扇区内所有目录项 */</span><br>      <span class="hljs-keyword">while</span> (dir_entry_idx &lt; dir_entrys_per_sec) &#123;<br> <span class="hljs-keyword">if</span> ((dir_e + dir_entry_idx)-&gt;f_type) &#123; <span class="hljs-comment">// 如果f_type不等于0,即不等于FT_UNKNOWN</span><br>    <span class="hljs-comment">/* 判断是不是最新的目录项,避免返回曾经已经返回过的目录项 */</span><br>    <span class="hljs-keyword">if</span> (cur_dir_entry_pos &lt; dir-&gt;dir_pos) &#123;<br>       cur_dir_entry_pos += dir_entry_size;<br>       dir_entry_idx++;<br>       <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    ASSERT(cur_dir_entry_pos == dir-&gt;dir_pos);<br>    dir-&gt;dir_pos += dir_entry_size;      <span class="hljs-comment">// 更新为新位置,即下一个返回的目录项地址</span><br>    <span class="hljs-keyword">return</span> dir_e + dir_entry_idx; <br> &#125;<br> dir_entry_idx++;<br>      &#125;<br>      block_idx++;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fsfsc新增-6"><a class="markdownIt-Anchor" href="#fsfsc新增-6"></a> fs/fs.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 读取目录dir的1个目录项,成功后返回其目录项地址,到目录尾时或出错时返回NULL */</span><br><span class="hljs-keyword">struct</span> dir_entry* <span class="hljs-title function_">sys_readdir</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* dir)</span> &#123;<br>   ASSERT(dir != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-keyword">return</span> dir_read(dir);<br>&#125;<br><br><span class="hljs-comment">/* 把目录dir的指针dir_pos置0 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sys_rewinddir</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* dir)</span> &#123;<br>   dir-&gt;dir_pos = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-6"><a class="markdownIt-Anchor" href="#kernelmainc修改-6"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>init_all();<br>intr_enable();<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span>* <span class="hljs-title">p_dir</span> =</span> sys_opendir(<span class="hljs-string">&quot;/dir1/subdir1&quot;</span>);<br><span class="hljs-keyword">if</span> (p_dir)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/dir1/subdir1 open done!\ncontent:\n&quot;</span>);<br><span class="hljs-type">char</span>* type =<span class="hljs-literal">NULL</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">dir_e</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">while</span>((dir_e = sys_readdir(p_dir)))&#123;<br><span class="hljs-keyword">if</span>(dir_e-&gt;f_type = FT_REGULAR)&#123;<br>type = <span class="hljs-string">&quot;regular&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>type = <span class="hljs-string">&quot;directory&quot;</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s   %s\n&quot;</span>,type, dir_e-&gt;filename);<br><br>&#125;<br><span class="hljs-keyword">if</span>(sys_closedir(p_dir) == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/dir1/subdir1 close done!\n&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/dir1/subdir1 close fail!\n&quot;</span>);<br>&#125;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/dir1/subdir1 open fail!\n&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-6"><a class="markdownIt-Anchor" href="#运行结果-6"></a> 运行结果</h3><p><img src="/img/os/os14.11.png" alt="图为bochs运行界面" /></p><h2 id="删除目录"><a class="markdownIt-Anchor" href="#删除目录"></a> 删除目录</h2><h3 id="fsdirc新增-3"><a class="markdownIt-Anchor" href="#fsdirc新增-3"></a> fs/dir.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 判断目录是否为空 */</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">dir_is_empty</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* dir)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">dir_inode</span> =</span> dir-&gt;inode;<br>   <span class="hljs-comment">/* 若目录下只有.和..这两个目录项则目录为空 */</span><br>   <span class="hljs-keyword">return</span> (dir_inode-&gt;i_size == cur_part-&gt;sb-&gt;dir_entry_size * <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-comment">/* 在父目录parent_dir中删除child_dir */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">dir_remove</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* parent_dir, <span class="hljs-keyword">struct</span> dir* child_dir)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">child_dir_inode</span>  =</span> child_dir-&gt;inode;<br>   <span class="hljs-comment">/* 空目录只在inode-&gt;i_sectors[0]中有扇区,其它扇区都应该为空 */</span><br>   <span class="hljs-type">int32_t</span> block_idx = <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">while</span> (block_idx &lt; <span class="hljs-number">13</span>) &#123;<br>      ASSERT(child_dir_inode-&gt;i_sectors[block_idx] == <span class="hljs-number">0</span>);<br>      block_idx++;<br>   &#125;<br>   <span class="hljs-type">void</span>* io_buf = sys_malloc(SECTOR_SIZE * <span class="hljs-number">2</span>);<br>   <span class="hljs-keyword">if</span> (io_buf == <span class="hljs-literal">NULL</span>) &#123;<br>      printk(<span class="hljs-string">&quot;dir_remove: malloc for io_buf failed\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-comment">/* 在父目录parent_dir中删除子目录child_dir对应的目录项 */</span><br>   delete_dir_entry(cur_part, parent_dir, child_dir_inode-&gt;i_no, io_buf);<br><br>   <span class="hljs-comment">/* 回收inode中i_secotrs中所占用的扇区,并同步inode_bitmap和block_bitmap */</span><br>   inode_release(cur_part, child_dir_inode-&gt;i_no);<br>   sys_free(io_buf);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fsfsc新增-7"><a class="markdownIt-Anchor" href="#fsfsc新增-7"></a> fs/fs.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 删除空目录,成功时返回0,失败时返回-1*/</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_rmdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname)</span> &#123;<br>   <span class="hljs-comment">/* 先检查待删除的文件是否存在 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">path_search_record</span> <span class="hljs-title">searched_record</span>;</span><br>   <span class="hljs-built_in">memset</span>(&amp;searched_record, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> path_search_record));<br>   <span class="hljs-type">int32_t</span> inode_no = search_file(pathname, &amp;searched_record);<br>   ASSERT(inode_no != <span class="hljs-number">0</span>);<br>   <span class="hljs-type">int32_t</span> retval = <span class="hljs-number">-1</span>;<span class="hljs-comment">// 默认返回值</span><br>   <span class="hljs-keyword">if</span> (inode_no == <span class="hljs-number">-1</span>) &#123;<br>      printk(<span class="hljs-string">&quot;In %s, sub path %s not exist\n&quot;</span>, pathname, searched_record.searched_path); <br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (searched_record.file_type == FT_REGULAR) &#123;<br> printk(<span class="hljs-string">&quot;%s is regular file!\n&quot;</span>, pathname);<br>      &#125; <span class="hljs-keyword">else</span> &#123; <br> <span class="hljs-keyword">struct</span> dir* dir = dir_open(cur_part, inode_no);<br> <span class="hljs-keyword">if</span> (!dir_is_empty(dir)) &#123; <span class="hljs-comment">// 非空目录不可删除</span><br>    printk(<span class="hljs-string">&quot;dir %s is not empty, it is not allowed to delete a nonempty directory!\n&quot;</span>, pathname);<br> &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (!dir_remove(searched_record.parent_dir, dir)) &#123;<br>       retval = <span class="hljs-number">0</span>;<br>    &#125;<br> &#125;<br> dir_close(dir);<br>      &#125;<br>   &#125;<br>   dir_close(searched_record.parent_dir);<br>   <span class="hljs-keyword">return</span> retval;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-7"><a class="markdownIt-Anchor" href="#kernelmainc修改-7"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>init_all();<br><br>intr_enable();<br><br><span class="hljs-comment">//sys_mkdir(&quot;/dir1/subdir1&quot;);</span><br><span class="hljs-comment">//sys_open(&quot;/dir1/subdir1/file2&quot;, O_CREAT|O_RDWR);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/dir1 content before delete /dir1/subdir1:\n&quot;</span>);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span>* <span class="hljs-title">dir</span> =</span> sys_opendir(<span class="hljs-string">&quot;/dir1/&quot;</span>);<br><span class="hljs-type">char</span>* type =<span class="hljs-literal">NULL</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">dir_e</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">while</span>((dir_e = sys_readdir(dir)))&#123;<br><span class="hljs-keyword">if</span>(dir_e-&gt;f_type = FT_REGULAR)&#123;<br>type = <span class="hljs-string">&quot;regular&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>type = <span class="hljs-string">&quot;directory&quot;</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s   %s\n&quot;</span>,type, dir_e-&gt;filename);<br><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;try to delete nonempty directory /dir1/subdir1\n&quot;</span>);<br><span class="hljs-keyword">if</span> (sys_rmdir(<span class="hljs-string">&quot;/dir1/subdir1/&quot;</span>) == <span class="hljs-number">-1</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sys_rmdir: /dir1/subdir1 delete fall!\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (sys_unlink(<span class="hljs-string">&quot;/dir1/subdir1/file2&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sys_rmdir: /dir1/subdir1/file2 delete done!\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;try to delete directory /dir1/subdir1 again\n&quot;</span>);<br><span class="hljs-keyword">if</span> (sys_rmdir(<span class="hljs-string">&quot;/dir1/subdir1&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/dir1/subdir1 delete done!\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/dir1 content after delete /dir1/subdir1:\n&quot;</span>);<br><br>sys_rewinddir(dir);<br><span class="hljs-keyword">while</span>((dir_e = sys_readdir(dir)))&#123;<br><span class="hljs-keyword">if</span>(dir_e-&gt;f_type = FT_REGULAR)&#123;<br>type = <span class="hljs-string">&quot;regular&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>type = <span class="hljs-string">&quot;directory&quot;</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s   %s\n&quot;</span>,type, dir_e-&gt;filename);<br><br>&#125;<br><br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-7"><a class="markdownIt-Anchor" href="#运行结果-7"></a> 运行结果</h3><p><img src="/img/os/os14.12.png" alt="图为bochs运行界面" /></p><h2 id="任务的工作目录"><a class="markdownIt-Anchor" href="#任务的工作目录"></a> 任务的工作目录</h2><h3 id="fsfsc新增-8"><a class="markdownIt-Anchor" href="#fsfsc新增-8"></a> fs/fs.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 获得父目录的inode编号 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title function_">get_parent_dir_inode_nr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> child_inode_nr, <span class="hljs-type">void</span>* io_buf)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">child_dir_inode</span> =</span> inode_open(cur_part, child_inode_nr);<br>   <span class="hljs-comment">/* 目录中的目录项&quot;..&quot;中包括父目录inode编号,&quot;..&quot;位于目录的第0块 */</span><br>   <span class="hljs-type">uint32_t</span> block_lba = child_dir_inode-&gt;i_sectors[<span class="hljs-number">0</span>];<br>   ASSERT(block_lba &gt;= cur_part-&gt;sb-&gt;data_start_lba);<br>   inode_close(child_dir_inode);<br>   ide_read(cur_part-&gt;my_disk, block_lba, io_buf, <span class="hljs-number">1</span>);   <br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">dir_e</span> =</span> (<span class="hljs-keyword">struct</span> dir_entry*)io_buf;<br>   <span class="hljs-comment">/* 第0个目录项是&quot;.&quot;,第1个目录项是&quot;..&quot; */</span><br>   ASSERT(dir_e[<span class="hljs-number">1</span>].i_no &lt; <span class="hljs-number">4096</span> &amp;&amp; dir_e[<span class="hljs-number">1</span>].f_type == FT_DIRECTORY);<br>   <span class="hljs-keyword">return</span> dir_e[<span class="hljs-number">1</span>].i_no;      <span class="hljs-comment">// 返回..即父目录的inode编号</span><br>&#125;<br><br><span class="hljs-comment">/* 在inode编号为p_inode_nr的目录中查找inode编号为c_inode_nr的子目录的名字,</span><br><span class="hljs-comment"> * 将名字存入缓冲区path.成功返回0,失败返-1 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_child_dir_name</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> p_inode_nr, <span class="hljs-type">uint32_t</span> c_inode_nr, <span class="hljs-type">char</span>* path, <span class="hljs-type">void</span>* io_buf)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">parent_dir_inode</span> =</span> inode_open(cur_part, p_inode_nr);<br>   <span class="hljs-comment">/* 填充all_blocks,将该目录的所占扇区地址全部写入all_blocks */</span><br>   <span class="hljs-type">uint8_t</span> block_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">uint32_t</span> all_blocks[<span class="hljs-number">140</span>] = &#123;<span class="hljs-number">0</span>&#125;, block_cnt = <span class="hljs-number">12</span>;<br>   <span class="hljs-keyword">while</span> (block_idx &lt; <span class="hljs-number">12</span>) &#123;<br>      all_blocks[block_idx] = parent_dir_inode-&gt;i_sectors[block_idx];<br>      block_idx++;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (parent_dir_inode-&gt;i_sectors[<span class="hljs-number">12</span>]) &#123;<span class="hljs-comment">// 若包含了一级间接块表,将共读入all_blocks.</span><br>      ide_read(cur_part-&gt;my_disk, parent_dir_inode-&gt;i_sectors[<span class="hljs-number">12</span>], all_blocks + <span class="hljs-number">12</span>, <span class="hljs-number">1</span>);<br>      block_cnt = <span class="hljs-number">140</span>;<br>   &#125;<br>   inode_close(parent_dir_inode);<br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">dir_e</span> =</span> (<span class="hljs-keyword">struct</span> dir_entry*)io_buf;<br>   <span class="hljs-type">uint32_t</span> dir_entry_size = cur_part-&gt;sb-&gt;dir_entry_size;<br>   <span class="hljs-type">uint32_t</span> dir_entrys_per_sec = (<span class="hljs-number">512</span> / dir_entry_size);<br>   block_idx = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/* 遍历所有块 */</span><br>   <span class="hljs-keyword">while</span>(block_idx &lt; block_cnt) &#123;<br>      <span class="hljs-keyword">if</span>(all_blocks[block_idx]) &#123;      <span class="hljs-comment">// 如果相应块不为空则读入相应块</span><br> ide_read(cur_part-&gt;my_disk, all_blocks[block_idx], io_buf, <span class="hljs-number">1</span>);<br> <span class="hljs-type">uint8_t</span> dir_e_idx = <span class="hljs-number">0</span>;<br> <span class="hljs-comment">/* 遍历每个目录项 */</span><br> <span class="hljs-keyword">while</span>(dir_e_idx &lt; dir_entrys_per_sec) &#123;<br>    <span class="hljs-keyword">if</span> ((dir_e + dir_e_idx)-&gt;i_no == c_inode_nr) &#123;<br>       <span class="hljs-built_in">strcat</span>(path, <span class="hljs-string">&quot;/&quot;</span>);<br>       <span class="hljs-built_in">strcat</span>(path, (dir_e + dir_e_idx)-&gt;filename);<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    dir_e_idx++;<br> &#125;<br>      &#125;<br>      block_idx++;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">/* 把当前工作目录绝对路径写入buf, size是buf的大小. </span><br><span class="hljs-comment"> 当buf为NULL时,由操作系统分配存储工作路径的空间并返回地址</span><br><span class="hljs-comment"> 失败则返回NULL */</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">sys_getcwd</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">uint32_t</span> size)</span> &#123;<br>   <span class="hljs-comment">/* 确保buf不为空,若用户进程提供的buf为NULL,</span><br><span class="hljs-comment">   系统调用getcwd中要为用户进程通过malloc分配内存 */</span><br>   ASSERT(buf != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">void</span>* io_buf = sys_malloc(SECTOR_SIZE);<br>   <span class="hljs-keyword">if</span> (io_buf == <span class="hljs-literal">NULL</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>   &#125;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur_thread</span> =</span> running_thread();<br>   <span class="hljs-type">int32_t</span> parent_inode_nr = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">int32_t</span> child_inode_nr = cur_thread-&gt;cwd_inode_nr;<br>   ASSERT(child_inode_nr &gt;= <span class="hljs-number">0</span> &amp;&amp; child_inode_nr &lt; <span class="hljs-number">4096</span>);      <span class="hljs-comment">// 最大支持4096个inode</span><br>   <span class="hljs-comment">/* 若当前目录是根目录,直接返回&#x27;/&#x27; */</span><br>   <span class="hljs-keyword">if</span> (child_inode_nr == <span class="hljs-number">0</span>) &#123;<br>      buf[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;/&#x27;</span>;<br>      buf[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>      sys_free(io_buf);<br>      <span class="hljs-keyword">return</span> buf;<br>   &#125;<br><br>   <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, size);<br>   <span class="hljs-type">char</span> full_path_reverse[MAX_PATH_LEN] = &#123;<span class="hljs-number">0</span>&#125;;  <span class="hljs-comment">// 用来做全路径缓冲区</span><br><br>   <span class="hljs-comment">/* 从下往上逐层找父目录,直到找到根目录为止.</span><br><span class="hljs-comment">    * 当child_inode_nr为根目录的inode编号(0)时停止,</span><br><span class="hljs-comment">    * 即已经查看完根目录中的目录项 */</span><br>   <span class="hljs-keyword">while</span> ((child_inode_nr)) &#123;<br>      parent_inode_nr = get_parent_dir_inode_nr(child_inode_nr, io_buf);<br>      <span class="hljs-keyword">if</span> (get_child_dir_name(parent_inode_nr, child_inode_nr, full_path_reverse, io_buf) == <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">// 或未找到名字,失败退出</span><br> sys_free(io_buf);<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>      &#125;<br>      child_inode_nr = parent_inode_nr;<br>   &#125;<br>   ASSERT(<span class="hljs-built_in">strlen</span>(full_path_reverse) &lt;= size);<br><span class="hljs-comment">/* 至此full_path_reverse中的路径是反着的,</span><br><span class="hljs-comment"> * 即子目录在前(左),父目录在后(右) ,</span><br><span class="hljs-comment"> * 现将full_path_reverse中的路径反置 */</span><br>   <span class="hljs-type">char</span>* last_slash;<span class="hljs-comment">// 用于记录字符串中最后一个斜杠地址</span><br>   <span class="hljs-keyword">while</span> ((last_slash = <span class="hljs-built_in">strrchr</span>(full_path_reverse, <span class="hljs-string">&#x27;/&#x27;</span>))) &#123;<br>      <span class="hljs-type">uint16_t</span> len = <span class="hljs-built_in">strlen</span>(buf);<br>      <span class="hljs-built_in">strcpy</span>(buf + len, last_slash);<br>      <span class="hljs-comment">/* 在full_path_reverse中添加结束字符,做为下一次执行strcpy中last_slash的边界 */</span><br>      *last_slash = <span class="hljs-number">0</span>;<br>   &#125;<br>   sys_free(io_buf);<br>   <span class="hljs-keyword">return</span> buf;<br>&#125;<br><br><span class="hljs-comment">/* 更改当前工作目录为绝对路径path,成功则返回0,失败返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_chdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* path)</span> &#123;<br>   <span class="hljs-type">int32_t</span> ret = <span class="hljs-number">-1</span>;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">path_search_record</span> <span class="hljs-title">searched_record</span>;</span>  <br>   <span class="hljs-built_in">memset</span>(&amp;searched_record, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> path_search_record));<br>   <span class="hljs-type">int</span> inode_no = search_file(path, &amp;searched_record);<br>   <span class="hljs-keyword">if</span> (inode_no != <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-keyword">if</span> (searched_record.file_type == FT_DIRECTORY) &#123;<br> running_thread()-&gt;cwd_inode_nr = inode_no;<br> ret = <span class="hljs-number">0</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br> printk(<span class="hljs-string">&quot;sys_chdir: %s is regular file or other!\n&quot;</span>, path);<br>      &#125;<br>   &#125;<br>   dir_close(searched_record.parent_dir); <br>   <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="threadthreadh修改"><a class="markdownIt-Anchor" href="#threadthreadh修改"></a> thread/thread.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 进程或线程的pcb,程序控制块 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint32_t</span>* self_kstack; <span class="hljs-comment">// 各内核线程都用自己的内核栈</span><br>   <span class="hljs-type">pid_t</span> pid;<br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> <span class="hljs-title">status</span>;</span><br>   <span class="hljs-type">char</span> name[TASK_NAME_LEN];<br>   <span class="hljs-type">uint8_t</span> priority;<br>   <span class="hljs-type">uint8_t</span> ticks;   <span class="hljs-comment">// 每次在处理器上执行的时间嘀嗒数</span><br><span class="hljs-comment">/* 此任务自上cpu运行后至今占用了多少cpu嘀嗒数,</span><br><span class="hljs-comment"> * 也就是此任务执行了多久*/</span><br>   <span class="hljs-type">uint32_t</span> elapsed_ticks;<br><span class="hljs-comment">/* general_tag的作用是用于线程在一般的队列中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">general_tag</span>;</span>    <br><span class="hljs-comment">/* all_list_tag的作用是用于线程队列thread_all_list中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">all_list_tag</span>;</span><br>   <span class="hljs-type">uint32_t</span>* pgdir;              <span class="hljs-comment">// 进程自己页表的虚拟地址</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> <span class="hljs-title">userprog_vaddr</span>;</span>   <span class="hljs-comment">// 用户进程的虚拟地址 </span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block_desc</span> <span class="hljs-title">u_block_desc</span>[<span class="hljs-title">DESC_CNT</span>];</span>   <span class="hljs-comment">// 用户进程内存块描述符</span><br>   <span class="hljs-type">uint32_t</span> stack_magic; <span class="hljs-comment">// 用这串数字做栈的边界标记,用于检测栈的溢出</span><br>   <span class="hljs-type">int32_t</span> fd_table[MAX_FILES_OPEN_PER_PROC];<span class="hljs-comment">// 已打开文件数组</span><br>   <span class="hljs-type">uint32_t</span> cwd_inode_nr;<span class="hljs-comment">//进程所在工作目录inode的编号</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="threadthreadc修改"><a class="markdownIt-Anchor" href="#threadthreadc修改"></a> thread/thread.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 初始化线程基本信息 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, <span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio)</span> <br>&#123;<br><span class="hljs-built_in">memset</span>(pthread, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*pthread));<br>   pthread-&gt;pid = allocate_pid();<br>   <span class="hljs-built_in">strcpy</span>(pthread-&gt;name, name);<br><br><span class="hljs-keyword">if</span> (pthread == main_thread) <br>&#123;<br><span class="hljs-comment">/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */</span><br>pthread-&gt;status = TASK_RUNNING;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>pthread-&gt;status = TASK_READY;<br>&#125;<br><br><span class="hljs-comment">/* self_kstack是线程自己在内核态下使用的栈顶地址 */</span><br>pthread-&gt;self_kstack = (<span class="hljs-type">uint32_t</span>*)((<span class="hljs-type">uint32_t</span>)pthread + PG_SIZE);<br>pthread-&gt;priority = prio;<br>pthread-&gt;ticks = prio;<br>pthread-&gt;elapsed_ticks = <span class="hljs-number">0</span>;<br>pthread-&gt;pgdir = <span class="hljs-literal">NULL</span>;<br>pthread-&gt;cwd_inode_nr = <span class="hljs-number">0</span>; <span class="hljs-comment">//以根目录为默认的工作路径</span><br>pthread-&gt;stack_magic = <span class="hljs-number">0x19870916</span>;  <span class="hljs-comment">// 自定义的魔数</span><br><span class="hljs-comment">/* 标准输入输出先空出来 */</span><br>pthread-&gt;fd_table[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>pthread-&gt;fd_table[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>pthread-&gt;fd_table[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-comment">/* 其余的全置为-1 */</span><br><span class="hljs-type">uint8_t</span> fd_idx = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">while</span> (fd_idx &lt; MAX_FILES_OPEN_PER_PROC) &#123;<br>pthread-&gt;fd_table[fd_idx] = <span class="hljs-number">-1</span>;<br>fd_idx++;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-8"><a class="markdownIt-Anchor" href="#kernelmainc修改-8"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br><span class="hljs-type">char</span> cwd_buf[<span class="hljs-number">32</span>]= &#123;<span class="hljs-number">0</span>&#125;;<br>sys_getcwd(cwd_buf, <span class="hljs-number">32</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cwd:%s\n&quot;</span>, cwd_buf);<br>sys_chdir(<span class="hljs-string">&quot;/dir1/&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;change cwd now\n&quot;</span>);<br>sys_getcwd(cwd_buf, <span class="hljs-number">12</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cwd:%s\n&quot;</span>, cwd_buf);<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-8"><a class="markdownIt-Anchor" href="#运行结果-8"></a> 运行结果</h3><p><img src="/img/os/os14.13.png" alt="图为bochs运行界面" /></p><h2 id="获得文件属性"><a class="markdownIt-Anchor" href="#获得文件属性"></a> 获得文件属性</h2><h3 id="fsfsh新增-2"><a class="markdownIt-Anchor" href="#fsfsh新增-2"></a> fs/fs.h新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 文件属性结构体 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> &#123;</span><br>   <span class="hljs-type">uint32_t</span> st_ino; <span class="hljs-comment">// inode编号</span><br>   <span class="hljs-type">uint32_t</span> st_size; <span class="hljs-comment">// 尺寸</span><br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">file_types</span> <span class="hljs-title">st_filetype</span>;</span> <span class="hljs-comment">// 文件类型</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="fsfsc新增-9"><a class="markdownIt-Anchor" href="#fsfsc新增-9"></a> fs/fs.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 在buf中填充文件结构相关信息,成功时返回0,失败返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_stat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* path, <span class="hljs-keyword">struct</span> stat* buf)</span> &#123;<br>   <span class="hljs-comment">/* 若直接查看根目录&#x27;/&#x27; */</span><br>   <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(path, <span class="hljs-string">&quot;/&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(path, <span class="hljs-string">&quot;/.&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(path, <span class="hljs-string">&quot;/..&quot;</span>)) &#123;<br>      buf-&gt;st_filetype = FT_DIRECTORY;<br>      buf-&gt;st_ino = <span class="hljs-number">0</span>;<br>      buf-&gt;st_size = root_dir.inode-&gt;i_size;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br><br>   <span class="hljs-type">int32_t</span> ret = <span class="hljs-number">-1</span>;<span class="hljs-comment">// 默认返回值</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">path_search_record</span> <span class="hljs-title">searched_record</span>;</span><br>   <span class="hljs-built_in">memset</span>(&amp;searched_record, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> path_search_record));   <span class="hljs-comment">// 记得初始化或清0,否则栈中信息不知道是什么</span><br>   <span class="hljs-type">int</span> inode_no = search_file(path, &amp;searched_record);<br>   <span class="hljs-keyword">if</span> (inode_no != <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">obj_inode</span> =</span> inode_open(cur_part, inode_no);   <span class="hljs-comment">// 只为获得文件大小</span><br>      buf-&gt;st_size = obj_inode-&gt;i_size;<br>      inode_close(obj_inode);<br>      buf-&gt;st_filetype = searched_record.file_type;<br>      buf-&gt;st_ino = inode_no;<br>      ret = <span class="hljs-number">0</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      printk(<span class="hljs-string">&quot;sys_stat: %s not found\n&quot;</span>, path);<br>   &#125;<br>   dir_close(searched_record.parent_dir);<br>   <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-9"><a class="markdownIt-Anchor" href="#kernelmainc修改-9"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>init_all();<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">obj_stat</span>;</span><br>sys_stat(<span class="hljs-string">&quot;/&quot;</span>, &amp;obj_stat);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;/&#x27;s info\n  i_no:%d\n size:%d\n  filetype:%s\n&quot;</span>, \<br>obj_stat.st_ino, obj_stat.st_size, \<br>obj_stat.st_filetype == <span class="hljs-number">2</span> ? <span class="hljs-string">&quot;directory&quot;</span> : <span class="hljs-string">&quot;regular&quot;</span>);<br><br>sys_stat(<span class="hljs-string">&quot;/dir1&quot;</span>, &amp;obj_stat);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;//dir1&#x27;s info\n  i_no:%d\n size:%d\n  filetype:%s\n&quot;</span>, \<br>obj_stat.st_ino, obj_stat.st_size, \<br>obj_stat.st_filetype == <span class="hljs-number">2</span> ? <span class="hljs-string">&quot;directory&quot;</span> : <span class="hljs-string">&quot;regular&quot;</span>);<br><br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-9"><a class="markdownIt-Anchor" href="#运行结果-9"></a> 运行结果</h3><p><img src="/img/os/os14.14.png" alt="图为bochs运行界面" /></p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>这一章跟下来发现代码量和功能虽然较多，但是主要是一些细节的处理比较多，大体的思路是非常明确的。还差最后一章了，胜利就在眼前。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十四章 文件系统 最后的挑战(中)</title>
    <link href="/2022/08/08/os(14-2)/"/>
    <url>/2022/08/08/os(14-2)/</url>
    
    <content type="html"><![CDATA[<h1 id="第十四章-文件系统-最后的挑战中"><a class="markdownIt-Anchor" href="#第十四章-文件系统-最后的挑战中"></a> 第十四章 文件系统 最后的挑战(中)</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>没什么可说的了，现在只想快点结束os这一篇章。。</p><h2 id="文件的打开与关闭"><a class="markdownIt-Anchor" href="#文件的打开与关闭"></a> 文件的打开与关闭</h2><h3 id="fsfilec修改"><a class="markdownIt-Anchor" href="#fsfilec修改"></a> fs/file.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ide.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;inode.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dir.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;super_block.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;file.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">cur_part</span>;</span><span class="hljs-comment">//默认操作分区</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">partition_format</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part)</span> &#123;<br><span class="hljs-comment">/* 为方便实现,一个块大小是一扇区 */</span><br>   <span class="hljs-type">uint32_t</span> boot_sector_sects = <span class="hljs-number">1</span>;  <br>   <span class="hljs-type">uint32_t</span> super_block_sects = <span class="hljs-number">1</span>;<br>   <span class="hljs-type">uint32_t</span> inode_bitmap_sects = DIV_ROUND_UP(MAX_FILES_PER_PART, BITS_PER_SECTOR);   <span class="hljs-comment">// I结点位图占用的扇区数.最多支持4096个文件</span><br>   <span class="hljs-type">uint32_t</span> inode_table_sects = DIV_ROUND_UP(((<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> inode) * MAX_FILES_PER_PART)), SECTOR_SIZE);<br>   <span class="hljs-type">uint32_t</span> used_sects = boot_sector_sects + super_block_sects + inode_bitmap_sects + inode_table_sects;<br>   <span class="hljs-type">uint32_t</span> free_sects = part-&gt;sec_cnt - used_sects;  <br><br><span class="hljs-comment">/************** 简单处理块位图占据的扇区数 ***************/</span><br>   <span class="hljs-type">uint32_t</span> block_bitmap_sects;<br>   block_bitmap_sects = DIV_ROUND_UP(free_sects, BITS_PER_SECTOR);<br>   <span class="hljs-comment">/* block_bitmap_bit_len是位图中位的长度,也是可用块的数量 */</span><br>   <span class="hljs-type">uint32_t</span> block_bitmap_bit_len = free_sects - block_bitmap_sects; <br>   block_bitmap_sects = DIV_ROUND_UP(block_bitmap_bit_len, BITS_PER_SECTOR); <br><span class="hljs-comment">/*********************************************************/</span><br>   <br>   <span class="hljs-comment">/* 超级块初始化 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span> <span class="hljs-title">sb</span>;</span><br>   sb.magic = <span class="hljs-number">0x19590318</span>;<br>   sb.sec_cnt = part-&gt;sec_cnt;<br>   sb.inode_cnt = MAX_FILES_PER_PART;<br>   sb.part_lba_base = part-&gt;start_lba;<br><br>   sb.block_bitmap_lba = sb.part_lba_base + <span class="hljs-number">2</span>; <span class="hljs-comment">// 第0块是引导块,第1块是超级块</span><br>   sb.block_bitmap_sects = block_bitmap_sects;<br><br>   sb.inode_bitmap_lba = sb.block_bitmap_lba + sb.block_bitmap_sects;<br>   sb.inode_bitmap_sects = inode_bitmap_sects;<br><br>   sb.inode_table_lba = sb.inode_bitmap_lba + sb.inode_bitmap_sects;<br>   sb.inode_table_sects = inode_table_sects; <br><br>   sb.data_start_lba = sb.inode_table_lba + sb.inode_table_sects;<br>   sb.root_inode_no = <span class="hljs-number">0</span>;<br>   sb.dir_entry_size = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> dir_entry);<br><br>   printk(<span class="hljs-string">&quot;%s info:\n&quot;</span>, part-&gt;name);<br>   printk(<span class="hljs-string">&quot;   magic:0x%x\n   part_lba_base:0x%x\n   all_sectors:0x%x\n   inode_cnt:0x%x\n   block_bitmap_lba:0x%x\n   block_bitmap_sectors:0x%x\n   inode_bitmap_lba:0x%x\n   inode_bitmap_sectors:0x%x\n   inode_table_lba:0x%x\n   inode_table_sectors:0x%x\n   data_start_lba:0x%x\n&quot;</span>, sb.magic, sb.part_lba_base, sb.sec_cnt, sb.inode_cnt, sb.block_bitmap_lba, sb.block_bitmap_sects, sb.inode_bitmap_lba, sb.inode_bitmap_sects, sb.inode_table_lba, sb.inode_table_sects, sb.data_start_lba);<br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> part-&gt;my_disk;<br><span class="hljs-comment">/*******************************</span><br><span class="hljs-comment"> * 1 将超级块写入本分区的1扇区 *</span><br><span class="hljs-comment"> ******************************/</span><br>   ide_write(hd, part-&gt;start_lba + <span class="hljs-number">1</span>, &amp;sb, <span class="hljs-number">1</span>);<br>   printk(<span class="hljs-string">&quot;   super_block_lba:0x%x\n&quot;</span>, part-&gt;start_lba + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">/* 找出数据量最大的元信息,用其尺寸做存储缓冲区*/</span><br>   <span class="hljs-type">uint32_t</span> buf_size = (sb.block_bitmap_sects &gt;= sb.inode_bitmap_sects ? sb.block_bitmap_sects : sb.inode_bitmap_sects);<br>   buf_size = (buf_size &gt;= sb.inode_table_sects ? buf_size : sb.inode_table_sects) * SECTOR_SIZE;<br>   <span class="hljs-type">uint8_t</span>* buf = (<span class="hljs-type">uint8_t</span>*)sys_malloc(buf_size);<span class="hljs-comment">// 申请的内存由内存管理系统清0后返回</span><br>   <br><span class="hljs-comment">/**************************************</span><br><span class="hljs-comment"> * 2 将块位图初始化并写入sb.block_bitmap_lba *</span><br><span class="hljs-comment"> *************************************/</span><br>   <span class="hljs-comment">/* 初始化块位图block_bitmap */</span><br>   buf[<span class="hljs-number">0</span>] |= <span class="hljs-number">0x01</span>;       <span class="hljs-comment">// 第0个块预留给根目录,位图中先占位</span><br>   <span class="hljs-type">uint32_t</span> block_bitmap_last_byte = block_bitmap_bit_len / <span class="hljs-number">8</span>;<br>   <span class="hljs-type">uint8_t</span>  block_bitmap_last_bit  = block_bitmap_bit_len % <span class="hljs-number">8</span>;<br>   <span class="hljs-type">uint32_t</span> last_size = SECTOR_SIZE - (block_bitmap_last_byte % SECTOR_SIZE);     <span class="hljs-comment">// last_size是位图所在最后一个扇区中，不足一扇区的其余部分</span><br><br>   <span class="hljs-comment">/* 1 先将位图最后一字节到其所在的扇区的结束全置为1,即超出实际块数的部分直接置为已占用*/</span><br>   <span class="hljs-built_in">memset</span>(&amp;buf[block_bitmap_last_byte], <span class="hljs-number">0xff</span>, last_size);<br>   <br>   <span class="hljs-comment">/* 2 再将上一步中覆盖的最后一字节内的有效位重新置0 */</span><br>   <span class="hljs-type">uint8_t</span> bit_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (bit_idx &lt;= block_bitmap_last_bit) &#123;<br>      buf[block_bitmap_last_byte] &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; bit_idx++);<br>   &#125;<br>   ide_write(hd, sb.block_bitmap_lba, buf, sb.block_bitmap_sects);<br><br><span class="hljs-comment">/***************************************</span><br><span class="hljs-comment"> * 3 将inode位图初始化并写入sb.inode_bitmap_lba *</span><br><span class="hljs-comment"> ***************************************/</span><br>   <span class="hljs-comment">/* 先清空缓冲区*/</span><br>   <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, buf_size);<br>   buf[<span class="hljs-number">0</span>] |= <span class="hljs-number">0x1</span>;      <span class="hljs-comment">// 第0个inode分给了根目录</span><br>   <span class="hljs-comment">/* 由于inode_table中共4096个inode,位图inode_bitmap正好占用1扇区,</span><br><span class="hljs-comment">    * 即inode_bitmap_sects等于1, 所以位图中的位全都代表inode_table中的inode,</span><br><span class="hljs-comment">    * 无须再像block_bitmap那样单独处理最后一扇区的剩余部分,</span><br><span class="hljs-comment">    * inode_bitmap所在的扇区中没有多余的无效位 */</span><br>   ide_write(hd, sb.inode_bitmap_lba, buf, sb.inode_bitmap_sects);<br><br><span class="hljs-comment">/***************************************</span><br><span class="hljs-comment"> * 4 将inode数组初始化并写入sb.inode_table_lba *</span><br><span class="hljs-comment"> ***************************************/</span><br> <span class="hljs-comment">/* 准备写inode_table中的第0项,即根目录所在的inode */</span><br>   <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, buf_size);  <span class="hljs-comment">// 先清空缓冲区buf</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">i</span> =</span> (<span class="hljs-keyword">struct</span> inode*)buf; <br>   i-&gt;i_size = sb.dir_entry_size * <span class="hljs-number">2</span>; <span class="hljs-comment">// .和..</span><br>   i-&gt;i_no = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 根目录占inode数组中第0个inode</span><br>   i-&gt;i_sectors[<span class="hljs-number">0</span>] = sb.data_start_lba;     <span class="hljs-comment">// 由于上面的memset,i_sectors数组的其它元素都初始化为0 </span><br>   ide_write(hd, sb.inode_table_lba, buf, sb.inode_table_sects);<br>   <br><span class="hljs-comment">/***************************************</span><br><span class="hljs-comment"> * 5 将根目录初始化并写入sb.data_start_lba</span><br><span class="hljs-comment"> ***************************************/</span><br>   <span class="hljs-comment">/* 写入根目录的两个目录项.和.. */</span><br>   <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, buf_size);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">p_de</span> =</span> (<span class="hljs-keyword">struct</span> dir_entry*)buf;<br><br>   <span class="hljs-comment">/* 初始化当前目录&quot;.&quot; */</span><br>   <span class="hljs-built_in">memcpy</span>(p_de-&gt;filename, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-number">1</span>);<br>   p_de-&gt;i_no = <span class="hljs-number">0</span>;<br>   p_de-&gt;f_type = FT_DIRECTORY;<br>   p_de++;<br><br>   <span class="hljs-comment">/* 初始化当前目录父目录&quot;..&quot; */</span><br>   <span class="hljs-built_in">memcpy</span>(p_de-&gt;filename, <span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-number">2</span>);<br>   p_de-&gt;i_no = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 根目录的父目录依然是根目录自己</span><br>   p_de-&gt;f_type = FT_DIRECTORY;<br><br>   <span class="hljs-comment">/* sb.data_start_lba已经分配给了根目录,里面是根目录的目录项 */</span><br>   ide_write(hd, sb.data_start_lba, buf, <span class="hljs-number">1</span>);<br><br>   printk(<span class="hljs-string">&quot;   root_dir_lba:0x%x\n&quot;</span>, sb.data_start_lba);<br>   printk(<span class="hljs-string">&quot;%s format done\n&quot;</span>, part-&gt;name);<br>   sys_free(buf);<br>&#125;<br><br><span class="hljs-comment">//除了挂载 还需要在内存中把超级块指针 块位图 i结点位图 i结点指针给初始化赋值了 方便使用</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">mount_partition</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* pelem, <span class="hljs-type">int</span> arg)</span> &#123;<br>   <span class="hljs-type">char</span>* part_name = (<span class="hljs-type">char</span>*)arg;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">part</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> partition, part_tag, pelem);<br>   <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(part-&gt;name, part_name)) &#123;<br>      cur_part = part;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> cur_part-&gt;my_disk;<br><br>      <span class="hljs-comment">/* sb_buf用来存储从硬盘上读入的超级块 */</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span>* <span class="hljs-title">sb_buf</span> =</span> (<span class="hljs-keyword">struct</span> super_block*)sys_malloc(SECTOR_SIZE);<br><br>      <span class="hljs-comment">/* 在内存中创建分区cur_part的超级块 */</span><br>      cur_part-&gt;sb = (<span class="hljs-keyword">struct</span> super_block*)sys_malloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> super_block));<br>      <span class="hljs-keyword">if</span> (cur_part-&gt;sb == <span class="hljs-literal">NULL</span>) &#123;<br> PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-comment">/* 读入超级块 */</span><br>      <span class="hljs-built_in">memset</span>(sb_buf, <span class="hljs-number">0</span>, SECTOR_SIZE);<br>      ide_read(hd, cur_part-&gt;start_lba + <span class="hljs-number">1</span>, sb_buf, <span class="hljs-number">1</span>);   <br><br>      <span class="hljs-comment">/* 把sb_buf中超级块的信息复制到分区的超级块sb中。*/</span><br>      <span class="hljs-built_in">memcpy</span>(cur_part-&gt;sb, sb_buf, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> super_block)); <br><br>      <span class="hljs-comment">/**********     将硬盘上的块位图读入到内存    ****************/</span><br>      cur_part-&gt;block_bitmap.bits = (<span class="hljs-type">uint8_t</span>*)sys_malloc(sb_buf-&gt;block_bitmap_sects * SECTOR_SIZE);<br>      <span class="hljs-keyword">if</span> (cur_part-&gt;block_bitmap.bits == <span class="hljs-literal">NULL</span>) &#123;<br> PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>      &#125;<br>      cur_part-&gt;block_bitmap.btmp_bytes_len = sb_buf-&gt;block_bitmap_sects * SECTOR_SIZE;<br>      <span class="hljs-comment">/* 从硬盘上读入块位图到分区的block_bitmap.bits */</span><br>      ide_read(hd, sb_buf-&gt;block_bitmap_lba, cur_part-&gt;block_bitmap.bits, sb_buf-&gt;block_bitmap_sects);   <br>      <span class="hljs-comment">/*************************************************************/</span><br><br>      <span class="hljs-comment">/**********     将硬盘上的inode位图读入到内存    ************/</span><br>      cur_part-&gt;inode_bitmap.bits = (<span class="hljs-type">uint8_t</span>*)sys_malloc(sb_buf-&gt;inode_bitmap_sects * SECTOR_SIZE);<br>      <span class="hljs-keyword">if</span> (cur_part-&gt;inode_bitmap.bits == <span class="hljs-literal">NULL</span>) &#123;<br> PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>      &#125;<br>      cur_part-&gt;inode_bitmap.btmp_bytes_len = sb_buf-&gt;inode_bitmap_sects * SECTOR_SIZE;<br>      <span class="hljs-comment">/* 从硬盘上读入inode位图到分区的inode_bitmap.bits */</span><br>      ide_read(hd, sb_buf-&gt;inode_bitmap_lba, cur_part-&gt;inode_bitmap.bits, sb_buf-&gt;inode_bitmap_sects);   <br>      <span class="hljs-comment">/*************************************************************/</span><br><br>      list_init(&amp;cur_part-&gt;open_inodes);<br>      printk(<span class="hljs-string">&quot;mount %s done!\n&quot;</span>, part-&gt;name);<br><br>   <span class="hljs-comment">/* 此处返回true是为了迎合主调函数list_traversal的实现,与函数本身功能无关。</span><br><span class="hljs-comment">      只有返回true时list_traversal才会停止遍历,减少了后面元素无意义的遍历.*/</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;     <span class="hljs-comment">// 使list_traversal继续遍历</span><br>&#125;<br><br><span class="hljs-comment">//文件系统初始化 磁盘上搜索 如果没有则格式化分区 并创建文件系统</span><br><span class="hljs-comment">/* 在磁盘上搜索文件系统,若没有则格式化分区创建文件系统 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">filesys_init</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">uint8_t</span> channel_no = <span class="hljs-number">0</span>, dev_no, part_idx = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">/* sb_buf用来存储从硬盘上读入的超级块 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span>* <span class="hljs-title">sb_buf</span> =</span> (<span class="hljs-keyword">struct</span> super_block*)sys_malloc(SECTOR_SIZE);<br><br>   <span class="hljs-keyword">if</span> (sb_buf == <span class="hljs-literal">NULL</span>) &#123;<br>      PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>   &#125;<br>   printk(<span class="hljs-string">&quot;searching filesystem......\n&quot;</span>);<br>   <span class="hljs-keyword">while</span> (channel_no &lt; channel_cnt) &#123;<br>      dev_no = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span>(dev_no &lt; <span class="hljs-number">2</span>) &#123;<br> <span class="hljs-keyword">if</span> (dev_no == <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">// 跨过裸盘hd60M.img</span><br>    dev_no++;<br>    <span class="hljs-keyword">continue</span>;<br> &#125;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> &amp;channels[channel_no].devices[dev_no];<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">part</span> =</span> hd-&gt;prim_parts;<br> <span class="hljs-keyword">while</span>(part_idx &lt; <span class="hljs-number">12</span>) &#123;   <span class="hljs-comment">// 4个主分区+8个逻辑</span><br>    <span class="hljs-keyword">if</span> (part_idx == <span class="hljs-number">4</span>) &#123;  <span class="hljs-comment">// 开始处理逻辑分区</span><br>       part = hd-&gt;logic_parts;<br>    &#125;<br> <br> <span class="hljs-comment">/* channels数组是全局变量,默认值为0,disk属于其嵌套结构,</span><br><span class="hljs-comment">  * partition又为disk的嵌套结构,因此partition中的成员默认也为0.</span><br><span class="hljs-comment">  * 若partition未初始化,则partition中的成员仍为0. </span><br><span class="hljs-comment">  * 下面处理存在的分区. */</span><br>    <span class="hljs-keyword">if</span> (part-&gt;sec_cnt != <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 如果分区存在</span><br>       <span class="hljs-built_in">memset</span>(sb_buf, <span class="hljs-number">0</span>, SECTOR_SIZE);<br><br>       <span class="hljs-comment">/* 读出分区的超级块,根据魔数是否正确来判断是否存在文件系统 */</span><br>       ide_read(hd, part-&gt;start_lba + <span class="hljs-number">1</span>, sb_buf, <span class="hljs-number">1</span>);   <br><br>       <span class="hljs-comment">/* 只支持自己的文件系统.若磁盘上已经有文件系统就不再格式化了 */</span><br>       <span class="hljs-keyword">if</span> (sb_buf-&gt;magic == <span class="hljs-number">0x19590318</span>) &#123;<br>  printk(<span class="hljs-string">&quot;%s has filesystem\n&quot;</span>, part-&gt;name);<br>       &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 其它文件系统不支持,一律按无文件系统处理</span><br>  printk(<span class="hljs-string">&quot;formatting %s`s partition %s......\n&quot;</span>, hd-&gt;name, part-&gt;name);<br>  partition_format(part);<br>       &#125;<br>    &#125;<br>    part_idx++;<br>    part++;<span class="hljs-comment">// 下一分区</span><br> &#125;<br> dev_no++;<span class="hljs-comment">// 下一磁盘</span><br>      &#125;<br>      channel_no++;<span class="hljs-comment">// 下一通道</span><br>   &#125;<br>   sys_free(sb_buf);<br>   <span class="hljs-comment">/* 确定默认操作的分区 */</span><br>   <span class="hljs-type">char</span> default_part[<span class="hljs-number">8</span>] = <span class="hljs-string">&quot;sdb1&quot;</span>;<br>   <span class="hljs-comment">/* 挂载分区 */</span><br>   list_traversal(&amp;partition_list, mount_partition, (<span class="hljs-type">int</span>)default_part);<br>   <span class="hljs-comment">/* 将当前分区的根目录打开 */</span><br>   open_root_dir(cur_part);<br><br>   <span class="hljs-comment">/* 初始化文件表 */</span><br>   <span class="hljs-type">uint32_t</span> fd_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (fd_idx &lt; MAX_FILE_OPEN) &#123;<br>      file_table[fd_idx++].fd_inode = <span class="hljs-literal">NULL</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/* 将最上层路径名称解析出来 */</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">path_parse</span><span class="hljs-params">(<span class="hljs-type">char</span>* pathname, <span class="hljs-type">char</span>* name_store)</span> &#123;<br>   <span class="hljs-keyword">if</span> (pathname[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;   <span class="hljs-comment">// 根目录不需要单独解析</span><br>    <span class="hljs-comment">/* 路径中出现1个或多个连续的字符&#x27;/&#x27;,将这些&#x27;/&#x27;跳过,如&quot;///a/b&quot; */</span><br>       <span class="hljs-keyword">while</span>(*(++pathname) == <span class="hljs-string">&#x27;/&#x27;</span>);<br>   &#125;<br><br>   <span class="hljs-comment">/* 开始一般的路径解析 */</span><br>   <span class="hljs-keyword">while</span> (*pathname != <span class="hljs-string">&#x27;/&#x27;</span> &amp;&amp; *pathname != <span class="hljs-number">0</span>) &#123;<br>      *name_store++ = *pathname++;<br>   &#125;<br><br>   <span class="hljs-keyword">if</span> (pathname[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">// 若路径字符串为空则返回NULL</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> pathname; <br>&#125;<br><br><span class="hljs-comment">/* 返回路径深度,比如/a/b/c,深度为3 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">path_depth_cnt</span><span class="hljs-params">(<span class="hljs-type">char</span>* pathname)</span> &#123;<br>   ASSERT(pathname != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">char</span>* p = pathname;<br>   <span class="hljs-type">char</span> name[MAX_FILE_NAME_LEN];       <span class="hljs-comment">// 用于path_parse的参数做路径解析</span><br>   <span class="hljs-type">uint32_t</span> depth = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">/* 解析路径,从中拆分出各级名称 */</span> <br>   p = path_parse(p, name);<br>   <span class="hljs-keyword">while</span> (name[<span class="hljs-number">0</span>]) &#123;<br>      depth++;<br>      <span class="hljs-built_in">memset</span>(name, <span class="hljs-number">0</span>, MAX_FILE_NAME_LEN);<br>      <span class="hljs-keyword">if</span> (p) &#123;     <span class="hljs-comment">// 如果p不等于NULL,继续分析路径</span><br>p  = path_parse(p, name);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> depth;<br>&#125;<br><br><span class="hljs-comment">/* 搜索文件pathname,若找到则返回其inode号,否则返回-1 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search_file</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname, <span class="hljs-keyword">struct</span> path_search_record* searched_record)</span> &#123;<br>   <span class="hljs-comment">/* 如果待查找的是根目录,为避免下面无用的查找,直接返回已知根目录信息 */</span><br>   <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/.&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/..&quot;</span>)) &#123;<br>      searched_record-&gt;parent_dir = &amp;root_dir;<br>      searched_record-&gt;file_type = FT_DIRECTORY;<br>      searched_record-&gt;searched_path[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 搜索路径置空</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br><br>   <span class="hljs-type">uint32_t</span> path_len = <span class="hljs-built_in">strlen</span>(pathname);<br>   <span class="hljs-comment">/* 保证pathname至少是这样的路径/x且小于最大长度 */</span><br>   ASSERT(pathname[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span> &amp;&amp; path_len &gt; <span class="hljs-number">1</span> &amp;&amp; path_len &lt; MAX_PATH_LEN);<br>   <span class="hljs-type">char</span>* sub_path = (<span class="hljs-type">char</span>*)pathname;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span>* <span class="hljs-title">parent_dir</span> =</span> &amp;root_dir;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span> <span class="hljs-title">dir_e</span>;</span><br><br>   <span class="hljs-comment">/* 记录路径解析出来的各级名称,如路径&quot;/a/b/c&quot;,</span><br><span class="hljs-comment">    * 数组name每次的值分别是&quot;a&quot;,&quot;b&quot;,&quot;c&quot; */</span><br>   <span class="hljs-type">char</span> name[MAX_FILE_NAME_LEN] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>   searched_record-&gt;parent_dir = parent_dir;<br>   searched_record-&gt;file_type = FT_UNKNOWN;<br>   <span class="hljs-type">uint32_t</span> parent_inode_no = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 父目录的inode号</span><br>   <br>   sub_path = path_parse(sub_path, name);<br>   <span class="hljs-keyword">while</span> (name[<span class="hljs-number">0</span>]) &#123;   <span class="hljs-comment">// 若第一个字符就是结束符,结束循环</span><br>      <span class="hljs-comment">/* 记录查找过的路径,但不能超过searched_path的长度512字节 */</span><br>      ASSERT(<span class="hljs-built_in">strlen</span>(searched_record-&gt;searched_path) &lt; <span class="hljs-number">512</span>);<br><br>      <span class="hljs-comment">/* 记录已存在的父目录 */</span><br>      <span class="hljs-built_in">strcat</span>(searched_record-&gt;searched_path, <span class="hljs-string">&quot;/&quot;</span>);<br>      <span class="hljs-built_in">strcat</span>(searched_record-&gt;searched_path, name);<br><br>      <span class="hljs-comment">/* 在所给的目录中查找文件 */</span><br>      <span class="hljs-keyword">if</span> (search_dir_entry(cur_part, parent_dir, name, &amp;dir_e)) &#123;<br> <span class="hljs-built_in">memset</span>(name, <span class="hljs-number">0</span>, MAX_FILE_NAME_LEN);<br> <span class="hljs-comment">/* 若sub_path不等于NULL,也就是未结束时继续拆分路径 */</span><br> <span class="hljs-keyword">if</span> (sub_path) &#123;<br>    sub_path = path_parse(sub_path, name);<br> &#125;<br><br> <span class="hljs-keyword">if</span> (FT_DIRECTORY == dir_e.f_type) &#123;   <span class="hljs-comment">// 如果被打开的是目录</span><br>    parent_inode_no = parent_dir-&gt;inode-&gt;i_no;<br>    dir_close(parent_dir);<br>    parent_dir = dir_open(cur_part, dir_e.i_no); <span class="hljs-comment">// 更新父目录</span><br>    searched_record-&gt;parent_dir = parent_dir;<br>    <span class="hljs-keyword">continue</span>;<br> &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (FT_REGULAR == dir_e.f_type) &#123; <span class="hljs-comment">// 若是普通文件</span><br>    searched_record-&gt;file_type = FT_REGULAR;<br>    <span class="hljs-keyword">return</span> dir_e.i_no;<br> &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;   <span class="hljs-comment">//若找不到,则返回-1</span><br> <span class="hljs-comment">/* 找不到目录项时,要留着parent_dir不要关闭,</span><br><span class="hljs-comment">  * 若是创建新文件的话需要在parent_dir中创建 */</span><br> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-comment">/* 执行到此,必然是遍历了完整路径并且查找的文件或目录只有同名目录存在 */</span><br>   dir_close(searched_record-&gt;parent_dir);      <br><br>   <span class="hljs-comment">/* 保存被查找目录的直接父目录 */</span><br>   searched_record-&gt;parent_dir = dir_open(cur_part, parent_inode_no);   <br>   searched_record-&gt;file_type = FT_DIRECTORY;<br>   <span class="hljs-keyword">return</span> dir_e.i_no;<br>&#125;<br> <br><span class="hljs-comment">/* 打开或创建文件成功后,返回文件描述符,否则返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname, <span class="hljs-type">uint8_t</span> flags)</span> &#123;<br>  <span class="hljs-comment">/* 对目录要用dir_open,这里只有open文件 */</span><br>   <span class="hljs-keyword">if</span> (pathname[<span class="hljs-built_in">strlen</span>(pathname) - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>      printk(<span class="hljs-string">&quot;can`t open a directory %s\n&quot;</span>,pathname);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   ASSERT(flags &lt;= <span class="hljs-number">7</span>);<br>   <span class="hljs-type">int32_t</span> fd = <span class="hljs-number">-1</span>;   <span class="hljs-comment">// 默认为找不到</span><br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">path_search_record</span> <span class="hljs-title">searched_record</span>;</span><br>   <span class="hljs-built_in">memset</span>(&amp;searched_record, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> path_search_record));<br><br>   <span class="hljs-comment">/* 记录目录深度.帮助判断中间某个目录不存在的情况 */</span><br>   <span class="hljs-type">uint32_t</span> pathname_depth = path_depth_cnt((<span class="hljs-type">char</span>*)pathname);<br><br>   <span class="hljs-comment">/* 先检查文件是否存在 */</span><br>   <span class="hljs-type">int</span> inode_no = search_file(pathname, &amp;searched_record);<br>   <span class="hljs-type">bool</span> found = inode_no != <span class="hljs-number">-1</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>; <br><br>   <span class="hljs-keyword">if</span> (searched_record.file_type == FT_DIRECTORY) &#123;<br>      printk(<span class="hljs-string">&quot;can`t open a direcotry with open(), use opendir() to instead\n&quot;</span>);<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-type">uint32_t</span> path_searched_depth = path_depth_cnt(searched_record.searched_path);<br><br>   <span class="hljs-comment">/* 先判断是否把pathname的各层目录都访问到了,即是否在某个中间目录就失败了 */</span><br>   <span class="hljs-keyword">if</span> (pathname_depth != path_searched_depth) &#123;   <span class="hljs-comment">// 说明并没有访问到全部的路径,某个中间目录是不存在的</span><br>      printk(<span class="hljs-string">&quot;cannot access %s: Not a directory, subpath %s is`t exist\n&quot;</span>, \<br>    pathname, searched_record.searched_path);<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-comment">/* 若是在最后一个路径上没找到,并且并不是要创建文件,直接返回-1 */</span><br>   <span class="hljs-keyword">if</span> (!found &amp;&amp; !(flags &amp; O_CREAT)) &#123;<br>      printk(<span class="hljs-string">&quot;in path %s, file %s is`t exist\n&quot;</span>, \<br>    searched_record.searched_path, \<br>    (<span class="hljs-built_in">strrchr</span>(searched_record.searched_path, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>));<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (found &amp;&amp; flags &amp; O_CREAT) &#123;  <span class="hljs-comment">// 若要创建的文件已存在</span><br>      printk(<span class="hljs-string">&quot;%s has already exist!\n&quot;</span>, pathname);<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">switch</span> (flags &amp; O_CREAT) &#123;<br>      <span class="hljs-keyword">case</span> O_CREAT:<br>         printk(<span class="hljs-string">&quot;creating file\n&quot;</span>);<br>         fd = file_create(searched_record.parent_dir, (<span class="hljs-built_in">strrchr</span>(pathname, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>), flags);<br>         dir_close(searched_record.parent_dir);<br>         <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>         <span class="hljs-comment">/* 其余情况均为打开已存在文件:</span><br><span class="hljs-comment">         * O_RDONLY,O_WRONLY,O_RDWR */</span><br>         fd = file_open(inode_no, flags);<br>   &#125;<br><br>   <span class="hljs-comment">/* 此fd是指任务pcb-&gt;fd_table数组中的元素下标,</span><br><span class="hljs-comment">    * 并不是指全局file_table中的下标 */</span><br>   <span class="hljs-keyword">return</span> fd;<br>&#125;<br><br><span class="hljs-comment">/* 将文件描述符转化为文件表的下标 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">fd_local2global</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> local_fd)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();<br>   <span class="hljs-type">int32_t</span> global_fd = cur-&gt;fd_table[local_fd];  <br>   ASSERT(global_fd &gt;= <span class="hljs-number">0</span> &amp;&amp; global_fd &lt; MAX_FILE_OPEN);<br>   <span class="hljs-keyword">return</span> (<span class="hljs-type">uint32_t</span>)global_fd;<br>&#125; <br><br><span class="hljs-comment">/* 关闭文件描述符fd指向的文件,成功返回0,否则返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_close</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd)</span> &#123;<br>   <span class="hljs-type">int32_t</span> ret = <span class="hljs-number">-1</span>;   <span class="hljs-comment">// 返回值默认为-1,即失败</span><br>   <span class="hljs-keyword">if</span> (fd &gt; <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-type">uint32_t</span> global_fd = fd_local2global(fd);<br>       ret = file_close(&amp;file_table[global_fd]);<br>      running_thread()-&gt;fd_table[fd] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 使该文件描述符位可用</span><br>   &#125;<br>   <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fsfsc修改"><a class="markdownIt-Anchor" href="#fsfsc修改"></a> fs/fs.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ide.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;inode.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dir.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;super_block.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;file.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">cur_part</span>;</span><span class="hljs-comment">//默认操作分区</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">partition_format</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part)</span> &#123;<br><span class="hljs-comment">/* 为方便实现,一个块大小是一扇区 */</span><br>   <span class="hljs-type">uint32_t</span> boot_sector_sects = <span class="hljs-number">1</span>;  <br>   <span class="hljs-type">uint32_t</span> super_block_sects = <span class="hljs-number">1</span>;<br>   <span class="hljs-type">uint32_t</span> inode_bitmap_sects = DIV_ROUND_UP(MAX_FILES_PER_PART, BITS_PER_SECTOR);   <span class="hljs-comment">// I结点位图占用的扇区数.最多支持4096个文件</span><br>   <span class="hljs-type">uint32_t</span> inode_table_sects = DIV_ROUND_UP(((<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> inode) * MAX_FILES_PER_PART)), SECTOR_SIZE);<br>   <span class="hljs-type">uint32_t</span> used_sects = boot_sector_sects + super_block_sects + inode_bitmap_sects + inode_table_sects;<br>   <span class="hljs-type">uint32_t</span> free_sects = part-&gt;sec_cnt - used_sects;  <br><br><span class="hljs-comment">/************** 简单处理块位图占据的扇区数 ***************/</span><br>   <span class="hljs-type">uint32_t</span> block_bitmap_sects;<br>   block_bitmap_sects = DIV_ROUND_UP(free_sects, BITS_PER_SECTOR);<br>   <span class="hljs-comment">/* block_bitmap_bit_len是位图中位的长度,也是可用块的数量 */</span><br>   <span class="hljs-type">uint32_t</span> block_bitmap_bit_len = free_sects - block_bitmap_sects; <br>   block_bitmap_sects = DIV_ROUND_UP(block_bitmap_bit_len, BITS_PER_SECTOR); <br><span class="hljs-comment">/*********************************************************/</span><br>   <br>   <span class="hljs-comment">/* 超级块初始化 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span> <span class="hljs-title">sb</span>;</span><br>   sb.magic = <span class="hljs-number">0x19590318</span>;<br>   sb.sec_cnt = part-&gt;sec_cnt;<br>   sb.inode_cnt = MAX_FILES_PER_PART;<br>   sb.part_lba_base = part-&gt;start_lba;<br><br>   sb.block_bitmap_lba = sb.part_lba_base + <span class="hljs-number">2</span>; <span class="hljs-comment">// 第0块是引导块,第1块是超级块</span><br>   sb.block_bitmap_sects = block_bitmap_sects;<br><br>   sb.inode_bitmap_lba = sb.block_bitmap_lba + sb.block_bitmap_sects;<br>   sb.inode_bitmap_sects = inode_bitmap_sects;<br><br>   sb.inode_table_lba = sb.inode_bitmap_lba + sb.inode_bitmap_sects;<br>   sb.inode_table_sects = inode_table_sects; <br><br>   sb.data_start_lba = sb.inode_table_lba + sb.inode_table_sects;<br>   sb.root_inode_no = <span class="hljs-number">0</span>;<br>   sb.dir_entry_size = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> dir_entry);<br><br>   printk(<span class="hljs-string">&quot;%s info:\n&quot;</span>, part-&gt;name);<br>   printk(<span class="hljs-string">&quot;   magic:0x%x\n   part_lba_base:0x%x\n   all_sectors:0x%x\n   inode_cnt:0x%x\n   block_bitmap_lba:0x%x\n   block_bitmap_sectors:0x%x\n   inode_bitmap_lba:0x%x\n   inode_bitmap_sectors:0x%x\n   inode_table_lba:0x%x\n   inode_table_sectors:0x%x\n   data_start_lba:0x%x\n&quot;</span>, sb.magic, sb.part_lba_base, sb.sec_cnt, sb.inode_cnt, sb.block_bitmap_lba, sb.block_bitmap_sects, sb.inode_bitmap_lba, sb.inode_bitmap_sects, sb.inode_table_lba, sb.inode_table_sects, sb.data_start_lba);<br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> part-&gt;my_disk;<br><span class="hljs-comment">/*******************************</span><br><span class="hljs-comment"> * 1 将超级块写入本分区的1扇区 *</span><br><span class="hljs-comment"> ******************************/</span><br>   ide_write(hd, part-&gt;start_lba + <span class="hljs-number">1</span>, &amp;sb, <span class="hljs-number">1</span>);<br>   printk(<span class="hljs-string">&quot;   super_block_lba:0x%x\n&quot;</span>, part-&gt;start_lba + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">/* 找出数据量最大的元信息,用其尺寸做存储缓冲区*/</span><br>   <span class="hljs-type">uint32_t</span> buf_size = (sb.block_bitmap_sects &gt;= sb.inode_bitmap_sects ? sb.block_bitmap_sects : sb.inode_bitmap_sects);<br>   buf_size = (buf_size &gt;= sb.inode_table_sects ? buf_size : sb.inode_table_sects) * SECTOR_SIZE;<br>   <span class="hljs-type">uint8_t</span>* buf = (<span class="hljs-type">uint8_t</span>*)sys_malloc(buf_size);<span class="hljs-comment">// 申请的内存由内存管理系统清0后返回</span><br>   <br><span class="hljs-comment">/**************************************</span><br><span class="hljs-comment"> * 2 将块位图初始化并写入sb.block_bitmap_lba *</span><br><span class="hljs-comment"> *************************************/</span><br>   <span class="hljs-comment">/* 初始化块位图block_bitmap */</span><br>   buf[<span class="hljs-number">0</span>] |= <span class="hljs-number">0x01</span>;       <span class="hljs-comment">// 第0个块预留给根目录,位图中先占位</span><br>   <span class="hljs-type">uint32_t</span> block_bitmap_last_byte = block_bitmap_bit_len / <span class="hljs-number">8</span>;<br>   <span class="hljs-type">uint8_t</span>  block_bitmap_last_bit  = block_bitmap_bit_len % <span class="hljs-number">8</span>;<br>   <span class="hljs-type">uint32_t</span> last_size = SECTOR_SIZE - (block_bitmap_last_byte % SECTOR_SIZE);     <span class="hljs-comment">// last_size是位图所在最后一个扇区中，不足一扇区的其余部分</span><br><br>   <span class="hljs-comment">/* 1 先将位图最后一字节到其所在的扇区的结束全置为1,即超出实际块数的部分直接置为已占用*/</span><br>   <span class="hljs-built_in">memset</span>(&amp;buf[block_bitmap_last_byte], <span class="hljs-number">0xff</span>, last_size);<br>   <br>   <span class="hljs-comment">/* 2 再将上一步中覆盖的最后一字节内的有效位重新置0 */</span><br>   <span class="hljs-type">uint8_t</span> bit_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (bit_idx &lt;= block_bitmap_last_bit) &#123;<br>      buf[block_bitmap_last_byte] &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; bit_idx++);<br>   &#125;<br>   ide_write(hd, sb.block_bitmap_lba, buf, sb.block_bitmap_sects);<br><br><span class="hljs-comment">/***************************************</span><br><span class="hljs-comment"> * 3 将inode位图初始化并写入sb.inode_bitmap_lba *</span><br><span class="hljs-comment"> ***************************************/</span><br>   <span class="hljs-comment">/* 先清空缓冲区*/</span><br>   <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, buf_size);<br>   buf[<span class="hljs-number">0</span>] |= <span class="hljs-number">0x1</span>;      <span class="hljs-comment">// 第0个inode分给了根目录</span><br>   <span class="hljs-comment">/* 由于inode_table中共4096个inode,位图inode_bitmap正好占用1扇区,</span><br><span class="hljs-comment">    * 即inode_bitmap_sects等于1, 所以位图中的位全都代表inode_table中的inode,</span><br><span class="hljs-comment">    * 无须再像block_bitmap那样单独处理最后一扇区的剩余部分,</span><br><span class="hljs-comment">    * inode_bitmap所在的扇区中没有多余的无效位 */</span><br>   ide_write(hd, sb.inode_bitmap_lba, buf, sb.inode_bitmap_sects);<br><br><span class="hljs-comment">/***************************************</span><br><span class="hljs-comment"> * 4 将inode数组初始化并写入sb.inode_table_lba *</span><br><span class="hljs-comment"> ***************************************/</span><br> <span class="hljs-comment">/* 准备写inode_table中的第0项,即根目录所在的inode */</span><br>   <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, buf_size);  <span class="hljs-comment">// 先清空缓冲区buf</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">i</span> =</span> (<span class="hljs-keyword">struct</span> inode*)buf; <br>   i-&gt;i_size = sb.dir_entry_size * <span class="hljs-number">2</span>; <span class="hljs-comment">// .和..</span><br>   i-&gt;i_no = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 根目录占inode数组中第0个inode</span><br>   i-&gt;i_sectors[<span class="hljs-number">0</span>] = sb.data_start_lba;     <span class="hljs-comment">// 由于上面的memset,i_sectors数组的其它元素都初始化为0 </span><br>   ide_write(hd, sb.inode_table_lba, buf, sb.inode_table_sects);<br>   <br><span class="hljs-comment">/***************************************</span><br><span class="hljs-comment"> * 5 将根目录初始化并写入sb.data_start_lba</span><br><span class="hljs-comment"> ***************************************/</span><br>   <span class="hljs-comment">/* 写入根目录的两个目录项.和.. */</span><br>   <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, buf_size);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">p_de</span> =</span> (<span class="hljs-keyword">struct</span> dir_entry*)buf;<br><br>   <span class="hljs-comment">/* 初始化当前目录&quot;.&quot; */</span><br>   <span class="hljs-built_in">memcpy</span>(p_de-&gt;filename, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-number">1</span>);<br>   p_de-&gt;i_no = <span class="hljs-number">0</span>;<br>   p_de-&gt;f_type = FT_DIRECTORY;<br>   p_de++;<br><br>   <span class="hljs-comment">/* 初始化当前目录父目录&quot;..&quot; */</span><br>   <span class="hljs-built_in">memcpy</span>(p_de-&gt;filename, <span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-number">2</span>);<br>   p_de-&gt;i_no = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 根目录的父目录依然是根目录自己</span><br>   p_de-&gt;f_type = FT_DIRECTORY;<br><br>   <span class="hljs-comment">/* sb.data_start_lba已经分配给了根目录,里面是根目录的目录项 */</span><br>   ide_write(hd, sb.data_start_lba, buf, <span class="hljs-number">1</span>);<br><br>   printk(<span class="hljs-string">&quot;   root_dir_lba:0x%x\n&quot;</span>, sb.data_start_lba);<br>   printk(<span class="hljs-string">&quot;%s format done\n&quot;</span>, part-&gt;name);<br>   sys_free(buf);<br>&#125;<br><br><span class="hljs-comment">//除了挂载 还需要在内存中把超级块指针 块位图 i结点位图 i结点指针给初始化赋值了 方便使用</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">mount_partition</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* pelem, <span class="hljs-type">int</span> arg)</span> &#123;<br>   <span class="hljs-type">char</span>* part_name = (<span class="hljs-type">char</span>*)arg;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">part</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> partition, part_tag, pelem);<br>   <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(part-&gt;name, part_name)) &#123;<br>      cur_part = part;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> cur_part-&gt;my_disk;<br><br>      <span class="hljs-comment">/* sb_buf用来存储从硬盘上读入的超级块 */</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span>* <span class="hljs-title">sb_buf</span> =</span> (<span class="hljs-keyword">struct</span> super_block*)sys_malloc(SECTOR_SIZE);<br><br>      <span class="hljs-comment">/* 在内存中创建分区cur_part的超级块 */</span><br>      cur_part-&gt;sb = (<span class="hljs-keyword">struct</span> super_block*)sys_malloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> super_block));<br>      <span class="hljs-keyword">if</span> (cur_part-&gt;sb == <span class="hljs-literal">NULL</span>) &#123;<br> PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-comment">/* 读入超级块 */</span><br>      <span class="hljs-built_in">memset</span>(sb_buf, <span class="hljs-number">0</span>, SECTOR_SIZE);<br>      ide_read(hd, cur_part-&gt;start_lba + <span class="hljs-number">1</span>, sb_buf, <span class="hljs-number">1</span>);   <br><br>      <span class="hljs-comment">/* 把sb_buf中超级块的信息复制到分区的超级块sb中。*/</span><br>      <span class="hljs-built_in">memcpy</span>(cur_part-&gt;sb, sb_buf, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> super_block)); <br><br>      <span class="hljs-comment">/**********     将硬盘上的块位图读入到内存    ****************/</span><br>      cur_part-&gt;block_bitmap.bits = (<span class="hljs-type">uint8_t</span>*)sys_malloc(sb_buf-&gt;block_bitmap_sects * SECTOR_SIZE);<br>      <span class="hljs-keyword">if</span> (cur_part-&gt;block_bitmap.bits == <span class="hljs-literal">NULL</span>) &#123;<br> PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>      &#125;<br>      cur_part-&gt;block_bitmap.btmp_bytes_len = sb_buf-&gt;block_bitmap_sects * SECTOR_SIZE;<br>      <span class="hljs-comment">/* 从硬盘上读入块位图到分区的block_bitmap.bits */</span><br>      ide_read(hd, sb_buf-&gt;block_bitmap_lba, cur_part-&gt;block_bitmap.bits, sb_buf-&gt;block_bitmap_sects);   <br>      <span class="hljs-comment">/*************************************************************/</span><br><br>      <span class="hljs-comment">/**********     将硬盘上的inode位图读入到内存    ************/</span><br>      cur_part-&gt;inode_bitmap.bits = (<span class="hljs-type">uint8_t</span>*)sys_malloc(sb_buf-&gt;inode_bitmap_sects * SECTOR_SIZE);<br>      <span class="hljs-keyword">if</span> (cur_part-&gt;inode_bitmap.bits == <span class="hljs-literal">NULL</span>) &#123;<br> PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>      &#125;<br>      cur_part-&gt;inode_bitmap.btmp_bytes_len = sb_buf-&gt;inode_bitmap_sects * SECTOR_SIZE;<br>      <span class="hljs-comment">/* 从硬盘上读入inode位图到分区的inode_bitmap.bits */</span><br>      ide_read(hd, sb_buf-&gt;inode_bitmap_lba, cur_part-&gt;inode_bitmap.bits, sb_buf-&gt;inode_bitmap_sects);   <br>      <span class="hljs-comment">/*************************************************************/</span><br><br>      list_init(&amp;cur_part-&gt;open_inodes);<br>      printk(<span class="hljs-string">&quot;mount %s done!\n&quot;</span>, part-&gt;name);<br><br>   <span class="hljs-comment">/* 此处返回true是为了迎合主调函数list_traversal的实现,与函数本身功能无关。</span><br><span class="hljs-comment">      只有返回true时list_traversal才会停止遍历,减少了后面元素无意义的遍历.*/</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;     <span class="hljs-comment">// 使list_traversal继续遍历</span><br>&#125;<br><br><span class="hljs-comment">//文件系统初始化 磁盘上搜索 如果没有则格式化分区 并创建文件系统</span><br><span class="hljs-comment">/* 在磁盘上搜索文件系统,若没有则格式化分区创建文件系统 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">filesys_init</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">uint8_t</span> channel_no = <span class="hljs-number">0</span>, dev_no, part_idx = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">/* sb_buf用来存储从硬盘上读入的超级块 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span>* <span class="hljs-title">sb_buf</span> =</span> (<span class="hljs-keyword">struct</span> super_block*)sys_malloc(SECTOR_SIZE);<br><br>   <span class="hljs-keyword">if</span> (sb_buf == <span class="hljs-literal">NULL</span>) &#123;<br>      PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>   &#125;<br>   printk(<span class="hljs-string">&quot;searching filesystem......\n&quot;</span>);<br>   <span class="hljs-keyword">while</span> (channel_no &lt; channel_cnt) &#123;<br>      dev_no = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span>(dev_no &lt; <span class="hljs-number">2</span>) &#123;<br> <span class="hljs-keyword">if</span> (dev_no == <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">// 跨过裸盘hd60M.img</span><br>    dev_no++;<br>    <span class="hljs-keyword">continue</span>;<br> &#125;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> &amp;channels[channel_no].devices[dev_no];<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">part</span> =</span> hd-&gt;prim_parts;<br> <span class="hljs-keyword">while</span>(part_idx &lt; <span class="hljs-number">12</span>) &#123;   <span class="hljs-comment">// 4个主分区+8个逻辑</span><br>    <span class="hljs-keyword">if</span> (part_idx == <span class="hljs-number">4</span>) &#123;  <span class="hljs-comment">// 开始处理逻辑分区</span><br>       part = hd-&gt;logic_parts;<br>    &#125;<br> <br> <span class="hljs-comment">/* channels数组是全局变量,默认值为0,disk属于其嵌套结构,</span><br><span class="hljs-comment">  * partition又为disk的嵌套结构,因此partition中的成员默认也为0.</span><br><span class="hljs-comment">  * 若partition未初始化,则partition中的成员仍为0. </span><br><span class="hljs-comment">  * 下面处理存在的分区. */</span><br>    <span class="hljs-keyword">if</span> (part-&gt;sec_cnt != <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 如果分区存在</span><br>       <span class="hljs-built_in">memset</span>(sb_buf, <span class="hljs-number">0</span>, SECTOR_SIZE);<br><br>       <span class="hljs-comment">/* 读出分区的超级块,根据魔数是否正确来判断是否存在文件系统 */</span><br>       ide_read(hd, part-&gt;start_lba + <span class="hljs-number">1</span>, sb_buf, <span class="hljs-number">1</span>);   <br><br>       <span class="hljs-comment">/* 只支持自己的文件系统.若磁盘上已经有文件系统就不再格式化了 */</span><br>       <span class="hljs-keyword">if</span> (sb_buf-&gt;magic == <span class="hljs-number">0x19590318</span>) &#123;<br>  printk(<span class="hljs-string">&quot;%s has filesystem\n&quot;</span>, part-&gt;name);<br>       &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 其它文件系统不支持,一律按无文件系统处理</span><br>  printk(<span class="hljs-string">&quot;formatting %s`s partition %s......\n&quot;</span>, hd-&gt;name, part-&gt;name);<br>  partition_format(part);<br>       &#125;<br>    &#125;<br>    part_idx++;<br>    part++;<span class="hljs-comment">// 下一分区</span><br> &#125;<br> dev_no++;<span class="hljs-comment">// 下一磁盘</span><br>      &#125;<br>      channel_no++;<span class="hljs-comment">// 下一通道</span><br>   &#125;<br>   sys_free(sb_buf);<br>   <span class="hljs-comment">/* 确定默认操作的分区 */</span><br>   <span class="hljs-type">char</span> default_part[<span class="hljs-number">8</span>] = <span class="hljs-string">&quot;sdb1&quot;</span>;<br>   <span class="hljs-comment">/* 挂载分区 */</span><br>   list_traversal(&amp;partition_list, mount_partition, (<span class="hljs-type">int</span>)default_part);<br>   <span class="hljs-comment">/* 将当前分区的根目录打开 */</span><br>   open_root_dir(cur_part);<br><br>   <span class="hljs-comment">/* 初始化文件表 */</span><br>   <span class="hljs-type">uint32_t</span> fd_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (fd_idx &lt; MAX_FILE_OPEN) &#123;<br>      file_table[fd_idx++].fd_inode = <span class="hljs-literal">NULL</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/* 将最上层路径名称解析出来 */</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">path_parse</span><span class="hljs-params">(<span class="hljs-type">char</span>* pathname, <span class="hljs-type">char</span>* name_store)</span> &#123;<br>   <span class="hljs-keyword">if</span> (pathname[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;   <span class="hljs-comment">// 根目录不需要单独解析</span><br>    <span class="hljs-comment">/* 路径中出现1个或多个连续的字符&#x27;/&#x27;,将这些&#x27;/&#x27;跳过,如&quot;///a/b&quot; */</span><br>       <span class="hljs-keyword">while</span>(*(++pathname) == <span class="hljs-string">&#x27;/&#x27;</span>);<br>   &#125;<br><br>   <span class="hljs-comment">/* 开始一般的路径解析 */</span><br>   <span class="hljs-keyword">while</span> (*pathname != <span class="hljs-string">&#x27;/&#x27;</span> &amp;&amp; *pathname != <span class="hljs-number">0</span>) &#123;<br>      *name_store++ = *pathname++;<br>   &#125;<br><br>   <span class="hljs-keyword">if</span> (pathname[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">// 若路径字符串为空则返回NULL</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> pathname; <br>&#125;<br><br><span class="hljs-comment">/* 返回路径深度,比如/a/b/c,深度为3 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">path_depth_cnt</span><span class="hljs-params">(<span class="hljs-type">char</span>* pathname)</span> &#123;<br>   ASSERT(pathname != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">char</span>* p = pathname;<br>   <span class="hljs-type">char</span> name[MAX_FILE_NAME_LEN];       <span class="hljs-comment">// 用于path_parse的参数做路径解析</span><br>   <span class="hljs-type">uint32_t</span> depth = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">/* 解析路径,从中拆分出各级名称 */</span> <br>   p = path_parse(p, name);<br>   <span class="hljs-keyword">while</span> (name[<span class="hljs-number">0</span>]) &#123;<br>      depth++;<br>      <span class="hljs-built_in">memset</span>(name, <span class="hljs-number">0</span>, MAX_FILE_NAME_LEN);<br>      <span class="hljs-keyword">if</span> (p) &#123;     <span class="hljs-comment">// 如果p不等于NULL,继续分析路径</span><br>p  = path_parse(p, name);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> depth;<br>&#125;<br><br><span class="hljs-comment">/* 搜索文件pathname,若找到则返回其inode号,否则返回-1 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search_file</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname, <span class="hljs-keyword">struct</span> path_search_record* searched_record)</span> &#123;<br>   <span class="hljs-comment">/* 如果待查找的是根目录,为避免下面无用的查找,直接返回已知根目录信息 */</span><br>   <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/.&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/..&quot;</span>)) &#123;<br>      searched_record-&gt;parent_dir = &amp;root_dir;<br>      searched_record-&gt;file_type = FT_DIRECTORY;<br>      searched_record-&gt;searched_path[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 搜索路径置空</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br><br>   <span class="hljs-type">uint32_t</span> path_len = <span class="hljs-built_in">strlen</span>(pathname);<br>   <span class="hljs-comment">/* 保证pathname至少是这样的路径/x且小于最大长度 */</span><br>   ASSERT(pathname[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span> &amp;&amp; path_len &gt; <span class="hljs-number">1</span> &amp;&amp; path_len &lt; MAX_PATH_LEN);<br>   <span class="hljs-type">char</span>* sub_path = (<span class="hljs-type">char</span>*)pathname;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span>* <span class="hljs-title">parent_dir</span> =</span> &amp;root_dir;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span> <span class="hljs-title">dir_e</span>;</span><br><br>   <span class="hljs-comment">/* 记录路径解析出来的各级名称,如路径&quot;/a/b/c&quot;,</span><br><span class="hljs-comment">    * 数组name每次的值分别是&quot;a&quot;,&quot;b&quot;,&quot;c&quot; */</span><br>   <span class="hljs-type">char</span> name[MAX_FILE_NAME_LEN] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>   searched_record-&gt;parent_dir = parent_dir;<br>   searched_record-&gt;file_type = FT_UNKNOWN;<br>   <span class="hljs-type">uint32_t</span> parent_inode_no = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 父目录的inode号</span><br>   <br>   sub_path = path_parse(sub_path, name);<br>   <span class="hljs-keyword">while</span> (name[<span class="hljs-number">0</span>]) &#123;   <span class="hljs-comment">// 若第一个字符就是结束符,结束循环</span><br>      <span class="hljs-comment">/* 记录查找过的路径,但不能超过searched_path的长度512字节 */</span><br>      ASSERT(<span class="hljs-built_in">strlen</span>(searched_record-&gt;searched_path) &lt; <span class="hljs-number">512</span>);<br><br>      <span class="hljs-comment">/* 记录已存在的父目录 */</span><br>      <span class="hljs-built_in">strcat</span>(searched_record-&gt;searched_path, <span class="hljs-string">&quot;/&quot;</span>);<br>      <span class="hljs-built_in">strcat</span>(searched_record-&gt;searched_path, name);<br><br>      <span class="hljs-comment">/* 在所给的目录中查找文件 */</span><br>      <span class="hljs-keyword">if</span> (search_dir_entry(cur_part, parent_dir, name, &amp;dir_e)) &#123;<br> <span class="hljs-built_in">memset</span>(name, <span class="hljs-number">0</span>, MAX_FILE_NAME_LEN);<br> <span class="hljs-comment">/* 若sub_path不等于NULL,也就是未结束时继续拆分路径 */</span><br> <span class="hljs-keyword">if</span> (sub_path) &#123;<br>    sub_path = path_parse(sub_path, name);<br> &#125;<br><br> <span class="hljs-keyword">if</span> (FT_DIRECTORY == dir_e.f_type) &#123;   <span class="hljs-comment">// 如果被打开的是目录</span><br>    parent_inode_no = parent_dir-&gt;inode-&gt;i_no;<br>    dir_close(parent_dir);<br>    parent_dir = dir_open(cur_part, dir_e.i_no); <span class="hljs-comment">// 更新父目录</span><br>    searched_record-&gt;parent_dir = parent_dir;<br>    <span class="hljs-keyword">continue</span>;<br> &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (FT_REGULAR == dir_e.f_type) &#123; <span class="hljs-comment">// 若是普通文件</span><br>    searched_record-&gt;file_type = FT_REGULAR;<br>    <span class="hljs-keyword">return</span> dir_e.i_no;<br> &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;   <span class="hljs-comment">//若找不到,则返回-1</span><br> <span class="hljs-comment">/* 找不到目录项时,要留着parent_dir不要关闭,</span><br><span class="hljs-comment">  * 若是创建新文件的话需要在parent_dir中创建 */</span><br> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-comment">/* 执行到此,必然是遍历了完整路径并且查找的文件或目录只有同名目录存在 */</span><br>   dir_close(searched_record-&gt;parent_dir);      <br><br>   <span class="hljs-comment">/* 保存被查找目录的直接父目录 */</span><br>   searched_record-&gt;parent_dir = dir_open(cur_part, parent_inode_no);   <br>   searched_record-&gt;file_type = FT_DIRECTORY;<br>   <span class="hljs-keyword">return</span> dir_e.i_no;<br>&#125;<br> <br><span class="hljs-comment">/* 打开或创建文件成功后,返回文件描述符,否则返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname, <span class="hljs-type">uint8_t</span> flags)</span> &#123;<br>  <span class="hljs-comment">/* 对目录要用dir_open,这里只有open文件 */</span><br>   <span class="hljs-keyword">if</span> (pathname[<span class="hljs-built_in">strlen</span>(pathname) - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>      printk(<span class="hljs-string">&quot;can`t open a directory %s\n&quot;</span>,pathname);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   ASSERT(flags &lt;= <span class="hljs-number">7</span>);<br>   <span class="hljs-type">int32_t</span> fd = <span class="hljs-number">-1</span>;   <span class="hljs-comment">// 默认为找不到</span><br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">path_search_record</span> <span class="hljs-title">searched_record</span>;</span><br>   <span class="hljs-built_in">memset</span>(&amp;searched_record, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> path_search_record));<br><br>   <span class="hljs-comment">/* 记录目录深度.帮助判断中间某个目录不存在的情况 */</span><br>   <span class="hljs-type">uint32_t</span> pathname_depth = path_depth_cnt((<span class="hljs-type">char</span>*)pathname);<br><br>   <span class="hljs-comment">/* 先检查文件是否存在 */</span><br>   <span class="hljs-type">int</span> inode_no = search_file(pathname, &amp;searched_record);<br>   <span class="hljs-type">bool</span> found = inode_no != <span class="hljs-number">-1</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>; <br><br>   <span class="hljs-keyword">if</span> (searched_record.file_type == FT_DIRECTORY) &#123;<br>      printk(<span class="hljs-string">&quot;can`t open a direcotry with open(), use opendir() to instead\n&quot;</span>);<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-type">uint32_t</span> path_searched_depth = path_depth_cnt(searched_record.searched_path);<br><br>   <span class="hljs-comment">/* 先判断是否把pathname的各层目录都访问到了,即是否在某个中间目录就失败了 */</span><br>   <span class="hljs-keyword">if</span> (pathname_depth != path_searched_depth) &#123;   <span class="hljs-comment">// 说明并没有访问到全部的路径,某个中间目录是不存在的</span><br>      printk(<span class="hljs-string">&quot;cannot access %s: Not a directory, subpath %s is`t exist\n&quot;</span>, \<br>    pathname, searched_record.searched_path);<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-comment">/* 若是在最后一个路径上没找到,并且并不是要创建文件,直接返回-1 */</span><br>   <span class="hljs-keyword">if</span> (!found &amp;&amp; !(flags &amp; O_CREAT)) &#123;<br>      printk(<span class="hljs-string">&quot;in path %s, file %s is`t exist\n&quot;</span>, \<br>    searched_record.searched_path, \<br>    (<span class="hljs-built_in">strrchr</span>(searched_record.searched_path, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>));<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (found &amp;&amp; flags &amp; O_CREAT) &#123;  <span class="hljs-comment">// 若要创建的文件已存在</span><br>      printk(<span class="hljs-string">&quot;%s has already exist!\n&quot;</span>, pathname);<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">switch</span> (flags &amp; O_CREAT) &#123;<br>      <span class="hljs-keyword">case</span> O_CREAT:<br>         printk(<span class="hljs-string">&quot;creating file\n&quot;</span>);<br>         fd = file_create(searched_record.parent_dir, (<span class="hljs-built_in">strrchr</span>(pathname, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>), flags);<br>         dir_close(searched_record.parent_dir);<br>         <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>         <span class="hljs-comment">/* 其余情况均为打开已存在文件:</span><br><span class="hljs-comment">         * O_RDONLY,O_WRONLY,O_RDWR */</span><br>         fd = file_open(inode_no, flags);<br>   &#125;<br><br>   <span class="hljs-comment">/* 此fd是指任务pcb-&gt;fd_table数组中的元素下标,</span><br><span class="hljs-comment">    * 并不是指全局file_table中的下标 */</span><br>   <span class="hljs-keyword">return</span> fd;<br>&#125;<br><br><span class="hljs-comment">/* 将文件描述符转化为文件表的下标 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">fd_local2global</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> local_fd)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();<br>   <span class="hljs-type">int32_t</span> global_fd = cur-&gt;fd_table[local_fd];  <br>   ASSERT(global_fd &gt;= <span class="hljs-number">0</span> &amp;&amp; global_fd &lt; MAX_FILE_OPEN);<br>   <span class="hljs-keyword">return</span> (<span class="hljs-type">uint32_t</span>)global_fd;<br>&#125; <br><br><span class="hljs-comment">/* 关闭文件描述符fd指向的文件,成功返回0,否则返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_close</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd)</span> &#123;<br>   <span class="hljs-type">int32_t</span> ret = <span class="hljs-number">-1</span>;   <span class="hljs-comment">// 返回值默认为-1,即失败</span><br>   <span class="hljs-keyword">if</span> (fd &gt; <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-type">uint32_t</span> global_fd = fd_local2global(fd);<br>       ret = file_close(&amp;file_table[global_fd]);<br>      running_thread()-&gt;fd_table[fd] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 使该文件描述符位可用</span><br>   &#125;<br>   <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改"><a class="markdownIt-Anchor" href="#kernelmainc修改"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br><br>   intr_enable();<br><br><span class="hljs-type">uint32_t</span> fd = sys_open(<span class="hljs-string">&quot;/file1&quot;</span>,O_RDONLY);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd:%d\n&quot;</span>, fd);<br>sys_close(fd);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d closed now\n&quot;</span>, fd);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h3><p><img src="/img/os/os14.4.png" alt="图为bochs运行界面" /></p><h2 id="文件的写入"><a class="markdownIt-Anchor" href="#文件的写入"></a> 文件的写入</h2><p>别忘了把文件对应的头文件里的函数定义也修改了噢。</p><h3 id="fsfsc修改-2"><a class="markdownIt-Anchor" href="#fsfsc修改-2"></a> fs/fs.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ide.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;inode.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dir.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;super_block.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;file.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">cur_part</span>;</span><span class="hljs-comment">//默认操作分区</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">partition_format</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part)</span> &#123;<br><span class="hljs-comment">/* 为方便实现,一个块大小是一扇区 */</span><br>   <span class="hljs-type">uint32_t</span> boot_sector_sects = <span class="hljs-number">1</span>;  <br>   <span class="hljs-type">uint32_t</span> super_block_sects = <span class="hljs-number">1</span>;<br>   <span class="hljs-type">uint32_t</span> inode_bitmap_sects = DIV_ROUND_UP(MAX_FILES_PER_PART, BITS_PER_SECTOR);   <span class="hljs-comment">// I结点位图占用的扇区数.最多支持4096个文件</span><br>   <span class="hljs-type">uint32_t</span> inode_table_sects = DIV_ROUND_UP(((<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> inode) * MAX_FILES_PER_PART)), SECTOR_SIZE);<br>   <span class="hljs-type">uint32_t</span> used_sects = boot_sector_sects + super_block_sects + inode_bitmap_sects + inode_table_sects;<br>   <span class="hljs-type">uint32_t</span> free_sects = part-&gt;sec_cnt - used_sects;  <br><br><span class="hljs-comment">/************** 简单处理块位图占据的扇区数 ***************/</span><br>   <span class="hljs-type">uint32_t</span> block_bitmap_sects;<br>   block_bitmap_sects = DIV_ROUND_UP(free_sects, BITS_PER_SECTOR);<br>   <span class="hljs-comment">/* block_bitmap_bit_len是位图中位的长度,也是可用块的数量 */</span><br>   <span class="hljs-type">uint32_t</span> block_bitmap_bit_len = free_sects - block_bitmap_sects; <br>   block_bitmap_sects = DIV_ROUND_UP(block_bitmap_bit_len, BITS_PER_SECTOR); <br><span class="hljs-comment">/*********************************************************/</span><br>   <br>   <span class="hljs-comment">/* 超级块初始化 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span> <span class="hljs-title">sb</span>;</span><br>   sb.magic = <span class="hljs-number">0x19590318</span>;<br>   sb.sec_cnt = part-&gt;sec_cnt;<br>   sb.inode_cnt = MAX_FILES_PER_PART;<br>   sb.part_lba_base = part-&gt;start_lba;<br><br>   sb.block_bitmap_lba = sb.part_lba_base + <span class="hljs-number">2</span>; <span class="hljs-comment">// 第0块是引导块,第1块是超级块</span><br>   sb.block_bitmap_sects = block_bitmap_sects;<br><br>   sb.inode_bitmap_lba = sb.block_bitmap_lba + sb.block_bitmap_sects;<br>   sb.inode_bitmap_sects = inode_bitmap_sects;<br><br>   sb.inode_table_lba = sb.inode_bitmap_lba + sb.inode_bitmap_sects;<br>   sb.inode_table_sects = inode_table_sects; <br><br>   sb.data_start_lba = sb.inode_table_lba + sb.inode_table_sects;<br>   sb.root_inode_no = <span class="hljs-number">0</span>;<br>   sb.dir_entry_size = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> dir_entry);<br><br>   printk(<span class="hljs-string">&quot;%s info:\n&quot;</span>, part-&gt;name);<br>   printk(<span class="hljs-string">&quot;   magic:0x%x\n   part_lba_base:0x%x\n   all_sectors:0x%x\n   inode_cnt:0x%x\n   block_bitmap_lba:0x%x\n   block_bitmap_sectors:0x%x\n   inode_bitmap_lba:0x%x\n   inode_bitmap_sectors:0x%x\n   inode_table_lba:0x%x\n   inode_table_sectors:0x%x\n   data_start_lba:0x%x\n&quot;</span>, sb.magic, sb.part_lba_base, sb.sec_cnt, sb.inode_cnt, sb.block_bitmap_lba, sb.block_bitmap_sects, sb.inode_bitmap_lba, sb.inode_bitmap_sects, sb.inode_table_lba, sb.inode_table_sects, sb.data_start_lba);<br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> part-&gt;my_disk;<br><span class="hljs-comment">/*******************************</span><br><span class="hljs-comment"> * 1 将超级块写入本分区的1扇区 *</span><br><span class="hljs-comment"> ******************************/</span><br>   ide_write(hd, part-&gt;start_lba + <span class="hljs-number">1</span>, &amp;sb, <span class="hljs-number">1</span>);<br>   printk(<span class="hljs-string">&quot;   super_block_lba:0x%x\n&quot;</span>, part-&gt;start_lba + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">/* 找出数据量最大的元信息,用其尺寸做存储缓冲区*/</span><br>   <span class="hljs-type">uint32_t</span> buf_size = (sb.block_bitmap_sects &gt;= sb.inode_bitmap_sects ? sb.block_bitmap_sects : sb.inode_bitmap_sects);<br>   buf_size = (buf_size &gt;= sb.inode_table_sects ? buf_size : sb.inode_table_sects) * SECTOR_SIZE;<br>   <span class="hljs-type">uint8_t</span>* buf = (<span class="hljs-type">uint8_t</span>*)sys_malloc(buf_size);<span class="hljs-comment">// 申请的内存由内存管理系统清0后返回</span><br>   <br><span class="hljs-comment">/**************************************</span><br><span class="hljs-comment"> * 2 将块位图初始化并写入sb.block_bitmap_lba *</span><br><span class="hljs-comment"> *************************************/</span><br>   <span class="hljs-comment">/* 初始化块位图block_bitmap */</span><br>   buf[<span class="hljs-number">0</span>] |= <span class="hljs-number">0x01</span>;       <span class="hljs-comment">// 第0个块预留给根目录,位图中先占位</span><br>   <span class="hljs-type">uint32_t</span> block_bitmap_last_byte = block_bitmap_bit_len / <span class="hljs-number">8</span>;<br>   <span class="hljs-type">uint8_t</span>  block_bitmap_last_bit  = block_bitmap_bit_len % <span class="hljs-number">8</span>;<br>   <span class="hljs-type">uint32_t</span> last_size = SECTOR_SIZE - (block_bitmap_last_byte % SECTOR_SIZE);     <span class="hljs-comment">// last_size是位图所在最后一个扇区中，不足一扇区的其余部分</span><br><br>   <span class="hljs-comment">/* 1 先将位图最后一字节到其所在的扇区的结束全置为1,即超出实际块数的部分直接置为已占用*/</span><br>   <span class="hljs-built_in">memset</span>(&amp;buf[block_bitmap_last_byte], <span class="hljs-number">0xff</span>, last_size);<br>   <br>   <span class="hljs-comment">/* 2 再将上一步中覆盖的最后一字节内的有效位重新置0 */</span><br>   <span class="hljs-type">uint8_t</span> bit_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (bit_idx &lt;= block_bitmap_last_bit) &#123;<br>      buf[block_bitmap_last_byte] &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; bit_idx++);<br>   &#125;<br>   ide_write(hd, sb.block_bitmap_lba, buf, sb.block_bitmap_sects);<br><br><span class="hljs-comment">/***************************************</span><br><span class="hljs-comment"> * 3 将inode位图初始化并写入sb.inode_bitmap_lba *</span><br><span class="hljs-comment"> ***************************************/</span><br>   <span class="hljs-comment">/* 先清空缓冲区*/</span><br>   <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, buf_size);<br>   buf[<span class="hljs-number">0</span>] |= <span class="hljs-number">0x1</span>;      <span class="hljs-comment">// 第0个inode分给了根目录</span><br>   <span class="hljs-comment">/* 由于inode_table中共4096个inode,位图inode_bitmap正好占用1扇区,</span><br><span class="hljs-comment">    * 即inode_bitmap_sects等于1, 所以位图中的位全都代表inode_table中的inode,</span><br><span class="hljs-comment">    * 无须再像block_bitmap那样单独处理最后一扇区的剩余部分,</span><br><span class="hljs-comment">    * inode_bitmap所在的扇区中没有多余的无效位 */</span><br>   ide_write(hd, sb.inode_bitmap_lba, buf, sb.inode_bitmap_sects);<br><br><span class="hljs-comment">/***************************************</span><br><span class="hljs-comment"> * 4 将inode数组初始化并写入sb.inode_table_lba *</span><br><span class="hljs-comment"> ***************************************/</span><br> <span class="hljs-comment">/* 准备写inode_table中的第0项,即根目录所在的inode */</span><br>   <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, buf_size);  <span class="hljs-comment">// 先清空缓冲区buf</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">i</span> =</span> (<span class="hljs-keyword">struct</span> inode*)buf; <br>   i-&gt;i_size = sb.dir_entry_size * <span class="hljs-number">2</span>; <span class="hljs-comment">// .和..</span><br>   i-&gt;i_no = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 根目录占inode数组中第0个inode</span><br>   i-&gt;i_sectors[<span class="hljs-number">0</span>] = sb.data_start_lba;     <span class="hljs-comment">// 由于上面的memset,i_sectors数组的其它元素都初始化为0 </span><br>   ide_write(hd, sb.inode_table_lba, buf, sb.inode_table_sects);<br>   <br><span class="hljs-comment">/***************************************</span><br><span class="hljs-comment"> * 5 将根目录初始化并写入sb.data_start_lba</span><br><span class="hljs-comment"> ***************************************/</span><br>   <span class="hljs-comment">/* 写入根目录的两个目录项.和.. */</span><br>   <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, buf_size);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">p_de</span> =</span> (<span class="hljs-keyword">struct</span> dir_entry*)buf;<br><br>   <span class="hljs-comment">/* 初始化当前目录&quot;.&quot; */</span><br>   <span class="hljs-built_in">memcpy</span>(p_de-&gt;filename, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-number">1</span>);<br>   p_de-&gt;i_no = <span class="hljs-number">0</span>;<br>   p_de-&gt;f_type = FT_DIRECTORY;<br>   p_de++;<br><br>   <span class="hljs-comment">/* 初始化当前目录父目录&quot;..&quot; */</span><br>   <span class="hljs-built_in">memcpy</span>(p_de-&gt;filename, <span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-number">2</span>);<br>   p_de-&gt;i_no = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 根目录的父目录依然是根目录自己</span><br>   p_de-&gt;f_type = FT_DIRECTORY;<br><br>   <span class="hljs-comment">/* sb.data_start_lba已经分配给了根目录,里面是根目录的目录项 */</span><br>   ide_write(hd, sb.data_start_lba, buf, <span class="hljs-number">1</span>);<br><br>   printk(<span class="hljs-string">&quot;   root_dir_lba:0x%x\n&quot;</span>, sb.data_start_lba);<br>   printk(<span class="hljs-string">&quot;%s format done\n&quot;</span>, part-&gt;name);<br>   sys_free(buf);<br>&#125;<br><br><span class="hljs-comment">//除了挂载 还需要在内存中把超级块指针 块位图 i结点位图 i结点指针给初始化赋值了 方便使用</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">mount_partition</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* pelem, <span class="hljs-type">int</span> arg)</span> &#123;<br>   <span class="hljs-type">char</span>* part_name = (<span class="hljs-type">char</span>*)arg;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">part</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> partition, part_tag, pelem);<br>   <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(part-&gt;name, part_name)) &#123;<br>      cur_part = part;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> cur_part-&gt;my_disk;<br><br>      <span class="hljs-comment">/* sb_buf用来存储从硬盘上读入的超级块 */</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span>* <span class="hljs-title">sb_buf</span> =</span> (<span class="hljs-keyword">struct</span> super_block*)sys_malloc(SECTOR_SIZE);<br><br>      <span class="hljs-comment">/* 在内存中创建分区cur_part的超级块 */</span><br>      cur_part-&gt;sb = (<span class="hljs-keyword">struct</span> super_block*)sys_malloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> super_block));<br>      <span class="hljs-keyword">if</span> (cur_part-&gt;sb == <span class="hljs-literal">NULL</span>) &#123;<br> PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-comment">/* 读入超级块 */</span><br>      <span class="hljs-built_in">memset</span>(sb_buf, <span class="hljs-number">0</span>, SECTOR_SIZE);<br>      ide_read(hd, cur_part-&gt;start_lba + <span class="hljs-number">1</span>, sb_buf, <span class="hljs-number">1</span>);   <br><br>      <span class="hljs-comment">/* 把sb_buf中超级块的信息复制到分区的超级块sb中。*/</span><br>      <span class="hljs-built_in">memcpy</span>(cur_part-&gt;sb, sb_buf, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> super_block)); <br><br>      <span class="hljs-comment">/**********     将硬盘上的块位图读入到内存    ****************/</span><br>      cur_part-&gt;block_bitmap.bits = (<span class="hljs-type">uint8_t</span>*)sys_malloc(sb_buf-&gt;block_bitmap_sects * SECTOR_SIZE);<br>      <span class="hljs-keyword">if</span> (cur_part-&gt;block_bitmap.bits == <span class="hljs-literal">NULL</span>) &#123;<br> PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>      &#125;<br>      cur_part-&gt;block_bitmap.btmp_bytes_len = sb_buf-&gt;block_bitmap_sects * SECTOR_SIZE;<br>      <span class="hljs-comment">/* 从硬盘上读入块位图到分区的block_bitmap.bits */</span><br>      ide_read(hd, sb_buf-&gt;block_bitmap_lba, cur_part-&gt;block_bitmap.bits, sb_buf-&gt;block_bitmap_sects);   <br>      <span class="hljs-comment">/*************************************************************/</span><br><br>      <span class="hljs-comment">/**********     将硬盘上的inode位图读入到内存    ************/</span><br>      cur_part-&gt;inode_bitmap.bits = (<span class="hljs-type">uint8_t</span>*)sys_malloc(sb_buf-&gt;inode_bitmap_sects * SECTOR_SIZE);<br>      <span class="hljs-keyword">if</span> (cur_part-&gt;inode_bitmap.bits == <span class="hljs-literal">NULL</span>) &#123;<br> PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>      &#125;<br>      cur_part-&gt;inode_bitmap.btmp_bytes_len = sb_buf-&gt;inode_bitmap_sects * SECTOR_SIZE;<br>      <span class="hljs-comment">/* 从硬盘上读入inode位图到分区的inode_bitmap.bits */</span><br>      ide_read(hd, sb_buf-&gt;inode_bitmap_lba, cur_part-&gt;inode_bitmap.bits, sb_buf-&gt;inode_bitmap_sects);   <br>      <span class="hljs-comment">/*************************************************************/</span><br><br>      list_init(&amp;cur_part-&gt;open_inodes);<br>      printk(<span class="hljs-string">&quot;mount %s done!\n&quot;</span>, part-&gt;name);<br><br>   <span class="hljs-comment">/* 此处返回true是为了迎合主调函数list_traversal的实现,与函数本身功能无关。</span><br><span class="hljs-comment">      只有返回true时list_traversal才会停止遍历,减少了后面元素无意义的遍历.*/</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;     <span class="hljs-comment">// 使list_traversal继续遍历</span><br>&#125;<br><br><span class="hljs-comment">//文件系统初始化 磁盘上搜索 如果没有则格式化分区 并创建文件系统</span><br><span class="hljs-comment">/* 在磁盘上搜索文件系统,若没有则格式化分区创建文件系统 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">filesys_init</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">uint8_t</span> channel_no = <span class="hljs-number">0</span>, dev_no, part_idx = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">/* sb_buf用来存储从硬盘上读入的超级块 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span>* <span class="hljs-title">sb_buf</span> =</span> (<span class="hljs-keyword">struct</span> super_block*)sys_malloc(SECTOR_SIZE);<br><br>   <span class="hljs-keyword">if</span> (sb_buf == <span class="hljs-literal">NULL</span>) &#123;<br>      PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>   &#125;<br>   printk(<span class="hljs-string">&quot;searching filesystem......\n&quot;</span>);<br>   <span class="hljs-keyword">while</span> (channel_no &lt; channel_cnt) &#123;<br>      dev_no = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span>(dev_no &lt; <span class="hljs-number">2</span>) &#123;<br> <span class="hljs-keyword">if</span> (dev_no == <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">// 跨过裸盘hd60M.img</span><br>    dev_no++;<br>    <span class="hljs-keyword">continue</span>;<br> &#125;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> &amp;channels[channel_no].devices[dev_no];<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">part</span> =</span> hd-&gt;prim_parts;<br> <span class="hljs-keyword">while</span>(part_idx &lt; <span class="hljs-number">12</span>) &#123;   <span class="hljs-comment">// 4个主分区+8个逻辑</span><br>    <span class="hljs-keyword">if</span> (part_idx == <span class="hljs-number">4</span>) &#123;  <span class="hljs-comment">// 开始处理逻辑分区</span><br>       part = hd-&gt;logic_parts;<br>    &#125;<br> <br> <span class="hljs-comment">/* channels数组是全局变量,默认值为0,disk属于其嵌套结构,</span><br><span class="hljs-comment">  * partition又为disk的嵌套结构,因此partition中的成员默认也为0.</span><br><span class="hljs-comment">  * 若partition未初始化,则partition中的成员仍为0. </span><br><span class="hljs-comment">  * 下面处理存在的分区. */</span><br>    <span class="hljs-keyword">if</span> (part-&gt;sec_cnt != <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 如果分区存在</span><br>       <span class="hljs-built_in">memset</span>(sb_buf, <span class="hljs-number">0</span>, SECTOR_SIZE);<br><br>       <span class="hljs-comment">/* 读出分区的超级块,根据魔数是否正确来判断是否存在文件系统 */</span><br>       ide_read(hd, part-&gt;start_lba + <span class="hljs-number">1</span>, sb_buf, <span class="hljs-number">1</span>);   <br><br>       <span class="hljs-comment">/* 只支持自己的文件系统.若磁盘上已经有文件系统就不再格式化了 */</span><br>       <span class="hljs-keyword">if</span> (sb_buf-&gt;magic == <span class="hljs-number">0x19590318</span>) &#123;<br>  printk(<span class="hljs-string">&quot;%s has filesystem\n&quot;</span>, part-&gt;name);<br>       &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 其它文件系统不支持,一律按无文件系统处理</span><br>  printk(<span class="hljs-string">&quot;formatting %s`s partition %s......\n&quot;</span>, hd-&gt;name, part-&gt;name);<br>  partition_format(part);<br>       &#125;<br>    &#125;<br>    part_idx++;<br>    part++;<span class="hljs-comment">// 下一分区</span><br> &#125;<br> dev_no++;<span class="hljs-comment">// 下一磁盘</span><br>      &#125;<br>      channel_no++;<span class="hljs-comment">// 下一通道</span><br>   &#125;<br>   sys_free(sb_buf);<br>   <span class="hljs-comment">/* 确定默认操作的分区 */</span><br>   <span class="hljs-type">char</span> default_part[<span class="hljs-number">8</span>] = <span class="hljs-string">&quot;sdb1&quot;</span>;<br>   <span class="hljs-comment">/* 挂载分区 */</span><br>   list_traversal(&amp;partition_list, mount_partition, (<span class="hljs-type">int</span>)default_part);<br>   <span class="hljs-comment">/* 将当前分区的根目录打开 */</span><br>   open_root_dir(cur_part);<br><br>   <span class="hljs-comment">/* 初始化文件表 */</span><br>   <span class="hljs-type">uint32_t</span> fd_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (fd_idx &lt; MAX_FILE_OPEN) &#123;<br>      file_table[fd_idx++].fd_inode = <span class="hljs-literal">NULL</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/* 将最上层路径名称解析出来 */</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">path_parse</span><span class="hljs-params">(<span class="hljs-type">char</span>* pathname, <span class="hljs-type">char</span>* name_store)</span> &#123;<br>   <span class="hljs-keyword">if</span> (pathname[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;   <span class="hljs-comment">// 根目录不需要单独解析</span><br>    <span class="hljs-comment">/* 路径中出现1个或多个连续的字符&#x27;/&#x27;,将这些&#x27;/&#x27;跳过,如&quot;///a/b&quot; */</span><br>       <span class="hljs-keyword">while</span>(*(++pathname) == <span class="hljs-string">&#x27;/&#x27;</span>);<br>   &#125;<br><br>   <span class="hljs-comment">/* 开始一般的路径解析 */</span><br>   <span class="hljs-keyword">while</span> (*pathname != <span class="hljs-string">&#x27;/&#x27;</span> &amp;&amp; *pathname != <span class="hljs-number">0</span>) &#123;<br>      *name_store++ = *pathname++;<br>   &#125;<br><br>   <span class="hljs-keyword">if</span> (pathname[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">// 若路径字符串为空则返回NULL</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> pathname; <br>&#125;<br><br><span class="hljs-comment">/* 返回路径深度,比如/a/b/c,深度为3 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">path_depth_cnt</span><span class="hljs-params">(<span class="hljs-type">char</span>* pathname)</span> &#123;<br>   ASSERT(pathname != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">char</span>* p = pathname;<br>   <span class="hljs-type">char</span> name[MAX_FILE_NAME_LEN];       <span class="hljs-comment">// 用于path_parse的参数做路径解析</span><br>   <span class="hljs-type">uint32_t</span> depth = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">/* 解析路径,从中拆分出各级名称 */</span> <br>   p = path_parse(p, name);<br>   <span class="hljs-keyword">while</span> (name[<span class="hljs-number">0</span>]) &#123;<br>      depth++;<br>      <span class="hljs-built_in">memset</span>(name, <span class="hljs-number">0</span>, MAX_FILE_NAME_LEN);<br>      <span class="hljs-keyword">if</span> (p) &#123;     <span class="hljs-comment">// 如果p不等于NULL,继续分析路径</span><br>p  = path_parse(p, name);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> depth;<br>&#125;<br><br><span class="hljs-comment">/* 搜索文件pathname,若找到则返回其inode号,否则返回-1 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search_file</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname, <span class="hljs-keyword">struct</span> path_search_record* searched_record)</span> &#123;<br>   <span class="hljs-comment">/* 如果待查找的是根目录,为避免下面无用的查找,直接返回已知根目录信息 */</span><br>   <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/.&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/..&quot;</span>)) &#123;<br>      searched_record-&gt;parent_dir = &amp;root_dir;<br>      searched_record-&gt;file_type = FT_DIRECTORY;<br>      searched_record-&gt;searched_path[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 搜索路径置空</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br><br>   <span class="hljs-type">uint32_t</span> path_len = <span class="hljs-built_in">strlen</span>(pathname);<br>   <span class="hljs-comment">/* 保证pathname至少是这样的路径/x且小于最大长度 */</span><br>   ASSERT(pathname[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span> &amp;&amp; path_len &gt; <span class="hljs-number">1</span> &amp;&amp; path_len &lt; MAX_PATH_LEN);<br>   <span class="hljs-type">char</span>* sub_path = (<span class="hljs-type">char</span>*)pathname;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span>* <span class="hljs-title">parent_dir</span> =</span> &amp;root_dir;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span> <span class="hljs-title">dir_e</span>;</span><br><br>   <span class="hljs-comment">/* 记录路径解析出来的各级名称,如路径&quot;/a/b/c&quot;,</span><br><span class="hljs-comment">    * 数组name每次的值分别是&quot;a&quot;,&quot;b&quot;,&quot;c&quot; */</span><br>   <span class="hljs-type">char</span> name[MAX_FILE_NAME_LEN] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>   searched_record-&gt;parent_dir = parent_dir;<br>   searched_record-&gt;file_type = FT_UNKNOWN;<br>   <span class="hljs-type">uint32_t</span> parent_inode_no = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 父目录的inode号</span><br>   <br>   sub_path = path_parse(sub_path, name);<br>   <span class="hljs-keyword">while</span> (name[<span class="hljs-number">0</span>]) &#123;   <span class="hljs-comment">// 若第一个字符就是结束符,结束循环</span><br>      <span class="hljs-comment">/* 记录查找过的路径,但不能超过searched_path的长度512字节 */</span><br>      ASSERT(<span class="hljs-built_in">strlen</span>(searched_record-&gt;searched_path) &lt; <span class="hljs-number">512</span>);<br><br>      <span class="hljs-comment">/* 记录已存在的父目录 */</span><br>      <span class="hljs-built_in">strcat</span>(searched_record-&gt;searched_path, <span class="hljs-string">&quot;/&quot;</span>);<br>      <span class="hljs-built_in">strcat</span>(searched_record-&gt;searched_path, name);<br><br>      <span class="hljs-comment">/* 在所给的目录中查找文件 */</span><br>      <span class="hljs-keyword">if</span> (search_dir_entry(cur_part, parent_dir, name, &amp;dir_e)) &#123;<br> <span class="hljs-built_in">memset</span>(name, <span class="hljs-number">0</span>, MAX_FILE_NAME_LEN);<br> <span class="hljs-comment">/* 若sub_path不等于NULL,也就是未结束时继续拆分路径 */</span><br> <span class="hljs-keyword">if</span> (sub_path) &#123;<br>    sub_path = path_parse(sub_path, name);<br> &#125;<br><br> <span class="hljs-keyword">if</span> (FT_DIRECTORY == dir_e.f_type) &#123;   <span class="hljs-comment">// 如果被打开的是目录</span><br>    parent_inode_no = parent_dir-&gt;inode-&gt;i_no;<br>    dir_close(parent_dir);<br>    parent_dir = dir_open(cur_part, dir_e.i_no); <span class="hljs-comment">// 更新父目录</span><br>    searched_record-&gt;parent_dir = parent_dir;<br>    <span class="hljs-keyword">continue</span>;<br> &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (FT_REGULAR == dir_e.f_type) &#123; <span class="hljs-comment">// 若是普通文件</span><br>    searched_record-&gt;file_type = FT_REGULAR;<br>    <span class="hljs-keyword">return</span> dir_e.i_no;<br> &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;   <span class="hljs-comment">//若找不到,则返回-1</span><br> <span class="hljs-comment">/* 找不到目录项时,要留着parent_dir不要关闭,</span><br><span class="hljs-comment">  * 若是创建新文件的话需要在parent_dir中创建 */</span><br> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-comment">/* 执行到此,必然是遍历了完整路径并且查找的文件或目录只有同名目录存在 */</span><br>   dir_close(searched_record-&gt;parent_dir);      <br><br>   <span class="hljs-comment">/* 保存被查找目录的直接父目录 */</span><br>   searched_record-&gt;parent_dir = dir_open(cur_part, parent_inode_no);   <br>   searched_record-&gt;file_type = FT_DIRECTORY;<br>   <span class="hljs-keyword">return</span> dir_e.i_no;<br>&#125;<br> <br><span class="hljs-comment">/* 打开或创建文件成功后,返回文件描述符,否则返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname, <span class="hljs-type">uint8_t</span> flags)</span> &#123;<br>  <span class="hljs-comment">/* 对目录要用dir_open,这里只有open文件 */</span><br>   <span class="hljs-keyword">if</span> (pathname[<span class="hljs-built_in">strlen</span>(pathname) - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>      printk(<span class="hljs-string">&quot;can`t open a directory %s\n&quot;</span>,pathname);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   ASSERT(flags &lt;= <span class="hljs-number">7</span>);<br>   <span class="hljs-type">int32_t</span> fd = <span class="hljs-number">-1</span>;   <span class="hljs-comment">// 默认为找不到</span><br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">path_search_record</span> <span class="hljs-title">searched_record</span>;</span><br>   <span class="hljs-built_in">memset</span>(&amp;searched_record, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> path_search_record));<br><br>   <span class="hljs-comment">/* 记录目录深度.帮助判断中间某个目录不存在的情况 */</span><br>   <span class="hljs-type">uint32_t</span> pathname_depth = path_depth_cnt((<span class="hljs-type">char</span>*)pathname);<br><br>   <span class="hljs-comment">/* 先检查文件是否存在 */</span><br>   <span class="hljs-type">int</span> inode_no = search_file(pathname, &amp;searched_record);<br>   <span class="hljs-type">bool</span> found = inode_no != <span class="hljs-number">-1</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>; <br><br>   <span class="hljs-keyword">if</span> (searched_record.file_type == FT_DIRECTORY) &#123;<br>      printk(<span class="hljs-string">&quot;can`t open a direcotry with open(), use opendir() to instead\n&quot;</span>);<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-type">uint32_t</span> path_searched_depth = path_depth_cnt(searched_record.searched_path);<br><br>   <span class="hljs-comment">/* 先判断是否把pathname的各层目录都访问到了,即是否在某个中间目录就失败了 */</span><br>   <span class="hljs-keyword">if</span> (pathname_depth != path_searched_depth) &#123;   <span class="hljs-comment">// 说明并没有访问到全部的路径,某个中间目录是不存在的</span><br>      printk(<span class="hljs-string">&quot;cannot access %s: Not a directory, subpath %s is`t exist\n&quot;</span>, \<br>    pathname, searched_record.searched_path);<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-comment">/* 若是在最后一个路径上没找到,并且并不是要创建文件,直接返回-1 */</span><br>   <span class="hljs-keyword">if</span> (!found &amp;&amp; !(flags &amp; O_CREAT)) &#123;<br>      printk(<span class="hljs-string">&quot;in path %s, file %s is`t exist\n&quot;</span>, \<br>    searched_record.searched_path, \<br>    (<span class="hljs-built_in">strrchr</span>(searched_record.searched_path, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>));<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (found &amp;&amp; flags &amp; O_CREAT) &#123;  <span class="hljs-comment">// 若要创建的文件已存在</span><br>      printk(<span class="hljs-string">&quot;%s has already exist!\n&quot;</span>, pathname);<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">switch</span> (flags &amp; O_CREAT) &#123;<br>      <span class="hljs-keyword">case</span> O_CREAT:<br>         printk(<span class="hljs-string">&quot;creating file\n&quot;</span>);<br>         fd = file_create(searched_record.parent_dir, (<span class="hljs-built_in">strrchr</span>(pathname, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>), flags);<br>         dir_close(searched_record.parent_dir);<br>         <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>         <span class="hljs-comment">/* 其余情况均为打开已存在文件:</span><br><span class="hljs-comment">         * O_RDONLY,O_WRONLY,O_RDWR */</span><br>         fd = file_open(inode_no, flags);<br>   &#125;<br><br>   <span class="hljs-comment">/* 此fd是指任务pcb-&gt;fd_table数组中的元素下标,</span><br><span class="hljs-comment">    * 并不是指全局file_table中的下标 */</span><br>   <span class="hljs-keyword">return</span> fd;<br>&#125;<br><br><span class="hljs-comment">/* 将文件描述符转化为文件表的下标 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">fd_local2global</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> local_fd)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();<br>   <span class="hljs-type">int32_t</span> global_fd = cur-&gt;fd_table[local_fd];  <br>   ASSERT(global_fd &gt;= <span class="hljs-number">0</span> &amp;&amp; global_fd &lt; MAX_FILE_OPEN);<br>   <span class="hljs-keyword">return</span> (<span class="hljs-type">uint32_t</span>)global_fd;<br>&#125; <br><br><span class="hljs-comment">/* 关闭文件描述符fd指向的文件,成功返回0,否则返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_close</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd)</span> &#123;<br>   <span class="hljs-type">int32_t</span> ret = <span class="hljs-number">-1</span>;   <span class="hljs-comment">// 返回值默认为-1,即失败</span><br>   <span class="hljs-keyword">if</span> (fd &gt; <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-type">uint32_t</span> global_fd = fd_local2global(fd);<br>       ret = file_close(&amp;file_table[global_fd]);<br>      running_thread()-&gt;fd_table[fd] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 使该文件描述符位可用</span><br>   &#125;<br>   <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">/* 将buf中连续count个字节写入文件描述符fd,成功则返回写入的字节数,失败返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_write</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span> &#123;<br>   <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>      printk(<span class="hljs-string">&quot;sys_write: fd error\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (fd == stdout_no) &#123;  <br>      <span class="hljs-comment">/* 标准输出有可能被重定向为管道缓冲区, 因此要判断 */</span><br> <span class="hljs-type">char</span> tmp_buf[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br> <span class="hljs-built_in">memcpy</span>(tmp_buf, buf, count);<br> console_put_str(tmp_buf);<br> <span class="hljs-keyword">return</span> count;<br>      &#125;<br>      <span class="hljs-type">uint32_t</span> _fd = fd_local2global(fd);<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span>* <span class="hljs-title">wr_file</span> =</span> &amp;file_table[_fd];<br>      <span class="hljs-keyword">if</span> (wr_file-&gt;fd_flag &amp; O_WRONLY || wr_file-&gt;fd_flag &amp; O_RDWR) &#123;<br> <span class="hljs-type">uint32_t</span> bytes_written  = file_write(wr_file, buf, count);<br> <span class="hljs-keyword">return</span> bytes_written;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br> console_put_str(<span class="hljs-string">&quot;sys_write: not allowed to write file without flag O_RDWR or O_WRONLY\n&quot;</span>);<br> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="libusersyscallc修改"><a class="markdownIt-Anchor" href="#libusersyscallc修改"></a> lib/user/syscall.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall.h&quot;</span></span><br><br><span class="hljs-comment">/* 无参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall0(NUMBER) (&#123;       \</span><br><span class="hljs-meta">   int retval;               \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><br><span class="hljs-comment">/* 一个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall1(NUMBER, ARG1) (&#123;       \</span><br><span class="hljs-meta">   int retval;               \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 两个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall2(NUMBER, ARG1, ARG2) (&#123;       \</span><br><span class="hljs-meta">   int retval;       \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1), <span class="hljs-string">&quot;c&quot;</span> (ARG2)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 三个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall3(NUMBER, ARG1, ARG2, ARG3) (&#123;       \</span><br><span class="hljs-meta">   int retval;       \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">      <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1), <span class="hljs-string">&quot;c&quot;</span> (ARG2), <span class="hljs-string">&quot;d&quot;</span> (ARG3)       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 返回当前任务pid */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">()</span> <br>&#123;<br>   <span class="hljs-keyword">return</span> _syscall0(SYS_GETPID);<br>&#125;<br><br><span class="hljs-comment">/* 把buf中count个字符写入文件描述符fd */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> count)</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall3(SYS_WRITE, fd, buf, count);<br>&#125;<br><br><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> size)</span><br>&#123;<br>   <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)_syscall1(SYS_MALLOC, size);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr)</span><br>&#123;<br>   _syscall1(SYS_FREE, ptr);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="libstdioc修改"><a class="markdownIt-Anchor" href="#libstdioc修改"></a> lib/stdio.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_start(ap, v) ap = (va_list)&amp;v  <span class="hljs-comment">// 把ap指向第一个固定参数v</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_arg(ap, t) *((t*)(ap += 4))  <span class="hljs-comment">// ap指向下一个参数并返回其值</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_end(ap) ap = NULL  <span class="hljs-comment">// 清除ap</span></span><br><br><span class="hljs-comment">/* 将整型转换成字符(integer to ascii) */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">itoa</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> value, <span class="hljs-type">char</span>** buf_ptr_addr, <span class="hljs-type">uint8_t</span> base)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> m = value % base;    <span class="hljs-comment">// 求模,最先掉下来的是最低位   </span><br>   <span class="hljs-type">uint32_t</span> i = value / base;    <span class="hljs-comment">// 取整</span><br>   <span class="hljs-keyword">if</span> (i) &#123;    <span class="hljs-comment">// 如果倍数不为0则递归调用。</span><br>      itoa(i, buf_ptr_addr, base);<br>   &#125;<br>   <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">10</span>) &#123;      <span class="hljs-comment">// 如果余数是0~9</span><br>      *((*buf_ptr_addr)++) = m + <span class="hljs-string">&#x27;0&#x27;</span>;  <span class="hljs-comment">// 将数字0~9转换为字符&#x27;0&#x27;~&#x27;9&#x27;</span><br>   &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-comment">// 否则余数是A~F</span><br>      *((*buf_ptr_addr)++) = m - <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;A&#x27;</span>; <span class="hljs-comment">// 将数字A~F转换为字符&#x27;A&#x27;~&#x27;F&#x27;</span><br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/* 将参数ap按照格式format输出到字符串str,并返回替换后str长度 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">vsprintf</span><span class="hljs-params">(<span class="hljs-type">char</span>* str, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, va_list ap)</span> &#123;<br>   <span class="hljs-type">char</span>* buf_ptr = str;<br>   <span class="hljs-type">const</span> <span class="hljs-type">char</span>* index_ptr = format;<br>   <span class="hljs-type">char</span> index_char = *index_ptr;<br>   <span class="hljs-type">int32_t</span> arg_int;<br>   <span class="hljs-type">char</span>* arg_str;<br>   <span class="hljs-keyword">while</span>(index_char) &#123;<br>      <span class="hljs-keyword">if</span> (index_char != <span class="hljs-string">&#x27;%&#x27;</span>) &#123;<br> *(buf_ptr++) = index_char;<br> index_char = *(++index_ptr);<br> <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      index_char = *(++index_ptr); <span class="hljs-comment">// 得到%后面的字符</span><br>      <span class="hljs-keyword">switch</span>(index_char) &#123;<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>    arg_str = va_arg(ap, <span class="hljs-type">char</span>*);<br>    <span class="hljs-built_in">strcpy</span>(buf_ptr, arg_str);<br>    buf_ptr += <span class="hljs-built_in">strlen</span>(arg_str);<br>    index_char = *(++index_ptr);<br>    <span class="hljs-keyword">break</span>;<br><br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>    *(buf_ptr++) = va_arg(ap, <span class="hljs-type">char</span>);<br>    index_char = *(++index_ptr);<br>    <span class="hljs-keyword">break</span>;<br><br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>    arg_int = va_arg(ap, <span class="hljs-type">int</span>);<br>      <span class="hljs-comment">/* 若是负数, 将其转为正数后,再正数前面输出个负号&#x27;-&#x27;. */</span><br>    <span class="hljs-keyword">if</span> (arg_int &lt; <span class="hljs-number">0</span>) &#123;<br>       arg_int = <span class="hljs-number">0</span> - arg_int;<br>       *buf_ptr++ = <span class="hljs-string">&#x27;-&#x27;</span>;<br>    &#125;<br>    itoa(arg_int, &amp;buf_ptr, <span class="hljs-number">10</span>); <br>    index_char = *(++index_ptr);<br>    <span class="hljs-keyword">break</span>;<br><br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;x&#x27;</span>:<br>    arg_int = va_arg(ap, <span class="hljs-type">int</span>);<br>    itoa(arg_int, &amp;buf_ptr, <span class="hljs-number">16</span>); <br>    index_char = *(++index_ptr); <span class="hljs-comment">// 跳过格式字符并更新index_char</span><br>    <span class="hljs-keyword">break</span>;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">strlen</span>(str);<br>&#125;<br><br><span class="hljs-comment">/* 同printf不同的地方就是字符串不是写到终端,而是写到buf中 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">sprintf</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, ...)</span> &#123;<br>   va_list args;<br>   <span class="hljs-type">uint32_t</span> retval;<br>   va_start(args, format);<br>   retval = <span class="hljs-built_in">vsprintf</span>(buf, format, args);<br>   va_end(args);<br>   <span class="hljs-keyword">return</span> retval;<br>&#125;<br><br><span class="hljs-comment">/* 格式化输出字符串format */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, ...)</span> &#123;<br>   va_list args;<br>   va_start(args, format);       <span class="hljs-comment">// 使args指向format</span><br>   <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;       <span class="hljs-comment">// 用于存储拼接后的字符串</span><br>   <span class="hljs-built_in">vsprintf</span>(buf, format, args);<br>   va_end(args);<br>   <span class="hljs-keyword">return</span> write(<span class="hljs-number">1</span>, buf, <span class="hljs-built_in">strlen</span>(buf)); <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-2"><a class="markdownIt-Anchor" href="#kernelmainc修改-2"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>init_all();<br><br>intr_enable();<br><br><br><span class="hljs-type">uint32_t</span> fd = sys_open(<span class="hljs-string">&quot;/file1&quot;</span>,O_RDWR);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd:%d\n&quot;</span>, fd);<br>sys_write(fd, <span class="hljs-string">&quot;hello,world\n&quot;</span>,<span class="hljs-number">12</span>);<br>sys_close(fd);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d closed now\n&quot;</span>, fd);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-2"><a class="markdownIt-Anchor" href="#运行结果-2"></a> 运行结果</h3><p><img src="/img/os/os14.5.png" alt="图为bochs运行界面" /></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十四章 文件系统 最后的挑战(上)</title>
    <link href="/2022/08/07/os(14-1)/"/>
    <url>/2022/08/07/os(14-1)/</url>
    
    <content type="html"><![CDATA[<h1 id="第十四章-文件系统-最后的挑战上"><a class="markdownIt-Anchor" href="#第十四章-文件系统-最后的挑战上"></a> 第十四章 文件系统 最后的挑战(上)</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>看了下这一章应该是这本书内容最多的一章，不知道得什么时候才能完成。最近看到很多互联网行业饱和的例子，打消了我很大的积极性，还是两手准备，一边找实习，一边考研比较安心些。</p><h2 id="创建文件系统"><a class="markdownIt-Anchor" href="#创建文件系统"></a> 创建文件系统</h2><p>本次实验创建了1个主分区，5个逻辑分区的文件系统，也就是在内存写好了超级块结构体所有信息，空闲块位图出了第一个位”置1“用作根目录，最后一个扇区多余的部分全部置1，其余全部置0，inode位图只占一个扇区，共4096个inode结点，所以只需要第一位置1表0号inode结点指向根目录即可，inode数组写好0号inode结点即可，最后依次写入磁盘，完成创建文件系统。</p><h3 id="fssuper_blockh创建"><a class="markdownIt-Anchor" href="#fssuper_blockh创建"></a> fs/super_block.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __FS_SUPER_BLOCK_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FS_SUPER_BLOCK_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><br><span class="hljs-comment">/* 超级块 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span> &#123;</span><br>   <span class="hljs-type">uint32_t</span> magic;    <span class="hljs-comment">// 用来标识文件系统类型,支持多文件系统的操作系统通过此标志来识别文件系统类型</span><br>   <span class="hljs-type">uint32_t</span> sec_cnt;    <span class="hljs-comment">// 本分区总共的扇区数</span><br>   <span class="hljs-type">uint32_t</span> inode_cnt;    <span class="hljs-comment">// 本分区中inode数量</span><br>   <span class="hljs-type">uint32_t</span> part_lba_base;    <span class="hljs-comment">// 本分区的起始lba地址</span><br><br>   <span class="hljs-type">uint32_t</span> block_bitmap_lba;    <span class="hljs-comment">// 块位图本身起始扇区地址</span><br>   <span class="hljs-type">uint32_t</span> block_bitmap_sects;     <span class="hljs-comment">// 扇区位图本身占用的扇区数量</span><br><br>   <span class="hljs-type">uint32_t</span> inode_bitmap_lba;    <span class="hljs-comment">// i结点位图起始扇区lba地址</span><br>   <span class="hljs-type">uint32_t</span> inode_bitmap_sects;    <span class="hljs-comment">// i结点位图占用的扇区数量</span><br><br>   <span class="hljs-type">uint32_t</span> inode_table_lba;    <span class="hljs-comment">// i结点表起始扇区lba地址</span><br>   <span class="hljs-type">uint32_t</span> inode_table_sects;    <span class="hljs-comment">// i结点表占用的扇区数量</span><br><br>   <span class="hljs-type">uint32_t</span> data_start_lba;    <span class="hljs-comment">// 数据区开始的第一个扇区号</span><br>   <span class="hljs-type">uint32_t</span> root_inode_no;    <span class="hljs-comment">// 根目录所在的I结点号</span><br>   <span class="hljs-type">uint32_t</span> dir_entry_size;    <span class="hljs-comment">// 目录项大小</span><br><br>   <span class="hljs-type">uint8_t</span>  pad[<span class="hljs-number">460</span>];    <span class="hljs-comment">// 加上460字节,凑够512字节1扇区大小</span><br>&#125; __attribute__ ((packed));<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="fsinodeh创建"><a class="markdownIt-Anchor" href="#fsinodeh创建"></a> fs/inode.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __FS_INODE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FS_INODE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ide.h&quot;</span></span><br><br><span class="hljs-comment">/* inode结构 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> &#123;</span><br>   <span class="hljs-type">uint32_t</span> i_no;    <span class="hljs-comment">// inode编号</span><br><br><span class="hljs-comment">/* 当此inode是文件时,i_size是指文件大小,</span><br><span class="hljs-comment">若此inode是目录,i_size是指该目录下所有目录项大小之和*/</span><br>   <span class="hljs-type">uint32_t</span> i_size;<br><br>   <span class="hljs-type">uint32_t</span> i_open_cnts;   <span class="hljs-comment">// 记录此文件被打开的次数</span><br>   <span class="hljs-type">bool</span> write_deny;   <span class="hljs-comment">// 写文件不能并行,进程写文件前检查此标识</span><br><br><span class="hljs-comment">/* i_sectors[0-11]是直接块, i_sectors[12]用来存储一级间接块指针 */</span><br>   <span class="hljs-type">uint32_t</span> i_sectors[<span class="hljs-number">13</span>];<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">inode_tag</span>;</span><br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="fsdirh创建"><a class="markdownIt-Anchor" href="#fsdirh创建"></a> fs/dir.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __FS_DIR_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FS_DIR_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;inode.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ide.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_FILE_NAME_LEN  16 <span class="hljs-comment">// 最大文件名长度</span></span><br><br><span class="hljs-comment">/* 目录结构 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span> &#123;</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">inode</span>;</span>   <br>   <span class="hljs-type">uint32_t</span> dir_pos;  <span class="hljs-comment">// 记录在目录内的偏移</span><br>   <span class="hljs-type">uint8_t</span> dir_buf[<span class="hljs-number">512</span>];  <span class="hljs-comment">// 目录的数据缓存</span><br>&#125;;<br><br><span class="hljs-comment">/* 目录项结构 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span> &#123;</span><br>   <span class="hljs-type">char</span> filename[MAX_FILE_NAME_LEN];  <span class="hljs-comment">// 普通文件或目录名称</span><br>   <span class="hljs-type">uint32_t</span> i_no;      <span class="hljs-comment">// 普通文件或目录对应的inode编号</span><br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">file_types</span> <span class="hljs-title">f_type</span>;</span>      <span class="hljs-comment">// 文件类型</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="fsfsh创建"><a class="markdownIt-Anchor" href="#fsfsh创建"></a> fs/fs.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __FS_FS_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FS_FS_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ide.h&quot;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_FILES_PER_PART     4096  <span class="hljs-comment">//每个扇区最大支持文件数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BITS_PER_SECTOR4096  <span class="hljs-comment">//每扇区的位数 512字节 * 8</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SECTOR_SIZE512   <span class="hljs-comment">//每扇区的字节数 512字节</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BLOCK_SIZESECTOR_SIZE   <span class="hljs-comment">//块字节大小 我们这里一块 == 一扇区</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">file_types</span> </span><br><span class="hljs-class">&#123;</span><br>    FT_UNKNOWN,<span class="hljs-comment">//未知文件类型</span><br>    FT_REGULAR,<span class="hljs-comment">//普通文件类型</span><br>    FT_DIRECTORY<span class="hljs-comment">//目录文件类型</span><br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">partition_format</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> disk* hd,<span class="hljs-keyword">struct</span> partition* part)</span>;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">mount_partition</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* pelem,<span class="hljs-type">int</span> arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">filesys_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="fsfsc创建"><a class="markdownIt-Anchor" href="#fsfsc创建"></a> fs/fs.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ide.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;inode.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dir.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;super_block.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">cur_part</span>;</span><span class="hljs-comment">//默认操作分区</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">partition_format</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> disk* hd,<span class="hljs-keyword">struct</span> partition* part)</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> boot_sector_sects = <span class="hljs-number">1</span>;<span class="hljs-comment">//引导块一个块</span><br>    <span class="hljs-type">uint32_t</span> super_block_sects = <span class="hljs-number">1</span>;<span class="hljs-comment">//超级块一个块</span><br>    <span class="hljs-type">uint32_t</span> inode_bitmap_sects = DIV_ROUND_UP(MAX_FILES_PER_PART,BITS_PER_SECTOR);  <span class="hljs-comment">//inode位图占的块数</span><br>           <span class="hljs-comment">//inode数组所占的块数</span><br>    <span class="hljs-type">uint32_t</span> inode_table_sects = DIV_ROUND_UP((<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> inode) * MAX_FILES_PER_PART),SECTOR_SIZE);<br>    <br>    <span class="hljs-comment">//注意这里的used_sects 肯定是不准确 差了那么一点点的 因为还没有包含block_bitmap_sects 但是为了简单处理 要先得到free_sects才能推  所以到后面block_bitmap_sects 要除两次</span><br>    <span class="hljs-type">uint32_t</span> used_sects = boot_sector_sects + super_block_sects + inode_bitmap_sects + inode_table_sects;<br>    <span class="hljs-type">uint32_t</span> free_sects = part-&gt;sec_cnt - used_sects;<br>    <br>    <span class="hljs-type">uint32_t</span> block_bitmap_sects = DIV_ROUND_UP(free_sects,BITS_PER_SECTOR);<span class="hljs-comment">//一位一块</span><br>    <span class="hljs-type">uint32_t</span> block_bitmap_bit_len = free_sects - block_bitmap_sects;<span class="hljs-comment">//再减去block_bitmap的</span><br>    block_bitmap_sects = DIV_ROUND_UP(block_bitmap_bit_len,BITS_PER_SECTOR);<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span> <span class="hljs-title">sb</span>;</span>        <span class="hljs-comment">//利用栈来初始化超级块 我们的栈此刻在</span><br>    sb.magic         = <span class="hljs-number">0x23333333</span>;<span class="hljs-comment">//魔数</span><br>    sb.sec_cnt       = part-&gt;sec_cnt; <span class="hljs-comment">//该分区总扇区数</span><br>    sb.inode_cnt     = MAX_FILES_PER_PART;<span class="hljs-comment">//该分区总inode数</span><br>    sb.part_lba_base = part-&gt;start_lba;<span class="hljs-comment">//该分区lba起始扇区位置</span><br>    <br>    <span class="hljs-comment">// 引导块 超级块 空闲块位图 inode位图 inode数组 根目录 空闲块区域</span><br>    <span class="hljs-comment">//挨着挨着顺序赋值即可</span><br>    sb.block_bitmap_lba   = part-&gt;start_lba + boot_sector_sects + super_block_sects;<br>    sb.block_bitmap_sects = block_bitmap_sects;<br>    <br>    sb.inode_bitmap_lba   = sb.block_bitmap_lba + block_bitmap_sects;<br>    sb.inode_bitmap_sects = inode_bitmap_sects;<br>    <br>    sb.inode_table_lba    = sb.inode_bitmap_lba + inode_bitmap_sects;<br>    sb.inode_table_sects  = inode_table_sects;<br>    <br>    sb.data_start_lba     = sb.inode_table_lba + inode_table_sects;<br>    sb.root_inode_no   = <span class="hljs-number">0</span>;<span class="hljs-comment">//根目录inode起始编号 0 </span><br>    sb.dir_entry_size     = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> dir_entry); <span class="hljs-comment">//目录项大小</span><br>    <br>    printk(<span class="hljs-string">&quot;%s  info:\n&quot;</span>,part-&gt;name);<br>    printk(<span class="hljs-string">&quot;    magic:0x%x\n    part_lba_base:0x%x\n    all_sectors:0x%x\n    \</span><br><span class="hljs-string">inode_cnt:0x%x\n    block_bitmap_lba:0x%x\n    block_bitmap_sectors:0x%x\n    \</span><br><span class="hljs-string">inode_bitmap_lba:0x%x\n    inode_bitmap_sectors:0x%x\n    \</span><br><span class="hljs-string">inode_table_lba:0x%x\n    inode_table_sectors:0x%x\n    \</span><br><span class="hljs-string">data_start_lba:0x%x\n&quot;</span>, \<br>    sb.magic,sb.part_lba_base,sb.sec_cnt,sb.inode_cnt,sb.block_bitmap_lba,sb.block_bitmap_sects,\<br>    sb.inode_bitmap_lba,sb.inode_bitmap_sects,sb.inode_table_lba,\<br>    sb.inode_table_sects,sb.data_start_lba);   <br>    <br>    <span class="hljs-comment">//把元信息挨个挨个写进硬盘</span><br>    ide_write(hd,part-&gt;start_lba + boot_sector_sects,&amp;sb,super_block_sects);<br>    printk(<span class="hljs-string">&quot;    super_block_lba:0x%x\n&quot;</span>,part-&gt;start_lba + <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-comment">//找一个最大的数据缓冲区 我们的栈已经不足以满足我们的各种信息的储存了 之后还要把元信息给腾到硬盘中</span><br>    <span class="hljs-type">uint32_t</span> buf_size = (sb.block_bitmap_sects &gt;= sb.inode_bitmap_sects) ? sb.block_bitmap_sects : sb.inode_bitmap_sects;<br>    buf_size = ((buf_size &gt;= inode_table_sects) ? buf_size : inode_table_sects) * SECTOR_SIZE;<br>    <span class="hljs-comment">//申请缓冲空间 给元信息腾空间 设置成uint8_t* 原因是 先弄块位图的初始化</span><br>    <span class="hljs-type">uint8_t</span>* buf = (<span class="hljs-type">uint8_t</span>*)sys_malloc(buf_size);<br>    <br>    <span class="hljs-comment">/* 初始化块位图了 */</span><br>    buf[<span class="hljs-number">0</span>] |= <span class="hljs-number">0x1</span>;<br>    <span class="hljs-type">uint32_t</span> block_bitmap_last_byte = block_bitmap_bit_len / <span class="hljs-number">8</span>; <span class="hljs-comment">//先算算占用多少字节</span><br>    <span class="hljs-type">uint8_t</span> block_bitmap_last_bit  = block_bitmap_bit_len % <span class="hljs-number">8</span>; <span class="hljs-comment">//最后还有剩余多少位</span><br>    <span class="hljs-type">uint32_t</span> last_size = SECTOR_SIZE - (block_bitmap_last_byte % SECTOR_SIZE); <span class="hljs-comment">//先除余数 算出来多少字节空的</span><br>    <br>    <span class="hljs-comment">//处理字节 把可能多的一字节全部置成1 这几步处理的很细节阿</span><br>    <span class="hljs-built_in">memset</span>(&amp;buf[block_bitmap_last_byte],<span class="hljs-number">0xff</span>,last_size); <span class="hljs-comment">//全部置1 保证不会被使用</span><br>    <br>    <span class="hljs-comment">//处理最后的位 有效位变成0 用~来处理 真的很妙</span><br>    <span class="hljs-type">uint8_t</span> bit_idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(bit_idx &lt;= block_bitmap_last_bit)<br>    buf[block_bitmap_last_byte] &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; (bit_idx++));<span class="hljs-comment">//有效位</span><br>    <br>    <span class="hljs-comment">//把位图元信息给写到硬盘中 块位图的部分就结束了 还有inode位图 inode数组等着我们</span><br>    ide_write(hd,sb.block_bitmap_lba,buf,sb.block_bitmap_sects);<br>    <br>    <span class="hljs-comment">/*初始化inode位图了*/</span><br>    <span class="hljs-built_in">memset</span>(buf,<span class="hljs-number">0</span>,buf_size);<br>    buf[<span class="hljs-number">0</span>] |= <span class="hljs-number">0x1</span>;                                          <span class="hljs-comment">//第一个inode用于存根目录</span><br>    ide_write(hd,sb.inode_bitmap_lba,buf,sb.inode_bitmap_sects); <span class="hljs-comment">//第一个inode初始化在后面</span><br>    <br>    <span class="hljs-comment">/*初始化inode数组了*/</span><br>    <span class="hljs-built_in">memset</span>(buf,<span class="hljs-number">0</span>,buf_size);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">i</span> =</span> (<span class="hljs-keyword">struct</span> inode*)buf;<span class="hljs-comment">//先初始化第一个inode 根目录所在的</span><br>    i-&gt;i_size = sb.dir_entry_size * <span class="hljs-number">2</span>;<span class="hljs-comment">//. 和 .. </span><br>    i-&gt;i_no   = <span class="hljs-number">0</span>;<br>    i-&gt;i_sectors[<span class="hljs-number">0</span>]  = sb.data_start_lba;<span class="hljs-comment">//根目录所在扇区就是最开始的第一个扇区</span><br>    <br>    ide_write(hd,sb.inode_table_lba,buf,sb.inode_table_sects);<br>    <br>    <span class="hljs-comment">/*写根目录文件进入 第一个扇区了*/</span><br>    <span class="hljs-built_in">memset</span>(buf,<span class="hljs-number">0</span>,buf_size);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">p_de</span> =</span> (<span class="hljs-keyword">struct</span> dir_entry*)buf;<br>    <br>    <span class="hljs-built_in">memcpy</span>(p_de-&gt;filename,<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//名称</span><br>    p_de-&gt;i_no = <span class="hljs-number">0</span>;<span class="hljs-comment">//根目录. inode仍然是自己</span><br>    p_de-&gt;f_type = FT_DIRECTORY;<br>    p_de++;<span class="hljs-comment">//移动到下一条目录项</span><br>    <br>    <span class="hljs-built_in">memcpy</span>(p_de-&gt;filename,<span class="hljs-string">&quot;..&quot;</span>,<span class="hljs-number">2</span>);<br>    p_de-&gt;i_no = <span class="hljs-number">0</span>;<span class="hljs-comment">//根目录的父目录仍然是自己 因为自己是固定好的 根基</span><br>    p_de-&gt;f_type = FT_DIRECTORY;<br>    <br>    ide_write(hd,sb.data_start_lba,buf,<span class="hljs-number">1</span>);<span class="hljs-comment">//把根目录文件写到第一个扇区中</span><br>    <br>    printk(<span class="hljs-string">&quot;    root_dir_lba:0x%x\n&quot;</span>,sb.data_start_lba);<br>    printk(<span class="hljs-string">&quot;%s format done\n&quot;</span>,part-&gt;name);<br>    sys_free(buf);<span class="hljs-comment">//临时借用的 现在得还回去了 </span><br>&#125;<br><br><span class="hljs-comment">//除了挂载 还需要在内存中把超级块指针 块位图 i结点位图 i结点指针给初始化赋值了 方便使用</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">mount_partition</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* pelem,<span class="hljs-type">int</span> arg)</span><br>&#123;<br>    <span class="hljs-type">char</span>* part_name = (<span class="hljs-type">char</span>*)arg;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">part</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> partition,part_tag,pelem);<span class="hljs-comment">//得到分区指针 partition*</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(part-&gt;name,part_name))   <span class="hljs-comment">//字符串相匹配</span><br>    &#123;<br>    cur_part = part;   <span class="hljs-comment">//赋值指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> cur_part-&gt;my_disk;<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span>* <span class="hljs-title">sb_buf</span> =</span> (<span class="hljs-keyword">struct</span> super_block*)sys_malloc(SECTOR_SIZE);<br>    <span class="hljs-keyword">if</span>(sb_buf == <span class="hljs-literal">NULL</span>)<br>        PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>    <br>    <span class="hljs-built_in">memset</span>(sb_buf,<span class="hljs-number">0</span>,SECTOR_SIZE);<br>    ide_read(hd,cur_part-&gt;start_lba + <span class="hljs-number">1</span>,sb_buf,<span class="hljs-number">1</span>);<br>    <br>    cur_part-&gt;sb = sb_buf;<br>    <br>    cur_part-&gt;block_bitmap.bits = (<span class="hljs-type">uint8_t</span>*)sys_malloc(sb_buf-&gt;block_bitmap_sects * SECTOR_SIZE);<br>    <span class="hljs-keyword">if</span>(cur_part-&gt;block_bitmap.bits == <span class="hljs-literal">NULL</span>)<br>       PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>    cur_part-&gt;block_bitmap.btmp_bytes_len = sb_buf-&gt;block_bitmap_sects * SECTOR_SIZE;<br>    ide_read(hd,sb_buf-&gt;block_bitmap_lba,cur_part-&gt;block_bitmap.bits,sb_buf-&gt;block_bitmap_sects);<br>    <br>        cur_part-&gt;inode_bitmap.bits = (<span class="hljs-type">uint8_t</span>*)sys_malloc(sb_buf-&gt;inode_bitmap_sects * SECTOR_SIZE);<br>        <span class="hljs-keyword">if</span>(cur_part-&gt;inode_bitmap.bits == <span class="hljs-literal">NULL</span>)<br>       PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>    cur_part-&gt;inode_bitmap.btmp_bytes_len = sb_buf-&gt;inode_bitmap_sects * SECTOR_SIZE;<br>    ide_read(hd,sb_buf-&gt;inode_bitmap_lba,cur_part-&gt;inode_bitmap.bits,sb_buf-&gt;inode_bitmap_sects);<br>    <br>    list_init(&amp;cur_part-&gt;open_inodes);<br>    printk(<span class="hljs-string">&quot;mount %s done!\n&quot;</span>,part-&gt;name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//停止循环</span><br>    <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//继续循环</span><br>&#125;<br><br><span class="hljs-comment">//文件系统初始化 磁盘上搜索 如果没有则格式化分区 并创建文件系统</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">filesys_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">uint8_t</span> channel_no = <span class="hljs-number">0</span>,dev_no,part_idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span>* <span class="hljs-title">sb_buf</span> =</span> (<span class="hljs-keyword">struct</span> super_block*)sys_malloc(SECTOR_SIZE);<br>    <br>    <span class="hljs-keyword">if</span>(sb_buf == <span class="hljs-literal">NULL</span>)PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>    printk(<span class="hljs-string">&quot;searching filesysteam......\n&quot;</span>);<br>    <span class="hljs-keyword">while</span>(channel_no &lt; channel_cnt)<br>    &#123;<br>    dev_no = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(dev_no &lt; <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!dev_no)<span class="hljs-comment">//跳过hd60M.img主盘</span><br>        &#123;<br>        ++dev_no;<br>        <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> &amp;channels[<span class="hljs-number">0</span>].devices[<span class="hljs-number">1</span>];<span class="hljs-comment">//得到硬盘指针</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">part</span> =</span> hd-&gt;prim_parts;<span class="hljs-comment">//先为主区创建文件系统</span><br>        <span class="hljs-keyword">while</span>(part_idx &lt; <span class="hljs-number">12</span>)<span class="hljs-comment">//4个主区 + 8个逻辑分区</span><br>        &#123;<br>        <span class="hljs-keyword">if</span>(part_idx == <span class="hljs-number">4</span>)<br>            part = hd-&gt;logic_parts;<br>        <span class="hljs-keyword">if</span>(part-&gt;sec_cnt != <span class="hljs-number">0</span>)<span class="hljs-comment">//分区存在 如果没有初始化 即所有成员都为0</span><br>        &#123;<br>            <span class="hljs-built_in">memset</span>(sb_buf,<span class="hljs-number">0</span>,SECTOR_SIZE);<br>            ide_read(hd,part-&gt;start_lba +<span class="hljs-number">1</span>,sb_buf,<span class="hljs-number">1</span>);<span class="hljs-comment">//读取超级块的扇区</span><br>            <br>            <span class="hljs-keyword">if</span>(sb_buf-&gt;magic != <span class="hljs-number">0x23333333</span>)<span class="hljs-comment">//还没有创建文件系统</span><br>            &#123;<br>            printk(<span class="hljs-string">&quot;formatting %s&#x27;s partition %s......\n&quot;</span>,\<br>            hd-&gt;name,part-&gt;name);<br>            partition_format(hd,part);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            printk(<span class="hljs-string">&quot;%s has filesystem\n&quot;</span>,part-&gt;name);<br>        &#125;<br>        ++part_idx;<br>        ++part;<span class="hljs-comment">//到下一个分区看</span><br>        &#125;<br>        ++dev_no;<span class="hljs-comment">//切换盘号</span><br>    &#125;<br>    ++channel_no;<span class="hljs-comment">//增加ide通道号</span><br>    &#125;<br>    sys_free(sb_buf);<br>    <span class="hljs-type">char</span> default_part[<span class="hljs-number">8</span>] = <span class="hljs-string">&quot;sdb1&quot;</span>;<span class="hljs-comment">//参数为int 4字节字符串指针传的进去</span><br>    list_traversal(&amp;partition_list,mount_partition,(<span class="hljs-type">int</span>)default_part);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelinitc修改"><a class="markdownIt-Anchor" href="#kernelinitc修改"></a> kernel/init.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/timer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/tss.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ide.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><br><span class="hljs-comment">/*负责初始化所有模块 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_all</span><span class="hljs-params">()</span> &#123;<br>   put_str(<span class="hljs-string">&quot;init_all\n&quot;</span>);<br>   idt_init();     <span class="hljs-comment">// 初始化中断</span><br>   mem_init();<br>   timer_init();<br>   thread_init();<br>   console_init();<br>   keyboard_init();<br>   tss_init();<br>   syscall_init();<br>   ide_init();<br>   filesys_init();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h3><p><img src="/img/os/os14.1.png" alt="图为bochs运行界面" /><br /><img src="/img/os/os14.2.png" alt="图为bochs运行界面" /></p><h2 id="实现文件操作基本函数"><a class="markdownIt-Anchor" href="#实现文件操作基本函数"></a> 实现文件操作基本函数</h2><h3 id="fsinodeh修改"><a class="markdownIt-Anchor" href="#fsinodeh修改"></a> fs/inode.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __FS_INODE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FS_INODE_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ide.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">uint32_t</span> i_no;     <span class="hljs-comment">//inode 编号</span><br>    <span class="hljs-type">uint32_t</span> i_size;     <span class="hljs-comment">//文件大小 或者 目录项总大小 inode不管是什么文件的</span><br>    <br>    <span class="hljs-type">uint32_t</span> i_open_cnts;   <span class="hljs-comment">//记录此文件被打开的次数</span><br>    <span class="hljs-type">bool</span> write_deny;     <span class="hljs-comment">//写文件不能并行</span><br>    <br>    <span class="hljs-type">uint32_t</span> i_sectors[<span class="hljs-number">13</span>]; <span class="hljs-comment">//这里只实现了一级简介块 12为一级简介块指针 0-11直接是inode编号</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">inode_tag</span>;</span><span class="hljs-comment">//从硬盘读取速率太慢 此list做缓冲用 当第二次使用时如果list中有</span><br>    <span class="hljs-comment">//直接通过list_elem得到inode而不用再读取硬盘</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode_position</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">bool</span> two_sec;<span class="hljs-comment">//是否inode存储位置在两个扇区间</span><br>    <span class="hljs-type">uint32_t</span> sec_lba;<span class="hljs-comment">//inode所在的扇区号</span><br>    <span class="hljs-type">uint32_t</span> off_size;<span class="hljs-comment">//在所存储的扇区的偏移位置</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">inode_locate</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part,<span class="hljs-type">uint32_t</span> inode_no,<span class="hljs-keyword">struct</span> inode_position* inode_pos)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">inode_sync</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part,<span class="hljs-keyword">struct</span> inode* inode,<span class="hljs-type">void</span>* io_buf)</span>;<br><span class="hljs-keyword">struct</span> inode* <span class="hljs-title function_">inode_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part,<span class="hljs-type">uint32_t</span> inode_no)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">inode_close</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode* inode)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">inode_init</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> inode_no,<span class="hljs-keyword">struct</span> inode* new_inode)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="fsinodec创建"><a class="markdownIt-Anchor" href="#fsinodec创建"></a> fs/inode.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;inode.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;file.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;super_block.h&quot;</span></span><br><br><span class="hljs-comment">/* 获取inode所在的扇区和扇区内的偏移量 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">inode_locate</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part, <span class="hljs-type">uint32_t</span> inode_no, <span class="hljs-keyword">struct</span> inode_position* inode_pos)</span> &#123;<br>   <span class="hljs-comment">/* inode_table在硬盘上是连续的 */</span><br>   ASSERT(inode_no &lt; <span class="hljs-number">4096</span>);<br>   <span class="hljs-type">uint32_t</span> inode_table_lba = part-&gt;sb-&gt;inode_table_lba;<br><br>   <span class="hljs-type">uint32_t</span> inode_size = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> inode);<br>   <span class="hljs-type">uint32_t</span> off_size = inode_no * inode_size;    <span class="hljs-comment">// 第inode_no号I结点相对于inode_table_lba的字节偏移量</span><br>   <span class="hljs-type">uint32_t</span> off_sec  = off_size / <span class="hljs-number">512</span>;    <span class="hljs-comment">// 第inode_no号I结点相对于inode_table_lba的扇区偏移量</span><br>   <span class="hljs-type">uint32_t</span> off_size_in_sec = off_size % <span class="hljs-number">512</span>;    <span class="hljs-comment">// 待查找的inode所在扇区中的起始地址</span><br><br>   <span class="hljs-comment">/* 判断此i结点是否跨越2个扇区 */</span><br>   <span class="hljs-type">uint32_t</span> left_in_sec = <span class="hljs-number">512</span> - off_size_in_sec;<br>   <span class="hljs-keyword">if</span> (left_in_sec &lt; inode_size ) &#123;  <span class="hljs-comment">// 若扇区内剩下的空间不足以容纳一个inode,必然是I结点跨越了2个扇区</span><br>      inode_pos-&gt;two_sec = <span class="hljs-literal">true</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 否则,所查找的inode未跨扇区</span><br>      inode_pos-&gt;two_sec = <span class="hljs-literal">false</span>;<br>   &#125;<br>   inode_pos-&gt;sec_lba = inode_table_lba + off_sec;<br>   inode_pos-&gt;off_size = off_size_in_sec;<br>&#125;<br><br><span class="hljs-comment">/* 将inode写入到分区part */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">inode_sync</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part, <span class="hljs-keyword">struct</span> inode* inode, <span class="hljs-type">void</span>* io_buf)</span> &#123; <span class="hljs-comment">// io_buf是用于硬盘io的缓冲区</span><br>   <span class="hljs-type">uint8_t</span> inode_no = inode-&gt;i_no;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode_position</span> <span class="hljs-title">inode_pos</span>;</span><br>   inode_locate(part, inode_no, &amp;inode_pos);       <span class="hljs-comment">// inode位置信息会存入inode_pos</span><br>   ASSERT(inode_pos.sec_lba &lt;= (part-&gt;start_lba + part-&gt;sec_cnt));<br>   <br>   <span class="hljs-comment">/* 硬盘中的inode中的成员inode_tag和i_open_cnts是不需要的,</span><br><span class="hljs-comment">    * 它们只在内存中记录链表位置和被多少进程共享 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> <span class="hljs-title">pure_inode</span>;</span><br>   <span class="hljs-built_in">memcpy</span>(&amp;pure_inode, inode, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> inode));<br><br>   <span class="hljs-comment">/* 以下inode的三个成员只存在于内存中,现在将inode同步到硬盘,清掉这三项即可 */</span><br>   pure_inode.i_open_cnts = <span class="hljs-number">0</span>;<br>   pure_inode.write_deny = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 置为false,以保证在硬盘中读出时为可写</span><br>   pure_inode.inode_tag.prev = pure_inode.inode_tag.next = <span class="hljs-literal">NULL</span>;<br><br>   <span class="hljs-type">char</span>* inode_buf = (<span class="hljs-type">char</span>*)io_buf;<br>   <span class="hljs-keyword">if</span> (inode_pos.two_sec) &#123;    <span class="hljs-comment">// 若是跨了两个扇区,就要读出两个扇区再写入两个扇区</span><br>   <span class="hljs-comment">/* 读写硬盘是以扇区为单位,若写入的数据小于一扇区,要将原硬盘上的内容先读出来再和新数据拼成一扇区后再写入  */</span><br>      ide_read(part-&gt;my_disk, inode_pos.sec_lba, inode_buf, <span class="hljs-number">2</span>);<span class="hljs-comment">// inode在format中写入硬盘时是连续写入的,所以读入2块扇区</span><br><br>   <span class="hljs-comment">/* 开始将待写入的inode拼入到这2个扇区中的相应位置 */</span><br>      <span class="hljs-built_in">memcpy</span>((inode_buf + inode_pos.off_size), &amp;pure_inode, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> inode));<br>   <br>   <span class="hljs-comment">/* 将拼接好的数据再写入磁盘 */</span><br>      ide_write(part-&gt;my_disk, inode_pos.sec_lba, inode_buf, <span class="hljs-number">2</span>);<br>   &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// 若只是一个扇区</span><br>      ide_read(part-&gt;my_disk, inode_pos.sec_lba, inode_buf, <span class="hljs-number">1</span>);<br>      <span class="hljs-built_in">memcpy</span>((inode_buf + inode_pos.off_size), &amp;pure_inode, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> inode));<br>      ide_write(part-&gt;my_disk, inode_pos.sec_lba, inode_buf, <span class="hljs-number">1</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/* 根据i结点号返回相应的i结点 */</span><br><span class="hljs-keyword">struct</span> inode* <span class="hljs-title function_">inode_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part, <span class="hljs-type">uint32_t</span> inode_no)</span> &#123;<br>   <span class="hljs-comment">/* 先在已打开inode链表中找inode,此链表是为提速创建的缓冲区 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">elem</span> =</span> part-&gt;open_inodes.head.next;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">inode_found</span>;</span><br>   <span class="hljs-keyword">while</span> (elem != &amp;part-&gt;open_inodes.tail) &#123;<br>      inode_found = elem2entry(<span class="hljs-keyword">struct</span> inode, inode_tag, elem);<br>      <span class="hljs-keyword">if</span> (inode_found-&gt;i_no == inode_no) &#123;<br> inode_found-&gt;i_open_cnts++;<br> <span class="hljs-keyword">return</span> inode_found;<br>      &#125;<br>      elem = elem-&gt;next;<br>   &#125;<br><br>   <span class="hljs-comment">/*由于open_inodes链表中找不到,下面从硬盘上读入此inode并加入到此链表 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode_position</span> <span class="hljs-title">inode_pos</span>;</span><br><br>   <span class="hljs-comment">/* inode位置信息会存入inode_pos, 包括inode所在扇区地址和扇区内的字节偏移量 */</span><br>   inode_locate(part, inode_no, &amp;inode_pos);<br><br><span class="hljs-comment">/* 为使通过sys_malloc创建的新inode被所有任务共享,</span><br><span class="hljs-comment"> * 需要将inode置于内核空间,故需要临时</span><br><span class="hljs-comment"> * 将cur_pbc-&gt;pgdir置为NULL */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();<br>   <span class="hljs-type">uint32_t</span>* cur_pagedir_bak = cur-&gt;pgdir;<br>   cur-&gt;pgdir = <span class="hljs-literal">NULL</span>;<br>   <span class="hljs-comment">/* 以上三行代码完成后下面分配的内存将位于内核区 */</span><br>   inode_found = (<span class="hljs-keyword">struct</span> inode*)sys_malloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> inode));<br>   <span class="hljs-comment">/* 恢复pgdir */</span><br>   cur-&gt;pgdir = cur_pagedir_bak;<br><br>   <span class="hljs-type">char</span>* inode_buf;<br>   <span class="hljs-keyword">if</span> (inode_pos.two_sec) &#123;<span class="hljs-comment">// 考虑跨扇区的情况</span><br>      inode_buf = (<span class="hljs-type">char</span>*)sys_malloc(<span class="hljs-number">1024</span>);<br><br>   <span class="hljs-comment">/* i结点表是被partition_format函数连续写入扇区的,</span><br><span class="hljs-comment">    * 所以下面可以连续读出来 */</span><br>      ide_read(part-&gt;my_disk, inode_pos.sec_lba, inode_buf, <span class="hljs-number">2</span>);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 否则,所查找的inode未跨扇区,一个扇区大小的缓冲区足够</span><br>      inode_buf = (<span class="hljs-type">char</span>*)sys_malloc(<span class="hljs-number">512</span>);<br>      ide_read(part-&gt;my_disk, inode_pos.sec_lba, inode_buf, <span class="hljs-number">1</span>);<br>   &#125;<br>   <span class="hljs-built_in">memcpy</span>(inode_found, inode_buf + inode_pos.off_size, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> inode));<br><br>   <span class="hljs-comment">/* 因为一会很可能要用到此inode,故将其插入到队首便于提前检索到 */</span><br>   list_push(&amp;part-&gt;open_inodes, &amp;inode_found-&gt;inode_tag);<br>   inode_found-&gt;i_open_cnts = <span class="hljs-number">1</span>;<br><br>   sys_free(inode_buf);<br>   <span class="hljs-keyword">return</span> inode_found;<br>&#125;<br><br><span class="hljs-comment">/* 关闭inode或减少inode的打开数 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">inode_close</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode* inode)</span> &#123;<br>   <span class="hljs-comment">/* 若没有进程再打开此文件,将此inode去掉并释放空间 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>   <span class="hljs-keyword">if</span> (--inode-&gt;i_open_cnts == <span class="hljs-number">0</span>) &#123;<br>      list_remove(&amp;inode-&gt;inode_tag);  <span class="hljs-comment">// 将I结点从part-&gt;open_inodes中去掉</span><br><br>   <span class="hljs-comment">/* inode_open时为实现inode被所有进程共享,已经在sys_malloc为inode分配了内核空间 */</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();<br>      <span class="hljs-type">uint32_t</span>* cur_pagedir_bak = cur-&gt;pgdir;<br>      cur-&gt;pgdir = <span class="hljs-literal">NULL</span>;<br>      sys_free(inode);         <span class="hljs-comment">// 释放inode的内核空间</span><br>      cur-&gt;pgdir = cur_pagedir_bak;<br>   &#125;<br>   intr_set_status(old_status);<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化new_inode */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">inode_init</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> inode_no, <span class="hljs-keyword">struct</span> inode* new_inode)</span> &#123;<br>   new_inode-&gt;i_no = inode_no;<br>   new_inode-&gt;i_size = <span class="hljs-number">0</span>;<br>   new_inode-&gt;i_open_cnts = <span class="hljs-number">0</span>;<br>   new_inode-&gt;write_deny = <span class="hljs-literal">false</span>;<br><br>   <span class="hljs-comment">/* 初始化块索引数组i_sector */</span><br>   <span class="hljs-type">uint8_t</span> sec_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (sec_idx &lt; <span class="hljs-number">13</span>) &#123;<br>   <span class="hljs-comment">/* i_sectors[12]为一级间接块地址 */</span><br>      new_inode-&gt;i_sectors[sec_idx] = <span class="hljs-number">0</span>;<br>      sec_idx++;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="threadthreadh修改"><a class="markdownIt-Anchor" href="#threadthreadh修改"></a> thread/thread.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../kernel/memory.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK_NAME_LEN 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_FILES_OPEN_PER_PROC 8</span><br><span class="hljs-comment">/* 自定义通用函数类型,它将在很多线程函数中做为形参类型 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> <span class="hljs-title function_">thread_func</span><span class="hljs-params">(<span class="hljs-type">void</span>*)</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int16_t</span> <span class="hljs-type">pid_t</span>;<br><br><span class="hljs-comment">/* 进程或线程的状态 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> </span><br><span class="hljs-class">&#123;</span><br>   TASK_RUNNING,<br>   TASK_READY,<br>   TASK_BLOCKED,<br>   TASK_WAITING,<br>   TASK_HANGING,<br>   TASK_DIED<br>&#125;;<br><br><span class="hljs-comment">/***********   中断栈intr_stack   ***********</span><br><span class="hljs-comment"> * 此结构用于中断发生时保护程序(线程或进程)的上下文环境:</span><br><span class="hljs-comment"> * 进程或线程被外部中断或软中断打断时,会按照此结构压入上下文</span><br><span class="hljs-comment"> * 寄存器,  intr_exit中的出栈操作是此结构的逆操作</span><br><span class="hljs-comment"> * 此栈在线程自己的内核栈中位置固定,所在页的最顶端</span><br><span class="hljs-comment">********************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">intr_stack</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">uint32_t</span> vec_no; <span class="hljs-comment">// kernel.S 宏VECTOR中push %1压入的中断号</span><br>    <span class="hljs-type">uint32_t</span> edi;<br>    <span class="hljs-type">uint32_t</span> esi;<br>    <span class="hljs-type">uint32_t</span> ebp;<br>    <span class="hljs-type">uint32_t</span> esp_dummy; <span class="hljs-comment">// 虽然pushad把esp也压入,但esp是不断变化的,所以会被popad忽略</span><br>    <span class="hljs-type">uint32_t</span> ebx;<br>    <span class="hljs-type">uint32_t</span> edx;<br>    <span class="hljs-type">uint32_t</span> ecx;<br>    <span class="hljs-type">uint32_t</span> eax;<br>    <span class="hljs-type">uint32_t</span> gs;<br>    <span class="hljs-type">uint32_t</span> fs;<br>    <span class="hljs-type">uint32_t</span> es;<br>    <span class="hljs-type">uint32_t</span> ds;<br><br><span class="hljs-comment">/* 以下由cpu从低特权级进入高特权级时压入 */</span><br>    <span class="hljs-type">uint32_t</span> err_code; <span class="hljs-comment">// err_code会被压入在eip之后</span><br>    <span class="hljs-type">void</span> (*eip) (<span class="hljs-type">void</span>);<br>    <span class="hljs-type">uint32_t</span> cs;<br>    <span class="hljs-type">uint32_t</span> eflags;<br>    <span class="hljs-type">void</span>* esp;<br>    <span class="hljs-type">uint32_t</span> ss;<br>&#125;;<br><br><span class="hljs-comment">/***********  线程栈thread_stack  ***********</span><br><span class="hljs-comment"> * 线程自己的栈,用于存储线程中待执行的函数</span><br><span class="hljs-comment"> * 此结构在线程自己的内核栈中位置不固定,</span><br><span class="hljs-comment"> * 用在switch_to时保存线程环境。</span><br><span class="hljs-comment"> * 实际位置取决于实际运行情况。</span><br><span class="hljs-comment"> ******************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint32_t</span> ebp;<br>   <span class="hljs-type">uint32_t</span> ebx;<br>   <span class="hljs-type">uint32_t</span> edi;<br>   <span class="hljs-type">uint32_t</span> esi;<br><br><span class="hljs-comment">/* 线程第一次执行时,eip指向待调用的函数kernel_thread </span><br><span class="hljs-comment">其它时候,eip是指向switch_to的返回地址*/</span><br>   <span class="hljs-type">void</span> (*eip) (thread_func* func, <span class="hljs-type">void</span>* func_arg);<br><br><span class="hljs-comment">/*****   以下仅供第一次被调度上cpu时使用   ****/</span><br><br><span class="hljs-comment">/* 参数unused_ret只为占位置充数为返回地址 */</span><br>   <span class="hljs-type">void</span> (*unused_retaddr);<br>   thread_func* function;   <span class="hljs-comment">// 由Kernel_thread所调用的函数名</span><br>   <span class="hljs-type">void</span>* func_arg;    <span class="hljs-comment">// 由Kernel_thread所调用的函数所需的参数</span><br>&#125;;<br><br><span class="hljs-comment">/* 进程或线程的pcb,程序控制块 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint32_t</span>* self_kstack; <span class="hljs-comment">// 各内核线程都用自己的内核栈</span><br>   <span class="hljs-type">pid_t</span> pid;<br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> <span class="hljs-title">status</span>;</span><br>   <span class="hljs-type">char</span> name[TASK_NAME_LEN];<br>   <span class="hljs-type">uint8_t</span> priority;<br>   <span class="hljs-type">uint8_t</span> ticks;   <span class="hljs-comment">// 每次在处理器上执行的时间嘀嗒数</span><br><span class="hljs-comment">/* 此任务自上cpu运行后至今占用了多少cpu嘀嗒数,</span><br><span class="hljs-comment"> * 也就是此任务执行了多久*/</span><br>   <span class="hljs-type">uint32_t</span> elapsed_ticks;<br><span class="hljs-comment">/* general_tag的作用是用于线程在一般的队列中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">general_tag</span>;</span>    <br><span class="hljs-comment">/* all_list_tag的作用是用于线程队列thread_all_list中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">all_list_tag</span>;</span><br>   <span class="hljs-type">uint32_t</span>* pgdir;              <span class="hljs-comment">// 进程自己页表的虚拟地址</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> <span class="hljs-title">userprog_vaddr</span>;</span>   <span class="hljs-comment">// 用户进程的虚拟地址 </span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block_desc</span> <span class="hljs-title">u_block_desc</span>[<span class="hljs-title">DESC_CNT</span>];</span>   <span class="hljs-comment">// 用户进程内存块描述符</span><br>   <span class="hljs-type">uint32_t</span> stack_magic; <span class="hljs-comment">// 用这串数字做栈的边界标记,用于检测栈的溢出</span><br>   <span class="hljs-type">int32_t</span> fd_table[MAX_FILES_OPEN_PER_PROC];<span class="hljs-comment">// 已打开文件数组</span><br>&#125;;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_ready_list</span>;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_all_list</span>;</span><br><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">running_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">kernel_thread</span><span class="hljs-params">(thread_func* function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread,thread_func function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread,<span class="hljs-type">char</span>* name,<span class="hljs-type">int</span> prio)</span>;<br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name,<span class="hljs-type">int</span> prio,thread_func function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_main_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">schedule</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_block</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> task_status stat)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_unblock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> <span class="hljs-title function_">allocate_pid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_yield</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">idle</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="threadthreadc修改"><a class="markdownIt-Anchor" href="#threadthreadc修改"></a> thread/thread.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;thread.h&quot;</span>   <span class="hljs-comment">//函数声明 各种结构体</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span>   <span class="hljs-comment">//前缀</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span>   <span class="hljs-comment">//memset</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span>   <span class="hljs-comment">//不清楚</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span>   <span class="hljs-comment">//分配页需要</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/sync.h&quot;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_SIZE 4096</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">main_thread</span>;</span>    <span class="hljs-comment">// 主线程PCB</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">idle_thread</span>;</span>    <span class="hljs-comment">// idle线程</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_ready_list</span>;</span>    <span class="hljs-comment">// 就绪队列</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_all_list</span>;</span>    <span class="hljs-comment">// 所有任务队列</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">thread_tag</span>;</span><span class="hljs-comment">// 用于保存队列中的线程结点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lock</span> <span class="hljs-title">pid_lock</span>;</span><br><br><br><span class="hljs-comment">/* 获取当前线程pcb指针 */</span><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">running_thread</span><span class="hljs-params">()</span> <br>&#123;<br>   <span class="hljs-type">uint32_t</span> esp; <br><span class="hljs-keyword">asm</span> (<span class="hljs-string">&quot;mov %%esp, %0&quot;</span> : <span class="hljs-string">&quot;=g&quot;</span> (esp));<br><span class="hljs-comment">/* 取esp整数部分即pcb起始地址 */</span><br><span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> task_struct*)(esp &amp; <span class="hljs-number">0xfffff000</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 由kernel_thread去执行function(func_arg) */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">kernel_thread</span><span class="hljs-params">(thread_func* function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* 执行function前要开中断,避免后面的时钟中断被屏蔽,而无法调度其它线程 */</span><br>intr_enable();<br>function(func_arg); <br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程栈thread_stack,将待执行的函数和参数放到thread_stack中相应的位置 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, thread_func function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* 先预留中断使用栈的空间,可见thread.h中定义的结构 */</span><br>pthread-&gt;self_kstack -= <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> intr_stack);<br><br><span class="hljs-comment">/* 再留出线程栈空间,可见thread.h中定义 */</span><br>pthread-&gt;self_kstack -= <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> thread_stack);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span>* <span class="hljs-title">kthread_stack</span> =</span> (<span class="hljs-keyword">struct</span> thread_stack*)pthread-&gt;self_kstack;<br>kthread_stack-&gt;eip = kernel_thread;<br>kthread_stack-&gt;function = function;<br>kthread_stack-&gt;func_arg = func_arg;<br>kthread_stack-&gt;ebp = kthread_stack-&gt;ebx = kthread_stack-&gt;esi = kthread_stack-&gt;edi = <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程基本信息 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, <span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio)</span> <br>&#123;<br><span class="hljs-built_in">memset</span>(pthread, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*pthread));<br>   pthread-&gt;pid = allocate_pid();<br>   <span class="hljs-built_in">strcpy</span>(pthread-&gt;name, name);<br><br><span class="hljs-keyword">if</span> (pthread == main_thread) <br>&#123;<br><span class="hljs-comment">/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */</span><br>pthread-&gt;status = TASK_RUNNING;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>pthread-&gt;status = TASK_READY;<br>&#125;<br><br><span class="hljs-comment">/* self_kstack是线程自己在内核态下使用的栈顶地址 */</span><br>pthread-&gt;self_kstack = (<span class="hljs-type">uint32_t</span>*)((<span class="hljs-type">uint32_t</span>)pthread + PG_SIZE);<br>pthread-&gt;priority = prio;<br>pthread-&gt;ticks = prio;<br>pthread-&gt;elapsed_ticks = <span class="hljs-number">0</span>;<br>pthread-&gt;pgdir = <span class="hljs-literal">NULL</span>;<br>pthread-&gt;stack_magic = <span class="hljs-number">0x19870916</span>;  <span class="hljs-comment">// 自定义的魔数</span><br><span class="hljs-comment">/* 标准输入输出先空出来 */</span><br>pthread-&gt;fd_table[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>pthread-&gt;fd_table[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>pthread-&gt;fd_table[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-comment">/* 其余的全置为-1 */</span><br><span class="hljs-type">uint8_t</span> fd_idx = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">while</span> (fd_idx &lt; MAX_FILES_OPEN_PER_PROC) &#123;<br>pthread-&gt;fd_table[fd_idx] = <span class="hljs-number">-1</span>;<br>fd_idx++;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 创建一优先级为prio的线程,线程名为name,线程所执行的函数是function(func_arg) */</span><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio, thread_func function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">thread</span> =</span> get_kernel_pages(<span class="hljs-number">1</span>);<br>init_thread(thread, name, prio);<br>thread_create(thread, function, func_arg);<br><br><span class="hljs-comment">/* 确保之前不在队列中 */</span><br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;thread-&gt;general_tag));<br><span class="hljs-comment">/* 加入就绪线程队列 */</span><br>list_append(&amp;thread_ready_list, &amp;thread-&gt;general_tag);<br><br><span class="hljs-comment">/* 确保之前不在队列中 */</span><br>ASSERT(!elem_find(&amp;thread_all_list, &amp;thread-&gt;all_list_tag));<br><span class="hljs-comment">/* 加入全部线程队列 */</span><br>list_append(&amp;thread_all_list, &amp;thread-&gt;all_list_tag);<br><br><span class="hljs-keyword">return</span> thread;<br>&#125;<br><br><br><span class="hljs-comment">/* 将kernel中的main函数完善为主线程 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_main_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br><span class="hljs-comment">/* 因为main线程早已运行,咱们在loader.S中进入内核时的mov esp,0xc009f000,</span><br><span class="hljs-comment">就是为其预留了tcb,地址为0xc009e000,因此不需要通过get_kernel_page另分配一页*/</span><br>main_thread = running_thread();<br>init_thread(main_thread, <span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-number">31</span>);<br><br><span class="hljs-comment">/* main函数是当前线程,当前线程不在thread_ready_list中,</span><br><span class="hljs-comment"> * 所以只将其加在thread_all_list中. */</span><br>ASSERT(!elem_find(&amp;thread_all_list, &amp;main_thread-&gt;all_list_tag));<br>list_append(&amp;thread_all_list, &amp;main_thread-&gt;all_list_tag);<br>&#125;<br><br><br><span class="hljs-comment">/* 实现任务调度 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">schedule</span><span class="hljs-params">()</span> <br>&#123;<br>ASSERT(intr_get_status() == INTR_OFF);<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread(); <br><span class="hljs-keyword">if</span> (cur-&gt;status == TASK_RUNNING) <span class="hljs-comment">// 若此线程只是cpu时间片到了,将其加入到就绪队列尾</span><br>&#123; <br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;cur-&gt;general_tag));<br>list_append(&amp;thread_ready_list, &amp;cur-&gt;general_tag);<br>cur-&gt;ticks = cur-&gt;priority;     <span class="hljs-comment">// 重新将当前线程的ticks再重置为其priority;</span><br>cur-&gt;status = TASK_READY;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123; <br><span class="hljs-comment">/* 若此线程需要某事件发生后才能继续上cpu运行,</span><br><span class="hljs-comment">不需要将其加入队列,因为当前线程不在就绪队列中。*/</span><br>&#125;<br><br><span class="hljs-comment">/* 如果就绪队列中没有可运行的任务,就唤醒idle */</span><br><span class="hljs-keyword">if</span> (list_empty(&amp;thread_ready_list)) <br>&#123;<br>thread_unblock(idle_thread);<br>&#125;<br><br>ASSERT(!list_empty(&amp;thread_ready_list));<br>thread_tag = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// thread_tag清空</span><br><span class="hljs-comment">/* 将thread_ready_list队列中的第一个就绪线程弹出,准备将其调度上cpu. */</span><br>thread_tag = list_pop(&amp;thread_ready_list);   <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">next</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> task_struct, general_tag, thread_tag);<br>next-&gt;status = TASK_RUNNING;<br><br>process_activate(next);<br>switch_to(cur, next);<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程环境 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>put_str(<span class="hljs-string">&quot;thread_init start\n&quot;</span>);<br><br>list_init(&amp;thread_ready_list);<br>list_init(&amp;thread_all_list);<br>lock_init(&amp;pid_lock);<br><span class="hljs-comment">/* 将当前main函数创建为线程 */</span><br>make_main_thread();<br><span class="hljs-comment">/* 创建idle线程 */</span><br>  idle_thread = thread_start(<span class="hljs-string">&quot;idle&quot;</span>, <span class="hljs-number">10</span>, idle, <span class="hljs-literal">NULL</span>);<br>put_str(<span class="hljs-string">&quot;thread_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 当前线程将自己阻塞,标志其状态为stat. */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_block</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> task_status stat)</span> <br>&#123;<br><span class="hljs-comment">/* stat取值为TASK_BLOCKED,TASK_WAITING,TASK_HANGING,也就是只有这三种状态才不会被调度*/</span><br>ASSERT(((stat == TASK_BLOCKED) || (stat == TASK_WAITING) || (stat == TASK_HANGING)));<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur_thread</span> =</span> running_thread();<br>cur_thread-&gt;status = stat; <span class="hljs-comment">// 置其状态为stat </span><br>schedule();      <span class="hljs-comment">// 将当前线程换下处理器</span><br><span class="hljs-comment">/* 待当前线程被解除阻塞后才继续运行下面的intr_set_status */</span><br>   intr_set_status(old_status);<br>&#125;<br><br><br><span class="hljs-comment">/* 将线程pthread解除阻塞 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_unblock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread)</span> <br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>ASSERT(((pthread-&gt;status == TASK_BLOCKED) || (pthread-&gt;status == TASK_WAITING) || (pthread-&gt;status == TASK_HANGING)));<br><span class="hljs-keyword">if</span> (pthread-&gt;status != TASK_READY) <br>&#123;<br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;pthread-&gt;general_tag));<br><span class="hljs-keyword">if</span> (elem_find(&amp;thread_ready_list, &amp;pthread-&gt;general_tag)) <br>&#123;<br>PANIC(<span class="hljs-string">&quot;thread_unblock: blocked thread in ready_list\n&quot;</span>);<br>&#125;<br>list_push(&amp;thread_ready_list, &amp;pthread-&gt;general_tag);    <span class="hljs-comment">// 放到队列的最前面,使其尽快得到调度</span><br>pthread-&gt;status = TASK_READY;<br>&#125; <br>intr_set_status(old_status);<br>&#125;<br><br><br><span class="hljs-comment">/* 分配pid */</span><br><span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> <span class="hljs-title function_">allocate_pid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>   <span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> next_pid = <span class="hljs-number">0</span>;<br>   lock_acquire(&amp;pid_lock);<br>   next_pid++;<br>   lock_release(&amp;pid_lock);<br>   <span class="hljs-keyword">return</span> next_pid;<br>&#125;<br><br><br><span class="hljs-comment">/* 系统空闲时运行的线程 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">idle</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <br>&#123;<br>thread_block(TASK_BLOCKED);     <br><span class="hljs-comment">//执行hlt时必须要保证目前处在开中断的情况下</span><br><span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;sti; hlt&quot;</span> : : : <span class="hljs-string">&quot;memory&quot;</span>)</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 主动让出cpu,换其它线程运行 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_yield</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();   <br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>   ASSERT(!elem_find(&amp;thread_ready_list, &amp;cur-&gt;general_tag));<br>   list_append(&amp;thread_ready_list, &amp;cur-&gt;general_tag);<br>   cur-&gt;status = TASK_READY;<br>   schedule();<br>   intr_set_status(old_status);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fsfileh创建"><a class="markdownIt-Anchor" href="#fsfileh创建"></a> fs/file.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __FS_FILE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FS_FILE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ide.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dir.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><br><span class="hljs-comment">/* 文件结构 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> &#123;</span><br>   <span class="hljs-type">uint32_t</span> fd_pos;      <span class="hljs-comment">// 记录当前文件操作的偏移地址,以0为起始,最大为文件大小-1</span><br>   <span class="hljs-type">uint32_t</span> fd_flag;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">fd_inode</span>;</span><br>&#125;;<br><br><span class="hljs-comment">/* 标准输入输出描述符 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">std_fd</span> &#123;</span><br>   stdin_no,   <span class="hljs-comment">// 0 标准输入</span><br>   stdout_no,  <span class="hljs-comment">// 1 标准输出</span><br>   stderr_no   <span class="hljs-comment">// 2 标准错误</span><br>&#125;;<br><br><span class="hljs-comment">/* 位图类型 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">bitmap_type</span> &#123;</span><br>   INODE_BITMAP,     <span class="hljs-comment">// inode位图</span><br>   BLOCK_BITMAP     <span class="hljs-comment">// 块位图</span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_FILE_OPEN 32    <span class="hljs-comment">// 系统可打开的最大文件数</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> <span class="hljs-title">file_table</span>[<span class="hljs-title">MAX_FILE_OPEN</span>];</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">inode_bitmap_alloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part)</span>;<br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">block_bitmap_alloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part)</span>;<br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">file_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* parent_dir, <span class="hljs-type">char</span>* filename, <span class="hljs-type">uint8_t</span> flag)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">bitmap_sync</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part, <span class="hljs-type">uint32_t</span> bit_idx, <span class="hljs-type">uint8_t</span> btmp)</span>;<br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">get_free_slot_in_global</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">pcb_fd_install</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> globa_fd_idx)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="fsfilec创建"><a class="markdownIt-Anchor" href="#fsfilec创建"></a> fs/file.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;file.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;super_block.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;inode.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ioqueue.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEFAULT_SECS 1</span><br><br><span class="hljs-comment">/* 文件表 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> <span class="hljs-title">file_table</span>[<span class="hljs-title">MAX_FILE_OPEN</span>];</span><br><br><span class="hljs-comment">/* 从文件表file_table中获取一个空闲位,成功返回下标,失败返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">get_free_slot_in_global</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> fd_idx = <span class="hljs-number">3</span>;<br>   <span class="hljs-keyword">while</span> (fd_idx &lt; MAX_FILE_OPEN) &#123;<br>      <span class="hljs-keyword">if</span> (file_table[fd_idx].fd_inode == <span class="hljs-literal">NULL</span>) &#123;<br> <span class="hljs-keyword">break</span>;<br>      &#125;<br>      fd_idx++;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (fd_idx == MAX_FILE_OPEN) &#123;<br>      printk(<span class="hljs-string">&quot;exceed max open files\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> fd_idx;<br>&#125;<br><br><span class="hljs-comment">/* 将全局描述符下标安装到进程或线程自己的文件描述符数组fd_table中,</span><br><span class="hljs-comment"> * 成功返回下标,失败返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">pcb_fd_install</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> globa_fd_idx)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();<br>   <span class="hljs-type">uint8_t</span> local_fd_idx = <span class="hljs-number">3</span>; <span class="hljs-comment">// 跨过stdin,stdout,stderr</span><br>   <span class="hljs-keyword">while</span> (local_fd_idx &lt; MAX_FILES_OPEN_PER_PROC) &#123;<br>      <span class="hljs-keyword">if</span> (cur-&gt;fd_table[local_fd_idx] == <span class="hljs-number">-1</span>) &#123;<span class="hljs-comment">// -1表示free_slot,可用</span><br> cur-&gt;fd_table[local_fd_idx] = globa_fd_idx;<br> <span class="hljs-keyword">break</span>;<br>      &#125;<br>      local_fd_idx++;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (local_fd_idx == MAX_FILES_OPEN_PER_PROC) &#123;<br>      printk(<span class="hljs-string">&quot;exceed max open files_per_proc\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> local_fd_idx;<br>&#125;<br><br><span class="hljs-comment">/* 分配一个i结点,返回i结点号 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">inode_bitmap_alloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part)</span> &#123;<br>   <span class="hljs-type">int32_t</span> bit_idx = bitmap_scan(&amp;part-&gt;inode_bitmap, <span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">if</span> (bit_idx == <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   bitmap_set(&amp;part-&gt;inode_bitmap, bit_idx, <span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> bit_idx;<br>&#125;<br>   <br><span class="hljs-comment">/* 分配1个扇区,返回其扇区地址 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">block_bitmap_alloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part)</span> &#123;<br>   <span class="hljs-type">int32_t</span> bit_idx = bitmap_scan(&amp;part-&gt;block_bitmap, <span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">if</span> (bit_idx == <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   bitmap_set(&amp;part-&gt;block_bitmap, bit_idx, <span class="hljs-number">1</span>);<br>   <span class="hljs-comment">/* 和inode_bitmap_malloc不同,此处返回的不是位图索引,而是具体可用的扇区地址 */</span><br>   <span class="hljs-keyword">return</span> (part-&gt;sb-&gt;data_start_lba + bit_idx);<br>&#125; <br><br><span class="hljs-comment">/* 将内存中bitmap第bit_idx位所在的512字节同步到硬盘 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bitmap_sync</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part, <span class="hljs-type">uint32_t</span> bit_idx, <span class="hljs-type">uint8_t</span> btmp_type)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> off_sec = bit_idx / <span class="hljs-number">4096</span>;  <span class="hljs-comment">// 本i结点索引相对于位图的扇区偏移量</span><br>   <span class="hljs-type">uint32_t</span> off_size = off_sec * BLOCK_SIZE;  <span class="hljs-comment">// 本i结点索引相对于位图的字节偏移量</span><br>   <span class="hljs-type">uint32_t</span> sec_lba;<br>   <span class="hljs-type">uint8_t</span>* bitmap_off;<br><br><span class="hljs-comment">/* 需要被同步到硬盘的位图只有inode_bitmap和block_bitmap */</span><br>   <span class="hljs-keyword">switch</span> (btmp_type) &#123;<br>      <span class="hljs-keyword">case</span> INODE_BITMAP:<br> sec_lba = part-&gt;sb-&gt;inode_bitmap_lba + off_sec;<br> bitmap_off = part-&gt;inode_bitmap.bits + off_size;<br> <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> BLOCK_BITMAP: <br> sec_lba = part-&gt;sb-&gt;block_bitmap_lba + off_sec;<br> bitmap_off = part-&gt;block_bitmap.bits + off_size;<br> <span class="hljs-keyword">break</span>;<br>   &#125;<br>   ide_write(part-&gt;my_disk, sec_lba, bitmap_off, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fsdirh创建-2"><a class="markdownIt-Anchor" href="#fsdirh创建-2"></a> fs/dir.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __FS_DIR_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FS_DIR_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;inode.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ide.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_FILE_NAME_LEN  16 <span class="hljs-comment">// 最大文件名长度</span></span><br><br><span class="hljs-comment">/* 目录结构 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span> &#123;</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">inode</span>;</span>   <br>   <span class="hljs-type">uint32_t</span> dir_pos;  <span class="hljs-comment">// 记录在目录内的偏移</span><br>   <span class="hljs-type">uint8_t</span> dir_buf[<span class="hljs-number">512</span>];  <span class="hljs-comment">// 目录的数据缓存</span><br>&#125;;<br><br><span class="hljs-comment">/* 目录项结构 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span> &#123;</span><br>   <span class="hljs-type">char</span> filename[MAX_FILE_NAME_LEN];  <span class="hljs-comment">// 普通文件或目录名称</span><br>   <span class="hljs-type">uint32_t</span> i_no;      <span class="hljs-comment">// 普通文件或目录对应的inode编号</span><br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">file_types</span> <span class="hljs-title">f_type</span>;</span>      <span class="hljs-comment">// 文件类型</span><br>&#125;;<br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span> <span class="hljs-title">root_dir</span>;</span>             <span class="hljs-comment">// 根目录</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">open_root_dir</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part)</span>;<br><span class="hljs-keyword">struct</span> dir* <span class="hljs-title function_">dir_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part, <span class="hljs-type">uint32_t</span> inode_no)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">dir_close</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* dir)</span>;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">search_dir_entry</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part, <span class="hljs-keyword">struct</span> dir* pdir, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* name, <span class="hljs-keyword">struct</span> dir_entry* dir_e)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">create_dir_entry</span><span class="hljs-params">(<span class="hljs-type">char</span>* filename, <span class="hljs-type">uint32_t</span> inode_no, <span class="hljs-type">uint8_t</span> file_type, <span class="hljs-keyword">struct</span> dir_entry* p_de)</span>;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">sync_dir_entry</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* parent_dir, <span class="hljs-keyword">struct</span> dir_entry* p_de, <span class="hljs-type">void</span>* io_buf)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="fsdirc创建"><a class="markdownIt-Anchor" href="#fsdirc创建"></a> fs/dir.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dir.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ide.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;inode.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;file.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;super_block.h&quot;</span></span><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span> <span class="hljs-title">root_dir</span>;</span>             <span class="hljs-comment">// 根目录</span><br><br><span class="hljs-comment">/* 打开根目录 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">open_root_dir</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part)</span> &#123;<br>   root_dir.inode = inode_open(part, part-&gt;sb-&gt;root_inode_no);<br>   root_dir.dir_pos = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 在分区part上打开i结点为inode_no的目录并返回目录指针 */</span><br><span class="hljs-keyword">struct</span> dir* <span class="hljs-title function_">dir_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part, <span class="hljs-type">uint32_t</span> inode_no)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span>* <span class="hljs-title">pdir</span> =</span> (<span class="hljs-keyword">struct</span> dir*)sys_malloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> dir));<br>   pdir-&gt;inode = inode_open(part, inode_no);<br>   pdir-&gt;dir_pos = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">return</span> pdir;<br>&#125;<br><br><span class="hljs-comment">/* 在part分区内的pdir目录内寻找名为name的文件或目录,</span><br><span class="hljs-comment"> * 找到后返回true并将其目录项存入dir_e,否则返回false */</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">search_dir_entry</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part, <span class="hljs-keyword">struct</span> dir* pdir, \</span><br><span class="hljs-params">     <span class="hljs-type">const</span> <span class="hljs-type">char</span>* name, <span class="hljs-keyword">struct</span> dir_entry* dir_e)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> block_cnt = <span class="hljs-number">140</span>; <span class="hljs-comment">// 12个直接块+128个一级间接块=140块</span><br><br>   <span class="hljs-comment">/* 12个直接块大小+128个间接块,共560字节 */</span><br>   <span class="hljs-type">uint32_t</span>* all_blocks = (<span class="hljs-type">uint32_t</span>*)sys_malloc(<span class="hljs-number">48</span> + <span class="hljs-number">512</span>);<br>   <span class="hljs-keyword">if</span> (all_blocks == <span class="hljs-literal">NULL</span>) &#123;<br>      printk(<span class="hljs-string">&quot;search_dir_entry: sys_malloc for all_blocks failed&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br><br>   <span class="hljs-type">uint32_t</span> block_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (block_idx &lt; <span class="hljs-number">12</span>) &#123;<br>      all_blocks[block_idx] = pdir-&gt;inode-&gt;i_sectors[block_idx];<br>      block_idx++;<br>   &#125;<br>   block_idx = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-keyword">if</span> (pdir-&gt;inode-&gt;i_sectors[<span class="hljs-number">12</span>] != <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 若含有一级间接块表</span><br>      ide_read(part-&gt;my_disk, pdir-&gt;inode-&gt;i_sectors[<span class="hljs-number">12</span>], all_blocks + <span class="hljs-number">12</span>, <span class="hljs-number">1</span>);<br>   &#125;<br><span class="hljs-comment">/* 至此,all_blocks存储的是该文件或目录的所有扇区地址 */</span><br><br>   <span class="hljs-comment">/* 写目录项的时候已保证目录项不跨扇区,</span><br><span class="hljs-comment">    * 这样读目录项时容易处理, 只申请容纳1个扇区的内存 */</span><br>   <span class="hljs-type">uint8_t</span>* buf = (<span class="hljs-type">uint8_t</span>*)sys_malloc(SECTOR_SIZE);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">p_de</span> =</span> (<span class="hljs-keyword">struct</span> dir_entry*)buf;    <span class="hljs-comment">// p_de为指向目录项的指针,值为buf起始地址</span><br>   <span class="hljs-type">uint32_t</span> dir_entry_size = part-&gt;sb-&gt;dir_entry_size;<br>   <span class="hljs-type">uint32_t</span> dir_entry_cnt = SECTOR_SIZE / dir_entry_size;   <span class="hljs-comment">// 1扇区内可容纳的目录项个数</span><br><br>   <span class="hljs-comment">/* 开始在所有块中查找目录项 */</span><br>   <span class="hljs-keyword">while</span> (block_idx &lt; block_cnt) &#123;  <br>   <span class="hljs-comment">/* 块地址为0时表示该块中无数据,继续在其它块中找 */</span><br>      <span class="hljs-keyword">if</span> (all_blocks[block_idx] == <span class="hljs-number">0</span>) &#123;<br> block_idx++;<br> <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      ide_read(part-&gt;my_disk, all_blocks[block_idx], buf, <span class="hljs-number">1</span>);<br><br>      <span class="hljs-type">uint32_t</span> dir_entry_idx = <span class="hljs-number">0</span>;<br>      <span class="hljs-comment">/* 遍历扇区中所有目录项 */</span><br>      <span class="hljs-keyword">while</span> (dir_entry_idx &lt; dir_entry_cnt) &#123;<br> <span class="hljs-comment">/* 若找到了,就直接复制整个目录项 */</span><br> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(p_de-&gt;filename, name)) &#123;<br>    <span class="hljs-built_in">memcpy</span>(dir_e, p_de, dir_entry_size);<br>    sys_free(buf);<br>    sys_free(all_blocks);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> &#125;<br> dir_entry_idx++;<br> p_de++;<br>      &#125;<br>      block_idx++;<br>      p_de = (<span class="hljs-keyword">struct</span> dir_entry*)buf;  <span class="hljs-comment">// 此时p_de已经指向扇区内最后一个完整目录项了,需要恢复p_de指向为buf</span><br>      <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, SECTOR_SIZE);  <span class="hljs-comment">// 将buf清0,下次再用</span><br>   &#125;<br>   sys_free(buf);<br>   sys_free(all_blocks);<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">/* 关闭目录 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">dir_close</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* dir)</span> &#123;<br><span class="hljs-comment">/*************      根目录不能关闭     ***************</span><br><span class="hljs-comment"> *1 根目录自打开后就不应该关闭,否则还需要再次open_root_dir();</span><br><span class="hljs-comment"> *2 root_dir所在的内存是低端1M之内,并非在堆中,free会出问题 */</span><br>   <span class="hljs-keyword">if</span> (dir == &amp;root_dir) &#123;<br>   <span class="hljs-comment">/* 不做任何处理直接返回*/</span><br>      <span class="hljs-keyword">return</span>;<br>   &#125;<br>   inode_close(dir-&gt;inode);<br>   sys_free(dir);<br>&#125;<br><br><span class="hljs-comment">/* 在内存中初始化目录项p_de */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_dir_entry</span><span class="hljs-params">(<span class="hljs-type">char</span>* filename, <span class="hljs-type">uint32_t</span> inode_no, <span class="hljs-type">uint8_t</span> file_type, <span class="hljs-keyword">struct</span> dir_entry* p_de)</span> &#123;<br>   ASSERT(<span class="hljs-built_in">strlen</span>(filename) &lt;=  MAX_FILE_NAME_LEN);<br><br>   <span class="hljs-comment">/* 初始化目录项 */</span><br>   <span class="hljs-built_in">memcpy</span>(p_de-&gt;filename, filename, <span class="hljs-built_in">strlen</span>(filename));<br>   p_de-&gt;i_no = inode_no;<br>   p_de-&gt;f_type = file_type;<br>&#125;<br><br><span class="hljs-comment">/* 将目录项p_de写入父目录parent_dir中,io_buf由主调函数提供 */</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">sync_dir_entry</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* parent_dir, <span class="hljs-keyword">struct</span> dir_entry* p_de, <span class="hljs-type">void</span>* io_buf)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">dir_inode</span> =</span> parent_dir-&gt;inode;<br>   <span class="hljs-type">uint32_t</span> dir_size = dir_inode-&gt;i_size;<br>   <span class="hljs-type">uint32_t</span> dir_entry_size = cur_part-&gt;sb-&gt;dir_entry_size;<br><br>   ASSERT(dir_size % dir_entry_size == <span class="hljs-number">0</span>); <span class="hljs-comment">// dir_size应该是dir_entry_size的整数倍</span><br><br>   <span class="hljs-type">uint32_t</span> dir_entrys_per_sec = (<span class="hljs-number">512</span> / dir_entry_size);       <span class="hljs-comment">// 每扇区最大的目录项数目</span><br>   <span class="hljs-type">int32_t</span> block_lba = <span class="hljs-number">-1</span>;<br><br>   <span class="hljs-comment">/* 将该目录的所有扇区地址(12个直接块+ 128个间接块)存入all_blocks */</span><br>   <span class="hljs-type">uint8_t</span> block_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">uint32_t</span> all_blocks[<span class="hljs-number">140</span>] = &#123;<span class="hljs-number">0</span>&#125;;  <span class="hljs-comment">// all_blocks保存目录所有的块</span><br><br>   <span class="hljs-comment">/* 将12个直接块存入all_blocks */</span><br>   <span class="hljs-keyword">while</span> (block_idx &lt; <span class="hljs-number">12</span>) &#123;<br>      all_blocks[block_idx] = dir_inode-&gt;i_sectors[block_idx];<br>      block_idx++;<br>   &#125;<br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">dir_e</span> =</span> (<span class="hljs-keyword">struct</span> dir_entry*)io_buf;       <span class="hljs-comment">// dir_e用来在io_buf中遍历目录项</span><br>   <span class="hljs-type">int32_t</span> block_bitmap_idx = <span class="hljs-number">-1</span>;<br><br>   <span class="hljs-comment">/* 开始遍历所有块以寻找目录项空位,若已有扇区中没有空闲位,</span><br><span class="hljs-comment">    * 在不超过文件大小的情况下申请新扇区来存储新目录项 */</span><br>   block_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (block_idx &lt; <span class="hljs-number">140</span>) &#123;  <span class="hljs-comment">// 文件(包括目录)最大支持12个直接块+128个间接块＝140个块</span><br>      block_bitmap_idx = <span class="hljs-number">-1</span>;<br>      <span class="hljs-keyword">if</span> (all_blocks[block_idx] == <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">// 在三种情况下分配块</span><br> block_lba = block_bitmap_alloc(cur_part);<br> <span class="hljs-keyword">if</span> (block_lba == <span class="hljs-number">-1</span>) &#123;<br>    printk(<span class="hljs-string">&quot;alloc block bitmap for sync_dir_entry failed\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> &#125;<br><br>      <span class="hljs-comment">/* 每分配一个块就同步一次block_bitmap */</span><br> block_bitmap_idx = block_lba - cur_part-&gt;sb-&gt;data_start_lba;<br> ASSERT(block_bitmap_idx != <span class="hljs-number">-1</span>);<br> bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);<br><br> block_bitmap_idx = <span class="hljs-number">-1</span>;<br> <span class="hljs-keyword">if</span> (block_idx &lt; <span class="hljs-number">12</span>) &#123;    <span class="hljs-comment">// 若是直接块</span><br>    dir_inode-&gt;i_sectors[block_idx] = all_blocks[block_idx] = block_lba;<br> &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (block_idx == <span class="hljs-number">12</span>) &#123;  <span class="hljs-comment">// 若是尚未分配一级间接块表(block_idx等于12表示第0个间接块地址为0)</span><br>    dir_inode-&gt;i_sectors[<span class="hljs-number">12</span>] = block_lba;       <span class="hljs-comment">// 将上面分配的块做为一级间接块表地址</span><br>    block_lba = <span class="hljs-number">-1</span>;<br>    block_lba = block_bitmap_alloc(cur_part);       <span class="hljs-comment">// 再分配一个块做为第0个间接块</span><br>    <span class="hljs-keyword">if</span> (block_lba == <span class="hljs-number">-1</span>) &#123;<br>       block_bitmap_idx = dir_inode-&gt;i_sectors[<span class="hljs-number">12</span>] - cur_part-&gt;sb-&gt;data_start_lba;<br>       bitmap_set(&amp;cur_part-&gt;block_bitmap, block_bitmap_idx, <span class="hljs-number">0</span>);<br>       dir_inode-&gt;i_sectors[<span class="hljs-number">12</span>] = <span class="hljs-number">0</span>;<br>       printk(<span class="hljs-string">&quot;alloc block bitmap for sync_dir_entry failed\n&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br> <span class="hljs-comment">/* 每分配一个块就同步一次block_bitmap */</span><br>    block_bitmap_idx = block_lba - cur_part-&gt;sb-&gt;data_start_lba;<br>    ASSERT(block_bitmap_idx != <span class="hljs-number">-1</span>);<br>    bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);<br><br>    all_blocks[<span class="hljs-number">12</span>] = block_lba;<br>    <span class="hljs-comment">/* 把新分配的第0个间接块地址写入一级间接块表 */</span><br>    ide_write(cur_part-&gt;my_disk, dir_inode-&gt;i_sectors[<span class="hljs-number">12</span>], all_blocks + <span class="hljs-number">12</span>, <span class="hljs-number">1</span>);<br> &#125; <span class="hljs-keyword">else</span> &#123;   <span class="hljs-comment">// 若是间接块未分配</span><br>    all_blocks[block_idx] = block_lba;<br>    <span class="hljs-comment">/* 把新分配的第(block_idx-12)个间接块地址写入一级间接块表 */</span><br>    ide_write(cur_part-&gt;my_disk, dir_inode-&gt;i_sectors[<span class="hljs-number">12</span>], all_blocks + <span class="hljs-number">12</span>, <span class="hljs-number">1</span>);<br> &#125;<br><br> <span class="hljs-comment">/* 再将新目录项p_de写入新分配的间接块 */</span><br> <span class="hljs-built_in">memset</span>(io_buf, <span class="hljs-number">0</span>, <span class="hljs-number">512</span>);<br> <span class="hljs-built_in">memcpy</span>(io_buf, p_de, dir_entry_size);<br> ide_write(cur_part-&gt;my_disk, all_blocks[block_idx], io_buf, <span class="hljs-number">1</span>);<br> dir_inode-&gt;i_size += dir_entry_size;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br><br>   <span class="hljs-comment">/* 若第block_idx块已存在,将其读进内存,然后在该块中查找空目录项 */</span><br>      ide_read(cur_part-&gt;my_disk, all_blocks[block_idx], io_buf, <span class="hljs-number">1</span>); <br>      <span class="hljs-comment">/* 在扇区内查找空目录项 */</span><br>      <span class="hljs-type">uint8_t</span> dir_entry_idx = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> (dir_entry_idx &lt; dir_entrys_per_sec) &#123;<br> <span class="hljs-keyword">if</span> ((dir_e + dir_entry_idx)-&gt;f_type == FT_UNKNOWN) &#123;<span class="hljs-comment">// FT_UNKNOWN为0,无论是初始化或是删除文件后,都会将f_type置为FT_UNKNOWN.</span><br>    <span class="hljs-built_in">memcpy</span>(dir_e + dir_entry_idx, p_de, dir_entry_size);    <br>    ide_write(cur_part-&gt;my_disk, all_blocks[block_idx], io_buf, <span class="hljs-number">1</span>);<br><br>    dir_inode-&gt;i_size += dir_entry_size;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> &#125;<br> dir_entry_idx++;<br>      &#125;<br>      block_idx++;<br>   &#125;   <br>   printk(<span class="hljs-string">&quot;directory is full!\n&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建文件"><a class="markdownIt-Anchor" href="#创建文件"></a> 创建文件</h2><h3 id="fsfilec修改"><a class="markdownIt-Anchor" href="#fsfilec修改"></a> fs/file.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;file.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;super_block.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;inode.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ioqueue.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEFAULT_SECS 1</span><br><br><span class="hljs-comment">/* 文件表 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> <span class="hljs-title">file_table</span>[<span class="hljs-title">MAX_FILE_OPEN</span>];</span><br><br><span class="hljs-comment">/* 从文件表file_table中获取一个空闲位,成功返回下标,失败返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">get_free_slot_in_global</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> fd_idx = <span class="hljs-number">3</span>;<br>   <span class="hljs-keyword">while</span> (fd_idx &lt; MAX_FILE_OPEN) &#123;<br>      <span class="hljs-keyword">if</span> (file_table[fd_idx].fd_inode == <span class="hljs-literal">NULL</span>) &#123;<br> <span class="hljs-keyword">break</span>;<br>      &#125;<br>      fd_idx++;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (fd_idx == MAX_FILE_OPEN) &#123;<br>      printk(<span class="hljs-string">&quot;exceed max open files\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> fd_idx;<br>&#125;<br><br><span class="hljs-comment">/* 将全局描述符下标安装到进程或线程自己的文件描述符数组fd_table中,</span><br><span class="hljs-comment"> * 成功返回下标,失败返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">pcb_fd_install</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> globa_fd_idx)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();<br>   <span class="hljs-type">uint8_t</span> local_fd_idx = <span class="hljs-number">3</span>; <span class="hljs-comment">// 跨过stdin,stdout,stderr</span><br>   <span class="hljs-keyword">while</span> (local_fd_idx &lt; MAX_FILES_OPEN_PER_PROC) &#123;<br>      <span class="hljs-keyword">if</span> (cur-&gt;fd_table[local_fd_idx] == <span class="hljs-number">-1</span>) &#123;<span class="hljs-comment">// -1表示free_slot,可用</span><br> cur-&gt;fd_table[local_fd_idx] = globa_fd_idx;<br> <span class="hljs-keyword">break</span>;<br>      &#125;<br>      local_fd_idx++;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (local_fd_idx == MAX_FILES_OPEN_PER_PROC) &#123;<br>      printk(<span class="hljs-string">&quot;exceed max open files_per_proc\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> local_fd_idx;<br>&#125;<br><br><span class="hljs-comment">/* 分配一个i结点,返回i结点号 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">inode_bitmap_alloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part)</span> &#123;<br>   <span class="hljs-type">int32_t</span> bit_idx = bitmap_scan(&amp;part-&gt;inode_bitmap, <span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">if</span> (bit_idx == <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   bitmap_set(&amp;part-&gt;inode_bitmap, bit_idx, <span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> bit_idx;<br>&#125;<br>   <br><span class="hljs-comment">/* 分配1个扇区,返回其扇区地址 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">block_bitmap_alloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part)</span> &#123;<br>   <span class="hljs-type">int32_t</span> bit_idx = bitmap_scan(&amp;part-&gt;block_bitmap, <span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">if</span> (bit_idx == <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   bitmap_set(&amp;part-&gt;block_bitmap, bit_idx, <span class="hljs-number">1</span>);<br>   <span class="hljs-comment">/* 和inode_bitmap_malloc不同,此处返回的不是位图索引,而是具体可用的扇区地址 */</span><br>   <span class="hljs-keyword">return</span> (part-&gt;sb-&gt;data_start_lba + bit_idx);<br>&#125; <br><br><span class="hljs-comment">/* 将内存中bitmap第bit_idx位所在的512字节同步到硬盘 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bitmap_sync</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part, <span class="hljs-type">uint32_t</span> bit_idx, <span class="hljs-type">uint8_t</span> btmp_type)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> off_sec = bit_idx / <span class="hljs-number">4096</span>;  <span class="hljs-comment">// 本i结点索引相对于位图的扇区偏移量</span><br>   <span class="hljs-type">uint32_t</span> off_size = off_sec * BLOCK_SIZE;  <span class="hljs-comment">// 本i结点索引相对于位图的字节偏移量</span><br>   <span class="hljs-type">uint32_t</span> sec_lba;<br>   <span class="hljs-type">uint8_t</span>* bitmap_off;<br><br><span class="hljs-comment">/* 需要被同步到硬盘的位图只有inode_bitmap和block_bitmap */</span><br>   <span class="hljs-keyword">switch</span> (btmp_type) &#123;<br>      <span class="hljs-keyword">case</span> INODE_BITMAP:<br> sec_lba = part-&gt;sb-&gt;inode_bitmap_lba + off_sec;<br> bitmap_off = part-&gt;inode_bitmap.bits + off_size;<br> <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> BLOCK_BITMAP: <br> sec_lba = part-&gt;sb-&gt;block_bitmap_lba + off_sec;<br> bitmap_off = part-&gt;block_bitmap.bits + off_size;<br> <span class="hljs-keyword">break</span>;<br>   &#125;<br>   ide_write(part-&gt;my_disk, sec_lba, bitmap_off, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">/* 创建文件,若成功则返回文件描述符,否则返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">file_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dir* parent_dir, <span class="hljs-type">char</span>* filename, <span class="hljs-type">uint8_t</span> flag)</span> &#123;<br>   <span class="hljs-comment">/* 后续操作的公共缓冲区 */</span><br>   <span class="hljs-type">void</span>* io_buf = sys_malloc(<span class="hljs-number">1024</span>);<br>   <span class="hljs-keyword">if</span> (io_buf == <span class="hljs-literal">NULL</span>) &#123;<br>      printk(<span class="hljs-string">&quot;in file_creat: sys_malloc for io_buf failed\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-type">uint8_t</span> rollback_step = <span class="hljs-number">0</span>;       <span class="hljs-comment">// 用于操作失败时回滚各资源状态</span><br><br>   <span class="hljs-comment">/* 为新文件分配inode */</span><br>   <span class="hljs-type">int32_t</span> inode_no = inode_bitmap_alloc(cur_part); <br>   <span class="hljs-keyword">if</span> (inode_no == <span class="hljs-number">-1</span>) &#123;<br>      printk(<span class="hljs-string">&quot;in file_creat: allocate inode failed\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br><span class="hljs-comment">/* 此inode要从堆中申请内存,不可生成局部变量(函数退出时会释放)</span><br><span class="hljs-comment"> * 因为file_table数组中的文件描述符的inode指针要指向它.*/</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">new_file_inode</span> =</span> (<span class="hljs-keyword">struct</span> inode*)sys_malloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> inode)); <br>   <span class="hljs-keyword">if</span> (new_file_inode == <span class="hljs-literal">NULL</span>) &#123;<br>      printk(<span class="hljs-string">&quot;file_create: sys_malloc for inode failded\n&quot;</span>);<br>      rollback_step = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">goto</span> rollback;<br>   &#125;<br>   inode_init(inode_no, new_file_inode);    <span class="hljs-comment">// 初始化i结点</span><br><br>   <span class="hljs-comment">/* 返回的是file_table数组的下标 */</span><br>   <span class="hljs-type">int</span> fd_idx = get_free_slot_in_global();<br>   <span class="hljs-keyword">if</span> (fd_idx == <span class="hljs-number">-1</span>) &#123;<br>      printk(<span class="hljs-string">&quot;exceed max open files\n&quot;</span>);<br>      rollback_step = <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">goto</span> rollback;<br>   &#125;<br><br>   file_table[fd_idx].fd_inode = new_file_inode;<br>   file_table[fd_idx].fd_pos = <span class="hljs-number">0</span>;<br>   file_table[fd_idx].fd_flag = flag;<br>   file_table[fd_idx].fd_inode-&gt;write_deny = <span class="hljs-literal">false</span>;<br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span> <span class="hljs-title">new_dir_entry</span>;</span><br>   <span class="hljs-built_in">memset</span>(&amp;new_dir_entry, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> dir_entry));<br><br>   create_dir_entry(filename, inode_no, FT_REGULAR, &amp;new_dir_entry);<span class="hljs-comment">// create_dir_entry只是内存操作不出意外,不会返回失败</span><br><br><span class="hljs-comment">/* 同步内存数据到硬盘 */</span><br>   <span class="hljs-comment">/* a 在目录parent_dir下安装目录项new_dir_entry, 写入硬盘后返回true,否则false */</span><br>   <span class="hljs-keyword">if</span> (!sync_dir_entry(parent_dir, &amp;new_dir_entry, io_buf)) &#123;<br>      printk(<span class="hljs-string">&quot;sync dir_entry to disk failed\n&quot;</span>);<br>      rollback_step = <span class="hljs-number">3</span>;<br>      <span class="hljs-keyword">goto</span> rollback;<br>   &#125;<br><br>   <span class="hljs-built_in">memset</span>(io_buf, <span class="hljs-number">0</span>, <span class="hljs-number">1024</span>);<br>   <span class="hljs-comment">/* b 将父目录i结点的内容同步到硬盘 */</span><br>   inode_sync(cur_part, parent_dir-&gt;inode, io_buf);<br><br>   <span class="hljs-built_in">memset</span>(io_buf, <span class="hljs-number">0</span>, <span class="hljs-number">1024</span>);<br>   <span class="hljs-comment">/* c 将新创建文件的i结点内容同步到硬盘 */</span><br>   inode_sync(cur_part, new_file_inode, io_buf);<br><br>   <span class="hljs-comment">/* d 将inode_bitmap位图同步到硬盘 */</span><br>   bitmap_sync(cur_part, inode_no, INODE_BITMAP);<br><br>   <span class="hljs-comment">/* e 将创建的文件i结点添加到open_inodes链表 */</span><br>   list_push(&amp;cur_part-&gt;open_inodes, &amp;new_file_inode-&gt;inode_tag);<br>   new_file_inode-&gt;i_open_cnts = <span class="hljs-number">1</span>;<br><br>   sys_free(io_buf);<br>   <span class="hljs-keyword">return</span> pcb_fd_install(fd_idx);<br><br><span class="hljs-comment">/*创建文件需要创建相关的多个资源,若某步失败则会执行到下面的回滚步骤 */</span><br>rollback:<br>   <span class="hljs-keyword">switch</span> (rollback_step) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br> <span class="hljs-comment">/* 失败时,将file_table中的相应位清空 */</span><br> <span class="hljs-built_in">memset</span>(&amp;file_table[fd_idx], <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> file)); <br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br> sys_free(new_file_inode);<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br> <span class="hljs-comment">/* 如果新文件的i结点创建失败,之前位图中分配的inode_no也要恢复 */</span><br> bitmap_set(&amp;cur_part-&gt;inode_bitmap, inode_no, <span class="hljs-number">0</span>);<br> <span class="hljs-keyword">break</span>;<br>   &#125;<br>   sys_free(io_buf);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fsfsc修改"><a class="markdownIt-Anchor" href="#fsfsc修改"></a> fs/fs.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ide.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;inode.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dir.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;super_block.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;file.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">cur_part</span>;</span><span class="hljs-comment">//默认操作分区</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">partition_format</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> partition* part)</span> &#123;<br><span class="hljs-comment">/* 为方便实现,一个块大小是一扇区 */</span><br>   <span class="hljs-type">uint32_t</span> boot_sector_sects = <span class="hljs-number">1</span>;  <br>   <span class="hljs-type">uint32_t</span> super_block_sects = <span class="hljs-number">1</span>;<br>   <span class="hljs-type">uint32_t</span> inode_bitmap_sects = DIV_ROUND_UP(MAX_FILES_PER_PART, BITS_PER_SECTOR);   <span class="hljs-comment">// I结点位图占用的扇区数.最多支持4096个文件</span><br>   <span class="hljs-type">uint32_t</span> inode_table_sects = DIV_ROUND_UP(((<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> inode) * MAX_FILES_PER_PART)), SECTOR_SIZE);<br>   <span class="hljs-type">uint32_t</span> used_sects = boot_sector_sects + super_block_sects + inode_bitmap_sects + inode_table_sects;<br>   <span class="hljs-type">uint32_t</span> free_sects = part-&gt;sec_cnt - used_sects;  <br><br><span class="hljs-comment">/************** 简单处理块位图占据的扇区数 ***************/</span><br>   <span class="hljs-type">uint32_t</span> block_bitmap_sects;<br>   block_bitmap_sects = DIV_ROUND_UP(free_sects, BITS_PER_SECTOR);<br>   <span class="hljs-comment">/* block_bitmap_bit_len是位图中位的长度,也是可用块的数量 */</span><br>   <span class="hljs-type">uint32_t</span> block_bitmap_bit_len = free_sects - block_bitmap_sects; <br>   block_bitmap_sects = DIV_ROUND_UP(block_bitmap_bit_len, BITS_PER_SECTOR); <br><span class="hljs-comment">/*********************************************************/</span><br>   <br>   <span class="hljs-comment">/* 超级块初始化 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span> <span class="hljs-title">sb</span>;</span><br>   sb.magic = <span class="hljs-number">0x19590318</span>;<br>   sb.sec_cnt = part-&gt;sec_cnt;<br>   sb.inode_cnt = MAX_FILES_PER_PART;<br>   sb.part_lba_base = part-&gt;start_lba;<br><br>   sb.block_bitmap_lba = sb.part_lba_base + <span class="hljs-number">2</span>; <span class="hljs-comment">// 第0块是引导块,第1块是超级块</span><br>   sb.block_bitmap_sects = block_bitmap_sects;<br><br>   sb.inode_bitmap_lba = sb.block_bitmap_lba + sb.block_bitmap_sects;<br>   sb.inode_bitmap_sects = inode_bitmap_sects;<br><br>   sb.inode_table_lba = sb.inode_bitmap_lba + sb.inode_bitmap_sects;<br>   sb.inode_table_sects = inode_table_sects; <br><br>   sb.data_start_lba = sb.inode_table_lba + sb.inode_table_sects;<br>   sb.root_inode_no = <span class="hljs-number">0</span>;<br>   sb.dir_entry_size = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> dir_entry);<br><br>   printk(<span class="hljs-string">&quot;%s info:\n&quot;</span>, part-&gt;name);<br>   printk(<span class="hljs-string">&quot;   magic:0x%x\n   part_lba_base:0x%x\n   all_sectors:0x%x\n   inode_cnt:0x%x\n   block_bitmap_lba:0x%x\n   block_bitmap_sectors:0x%x\n   inode_bitmap_lba:0x%x\n   inode_bitmap_sectors:0x%x\n   inode_table_lba:0x%x\n   inode_table_sectors:0x%x\n   data_start_lba:0x%x\n&quot;</span>, sb.magic, sb.part_lba_base, sb.sec_cnt, sb.inode_cnt, sb.block_bitmap_lba, sb.block_bitmap_sects, sb.inode_bitmap_lba, sb.inode_bitmap_sects, sb.inode_table_lba, sb.inode_table_sects, sb.data_start_lba);<br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> part-&gt;my_disk;<br><span class="hljs-comment">/*******************************</span><br><span class="hljs-comment"> * 1 将超级块写入本分区的1扇区 *</span><br><span class="hljs-comment"> ******************************/</span><br>   ide_write(hd, part-&gt;start_lba + <span class="hljs-number">1</span>, &amp;sb, <span class="hljs-number">1</span>);<br>   printk(<span class="hljs-string">&quot;   super_block_lba:0x%x\n&quot;</span>, part-&gt;start_lba + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">/* 找出数据量最大的元信息,用其尺寸做存储缓冲区*/</span><br>   <span class="hljs-type">uint32_t</span> buf_size = (sb.block_bitmap_sects &gt;= sb.inode_bitmap_sects ? sb.block_bitmap_sects : sb.inode_bitmap_sects);<br>   buf_size = (buf_size &gt;= sb.inode_table_sects ? buf_size : sb.inode_table_sects) * SECTOR_SIZE;<br>   <span class="hljs-type">uint8_t</span>* buf = (<span class="hljs-type">uint8_t</span>*)sys_malloc(buf_size);<span class="hljs-comment">// 申请的内存由内存管理系统清0后返回</span><br>   <br><span class="hljs-comment">/**************************************</span><br><span class="hljs-comment"> * 2 将块位图初始化并写入sb.block_bitmap_lba *</span><br><span class="hljs-comment"> *************************************/</span><br>   <span class="hljs-comment">/* 初始化块位图block_bitmap */</span><br>   buf[<span class="hljs-number">0</span>] |= <span class="hljs-number">0x01</span>;       <span class="hljs-comment">// 第0个块预留给根目录,位图中先占位</span><br>   <span class="hljs-type">uint32_t</span> block_bitmap_last_byte = block_bitmap_bit_len / <span class="hljs-number">8</span>;<br>   <span class="hljs-type">uint8_t</span>  block_bitmap_last_bit  = block_bitmap_bit_len % <span class="hljs-number">8</span>;<br>   <span class="hljs-type">uint32_t</span> last_size = SECTOR_SIZE - (block_bitmap_last_byte % SECTOR_SIZE);     <span class="hljs-comment">// last_size是位图所在最后一个扇区中，不足一扇区的其余部分</span><br><br>   <span class="hljs-comment">/* 1 先将位图最后一字节到其所在的扇区的结束全置为1,即超出实际块数的部分直接置为已占用*/</span><br>   <span class="hljs-built_in">memset</span>(&amp;buf[block_bitmap_last_byte], <span class="hljs-number">0xff</span>, last_size);<br>   <br>   <span class="hljs-comment">/* 2 再将上一步中覆盖的最后一字节内的有效位重新置0 */</span><br>   <span class="hljs-type">uint8_t</span> bit_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (bit_idx &lt;= block_bitmap_last_bit) &#123;<br>      buf[block_bitmap_last_byte] &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; bit_idx++);<br>   &#125;<br>   ide_write(hd, sb.block_bitmap_lba, buf, sb.block_bitmap_sects);<br><br><span class="hljs-comment">/***************************************</span><br><span class="hljs-comment"> * 3 将inode位图初始化并写入sb.inode_bitmap_lba *</span><br><span class="hljs-comment"> ***************************************/</span><br>   <span class="hljs-comment">/* 先清空缓冲区*/</span><br>   <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, buf_size);<br>   buf[<span class="hljs-number">0</span>] |= <span class="hljs-number">0x1</span>;      <span class="hljs-comment">// 第0个inode分给了根目录</span><br>   <span class="hljs-comment">/* 由于inode_table中共4096个inode,位图inode_bitmap正好占用1扇区,</span><br><span class="hljs-comment">    * 即inode_bitmap_sects等于1, 所以位图中的位全都代表inode_table中的inode,</span><br><span class="hljs-comment">    * 无须再像block_bitmap那样单独处理最后一扇区的剩余部分,</span><br><span class="hljs-comment">    * inode_bitmap所在的扇区中没有多余的无效位 */</span><br>   ide_write(hd, sb.inode_bitmap_lba, buf, sb.inode_bitmap_sects);<br><br><span class="hljs-comment">/***************************************</span><br><span class="hljs-comment"> * 4 将inode数组初始化并写入sb.inode_table_lba *</span><br><span class="hljs-comment"> ***************************************/</span><br> <span class="hljs-comment">/* 准备写inode_table中的第0项,即根目录所在的inode */</span><br>   <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, buf_size);  <span class="hljs-comment">// 先清空缓冲区buf</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>* <span class="hljs-title">i</span> =</span> (<span class="hljs-keyword">struct</span> inode*)buf; <br>   i-&gt;i_size = sb.dir_entry_size * <span class="hljs-number">2</span>; <span class="hljs-comment">// .和..</span><br>   i-&gt;i_no = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 根目录占inode数组中第0个inode</span><br>   i-&gt;i_sectors[<span class="hljs-number">0</span>] = sb.data_start_lba;     <span class="hljs-comment">// 由于上面的memset,i_sectors数组的其它元素都初始化为0 </span><br>   ide_write(hd, sb.inode_table_lba, buf, sb.inode_table_sects);<br>   <br><span class="hljs-comment">/***************************************</span><br><span class="hljs-comment"> * 5 将根目录初始化并写入sb.data_start_lba</span><br><span class="hljs-comment"> ***************************************/</span><br>   <span class="hljs-comment">/* 写入根目录的两个目录项.和.. */</span><br>   <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, buf_size);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span>* <span class="hljs-title">p_de</span> =</span> (<span class="hljs-keyword">struct</span> dir_entry*)buf;<br><br>   <span class="hljs-comment">/* 初始化当前目录&quot;.&quot; */</span><br>   <span class="hljs-built_in">memcpy</span>(p_de-&gt;filename, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-number">1</span>);<br>   p_de-&gt;i_no = <span class="hljs-number">0</span>;<br>   p_de-&gt;f_type = FT_DIRECTORY;<br>   p_de++;<br><br>   <span class="hljs-comment">/* 初始化当前目录父目录&quot;..&quot; */</span><br>   <span class="hljs-built_in">memcpy</span>(p_de-&gt;filename, <span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-number">2</span>);<br>   p_de-&gt;i_no = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 根目录的父目录依然是根目录自己</span><br>   p_de-&gt;f_type = FT_DIRECTORY;<br><br>   <span class="hljs-comment">/* sb.data_start_lba已经分配给了根目录,里面是根目录的目录项 */</span><br>   ide_write(hd, sb.data_start_lba, buf, <span class="hljs-number">1</span>);<br><br>   printk(<span class="hljs-string">&quot;   root_dir_lba:0x%x\n&quot;</span>, sb.data_start_lba);<br>   printk(<span class="hljs-string">&quot;%s format done\n&quot;</span>, part-&gt;name);<br>   sys_free(buf);<br>&#125;<br><br><span class="hljs-comment">//除了挂载 还需要在内存中把超级块指针 块位图 i结点位图 i结点指针给初始化赋值了 方便使用</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">mount_partition</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* pelem, <span class="hljs-type">int</span> arg)</span> &#123;<br>   <span class="hljs-type">char</span>* part_name = (<span class="hljs-type">char</span>*)arg;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">part</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> partition, part_tag, pelem);<br>   <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(part-&gt;name, part_name)) &#123;<br>      cur_part = part;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> cur_part-&gt;my_disk;<br><br>      <span class="hljs-comment">/* sb_buf用来存储从硬盘上读入的超级块 */</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span>* <span class="hljs-title">sb_buf</span> =</span> (<span class="hljs-keyword">struct</span> super_block*)sys_malloc(SECTOR_SIZE);<br><br>      <span class="hljs-comment">/* 在内存中创建分区cur_part的超级块 */</span><br>      cur_part-&gt;sb = (<span class="hljs-keyword">struct</span> super_block*)sys_malloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> super_block));<br>      <span class="hljs-keyword">if</span> (cur_part-&gt;sb == <span class="hljs-literal">NULL</span>) &#123;<br> PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-comment">/* 读入超级块 */</span><br>      <span class="hljs-built_in">memset</span>(sb_buf, <span class="hljs-number">0</span>, SECTOR_SIZE);<br>      ide_read(hd, cur_part-&gt;start_lba + <span class="hljs-number">1</span>, sb_buf, <span class="hljs-number">1</span>);   <br><br>      <span class="hljs-comment">/* 把sb_buf中超级块的信息复制到分区的超级块sb中。*/</span><br>      <span class="hljs-built_in">memcpy</span>(cur_part-&gt;sb, sb_buf, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> super_block)); <br><br>      <span class="hljs-comment">/**********     将硬盘上的块位图读入到内存    ****************/</span><br>      cur_part-&gt;block_bitmap.bits = (<span class="hljs-type">uint8_t</span>*)sys_malloc(sb_buf-&gt;block_bitmap_sects * SECTOR_SIZE);<br>      <span class="hljs-keyword">if</span> (cur_part-&gt;block_bitmap.bits == <span class="hljs-literal">NULL</span>) &#123;<br> PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>      &#125;<br>      cur_part-&gt;block_bitmap.btmp_bytes_len = sb_buf-&gt;block_bitmap_sects * SECTOR_SIZE;<br>      <span class="hljs-comment">/* 从硬盘上读入块位图到分区的block_bitmap.bits */</span><br>      ide_read(hd, sb_buf-&gt;block_bitmap_lba, cur_part-&gt;block_bitmap.bits, sb_buf-&gt;block_bitmap_sects);   <br>      <span class="hljs-comment">/*************************************************************/</span><br><br>      <span class="hljs-comment">/**********     将硬盘上的inode位图读入到内存    ************/</span><br>      cur_part-&gt;inode_bitmap.bits = (<span class="hljs-type">uint8_t</span>*)sys_malloc(sb_buf-&gt;inode_bitmap_sects * SECTOR_SIZE);<br>      <span class="hljs-keyword">if</span> (cur_part-&gt;inode_bitmap.bits == <span class="hljs-literal">NULL</span>) &#123;<br> PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>      &#125;<br>      cur_part-&gt;inode_bitmap.btmp_bytes_len = sb_buf-&gt;inode_bitmap_sects * SECTOR_SIZE;<br>      <span class="hljs-comment">/* 从硬盘上读入inode位图到分区的inode_bitmap.bits */</span><br>      ide_read(hd, sb_buf-&gt;inode_bitmap_lba, cur_part-&gt;inode_bitmap.bits, sb_buf-&gt;inode_bitmap_sects);   <br>      <span class="hljs-comment">/*************************************************************/</span><br><br>      list_init(&amp;cur_part-&gt;open_inodes);<br>      printk(<span class="hljs-string">&quot;mount %s done!\n&quot;</span>, part-&gt;name);<br><br>   <span class="hljs-comment">/* 此处返回true是为了迎合主调函数list_traversal的实现,与函数本身功能无关。</span><br><span class="hljs-comment">      只有返回true时list_traversal才会停止遍历,减少了后面元素无意义的遍历.*/</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;     <span class="hljs-comment">// 使list_traversal继续遍历</span><br>&#125;<br><br><span class="hljs-comment">//文件系统初始化 磁盘上搜索 如果没有则格式化分区 并创建文件系统</span><br><span class="hljs-comment">/* 在磁盘上搜索文件系统,若没有则格式化分区创建文件系统 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">filesys_init</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">uint8_t</span> channel_no = <span class="hljs-number">0</span>, dev_no, part_idx = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">/* sb_buf用来存储从硬盘上读入的超级块 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span>* <span class="hljs-title">sb_buf</span> =</span> (<span class="hljs-keyword">struct</span> super_block*)sys_malloc(SECTOR_SIZE);<br><br>   <span class="hljs-keyword">if</span> (sb_buf == <span class="hljs-literal">NULL</span>) &#123;<br>      PANIC(<span class="hljs-string">&quot;alloc memory failed!&quot;</span>);<br>   &#125;<br>   printk(<span class="hljs-string">&quot;searching filesystem......\n&quot;</span>);<br>   <span class="hljs-keyword">while</span> (channel_no &lt; channel_cnt) &#123;<br>      dev_no = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span>(dev_no &lt; <span class="hljs-number">2</span>) &#123;<br> <span class="hljs-keyword">if</span> (dev_no == <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">// 跨过裸盘hd60M.img</span><br>    dev_no++;<br>    <span class="hljs-keyword">continue</span>;<br> &#125;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> &amp;channels[channel_no].devices[dev_no];<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">part</span> =</span> hd-&gt;prim_parts;<br> <span class="hljs-keyword">while</span>(part_idx &lt; <span class="hljs-number">12</span>) &#123;   <span class="hljs-comment">// 4个主分区+8个逻辑</span><br>    <span class="hljs-keyword">if</span> (part_idx == <span class="hljs-number">4</span>) &#123;  <span class="hljs-comment">// 开始处理逻辑分区</span><br>       part = hd-&gt;logic_parts;<br>    &#125;<br> <br> <span class="hljs-comment">/* channels数组是全局变量,默认值为0,disk属于其嵌套结构,</span><br><span class="hljs-comment">  * partition又为disk的嵌套结构,因此partition中的成员默认也为0.</span><br><span class="hljs-comment">  * 若partition未初始化,则partition中的成员仍为0. </span><br><span class="hljs-comment">  * 下面处理存在的分区. */</span><br>    <span class="hljs-keyword">if</span> (part-&gt;sec_cnt != <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 如果分区存在</span><br>       <span class="hljs-built_in">memset</span>(sb_buf, <span class="hljs-number">0</span>, SECTOR_SIZE);<br><br>       <span class="hljs-comment">/* 读出分区的超级块,根据魔数是否正确来判断是否存在文件系统 */</span><br>       ide_read(hd, part-&gt;start_lba + <span class="hljs-number">1</span>, sb_buf, <span class="hljs-number">1</span>);   <br><br>       <span class="hljs-comment">/* 只支持自己的文件系统.若磁盘上已经有文件系统就不再格式化了 */</span><br>       <span class="hljs-keyword">if</span> (sb_buf-&gt;magic == <span class="hljs-number">0x19590318</span>) &#123;<br>  printk(<span class="hljs-string">&quot;%s has filesystem\n&quot;</span>, part-&gt;name);<br>       &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 其它文件系统不支持,一律按无文件系统处理</span><br>  printk(<span class="hljs-string">&quot;formatting %s`s partition %s......\n&quot;</span>, hd-&gt;name, part-&gt;name);<br>  partition_format(part);<br>       &#125;<br>    &#125;<br>    part_idx++;<br>    part++;<span class="hljs-comment">// 下一分区</span><br> &#125;<br> dev_no++;<span class="hljs-comment">// 下一磁盘</span><br>      &#125;<br>      channel_no++;<span class="hljs-comment">// 下一通道</span><br>   &#125;<br>   sys_free(sb_buf);<br>   <span class="hljs-comment">/* 确定默认操作的分区 */</span><br>   <span class="hljs-type">char</span> default_part[<span class="hljs-number">8</span>] = <span class="hljs-string">&quot;sdb1&quot;</span>;<br>   <span class="hljs-comment">/* 挂载分区 */</span><br>   list_traversal(&amp;partition_list, mount_partition, (<span class="hljs-type">int</span>)default_part);<br>   <span class="hljs-comment">/* 将当前分区的根目录打开 */</span><br>   open_root_dir(cur_part);<br><br>   <span class="hljs-comment">/* 初始化文件表 */</span><br>   <span class="hljs-type">uint32_t</span> fd_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (fd_idx &lt; MAX_FILE_OPEN) &#123;<br>      file_table[fd_idx++].fd_inode = <span class="hljs-literal">NULL</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/* 将最上层路径名称解析出来 */</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">path_parse</span><span class="hljs-params">(<span class="hljs-type">char</span>* pathname, <span class="hljs-type">char</span>* name_store)</span> &#123;<br>   <span class="hljs-keyword">if</span> (pathname[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;   <span class="hljs-comment">// 根目录不需要单独解析</span><br>    <span class="hljs-comment">/* 路径中出现1个或多个连续的字符&#x27;/&#x27;,将这些&#x27;/&#x27;跳过,如&quot;///a/b&quot; */</span><br>       <span class="hljs-keyword">while</span>(*(++pathname) == <span class="hljs-string">&#x27;/&#x27;</span>);<br>   &#125;<br><br>   <span class="hljs-comment">/* 开始一般的路径解析 */</span><br>   <span class="hljs-keyword">while</span> (*pathname != <span class="hljs-string">&#x27;/&#x27;</span> &amp;&amp; *pathname != <span class="hljs-number">0</span>) &#123;<br>      *name_store++ = *pathname++;<br>   &#125;<br><br>   <span class="hljs-keyword">if</span> (pathname[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">// 若路径字符串为空则返回NULL</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> pathname; <br>&#125;<br><br><span class="hljs-comment">/* 返回路径深度,比如/a/b/c,深度为3 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">path_depth_cnt</span><span class="hljs-params">(<span class="hljs-type">char</span>* pathname)</span> &#123;<br>   ASSERT(pathname != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">char</span>* p = pathname;<br>   <span class="hljs-type">char</span> name[MAX_FILE_NAME_LEN];       <span class="hljs-comment">// 用于path_parse的参数做路径解析</span><br>   <span class="hljs-type">uint32_t</span> depth = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">/* 解析路径,从中拆分出各级名称 */</span> <br>   p = path_parse(p, name);<br>   <span class="hljs-keyword">while</span> (name[<span class="hljs-number">0</span>]) &#123;<br>      depth++;<br>      <span class="hljs-built_in">memset</span>(name, <span class="hljs-number">0</span>, MAX_FILE_NAME_LEN);<br>      <span class="hljs-keyword">if</span> (p) &#123;     <span class="hljs-comment">// 如果p不等于NULL,继续分析路径</span><br>p  = path_parse(p, name);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> depth;<br>&#125;<br><br><span class="hljs-comment">/* 搜索文件pathname,若找到则返回其inode号,否则返回-1 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search_file</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname, <span class="hljs-keyword">struct</span> path_search_record* searched_record)</span> &#123;<br>   <span class="hljs-comment">/* 如果待查找的是根目录,为避免下面无用的查找,直接返回已知根目录信息 */</span><br>   <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/.&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/..&quot;</span>)) &#123;<br>      searched_record-&gt;parent_dir = &amp;root_dir;<br>      searched_record-&gt;file_type = FT_DIRECTORY;<br>      searched_record-&gt;searched_path[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 搜索路径置空</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br><br>   <span class="hljs-type">uint32_t</span> path_len = <span class="hljs-built_in">strlen</span>(pathname);<br>   <span class="hljs-comment">/* 保证pathname至少是这样的路径/x且小于最大长度 */</span><br>   ASSERT(pathname[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span> &amp;&amp; path_len &gt; <span class="hljs-number">1</span> &amp;&amp; path_len &lt; MAX_PATH_LEN);<br>   <span class="hljs-type">char</span>* sub_path = (<span class="hljs-type">char</span>*)pathname;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir</span>* <span class="hljs-title">parent_dir</span> =</span> &amp;root_dir;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dir_entry</span> <span class="hljs-title">dir_e</span>;</span><br><br>   <span class="hljs-comment">/* 记录路径解析出来的各级名称,如路径&quot;/a/b/c&quot;,</span><br><span class="hljs-comment">    * 数组name每次的值分别是&quot;a&quot;,&quot;b&quot;,&quot;c&quot; */</span><br>   <span class="hljs-type">char</span> name[MAX_FILE_NAME_LEN] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>   searched_record-&gt;parent_dir = parent_dir;<br>   searched_record-&gt;file_type = FT_UNKNOWN;<br>   <span class="hljs-type">uint32_t</span> parent_inode_no = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 父目录的inode号</span><br>   <br>   sub_path = path_parse(sub_path, name);<br>   <span class="hljs-keyword">while</span> (name[<span class="hljs-number">0</span>]) &#123;   <span class="hljs-comment">// 若第一个字符就是结束符,结束循环</span><br>      <span class="hljs-comment">/* 记录查找过的路径,但不能超过searched_path的长度512字节 */</span><br>      ASSERT(<span class="hljs-built_in">strlen</span>(searched_record-&gt;searched_path) &lt; <span class="hljs-number">512</span>);<br><br>      <span class="hljs-comment">/* 记录已存在的父目录 */</span><br>      <span class="hljs-built_in">strcat</span>(searched_record-&gt;searched_path, <span class="hljs-string">&quot;/&quot;</span>);<br>      <span class="hljs-built_in">strcat</span>(searched_record-&gt;searched_path, name);<br><br>      <span class="hljs-comment">/* 在所给的目录中查找文件 */</span><br>      <span class="hljs-keyword">if</span> (search_dir_entry(cur_part, parent_dir, name, &amp;dir_e)) &#123;<br> <span class="hljs-built_in">memset</span>(name, <span class="hljs-number">0</span>, MAX_FILE_NAME_LEN);<br> <span class="hljs-comment">/* 若sub_path不等于NULL,也就是未结束时继续拆分路径 */</span><br> <span class="hljs-keyword">if</span> (sub_path) &#123;<br>    sub_path = path_parse(sub_path, name);<br> &#125;<br><br> <span class="hljs-keyword">if</span> (FT_DIRECTORY == dir_e.f_type) &#123;   <span class="hljs-comment">// 如果被打开的是目录</span><br>    parent_inode_no = parent_dir-&gt;inode-&gt;i_no;<br>    dir_close(parent_dir);<br>    parent_dir = dir_open(cur_part, dir_e.i_no); <span class="hljs-comment">// 更新父目录</span><br>    searched_record-&gt;parent_dir = parent_dir;<br>    <span class="hljs-keyword">continue</span>;<br> &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (FT_REGULAR == dir_e.f_type) &#123; <span class="hljs-comment">// 若是普通文件</span><br>    searched_record-&gt;file_type = FT_REGULAR;<br>    <span class="hljs-keyword">return</span> dir_e.i_no;<br> &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;   <span class="hljs-comment">//若找不到,则返回-1</span><br> <span class="hljs-comment">/* 找不到目录项时,要留着parent_dir不要关闭,</span><br><span class="hljs-comment">  * 若是创建新文件的话需要在parent_dir中创建 */</span><br> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-comment">/* 执行到此,必然是遍历了完整路径并且查找的文件或目录只有同名目录存在 */</span><br>   dir_close(searched_record-&gt;parent_dir);      <br><br>   <span class="hljs-comment">/* 保存被查找目录的直接父目录 */</span><br>   searched_record-&gt;parent_dir = dir_open(cur_part, parent_inode_no);   <br>   searched_record-&gt;file_type = FT_DIRECTORY;<br>   <span class="hljs-keyword">return</span> dir_e.i_no;<br>&#125;<br> <br><span class="hljs-comment">/* 打开或创建文件成功后,返回文件描述符,否则返回-1 */</span><br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">sys_open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pathname, <span class="hljs-type">uint8_t</span> flags)</span> &#123;<br>  <span class="hljs-comment">/* 对目录要用dir_open,这里只有open文件 */</span><br>   <span class="hljs-keyword">if</span> (pathname[<span class="hljs-built_in">strlen</span>(pathname) - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>      printk(<span class="hljs-string">&quot;can`t open a directory %s\n&quot;</span>,pathname);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   ASSERT(flags &lt;= <span class="hljs-number">7</span>);<br>   <span class="hljs-type">int32_t</span> fd = <span class="hljs-number">-1</span>;   <span class="hljs-comment">// 默认为找不到</span><br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">path_search_record</span> <span class="hljs-title">searched_record</span>;</span><br>   <span class="hljs-built_in">memset</span>(&amp;searched_record, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> path_search_record));<br><br>   <span class="hljs-comment">/* 记录目录深度.帮助判断中间某个目录不存在的情况 */</span><br>   <span class="hljs-type">uint32_t</span> pathname_depth = path_depth_cnt((<span class="hljs-type">char</span>*)pathname);<br><br>   <span class="hljs-comment">/* 先检查文件是否存在 */</span><br>   <span class="hljs-type">int</span> inode_no = search_file(pathname, &amp;searched_record);<br>   <span class="hljs-type">bool</span> found = inode_no != <span class="hljs-number">-1</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>; <br><br>   <span class="hljs-keyword">if</span> (searched_record.file_type == FT_DIRECTORY) &#123;<br>      printk(<span class="hljs-string">&quot;can`t open a direcotry with open(), use opendir() to instead\n&quot;</span>);<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-type">uint32_t</span> path_searched_depth = path_depth_cnt(searched_record.searched_path);<br><br>   <span class="hljs-comment">/* 先判断是否把pathname的各层目录都访问到了,即是否在某个中间目录就失败了 */</span><br>   <span class="hljs-keyword">if</span> (pathname_depth != path_searched_depth) &#123;   <span class="hljs-comment">// 说明并没有访问到全部的路径,某个中间目录是不存在的</span><br>      printk(<span class="hljs-string">&quot;cannot access %s: Not a directory, subpath %s is`t exist\n&quot;</span>, \<br>    pathname, searched_record.searched_path);<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-comment">/* 若是在最后一个路径上没找到,并且并不是要创建文件,直接返回-1 */</span><br>   <span class="hljs-keyword">if</span> (!found &amp;&amp; !(flags &amp; O_CREAT)) &#123;<br>      printk(<span class="hljs-string">&quot;in path %s, file %s is`t exist\n&quot;</span>, \<br>    searched_record.searched_path, \<br>    (<span class="hljs-built_in">strrchr</span>(searched_record.searched_path, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>));<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (found &amp;&amp; flags &amp; O_CREAT) &#123;  <span class="hljs-comment">// 若要创建的文件已存在</span><br>      printk(<span class="hljs-string">&quot;%s has already exist!\n&quot;</span>, pathname);<br>      dir_close(searched_record.parent_dir);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">switch</span> (flags &amp; O_CREAT) &#123;<br>      <span class="hljs-keyword">case</span> O_CREAT:<br> printk(<span class="hljs-string">&quot;creating file\n&quot;</span>);<br> fd = file_create(searched_record.parent_dir, (<span class="hljs-built_in">strrchr</span>(pathname, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>), flags);<br> dir_close(searched_record.parent_dir);<br> <span class="hljs-keyword">break</span>;<br>      <br>   &#125;<br><br>   <span class="hljs-comment">/* 此fd是指任务pcb-&gt;fd_table数组中的元素下标,</span><br><span class="hljs-comment">    * 并不是指全局file_table中的下标 */</span><br>   <span class="hljs-keyword">return</span> fd;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改"><a class="markdownIt-Anchor" href="#kernelmainc修改"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/kernel/stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../fs/file.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br>   intr_enable();<br>   sys_open(<span class="hljs-string">&quot;/file1&quot;</span>,O_CREAT);<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-2"><a class="markdownIt-Anchor" href="#运行结果-2"></a> 运行结果</h3><p><img src="/img/os/os14.3.png" alt="图为bochs运行界面" /></p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>这一章内容太过繁多，所以我计划从下一节开始另开新章，分三部分完成。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十三章 创建从盘及分区表 编写硬盘驱动程序</title>
    <link href="/2022/08/06/os(13)/"/>
    <url>/2022/08/06/os(13)/</url>
    
    <content type="html"><![CDATA[<h1 id="第十三章-创建从盘及分区表-编写硬盘驱动程序"><a class="markdownIt-Anchor" href="#第十三章-创建从盘及分区表-编写硬盘驱动程序"></a> 第十三章 创建从盘及分区表 编写硬盘驱动程序</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>本章看似只有两节，但是内容依然不少。</p><h2 id="创建从盘-磁盘分区表"><a class="markdownIt-Anchor" href="#创建从盘-磁盘分区表"></a> 创建从盘 磁盘分区表</h2><p>没什么好说的，按照书上的步骤一步一步来就行，</p><h3 id="分盘结果"><a class="markdownIt-Anchor" href="#分盘结果"></a> 分盘结果</h3><p><img src="/img/os/os13.1.png" alt="图为bochs运行界面" /></p><h3 id="bochsrcdisk修改"><a class="markdownIt-Anchor" href="#bochsrcdisk修改"></a> bochsrc.disk修改</h3><figure class="highlight routeros"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs routeros">megs : 32<br><br>romimage: <span class="hljs-attribute">file</span>=/home/podest/bochs/share/bochs/BIOS-bochs-latest<br>vgaromimage: <span class="hljs-attribute">file</span>=/home/podest/bochs/share/bochs/VGABIOS-lgpl-latest<br><br>boot: disk<br><br>log: bochs.out<br><br>mouse:<span class="hljs-attribute">enabled</span>=0<br>keyboard:<span class="hljs-attribute">keymap</span>=/home/podest/bochs/share/bochs/keymaps/x11-pc-us.map<br><br>ata0:<span class="hljs-attribute">enabled</span>=1,ioaddr1=0x1f0,ioaddr2=0x3f0,irq=14<br><span class="hljs-comment">#新加入的代码</span><br>ata0-master: <span class="hljs-attribute">type</span>=disk, <span class="hljs-attribute">path</span>=<span class="hljs-string">&quot;hd60M.img&quot;</span>, <span class="hljs-attribute">mode</span>=flat,cylinders=121,heads=16,spt=63<br>ata0-slave:  <span class="hljs-attribute">type</span>=disk, <span class="hljs-attribute">path</span>=<span class="hljs-string">&quot;hd80M.img&quot;</span>, <span class="hljs-attribute">mode</span>=flat,cylinders=162,heads=16,spt=63<br><br><span class="hljs-comment">#gdbstub:enabled=1,port=1234,text_base=0,data_base=0,bss_base=0</span><br></code></pre></td></tr></table></figure><h2 id="编写硬盘驱动程序"><a class="markdownIt-Anchor" href="#编写硬盘驱动程序"></a> 编写硬盘驱动程序</h2><h3 id="threadthreadh修改"><a class="markdownIt-Anchor" href="#threadthreadh修改"></a> thread/thread.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../kernel/memory.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK_NAME_LEN 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_FILES_OPEN_PER_PROC 8</span><br><span class="hljs-comment">/* 自定义通用函数类型,它将在很多线程函数中做为形参类型 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> <span class="hljs-title function_">thread_func</span><span class="hljs-params">(<span class="hljs-type">void</span>*)</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int16_t</span> <span class="hljs-type">pid_t</span>;<br><br><span class="hljs-comment">/* 进程或线程的状态 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> </span><br><span class="hljs-class">&#123;</span><br>   TASK_RUNNING,<br>   TASK_READY,<br>   TASK_BLOCKED,<br>   TASK_WAITING,<br>   TASK_HANGING,<br>   TASK_DIED<br>&#125;;<br><br><span class="hljs-comment">/***********   中断栈intr_stack   ***********</span><br><span class="hljs-comment"> * 此结构用于中断发生时保护程序(线程或进程)的上下文环境:</span><br><span class="hljs-comment"> * 进程或线程被外部中断或软中断打断时,会按照此结构压入上下文</span><br><span class="hljs-comment"> * 寄存器,  intr_exit中的出栈操作是此结构的逆操作</span><br><span class="hljs-comment"> * 此栈在线程自己的内核栈中位置固定,所在页的最顶端</span><br><span class="hljs-comment">********************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">intr_stack</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">uint32_t</span> vec_no; <span class="hljs-comment">// kernel.S 宏VECTOR中push %1压入的中断号</span><br>    <span class="hljs-type">uint32_t</span> edi;<br>    <span class="hljs-type">uint32_t</span> esi;<br>    <span class="hljs-type">uint32_t</span> ebp;<br>    <span class="hljs-type">uint32_t</span> esp_dummy; <span class="hljs-comment">// 虽然pushad把esp也压入,但esp是不断变化的,所以会被popad忽略</span><br>    <span class="hljs-type">uint32_t</span> ebx;<br>    <span class="hljs-type">uint32_t</span> edx;<br>    <span class="hljs-type">uint32_t</span> ecx;<br>    <span class="hljs-type">uint32_t</span> eax;<br>    <span class="hljs-type">uint32_t</span> gs;<br>    <span class="hljs-type">uint32_t</span> fs;<br>    <span class="hljs-type">uint32_t</span> es;<br>    <span class="hljs-type">uint32_t</span> ds;<br><br><span class="hljs-comment">/* 以下由cpu从低特权级进入高特权级时压入 */</span><br>    <span class="hljs-type">uint32_t</span> err_code; <span class="hljs-comment">// err_code会被压入在eip之后</span><br>    <span class="hljs-type">void</span> (*eip) (<span class="hljs-type">void</span>);<br>    <span class="hljs-type">uint32_t</span> cs;<br>    <span class="hljs-type">uint32_t</span> eflags;<br>    <span class="hljs-type">void</span>* esp;<br>    <span class="hljs-type">uint32_t</span> ss;<br>&#125;;<br><br><span class="hljs-comment">/***********  线程栈thread_stack  ***********</span><br><span class="hljs-comment"> * 线程自己的栈,用于存储线程中待执行的函数</span><br><span class="hljs-comment"> * 此结构在线程自己的内核栈中位置不固定,</span><br><span class="hljs-comment"> * 用在switch_to时保存线程环境。</span><br><span class="hljs-comment"> * 实际位置取决于实际运行情况。</span><br><span class="hljs-comment"> ******************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint32_t</span> ebp;<br>   <span class="hljs-type">uint32_t</span> ebx;<br>   <span class="hljs-type">uint32_t</span> edi;<br>   <span class="hljs-type">uint32_t</span> esi;<br><br><span class="hljs-comment">/* 线程第一次执行时,eip指向待调用的函数kernel_thread </span><br><span class="hljs-comment">其它时候,eip是指向switch_to的返回地址*/</span><br>   <span class="hljs-type">void</span> (*eip) (thread_func* func, <span class="hljs-type">void</span>* func_arg);<br><br><span class="hljs-comment">/*****   以下仅供第一次被调度上cpu时使用   ****/</span><br><br><span class="hljs-comment">/* 参数unused_ret只为占位置充数为返回地址 */</span><br>   <span class="hljs-type">void</span> (*unused_retaddr);<br>   thread_func* function;   <span class="hljs-comment">// 由Kernel_thread所调用的函数名</span><br>   <span class="hljs-type">void</span>* func_arg;    <span class="hljs-comment">// 由Kernel_thread所调用的函数所需的参数</span><br>&#125;;<br><br><span class="hljs-comment">/* 进程或线程的pcb,程序控制块 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint32_t</span>* self_kstack; <span class="hljs-comment">// 各内核线程都用自己的内核栈</span><br>   <span class="hljs-type">pid_t</span> pid;<br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> <span class="hljs-title">status</span>;</span><br>   <span class="hljs-type">char</span> name[TASK_NAME_LEN];<br>   <span class="hljs-type">uint8_t</span> priority;<br>   <span class="hljs-type">uint8_t</span> ticks;   <span class="hljs-comment">// 每次在处理器上执行的时间嘀嗒数</span><br><span class="hljs-comment">/* 此任务自上cpu运行后至今占用了多少cpu嘀嗒数,</span><br><span class="hljs-comment"> * 也就是此任务执行了多久*/</span><br>   <span class="hljs-type">uint32_t</span> elapsed_ticks;<br><span class="hljs-comment">/* general_tag的作用是用于线程在一般的队列中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">general_tag</span>;</span>    <br><span class="hljs-comment">/* all_list_tag的作用是用于线程队列thread_all_list中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">all_list_tag</span>;</span><br>   <span class="hljs-type">uint32_t</span>* pgdir;              <span class="hljs-comment">// 进程自己页表的虚拟地址</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> <span class="hljs-title">userprog_vaddr</span>;</span>   <span class="hljs-comment">// 用户进程的虚拟地址 </span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block_desc</span> <span class="hljs-title">u_block_desc</span>[<span class="hljs-title">DESC_CNT</span>];</span>   <span class="hljs-comment">// 用户进程内存块描述符</span><br>   <span class="hljs-type">uint32_t</span> stack_magic; <span class="hljs-comment">// 用这串数字做栈的边界标记,用于检测栈的溢出</span><br>&#125;;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_ready_list</span>;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_all_list</span>;</span><br><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">running_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">kernel_thread</span><span class="hljs-params">(thread_func* function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread,thread_func function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread,<span class="hljs-type">char</span>* name,<span class="hljs-type">int</span> prio)</span>;<br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name,<span class="hljs-type">int</span> prio,thread_func function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_main_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">schedule</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_block</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> task_status stat)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_unblock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> <span class="hljs-title function_">allocate_pid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_yield</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">idle</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="threadthreadc修改"><a class="markdownIt-Anchor" href="#threadthreadc修改"></a> thread/thread.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;thread.h&quot;</span>   <span class="hljs-comment">//函数声明 各种结构体</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span>   <span class="hljs-comment">//前缀</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span>   <span class="hljs-comment">//memset</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span>   <span class="hljs-comment">//不清楚</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span>   <span class="hljs-comment">//分配页需要</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/sync.h&quot;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_SIZE 4096</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">main_thread</span>;</span>    <span class="hljs-comment">// 主线程PCB</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">idle_thread</span>;</span>    <span class="hljs-comment">// idle线程</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_ready_list</span>;</span>    <span class="hljs-comment">// 就绪队列</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_all_list</span>;</span>    <span class="hljs-comment">// 所有任务队列</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">thread_tag</span>;</span><span class="hljs-comment">// 用于保存队列中的线程结点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lock</span> <span class="hljs-title">pid_lock</span>;</span><br><br><br><span class="hljs-comment">/* 获取当前线程pcb指针 */</span><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">running_thread</span><span class="hljs-params">()</span> <br>&#123;<br>   <span class="hljs-type">uint32_t</span> esp; <br><span class="hljs-keyword">asm</span> (<span class="hljs-string">&quot;mov %%esp, %0&quot;</span> : <span class="hljs-string">&quot;=g&quot;</span> (esp));<br><span class="hljs-comment">/* 取esp整数部分即pcb起始地址 */</span><br><span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> task_struct*)(esp &amp; <span class="hljs-number">0xfffff000</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 由kernel_thread去执行function(func_arg) */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">kernel_thread</span><span class="hljs-params">(thread_func* function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* 执行function前要开中断,避免后面的时钟中断被屏蔽,而无法调度其它线程 */</span><br>intr_enable();<br>function(func_arg); <br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程栈thread_stack,将待执行的函数和参数放到thread_stack中相应的位置 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, thread_func function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* 先预留中断使用栈的空间,可见thread.h中定义的结构 */</span><br>pthread-&gt;self_kstack -= <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> intr_stack);<br><br><span class="hljs-comment">/* 再留出线程栈空间,可见thread.h中定义 */</span><br>pthread-&gt;self_kstack -= <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> thread_stack);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span>* <span class="hljs-title">kthread_stack</span> =</span> (<span class="hljs-keyword">struct</span> thread_stack*)pthread-&gt;self_kstack;<br>kthread_stack-&gt;eip = kernel_thread;<br>kthread_stack-&gt;function = function;<br>kthread_stack-&gt;func_arg = func_arg;<br>kthread_stack-&gt;ebp = kthread_stack-&gt;ebx = kthread_stack-&gt;esi = kthread_stack-&gt;edi = <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程基本信息 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, <span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio)</span> <br>&#123;<br><span class="hljs-built_in">memset</span>(pthread, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*pthread));<br>   pthread-&gt;pid = allocate_pid();<br>   <span class="hljs-built_in">strcpy</span>(pthread-&gt;name, name);<br><br><span class="hljs-keyword">if</span> (pthread == main_thread) <br>&#123;<br><span class="hljs-comment">/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */</span><br>pthread-&gt;status = TASK_RUNNING;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>pthread-&gt;status = TASK_READY;<br>&#125;<br><br><span class="hljs-comment">/* self_kstack是线程自己在内核态下使用的栈顶地址 */</span><br>pthread-&gt;self_kstack = (<span class="hljs-type">uint32_t</span>*)((<span class="hljs-type">uint32_t</span>)pthread + PG_SIZE);<br>pthread-&gt;priority = prio;<br>pthread-&gt;ticks = prio;<br>pthread-&gt;elapsed_ticks = <span class="hljs-number">0</span>;<br>pthread-&gt;pgdir = <span class="hljs-literal">NULL</span>;<br>pthread-&gt;stack_magic = <span class="hljs-number">0x19870916</span>;  <span class="hljs-comment">// 自定义的魔数</span><br>&#125;<br><br><br><span class="hljs-comment">/* 创建一优先级为prio的线程,线程名为name,线程所执行的函数是function(func_arg) */</span><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio, thread_func function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">thread</span> =</span> get_kernel_pages(<span class="hljs-number">1</span>);<br>init_thread(thread, name, prio);<br>thread_create(thread, function, func_arg);<br><br><span class="hljs-comment">/* 确保之前不在队列中 */</span><br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;thread-&gt;general_tag));<br><span class="hljs-comment">/* 加入就绪线程队列 */</span><br>list_append(&amp;thread_ready_list, &amp;thread-&gt;general_tag);<br><br><span class="hljs-comment">/* 确保之前不在队列中 */</span><br>ASSERT(!elem_find(&amp;thread_all_list, &amp;thread-&gt;all_list_tag));<br><span class="hljs-comment">/* 加入全部线程队列 */</span><br>list_append(&amp;thread_all_list, &amp;thread-&gt;all_list_tag);<br><br><span class="hljs-keyword">return</span> thread;<br>&#125;<br><br><br><span class="hljs-comment">/* 将kernel中的main函数完善为主线程 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_main_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br><span class="hljs-comment">/* 因为main线程早已运行,咱们在loader.S中进入内核时的mov esp,0xc009f000,</span><br><span class="hljs-comment">就是为其预留了tcb,地址为0xc009e000,因此不需要通过get_kernel_page另分配一页*/</span><br>main_thread = running_thread();<br>init_thread(main_thread, <span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-number">31</span>);<br><br><span class="hljs-comment">/* main函数是当前线程,当前线程不在thread_ready_list中,</span><br><span class="hljs-comment"> * 所以只将其加在thread_all_list中. */</span><br>ASSERT(!elem_find(&amp;thread_all_list, &amp;main_thread-&gt;all_list_tag));<br>list_append(&amp;thread_all_list, &amp;main_thread-&gt;all_list_tag);<br>&#125;<br><br><br><span class="hljs-comment">/* 实现任务调度 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">schedule</span><span class="hljs-params">()</span> <br>&#123;<br>ASSERT(intr_get_status() == INTR_OFF);<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread(); <br><span class="hljs-keyword">if</span> (cur-&gt;status == TASK_RUNNING) <span class="hljs-comment">// 若此线程只是cpu时间片到了,将其加入到就绪队列尾</span><br>&#123; <br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;cur-&gt;general_tag));<br>list_append(&amp;thread_ready_list, &amp;cur-&gt;general_tag);<br>cur-&gt;ticks = cur-&gt;priority;     <span class="hljs-comment">// 重新将当前线程的ticks再重置为其priority;</span><br>cur-&gt;status = TASK_READY;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123; <br><span class="hljs-comment">/* 若此线程需要某事件发生后才能继续上cpu运行,</span><br><span class="hljs-comment">不需要将其加入队列,因为当前线程不在就绪队列中。*/</span><br>&#125;<br><br><span class="hljs-comment">/* 如果就绪队列中没有可运行的任务,就唤醒idle */</span><br><span class="hljs-keyword">if</span> (list_empty(&amp;thread_ready_list)) <br>&#123;<br>thread_unblock(idle_thread);<br>&#125;<br><br>ASSERT(!list_empty(&amp;thread_ready_list));<br>thread_tag = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// thread_tag清空</span><br><span class="hljs-comment">/* 将thread_ready_list队列中的第一个就绪线程弹出,准备将其调度上cpu. */</span><br>thread_tag = list_pop(&amp;thread_ready_list);   <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">next</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> task_struct, general_tag, thread_tag);<br>next-&gt;status = TASK_RUNNING;<br><br>process_activate(next);<br>switch_to(cur, next);<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程环境 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>put_str(<span class="hljs-string">&quot;thread_init start\n&quot;</span>);<br><br>list_init(&amp;thread_ready_list);<br>list_init(&amp;thread_all_list);<br>lock_init(&amp;pid_lock);<br><span class="hljs-comment">/* 将当前main函数创建为线程 */</span><br>make_main_thread();<br><span class="hljs-comment">/* 创建idle线程 */</span><br>  idle_thread = thread_start(<span class="hljs-string">&quot;idle&quot;</span>, <span class="hljs-number">10</span>, idle, <span class="hljs-literal">NULL</span>);<br>put_str(<span class="hljs-string">&quot;thread_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 当前线程将自己阻塞,标志其状态为stat. */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_block</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> task_status stat)</span> <br>&#123;<br><span class="hljs-comment">/* stat取值为TASK_BLOCKED,TASK_WAITING,TASK_HANGING,也就是只有这三种状态才不会被调度*/</span><br>ASSERT(((stat == TASK_BLOCKED) || (stat == TASK_WAITING) || (stat == TASK_HANGING)));<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur_thread</span> =</span> running_thread();<br>cur_thread-&gt;status = stat; <span class="hljs-comment">// 置其状态为stat </span><br>schedule();      <span class="hljs-comment">// 将当前线程换下处理器</span><br><span class="hljs-comment">/* 待当前线程被解除阻塞后才继续运行下面的intr_set_status */</span><br>   intr_set_status(old_status);<br>&#125;<br><br><br><span class="hljs-comment">/* 将线程pthread解除阻塞 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_unblock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread)</span> <br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>ASSERT(((pthread-&gt;status == TASK_BLOCKED) || (pthread-&gt;status == TASK_WAITING) || (pthread-&gt;status == TASK_HANGING)));<br><span class="hljs-keyword">if</span> (pthread-&gt;status != TASK_READY) <br>&#123;<br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;pthread-&gt;general_tag));<br><span class="hljs-keyword">if</span> (elem_find(&amp;thread_ready_list, &amp;pthread-&gt;general_tag)) <br>&#123;<br>PANIC(<span class="hljs-string">&quot;thread_unblock: blocked thread in ready_list\n&quot;</span>);<br>&#125;<br>list_push(&amp;thread_ready_list, &amp;pthread-&gt;general_tag);    <span class="hljs-comment">// 放到队列的最前面,使其尽快得到调度</span><br>pthread-&gt;status = TASK_READY;<br>&#125; <br>intr_set_status(old_status);<br>&#125;<br><br><br><span class="hljs-comment">/* 分配pid */</span><br><span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> <span class="hljs-title function_">allocate_pid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>   <span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> next_pid = <span class="hljs-number">0</span>;<br>   lock_acquire(&amp;pid_lock);<br>   next_pid++;<br>   lock_release(&amp;pid_lock);<br>   <span class="hljs-keyword">return</span> next_pid;<br>&#125;<br><br><br><span class="hljs-comment">/* 系统空闲时运行的线程 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">idle</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <br>&#123;<br>thread_block(TASK_BLOCKED);     <br><span class="hljs-comment">//执行hlt时必须要保证目前处在开中断的情况下</span><br><span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;sti; hlt&quot;</span> : : : <span class="hljs-string">&quot;memory&quot;</span>)</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 主动让出cpu,换其它线程运行 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_yield</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();   <br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>   ASSERT(!elem_find(&amp;thread_ready_list, &amp;cur-&gt;general_tag));<br>   list_append(&amp;thread_ready_list, &amp;cur-&gt;general_tag);<br>   cur-&gt;status = TASK_READY;<br>   schedule();<br>   intr_set_status(old_status);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelinterruptc修改"><a class="markdownIt-Anchor" href="#kernelinterruptc修改"></a> kernel/interrupt.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;io.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIC_M_CTRL 0x20       <span class="hljs-comment">// 这里用的可编程中断控制器是8259A,主片的控制端口是0x20</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIC_M_DATA 0x21       <span class="hljs-comment">// 主片的数据端口是0x21</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIC_S_CTRL 0xa0       <span class="hljs-comment">// 从片的控制端口是0xa0</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIC_S_DATA 0xa1       <span class="hljs-comment">// 从片的数据端口是0xa1</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_CNT 0x81      <span class="hljs-comment">// 目前总共支持的中断数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EFLAGS_IF   0x00000200       <span class="hljs-comment">// eflags寄存器中的if位为1</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_EFLAGS(EFLAG_VAR) asm volatile(<span class="hljs-string">&quot;pushfl; popl %0&quot;</span> : <span class="hljs-string">&quot;=g&quot;</span> (EFLAG_VAR))</span><br><br><span class="hljs-comment">/*中断门描述符结构体*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gate_desc</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint16_t</span>    func_offset_low_word;<br>   <span class="hljs-type">uint16_t</span>    selector;<br>   <span class="hljs-type">uint8_t</span>     dcount;   <span class="hljs-comment">//此项为双字计数字段，是门描述符中的第4字节。此项固定值，不用考虑</span><br>   <span class="hljs-type">uint8_t</span>     attribute;<br>   <span class="hljs-type">uint16_t</span>    func_offset_high_word;<br>&#125;;<br><br><span class="hljs-comment">// 静态函数声明,非必须</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_idt_desc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> gate_desc* p_gdesc, <span class="hljs-type">uint8_t</span> attr, intr_handler function)</span>;<br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gate_desc</span> <span class="hljs-title">idt</span>[<span class="hljs-title">IDT_DESC_CNT</span>];</span>   <span class="hljs-comment">// idt是中断描述符表,本质上就是个中断门描述符数组</span><br><br><br><span class="hljs-type">char</span>* intr_name[IDT_DESC_CNT];     <span class="hljs-comment">// 用于保存异常的名字</span><br><br><br><span class="hljs-comment">/********    定义中断处理程序数组    ********</span><br><span class="hljs-comment"> * 在kernel.S中定义的intrXXentry只是中断处理程序的入口,</span><br><span class="hljs-comment"> * 最终调用的是ide_table中的处理程序*/</span><br>intr_handler idt_table[IDT_DESC_CNT];<br><br><span class="hljs-comment">/********************************************/</span><br><span class="hljs-keyword">extern</span> intr_handler intr_entry_table[IDT_DESC_CNT];    <span class="hljs-comment">// 声明引用定义在kernel.S中的中断处理函数入口数组</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title function_">syscall_handler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><br><br><br><span class="hljs-comment">/* 初始化可编程中断控制器8259A */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">pic_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>   <span class="hljs-comment">/* 初始化主片 */</span><br>   outb (PIC_M_CTRL, <span class="hljs-number">0x11</span>);   <span class="hljs-comment">// ICW1: 边沿触发,级联8259, 需要ICW4.</span><br>   outb (PIC_M_DATA, <span class="hljs-number">0x20</span>);   <span class="hljs-comment">// ICW2: 起始中断向量号为0x20,也就是IR[0-7] 为 0x20 ~ 0x27.</span><br>   outb (PIC_M_DATA, <span class="hljs-number">0x04</span>);   <span class="hljs-comment">// ICW3: IR2接从片. </span><br>   outb (PIC_M_DATA, <span class="hljs-number">0x01</span>);   <span class="hljs-comment">// ICW4: 8086模式, 正常EOI</span><br><br>   <span class="hljs-comment">/* 初始化从片 */</span><br>   outb (PIC_S_CTRL, <span class="hljs-number">0x11</span>);    <span class="hljs-comment">// ICW1: 边沿触发,级联8259, 需要ICW4.</span><br>   outb (PIC_S_DATA, <span class="hljs-number">0x28</span>);    <span class="hljs-comment">// ICW2: 起始中断向量号为0x28,也就是IR[8-15] 为 0x28 ~ 0x2F.</span><br>   outb (PIC_S_DATA, <span class="hljs-number">0x02</span>);    <span class="hljs-comment">// ICW3: 设置从片连接到主片的IR2引脚</span><br>   outb (PIC_S_DATA, <span class="hljs-number">0x01</span>);    <span class="hljs-comment">// ICW4: 8086模式, 正常EOI</span><br>   <br>   <span class="hljs-comment">//outb (PIC_M_DATA, 0xfe);</span><br>   <span class="hljs-comment">//outb (PIC_S_DATA, 0xff);</span><br><br>   <span class="hljs-comment">//outb (PIC_M_DATA, 0xfd);</span><br>   <span class="hljs-comment">//outb (PIC_S_DATA, 0xff);</span><br><br>   <span class="hljs-comment">//outb (PIC_M_DATA, 0xfc);</span><br>   <span class="hljs-comment">//outb (PIC_S_DATA, 0xff);</span><br><br>   outb (PIC_M_DATA, <span class="hljs-number">0xf8</span>);<br>   outb (PIC_S_DATA, <span class="hljs-number">0xbf</span>);<br><br>   put_str(<span class="hljs-string">&quot;   pic_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 创建中断门描述符 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_idt_desc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> gate_desc* p_gdesc, <span class="hljs-type">uint8_t</span> attr, intr_handler function)</span> <br>&#123; <br>   p_gdesc-&gt;func_offset_low_word = (<span class="hljs-type">uint32_t</span>)function &amp; <span class="hljs-number">0x0000FFFF</span>;<br>   p_gdesc-&gt;selector = SELECTOR_K_CODE;<br>   p_gdesc-&gt;dcount = <span class="hljs-number">0</span>;<br>   p_gdesc-&gt;attribute = attr;<br>   p_gdesc-&gt;func_offset_high_word = ((<span class="hljs-type">uint32_t</span>)function &amp; <span class="hljs-number">0xFFFF0000</span>) &gt;&gt; <span class="hljs-number">16</span>;<br>&#125;<br><br><br><span class="hljs-comment">/*初始化中断描述符表*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">idt_desc_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>   <span class="hljs-type">int</span> i, lastindex = IDT_DESC_CNT - <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; IDT_DESC_CNT; i++) <br>   &#123;<br>      make_idt_desc(&amp;idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); <br>   &#125;<br><span class="hljs-comment">/* 单独处理系统调用,系统调用对应的中断门dpl为3,</span><br><span class="hljs-comment"> * 中断处理程序为单独的syscall_handler */</span><br>   make_idt_desc(&amp;idt[lastindex], IDT_DESC_ATTR_DPL3, syscall_handler);<br>   put_str(<span class="hljs-string">&quot;   idt_desc_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 通用的中断处理函数,一般用在异常出现时的处理 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">general_intr_handler</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> vec_nr)</span> <br>&#123;<br>   <span class="hljs-keyword">if</span> (vec_nr == <span class="hljs-number">0x27</span> || vec_nr == <span class="hljs-number">0x2f</span>)     <span class="hljs-comment">// 0x2f是从片8259A上的最后一个irq引脚，保留</span><br>   &#123;<br>      <span class="hljs-keyword">return</span>;<span class="hljs-comment">//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。</span><br>   &#125;<br>   put_str(<span class="hljs-string">&quot;int vector : 0x&quot;</span>);<br>   put_int(vec_nr);<br>   put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 完成一般中断处理函数注册及异常名称注册 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">exception_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;    <span class="hljs-comment">// 完成一般中断处理函数注册及异常名称注册</span><br>   <span class="hljs-type">int</span> i;<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; IDT_DESC_CNT; i++) <br>   &#123;<br><span class="hljs-comment">/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,</span><br><span class="hljs-comment"> * 见kernel/kernel.S的call [idt_table + %1*4] */</span><br>      idt_table[i] = general_intr_handler;    <span class="hljs-comment">// 默认为general_intr_handler。</span><br>    <span class="hljs-comment">// 以后会由register_handler来注册具体处理函数。</span><br>      intr_name[i] = <span class="hljs-string">&quot;unknown&quot;</span>;    <span class="hljs-comment">// 先统一赋值为unknown </span><br>   &#125;<br>   intr_name[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;#DE Divide Error&quot;</span>;<br>   intr_name[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;#DB Debug Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;NMI Interrupt&quot;</span>;<br>   intr_name[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;#BP Breakpoint Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;#OF Overflow Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">5</span>] = <span class="hljs-string">&quot;#BR BOUND Range Exceeded Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;#UD Invalid Opcode Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">7</span>] = <span class="hljs-string">&quot;#NM Device Not Available Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">8</span>] = <span class="hljs-string">&quot;#DF Double Fault Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">9</span>] = <span class="hljs-string">&quot;Coprocessor Segment Overrun&quot;</span>;<br>   intr_name[<span class="hljs-number">10</span>] = <span class="hljs-string">&quot;#TS Invalid TSS Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">11</span>] = <span class="hljs-string">&quot;#NP Segment Not Present&quot;</span>;<br>   intr_name[<span class="hljs-number">12</span>] = <span class="hljs-string">&quot;#SS Stack Fault Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">13</span>] = <span class="hljs-string">&quot;#GP General Protection Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">14</span>] = <span class="hljs-string">&quot;#PF Page-Fault Exception&quot;</span>;<br>   <span class="hljs-comment">// intr_name[15] 第15项是intel保留项，未使用</span><br>   intr_name[<span class="hljs-number">16</span>] = <span class="hljs-string">&quot;#MF x87 FPU Floating-Point Error&quot;</span>;<br>   intr_name[<span class="hljs-number">17</span>] = <span class="hljs-string">&quot;#AC Alignment Check Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">18</span>] = <span class="hljs-string">&quot;#MC Machine-Check Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">19</span>] = <span class="hljs-string">&quot;#XF SIMD Floating-Point Exception&quot;</span>;<br><br>&#125;<br><br><br><span class="hljs-comment">/*完成有关中断的所有初始化工作*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">idt_init</span><span class="hljs-params">()</span> <br>&#123;<br>   put_str(<span class="hljs-string">&quot;idt_init start\n&quot;</span>);<br>   idt_desc_init();   <span class="hljs-comment">// 初始化中断描述符表</span><br>   exception_init();   <span class="hljs-comment">// 异常名初始化并注册通常的中断处理函数</span><br>   pic_init();   <span class="hljs-comment">// 初始化8259A</span><br><br>   <span class="hljs-comment">/* 加载idt */</span><br>   <span class="hljs-type">uint64_t</span> idt_operand = ((<span class="hljs-keyword">sizeof</span>(idt) - <span class="hljs-number">1</span>) | ((<span class="hljs-type">uint64_t</span>)(<span class="hljs-type">uint32_t</span>)idt &lt;&lt; <span class="hljs-number">16</span>));<br>   <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;lidt %0&quot;</span> : : <span class="hljs-string">&quot;m&quot;</span> (idt_operand))</span>;<br>   put_str(<span class="hljs-string">&quot;idt_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 开中断并返回开中断前的状态*/</span><br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_enable</span><span class="hljs-params">()</span> <br>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span>;</span><br>   <span class="hljs-keyword">if</span> (INTR_ON == intr_get_status()) <br>   &#123;<br>      old_status = INTR_ON;<br>      <span class="hljs-keyword">return</span> old_status;<br>   &#125; <br>   <span class="hljs-keyword">else</span> <br>   &#123;<br>      old_status = INTR_OFF;<br>      <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;sti&quot;</span>)</span>; <span class="hljs-comment">// 开中断,sti指令将IF位置1</span><br>      <span class="hljs-keyword">return</span> old_status;<br>   &#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 关中断,并且返回关中断前的状态 */</span><br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_disable</span><span class="hljs-params">()</span> <br>&#123;     <br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span>;</span><br>   <span class="hljs-keyword">if</span> (INTR_ON == intr_get_status()) <br>   &#123;<br>      old_status = INTR_ON;<br>      <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;cli&quot;</span> : : : <span class="hljs-string">&quot;memory&quot;</span>)</span>; <span class="hljs-comment">// 关中断,cli指令将IF位置0</span><br>      <span class="hljs-keyword">return</span> old_status;<br>   &#125; <br>   <span class="hljs-keyword">else</span> <br>   &#123;<br>      old_status = INTR_OFF;<br>      <span class="hljs-keyword">return</span> old_status;<br>   &#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 将中断状态设置为status */</span><br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_set_status</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> intr_status status)</span> <br>&#123;<br>   <span class="hljs-keyword">return</span> status &amp; INTR_ON ? intr_enable() : intr_disable();<br>&#125;<br><br><br><span class="hljs-comment">/* 获取当前中断状态 */</span><br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_get_status</span><span class="hljs-params">()</span> <br>&#123;<br>   <span class="hljs-type">uint32_t</span> eflags = <span class="hljs-number">0</span>; <br>   GET_EFLAGS(eflags);<br>   <span class="hljs-keyword">return</span> (EFLAGS_IF &amp; eflags) ? INTR_ON : INTR_OFF;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">register_handler</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> vector_no, intr_handler function)</span>;<br><br><br><span class="hljs-comment">/* 在中断处理程序数组第vector_no个元素中注册安装中断处理程序function */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">register_handler</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> vector_no, intr_handler function)</span> <br>&#123;<br><span class="hljs-comment">/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,</span><br><span class="hljs-comment"> * 见kernel/kernel.S的call [idt_table + %1*4] */</span><br>   idt_table[vector_no] = function; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="libkernelstdio-kernelh创建"><a class="markdownIt-Anchor" href="#libkernelstdio-kernelh创建"></a> lib/kernel/stdio-kernel.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LIB_KERNEL_STDIOSYS_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LIB_KERNEL_STDIOSYS_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printk</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, ...)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="libkernelstdio-kernelc创建"><a class="markdownIt-Anchor" href="#libkernelstdio-kernelc创建"></a> lib/kernel/stdio-kernel.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../kernel/global.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_start(args, first_fix) args = (va_list)&amp;first_fix</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_end(args) args = NULL</span><br><br><span class="hljs-comment">/* 供内核使用的格式化输出函数 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printk</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, ...)</span> &#123;<br>   va_list args;<br>   va_start(args, format);<br>   <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>   <span class="hljs-built_in">vsprintf</span>(buf, format, args);<br>   va_end(args);<br>   console_put_str(buf);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="deviceideh创建"><a class="markdownIt-Anchor" href="#deviceideh创建"></a> device/ide.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __DEVICE_IDE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __DEVICE_IDE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/sync.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><br><span class="hljs-comment">/* 分区结构 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span> &#123;</span><br>   <span class="hljs-type">uint32_t</span> start_lba; <span class="hljs-comment">// 起始扇区</span><br>   <span class="hljs-type">uint32_t</span> sec_cnt; <span class="hljs-comment">// 扇区数</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">my_disk</span>;</span> <span class="hljs-comment">// 分区所属的硬盘</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">part_tag</span>;</span> <span class="hljs-comment">// 用于队列中的标记</span><br>   <span class="hljs-type">char</span> name[<span class="hljs-number">8</span>]; <span class="hljs-comment">// 分区名称</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span>* <span class="hljs-title">sb</span>;</span> <span class="hljs-comment">// 本分区的超级块</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bitmap</span> <span class="hljs-title">block_bitmap</span>;</span> <span class="hljs-comment">// 块位图</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bitmap</span> <span class="hljs-title">inode_bitmap</span>;</span> <span class="hljs-comment">// i结点位图</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">open_inodes</span>;</span> <span class="hljs-comment">// 本分区打开的i结点队列</span><br>&#125;;<br><br><span class="hljs-comment">/* 硬盘结构 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span> &#123;</span><br>   <span class="hljs-type">char</span> name[<span class="hljs-number">8</span>];   <span class="hljs-comment">// 本硬盘的名称，如sda等</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ide_channel</span>* <span class="hljs-title">my_channel</span>;</span>   <span class="hljs-comment">// 此块硬盘归属于哪个ide通道</span><br>   <span class="hljs-type">uint8_t</span> dev_no;   <span class="hljs-comment">// 本硬盘是主0还是从1</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span> <span class="hljs-title">prim_parts</span>[4];</span>   <span class="hljs-comment">// 主分区顶多是4个</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span> <span class="hljs-title">logic_parts</span>[8];</span>   <span class="hljs-comment">// 逻辑分区数量无限,但总得有个支持的上限,那就支持8个</span><br>&#125;;<br><br><span class="hljs-comment">/* ata通道结构 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ide_channel</span> &#123;</span><br>   <span class="hljs-type">char</span> name[<span class="hljs-number">8</span>]; <span class="hljs-comment">// 本ata通道名称, 如ata0,也被叫做ide0. 可以参考bochs配置文件中关于硬盘的配置。</span><br>   <span class="hljs-type">uint16_t</span> port_base; <span class="hljs-comment">// 本通道的起始端口号</span><br>   <span class="hljs-type">uint8_t</span> irq_no; <span class="hljs-comment">// 本通道所用的中断号</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lock</span> <span class="hljs-title">lock</span>;</span><br>   <span class="hljs-type">bool</span> expecting_intr; <span class="hljs-comment">// 向硬盘发完命令后等待来自硬盘的中断</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">semaphore</span> <span class="hljs-title">disk_done</span>;</span> <span class="hljs-comment">// 硬盘处理完成.线程用这个信号量来阻塞自己，由硬盘完成后产生的中断将线程唤醒</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span> <span class="hljs-title">devices</span>[2];</span> <span class="hljs-comment">// 一个通道上连接两个硬盘，一主一从</span><br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">intr_hd_handler</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> irq_no)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">ide_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">uint8_t</span> channel_cnt;<br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ide_channel</span> <span class="hljs-title">channels</span>[];</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">partition_list</span>;</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ide_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> disk* hd, <span class="hljs-type">uint32_t</span> lba, <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> sec_cnt)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">ide_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> disk* hd, <span class="hljs-type">uint32_t</span> lba, <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> sec_cnt)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="deviceidec创建"><a class="markdownIt-Anchor" href="#deviceidec创建"></a> device/ide.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ide.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio-kernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/sync.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;io.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;timer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><br><br><span class="hljs-comment">/* 定义硬盘各寄存器的端口号 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> reg_data(channel) (channel-&gt;port_base + 0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> reg_error(channel) (channel-&gt;port_base + 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> reg_sect_cnt(channel) (channel-&gt;port_base + 2)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> reg_lba_l(channel) (channel-&gt;port_base + 3)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> reg_lba_m(channel) (channel-&gt;port_base + 4)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> reg_lba_h(channel) (channel-&gt;port_base + 5)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> reg_dev(channel) (channel-&gt;port_base + 6)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> reg_status(channel) (channel-&gt;port_base + 7)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> reg_cmd(channel) (reg_status(channel))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> reg_alt_status(channel)  (channel-&gt;port_base + 0x206)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> reg_ctl(channel) reg_alt_status(channel)</span><br><br><span class="hljs-comment">/* reg_status寄存器的一些关键位 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BIT_STAT_BSY 0x80      <span class="hljs-comment">// 硬盘忙</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BIT_STAT_DRDY 0x40      <span class="hljs-comment">// 驱动器准备好 </span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BIT_STAT_DRQ 0x8      <span class="hljs-comment">// 数据传输准备好了</span></span><br><br><span class="hljs-comment">/* device寄存器的一些关键位 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BIT_DEV_MBS0xa0    <span class="hljs-comment">// 第7位和第5位固定为1</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BIT_DEV_LBA0x40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BIT_DEV_DEV0x10</span><br><br><span class="hljs-comment">/* 一些硬盘操作的指令 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMD_IDENTIFY   0xec    <span class="hljs-comment">// identify指令</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMD_READ_SECTOR   0x20     <span class="hljs-comment">// 读扇区指令</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMD_WRITE_SECTOR   0x30    <span class="hljs-comment">// 写扇区指令</span></span><br><br><span class="hljs-comment">/* 定义可读写的最大扇区数,调试用的 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max_lba ((80*1024*1024/512) - 1)<span class="hljs-comment">// 只支持80MB硬盘</span></span><br><br><br><span class="hljs-type">uint8_t</span> channel_cnt;   <span class="hljs-comment">// 按硬盘数计算的通道数</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ide_channel</span> <span class="hljs-title">channels</span>[2];</span> <span class="hljs-comment">// 有两个ide通道</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">partition_list</span>;</span> <span class="hljs-comment">// 分区队列</span><br><span class="hljs-comment">/* 用于记录总扩展分区的起始lba,初始为0,partition_scan时以此为标记 */</span><br><span class="hljs-type">int32_t</span> ext_lba_base = <span class="hljs-number">0</span>;<br><span class="hljs-type">uint8_t</span> p_no = <span class="hljs-number">0</span>, l_no = <span class="hljs-number">0</span>; <span class="hljs-comment">// 用来记录硬盘主分区和逻辑分区的下标</span><br><br><br><span class="hljs-comment">/* 构建一个16字节大小的结构体,用来存分区表项 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition_table_entry</span> &#123;</span><br>   <span class="hljs-type">uint8_t</span>  bootable; <span class="hljs-comment">// 是否可引导</span><br>   <span class="hljs-type">uint8_t</span>  start_head; <span class="hljs-comment">// 起始磁头号</span><br>   <span class="hljs-type">uint8_t</span>  start_sec; <span class="hljs-comment">// 起始扇区号</span><br>   <span class="hljs-type">uint8_t</span>  start_chs; <span class="hljs-comment">// 起始柱面号</span><br>   <span class="hljs-type">uint8_t</span>  fs_type; <span class="hljs-comment">// 分区类型</span><br>   <span class="hljs-type">uint8_t</span>  end_head; <span class="hljs-comment">// 结束磁头号</span><br>   <span class="hljs-type">uint8_t</span>  end_sec; <span class="hljs-comment">// 结束扇区号</span><br>   <span class="hljs-type">uint8_t</span>  end_chs; <span class="hljs-comment">// 结束柱面号</span><br><span class="hljs-comment">/* 更需要关注的是下面这两项 */</span><br>   <span class="hljs-type">uint32_t</span> start_lba; <span class="hljs-comment">// 本分区起始扇区的lba地址</span><br>   <span class="hljs-type">uint32_t</span> sec_cnt; <span class="hljs-comment">// 本分区的扇区数目</span><br>&#125; __attribute__ ((packed)); <span class="hljs-comment">// 保证此结构是16字节大小</span><br><br><span class="hljs-comment">/* 引导扇区,mbr或ebr所在的扇区 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">boot_sector</span> &#123;</span><br>   <span class="hljs-type">uint8_t</span>  other[<span class="hljs-number">446</span>]; <span class="hljs-comment">// 引导代码</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span>   <span class="hljs-title">partition_table_entry</span> <span class="hljs-title">partition_table</span>[4];</span>       <span class="hljs-comment">// 分区表中有4项,共64字节</span><br>   <span class="hljs-type">uint16_t</span> signature; <span class="hljs-comment">// 启动扇区的结束标志是0x55,0xaa,</span><br>&#125; __attribute__ ((packed));<br><br><span class="hljs-comment">/* 选择读写的硬盘 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">select_disk</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> disk* hd)</span> &#123;<br>   <span class="hljs-type">uint8_t</span> reg_device = BIT_DEV_MBS | BIT_DEV_LBA;<br>   <span class="hljs-keyword">if</span> (hd-&gt;dev_no == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">// 若是从盘就置DEV位为1</span><br>      reg_device |= BIT_DEV_DEV;<br>   &#125;<br>   outb(reg_dev(hd-&gt;my_channel), reg_device);<br>&#125;<br><br><span class="hljs-comment">/* 向硬盘控制器写入起始扇区地址及要读写的扇区数 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">select_sector</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> disk* hd, <span class="hljs-type">uint32_t</span> lba, <span class="hljs-type">uint8_t</span> sec_cnt)</span> &#123;<br>   ASSERT(lba &lt;= max_lba);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ide_channel</span>* <span class="hljs-title">channel</span> =</span> hd-&gt;my_channel;<br><br>   <span class="hljs-comment">/* 写入要读写的扇区数*/</span><br>   outb(reg_sect_cnt(channel), sec_cnt); <span class="hljs-comment">// 如果sec_cnt为0,则表示写入256个扇区</span><br><br>   <span class="hljs-comment">/* 写入lba地址(即扇区号) */</span><br>   outb(reg_lba_l(channel), lba); <span class="hljs-comment">// lba地址的低8位,不用单独取出低8位.outb函数中的汇编指令outb %b0, %w1会只用al。</span><br>   outb(reg_lba_m(channel), lba &gt;&gt; <span class="hljs-number">8</span>); <span class="hljs-comment">// lba地址的8~15位</span><br>   outb(reg_lba_h(channel), lba &gt;&gt; <span class="hljs-number">16</span>); <span class="hljs-comment">// lba地址的16~23位</span><br><br>   <span class="hljs-comment">/* 因为lba地址的24~27位要存储在device寄存器的0～3位,</span><br><span class="hljs-comment">    * 无法单独写入这4位,所以在此处把device寄存器再重新写入一次*/</span><br>   outb(reg_dev(channel), BIT_DEV_MBS | BIT_DEV_LBA | (hd-&gt;dev_no == <span class="hljs-number">1</span> ? BIT_DEV_DEV : <span class="hljs-number">0</span>) | lba &gt;&gt; <span class="hljs-number">24</span>);<br>&#125;<br><br><span class="hljs-comment">/* 向通道channel发命令cmd */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">cmd_out</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ide_channel* channel, <span class="hljs-type">uint8_t</span> cmd)</span> &#123;<br><span class="hljs-comment">/* 只要向硬盘发出了命令便将此标记置为true,硬盘中断处理程序需要根据它来判断 */</span><br>   channel-&gt;expecting_intr = <span class="hljs-literal">true</span>;<br>   outb(reg_cmd(channel), cmd);<br>&#125;<br><br><span class="hljs-comment">/* 硬盘读入sec_cnt个扇区的数据到buf */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">read_from_sector</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> disk* hd, <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint8_t</span> sec_cnt)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> size_in_byte;<br>   <span class="hljs-keyword">if</span> (sec_cnt == <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-comment">/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */</span><br>      size_in_byte = <span class="hljs-number">256</span> * <span class="hljs-number">512</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123; <br>      size_in_byte = sec_cnt * <span class="hljs-number">512</span>; <br>   &#125;<br>   insw(reg_data(hd-&gt;my_channel), buf, size_in_byte / <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-comment">/* 将buf中sec_cnt扇区的数据写入硬盘 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">write2sector</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> disk* hd, <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint8_t</span> sec_cnt)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> size_in_byte;<br>   <span class="hljs-keyword">if</span> (sec_cnt == <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-comment">/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */</span><br>      size_in_byte = <span class="hljs-number">256</span> * <span class="hljs-number">512</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123; <br>      size_in_byte = sec_cnt * <span class="hljs-number">512</span>; <br>   &#125;<br>   outsw(reg_data(hd-&gt;my_channel), buf, size_in_byte / <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-comment">/* 等待30秒 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">busy_wait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> disk* hd)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ide_channel</span>* <span class="hljs-title">channel</span> =</span> hd-&gt;my_channel;<br>   <span class="hljs-type">uint16_t</span> time_limit = <span class="hljs-number">30</span> * <span class="hljs-number">1000</span>;     <span class="hljs-comment">// 可以等待30000毫秒</span><br>   <span class="hljs-keyword">while</span> (time_limit -= <span class="hljs-number">10</span> &gt;= <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!(inb(reg_status(channel)) &amp; BIT_STAT_BSY)) &#123;<br> <span class="hljs-keyword">return</span> (inb(reg_status(channel)) &amp; BIT_STAT_DRQ);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br> mtime_sleep(<span class="hljs-number">10</span>);     <span class="hljs-comment">// 睡眠10毫秒</span><br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">/* 从硬盘读取sec_cnt个扇区到buf */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ide_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> disk* hd, <span class="hljs-type">uint32_t</span> lba, <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> sec_cnt)</span> &#123;   <span class="hljs-comment">// 此处的sec_cnt为32位大小</span><br>   ASSERT(lba &lt;= max_lba);<br>   ASSERT(sec_cnt &gt; <span class="hljs-number">0</span>);<br>   lock_acquire (&amp;hd-&gt;my_channel-&gt;lock);<br><br><span class="hljs-comment">/* 1 先选择操作的硬盘 */</span><br>   select_disk(hd);<br><br>   <span class="hljs-type">uint32_t</span> secs_op; <span class="hljs-comment">// 每次操作的扇区数</span><br>   <span class="hljs-type">uint32_t</span> secs_done = <span class="hljs-number">0</span>; <span class="hljs-comment">// 已完成的扇区数</span><br>   <span class="hljs-keyword">while</span>(secs_done &lt; sec_cnt) &#123;<br>      <span class="hljs-keyword">if</span> ((secs_done + <span class="hljs-number">256</span>) &lt;= sec_cnt) &#123;<br> secs_op = <span class="hljs-number">256</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br> secs_op = sec_cnt - secs_done;<br>      &#125;<br><br>   <span class="hljs-comment">/* 2 写入待读入的扇区数和起始扇区号 */</span><br>      select_sector(hd, lba + secs_done, secs_op);<br><br>   <span class="hljs-comment">/* 3 执行的命令写入reg_cmd寄存器 */</span><br>      cmd_out(hd-&gt;my_channel, CMD_READ_SECTOR);      <span class="hljs-comment">// 准备开始读数据</span><br><br>   <span class="hljs-comment">/*********************   阻塞自己的时机  ***********************</span><br><span class="hljs-comment">      在硬盘已经开始工作(开始在内部读数据或写数据)后才能阻塞自己,现在硬盘已经开始忙了,</span><br><span class="hljs-comment">      将自己阻塞,等待硬盘完成读操作后通过中断处理程序唤醒自己*/</span><br>      sema_down(&amp;hd-&gt;my_channel-&gt;disk_done);<br>   <span class="hljs-comment">/*************************************************************/</span><br><br>   <span class="hljs-comment">/* 4 检测硬盘状态是否可读 */</span><br>      <span class="hljs-comment">/* 醒来后开始执行下面代码*/</span><br>      <span class="hljs-keyword">if</span> (!busy_wait(hd)) &#123;      <span class="hljs-comment">// 若失败</span><br> <span class="hljs-type">char</span> error[<span class="hljs-number">64</span>];<br> <span class="hljs-built_in">sprintf</span>(error, <span class="hljs-string">&quot;%s read sector %d failed!!!!!!\n&quot;</span>, hd-&gt;name, lba);<br> PANIC(error);<br>      &#125;<br><br>   <span class="hljs-comment">/* 5 把数据从硬盘的缓冲区中读出 */</span><br>      read_from_sector(hd, (<span class="hljs-type">void</span>*)((<span class="hljs-type">uint32_t</span>)buf + secs_done * <span class="hljs-number">512</span>), secs_op);<br>      secs_done += secs_op;<br>   &#125;<br>   lock_release(&amp;hd-&gt;my_channel-&gt;lock);<br>&#125;<br><br><span class="hljs-comment">/* 将buf中sec_cnt扇区数据写入硬盘 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ide_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> disk* hd, <span class="hljs-type">uint32_t</span> lba, <span class="hljs-type">void</span>* buf, <span class="hljs-type">uint32_t</span> sec_cnt)</span> &#123;<br>   ASSERT(lba &lt;= max_lba);<br>   ASSERT(sec_cnt &gt; <span class="hljs-number">0</span>);<br>   lock_acquire (&amp;hd-&gt;my_channel-&gt;lock);<br><br><span class="hljs-comment">/* 1 先选择操作的硬盘 */</span><br>   select_disk(hd);<br><br>   <span class="hljs-type">uint32_t</span> secs_op; <span class="hljs-comment">// 每次操作的扇区数</span><br>   <span class="hljs-type">uint32_t</span> secs_done = <span class="hljs-number">0</span>; <span class="hljs-comment">// 已完成的扇区数</span><br>   <span class="hljs-keyword">while</span>(secs_done &lt; sec_cnt) &#123;<br>      <span class="hljs-keyword">if</span> ((secs_done + <span class="hljs-number">256</span>) &lt;= sec_cnt) &#123;<br> secs_op = <span class="hljs-number">256</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br> secs_op = sec_cnt - secs_done;<br>      &#125;<br><br>   <span class="hljs-comment">/* 2 写入待写入的扇区数和起始扇区号 */</span><br>      select_sector(hd, lba + secs_done, secs_op);      <span class="hljs-comment">// 先将待读的块号lba地址和待读入的扇区数写入lba寄存器</span><br><br>   <span class="hljs-comment">/* 3 执行的命令写入reg_cmd寄存器 */</span><br>      cmd_out(hd-&gt;my_channel, CMD_WRITE_SECTOR);      <span class="hljs-comment">// 准备开始写数据</span><br><br>   <span class="hljs-comment">/* 4 检测硬盘状态是否可读 */</span><br>      <span class="hljs-keyword">if</span> (!busy_wait(hd)) &#123;      <span class="hljs-comment">// 若失败</span><br> <span class="hljs-type">char</span> error[<span class="hljs-number">64</span>];<br> <span class="hljs-built_in">sprintf</span>(error, <span class="hljs-string">&quot;%s write sector %d failed!!!!!!\n&quot;</span>, hd-&gt;name, lba);<br> PANIC(error);<br>      &#125;<br><br>   <span class="hljs-comment">/* 5 将数据写入硬盘 */</span><br>      write2sector(hd, (<span class="hljs-type">void</span>*)((<span class="hljs-type">uint32_t</span>)buf + secs_done * <span class="hljs-number">512</span>), secs_op);<br><br>      <span class="hljs-comment">/* 在硬盘响应期间阻塞自己 */</span><br>      sema_down(&amp;hd-&gt;my_channel-&gt;disk_done);<br>      secs_done += secs_op;<br>   &#125;<br>   <span class="hljs-comment">/* 醒来后开始释放锁*/</span><br>   lock_release(&amp;hd-&gt;my_channel-&gt;lock);<br>&#125;<br><br><span class="hljs-comment">/* 硬盘中断处理程序 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">intr_hd_handler</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> irq_no)</span> &#123;<br>   ASSERT(irq_no == <span class="hljs-number">0x2e</span> || irq_no == <span class="hljs-number">0x2f</span>);<br>   <span class="hljs-type">uint8_t</span> ch_no = irq_no - <span class="hljs-number">0x2e</span>;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ide_channel</span>* <span class="hljs-title">channel</span> =</span> &amp;channels[ch_no];<br>   ASSERT(channel-&gt;irq_no == irq_no);<br><span class="hljs-comment">/* 不必担心此中断是否对应的是这一次的expecting_intr,</span><br><span class="hljs-comment"> * 每次读写硬盘时会申请锁,从而保证了同步一致性 */</span><br>   <span class="hljs-keyword">if</span> (channel-&gt;expecting_intr) &#123;<br>      channel-&gt;expecting_intr = <span class="hljs-literal">false</span>;<br>      sema_up(&amp;channel-&gt;disk_done);<br><br><span class="hljs-comment">/* 读取状态寄存器使硬盘控制器认为此次的中断已被处理,</span><br><span class="hljs-comment"> * 从而硬盘可以继续执行新的读写 */</span><br>      inb(reg_status(channel));<br>   &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">swap_pairs_bytes</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* dst, <span class="hljs-type">char</span>* buf, <span class="hljs-type">uint32_t</span> len)</span> &#123;<br>   <span class="hljs-type">uint8_t</span> idx;<br>   <span class="hljs-keyword">for</span> (idx = <span class="hljs-number">0</span>; idx &lt; len; idx += <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-comment">/* buf中存储dst中两相邻元素交换位置后的字符串*/</span><br>      buf[idx + <span class="hljs-number">1</span>] = *dst++;   <br>      buf[idx]     = *dst++;   <br>   &#125;<br>   buf[idx] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">/* 获得硬盘参数信息 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">identify_disk</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> disk* hd)</span> &#123;<br>   <span class="hljs-type">char</span> id_info[<span class="hljs-number">512</span>];<br>   select_disk(hd);<br>   cmd_out(hd-&gt;my_channel, CMD_IDENTIFY);<br><span class="hljs-comment">/* 向硬盘发送指令后便通过信号量阻塞自己,</span><br><span class="hljs-comment"> * 待硬盘处理完成后,通过中断处理程序将自己唤醒 */</span><br>   sema_down(&amp;hd-&gt;my_channel-&gt;disk_done);<br><br><span class="hljs-comment">/* 醒来后开始执行下面代码*/</span><br>   <span class="hljs-keyword">if</span> (!busy_wait(hd)) &#123;     <span class="hljs-comment">//  若失败</span><br>      <span class="hljs-type">char</span> error[<span class="hljs-number">64</span>];<br>      <span class="hljs-built_in">sprintf</span>(error, <span class="hljs-string">&quot;%s identify failed!!!!!!\n&quot;</span>, hd-&gt;name);<br>      PANIC(error);<br>   &#125;<br>   read_from_sector(hd, id_info, <span class="hljs-number">1</span>);<br><br>   <span class="hljs-type">char</span> buf[<span class="hljs-number">64</span>];<br>   <span class="hljs-type">uint8_t</span> sn_start = <span class="hljs-number">10</span> * <span class="hljs-number">2</span>, sn_len = <span class="hljs-number">20</span>, md_start = <span class="hljs-number">27</span> * <span class="hljs-number">2</span>, md_len = <span class="hljs-number">40</span>;<br>   swap_pairs_bytes(&amp;id_info[sn_start], buf, sn_len);<br>   printk(<span class="hljs-string">&quot;   disk %s info:\n      SN: %s\n&quot;</span>, hd-&gt;name, buf);<br>   <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf));<br>   swap_pairs_bytes(&amp;id_info[md_start], buf, md_len);<br>   printk(<span class="hljs-string">&quot;      MODULE: %s\n&quot;</span>, buf);<br>   <span class="hljs-type">uint32_t</span> sectors = *(<span class="hljs-type">uint32_t</span>*)&amp;id_info[<span class="hljs-number">60</span> * <span class="hljs-number">2</span>];<br>   printk(<span class="hljs-string">&quot;      SECTORS: %d\n&quot;</span>, sectors);<br>   printk(<span class="hljs-string">&quot;      CAPACITY: %dMB\n&quot;</span>, sectors * <span class="hljs-number">512</span> / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">partition_scan</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> disk* hd, <span class="hljs-type">uint32_t</span> ext_lba)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">boot_sector</span>* <span class="hljs-title">bs</span> =</span> sys_malloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> boot_sector));<br>   ide_read(hd, ext_lba, bs, <span class="hljs-number">1</span>);<br>   <span class="hljs-type">uint8_t</span> part_idx = <span class="hljs-number">0</span>;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition_table_entry</span>* <span class="hljs-title">p</span> =</span> bs-&gt;partition_table;<br><br>   <span class="hljs-comment">/* 遍历分区表4个分区表项 */</span><br>   <span class="hljs-keyword">while</span> (part_idx++ &lt; <span class="hljs-number">4</span>) &#123;<br>      <span class="hljs-keyword">if</span> (p-&gt;fs_type == <span class="hljs-number">0x5</span>) &#123; <span class="hljs-comment">// 若为扩展分区</span><br> <span class="hljs-keyword">if</span> (ext_lba_base != <span class="hljs-number">0</span>) &#123; <br> <span class="hljs-comment">/* 子扩展分区的start_lba是相对于主引导扇区中的总扩展分区地址 */</span><br>    partition_scan(hd, p-&gt;start_lba + ext_lba_base);<br> &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// ext_lba_base为0表示是第一次读取引导块,也就是主引导记录所在的扇区</span><br> <span class="hljs-comment">/* 记录下扩展分区的起始lba地址,后面所有的扩展分区地址都相对于此 */</span><br>    ext_lba_base = p-&gt;start_lba;<br>    partition_scan(hd, p-&gt;start_lba);<br> &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p-&gt;fs_type != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 若是有效的分区类型</span><br> <span class="hljs-keyword">if</span> (ext_lba == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 此时全是主分区</span><br>    hd-&gt;prim_parts[p_no].start_lba = ext_lba + p-&gt;start_lba;<br>    hd-&gt;prim_parts[p_no].sec_cnt = p-&gt;sec_cnt;<br>    hd-&gt;prim_parts[p_no].my_disk = hd;<br>    list_append(&amp;partition_list, &amp;hd-&gt;prim_parts[p_no].part_tag);<br>    <span class="hljs-built_in">sprintf</span>(hd-&gt;prim_parts[p_no].name, <span class="hljs-string">&quot;%s%d&quot;</span>, hd-&gt;name, p_no + <span class="hljs-number">1</span>);<br>    p_no++;<br>    ASSERT(p_no &lt; <span class="hljs-number">4</span>);    <span class="hljs-comment">// 0,1,2,3</span><br> &#125; <span class="hljs-keyword">else</span> &#123;<br>    hd-&gt;logic_parts[l_no].start_lba = ext_lba + p-&gt;start_lba;<br>    hd-&gt;logic_parts[l_no].sec_cnt = p-&gt;sec_cnt;<br>    hd-&gt;logic_parts[l_no].my_disk = hd;<br>    list_append(&amp;partition_list, &amp;hd-&gt;logic_parts[l_no].part_tag);<br>    <span class="hljs-built_in">sprintf</span>(hd-&gt;logic_parts[l_no].name, <span class="hljs-string">&quot;%s%d&quot;</span>, hd-&gt;name, l_no + <span class="hljs-number">5</span>); <span class="hljs-comment">// 逻辑分区数字是从5开始,主分区是1～4.</span><br>    l_no++;<br>    <span class="hljs-keyword">if</span> (l_no &gt;= <span class="hljs-number">8</span>)    <span class="hljs-comment">// 只支持8个逻辑分区,避免数组越界</span><br>       <span class="hljs-keyword">return</span>;<br> &#125;<br>      &#125; <br>      p++;<br>   &#125;<br>   sys_free(bs);<br>&#125;<br><br><span class="hljs-comment">/* 打印分区信息 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">partition_info</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* pelem, <span class="hljs-type">int</span> arg)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">partition</span>* <span class="hljs-title">part</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> partition, part_tag, pelem);<br>   printk(<span class="hljs-string">&quot;   %s start_lba:0x%x, sec_cnt:0x%x\n&quot;</span>,part-&gt;name, part-&gt;start_lba, part-&gt;sec_cnt);<br><br><span class="hljs-comment">/* 在此处return false与函数本身功能无关,</span><br><span class="hljs-comment"> * 只是为了让主调函数list_traversal继续向下遍历元素 */</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">/* 硬盘数据结构初始化 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ide_init</span><span class="hljs-params">()</span> <br>&#123;<br>    printk(<span class="hljs-string">&quot;ide_init start\n&quot;</span>);<br>    <span class="hljs-type">uint8_t</span> hd_cnt = *((<span class="hljs-type">uint8_t</span>*)(<span class="hljs-number">0x475</span>));      <span class="hljs-comment">// 获取硬盘的数量</span><br>    ASSERT(hd_cnt &gt; <span class="hljs-number">0</span>);<br>    list_init(&amp;partition_list);<br>    channel_cnt = DIV_ROUND_UP(hd_cnt, <span class="hljs-number">2</span>);   <span class="hljs-comment">// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ide_channel</span>* <span class="hljs-title">channel</span>;</span><br>    <span class="hljs-type">uint8_t</span> channel_no = <span class="hljs-number">0</span>, dev_no = <span class="hljs-number">0</span>; <br><br>    <span class="hljs-comment">/* 处理每个通道上的硬盘 */</span><br>    <span class="hljs-keyword">while</span> (channel_no &lt; channel_cnt) <br>    &#123;<br>        channel = &amp;channels[channel_no];<br>        <span class="hljs-built_in">sprintf</span>(channel-&gt;name, <span class="hljs-string">&quot;ide%d&quot;</span>, channel_no);<br><br>        <span class="hljs-comment">/* 为每个ide通道初始化端口基址及中断向量 */</span><br>        <span class="hljs-keyword">switch</span> (channel_no) <br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            channel-&gt;port_base = <span class="hljs-number">0x1f0</span>;   <span class="hljs-comment">// ide0通道的起始端口号是0x1f0</span><br>            channel-&gt;irq_no = <span class="hljs-number">0x20</span> + <span class="hljs-number">14</span>;   <span class="hljs-comment">// 从片8259a上倒数第二的中断引脚,温盘,也就是ide0通道的的中断向量号</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            channel-&gt;port_base = <span class="hljs-number">0x170</span>;   <span class="hljs-comment">// ide1通道的起始端口号是0x170</span><br>            channel-&gt;irq_no = <span class="hljs-number">0x20</span> + <span class="hljs-number">15</span>;   <span class="hljs-comment">// 从8259A上的最后一个中断引脚,我们用来响应ide1通道上的硬盘中断</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        channel-&gt;expecting_intr = <span class="hljs-literal">false</span>;   <span class="hljs-comment">// 未向硬盘写入指令时不期待硬盘的中断</span><br>        lock_init(&amp;channel-&gt;lock);     <br><br>        <span class="hljs-comment">/* 初始化为0,目的是向硬盘控制器请求数据后,硬盘驱动sema_down此信号量会阻塞线程,</span><br><span class="hljs-comment">        直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */</span><br>        sema_init(&amp;channel-&gt;disk_done, <span class="hljs-number">0</span>);<br><br>        register_handler(channel-&gt;irq_no, intr_hd_handler);<br><br>        <span class="hljs-comment">/* 分别获取两个硬盘的参数及分区信息 */</span><br>        <span class="hljs-keyword">while</span> (dev_no &lt; <span class="hljs-number">2</span>) <br>        &#123;<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">disk</span>* <span class="hljs-title">hd</span> =</span> &amp;channel-&gt;devices[dev_no];<br>            hd-&gt;my_channel = channel;<br>            hd-&gt;dev_no = dev_no;<br>            <span class="hljs-built_in">sprintf</span>(hd-&gt;name, <span class="hljs-string">&quot;sd%c&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span> + channel_no * <span class="hljs-number">2</span> + dev_no);<br>            identify_disk(hd); <span class="hljs-comment">// 获取硬盘参数</span><br>            <span class="hljs-keyword">if</span> (dev_no != <span class="hljs-number">0</span>)        <span class="hljs-comment">// 内核本身的裸硬盘(hd60M.img)不处理</span><br>            &#123; <br>                partition_scan(hd, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 扫描该硬盘上的分区  </span><br>            &#125;<br>            p_no = <span class="hljs-number">0</span>, l_no = <span class="hljs-number">0</span>;<br>            dev_no++; <br>        &#125;<br>        dev_no = <span class="hljs-number">0</span>;     <span class="hljs-comment">// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。</span><br>        channel_no++;   <span class="hljs-comment">// 下一个channel</span><br>    &#125;<br><br>    printk(<span class="hljs-string">&quot;\n   all partition info\n&quot;</span>);<br>    <span class="hljs-comment">/* 打印所有分区信息 */</span><br>    list_traversal(&amp;partition_list, partition_info, (<span class="hljs-type">int</span>)<span class="hljs-literal">NULL</span>);<br>    printk(<span class="hljs-string">&quot;ide_init done\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="devicetimerh修改"><a class="markdownIt-Anchor" href="#devicetimerh修改"></a> device/timer.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __DEVICE_TIME_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __DEVICE_TIME_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">frequency_set</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> counter_port, \</span><br><span class="hljs-params">  <span class="hljs-type">uint8_t</span> counter_no, \</span><br><span class="hljs-params">  <span class="hljs-type">uint8_t</span> rwl, \</span><br><span class="hljs-params"><span class="hljs-type">uint8_t</span> counter_mode, \</span><br><span class="hljs-params"><span class="hljs-type">uint16_t</span> counter_value)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">timer_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">mtime_sleep</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> m_seconds)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ticks_to_sleep</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> sleep_ticks)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">mtime_sleep</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> m_seconds)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="devicetimerc修改"><a class="markdownIt-Anchor" href="#devicetimerc修改"></a> device/timer.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;timer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;io.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IRQ0_FREQUENCY   100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INPUT_FREQUENCY   1193180</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COUNTER0_VALUE   INPUT_FREQUENCY / IRQ0_FREQUENCY</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONTRER0_PORT   0x40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COUNTER0_NO   0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COUNTER_MODE   2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> READ_WRITE_LATCH   3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIT_CONTROL_PORT   0x43</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mil_seconds_per_intr (1000 / IRQ0_FREQUENCY)</span><br><br><br><span class="hljs-type">uint32_t</span> ticks;          <span class="hljs-comment">// ticks是内核自中断开启以来总共的嘀嗒数</span><br><br><span class="hljs-comment">/* 把操作的计数器counter_no、读写锁属性rwl、计数器模式counter_mode写入模式控制寄存器并赋予初始值counter_value */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">frequency_set</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> counter_port, \</span><br><span class="hljs-params">  <span class="hljs-type">uint8_t</span> counter_no, \</span><br><span class="hljs-params">  <span class="hljs-type">uint8_t</span> rwl, \</span><br><span class="hljs-params"><span class="hljs-type">uint8_t</span> counter_mode, \</span><br><span class="hljs-params"><span class="hljs-type">uint16_t</span> counter_value)</span> <br>&#123;<br><span class="hljs-comment">/* 往控制字寄存器端口0x43中写入控制字 */</span><br>outb(PIT_CONTROL_PORT, (<span class="hljs-type">uint8_t</span>)(counter_no &lt;&lt; <span class="hljs-number">6</span> | rwl &lt;&lt; <span class="hljs-number">4</span> | counter_mode &lt;&lt; <span class="hljs-number">1</span>));<br><span class="hljs-comment">/* 先写入counter_value的低8位 */</span><br>outb(counter_port, (<span class="hljs-type">uint8_t</span>)counter_value);<br><span class="hljs-comment">/* 再写入counter_value的高8位 */</span><br>outb(counter_port, (<span class="hljs-type">uint8_t</span>)counter_value &gt;&gt; <span class="hljs-number">8</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 时钟的中断处理函数 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">intr_timer_handler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur_thread</span> =</span> running_thread();<br><br>ASSERT(cur_thread-&gt;stack_magic == <span class="hljs-number">0x19870916</span>);         <span class="hljs-comment">// 检查栈是否溢出</span><br><br>cur_thread-&gt;elapsed_ticks++;  <span class="hljs-comment">// 记录此线程占用的cpu时间嘀</span><br>ticks++;  <span class="hljs-comment">//从内核第一次处理时间中断后开始至今的滴哒数,内核态和用户态总共的嘀哒数</span><br><br><span class="hljs-keyword">if</span> (cur_thread-&gt;ticks == <span class="hljs-number">0</span>) <span class="hljs-comment">// 若进程时间片用完就开始调度新的进程上cpu</span><br>&#123;  <br>schedule(); <br>&#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 将当前进程的时间片-1</span><br>&#123;  <br>cur_thread-&gt;ticks--;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化PIT8253 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">timer_init</span><span class="hljs-params">()</span> <br>&#123;<br>put_str(<span class="hljs-string">&quot;timer_init start\n&quot;</span>);<br><span class="hljs-comment">/* 设置8253的定时周期,也就是发中断的周期 */</span><br>frequency_set(CONTRER0_PORT, COUNTER0_NO, READ_WRITE_LATCH, COUNTER_MODE, COUNTER0_VALUE);<br>register_handler(<span class="hljs-number">0x20</span>, intr_timer_handler);<br>put_str(<span class="hljs-string">&quot;timer_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">// 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ticks_to_sleep</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> sleep_ticks)</span> <br>&#123;<br><span class="hljs-type">uint32_t</span> start_tick = ticks;<br><br><span class="hljs-keyword">while</span> (ticks - start_tick &lt; sleep_ticks) <span class="hljs-comment">// 若间隔的ticks数不够便让出cpu</span><br>&#123;  <br>thread_yield();<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">// 以毫秒为单位的sleep   1秒= 1000毫秒</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">mtime_sleep</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> m_seconds)</span> <br>&#123;<br><span class="hljs-type">uint32_t</span> sleep_ticks = DIV_ROUND_UP(m_seconds, mil_seconds_per_intr);<br>ASSERT(sleep_ticks &gt; <span class="hljs-number">0</span>);<br>ticks_to_sleep(sleep_ticks); <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelinitc修改"><a class="markdownIt-Anchor" href="#kernelinitc修改"></a> kernel/init.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/timer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/tss.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ide.h&quot;</span></span><br><br><span class="hljs-comment">/*负责初始化所有模块 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_all</span><span class="hljs-params">()</span> <br>&#123;<br>   put_str(<span class="hljs-string">&quot;init_all\n&quot;</span>);<br>idt_init();     <span class="hljs-comment">// 初始化中断</span><br>mem_init();<br>timer_init();<br>thread_init();<br>console_init();<br>keyboard_init();<br>tss_init();<br>syscall_init();<br>ide_init();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改"><a class="markdownIt-Anchor" href="#kernelmainc修改"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h3><p><img src="/img/os/os13.2.png" alt="图为bochs运行界面" /></p><h3 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h3><p>完成这一章花费了一天的时间，主要是集中在编写硬盘驱动程序这块了。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十二章 实现系统调用 新增printf函数和堆内存管理</title>
    <link href="/2022/08/04/os(12)/"/>
    <url>/2022/08/04/os(12)/</url>
    
    <content type="html"><![CDATA[<h1 id="第十二章-实现系统调用-新增printf函数和堆内存管理"><a class="markdownIt-Anchor" href="#第十二章-实现系统调用-新增printf函数和堆内存管理"></a> 第十二章 实现系统调用 新增printf函数和堆内存管理</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>没什么好说的，抓紧出发。</p><h2 id="实现系统调用"><a class="markdownIt-Anchor" href="#实现系统调用"></a> 实现系统调用</h2><h3 id="实现步骤"><a class="markdownIt-Anchor" href="#实现步骤"></a> 实现步骤</h3><ol><li>用中断门实现系统调用，效仿Linux用0x80号中断作为系统调用的入口。</li><li>在IDT中安装0x80号中断对应的描述符，在该描述符中注册系统调用对应的中断处理例程。</li><li>建立系统调用子功能表syscall_table，利用eax寄存器中的子功能号在该表中索引相应的处理函数。</li><li>用宏实现用户空间系统调用接口_syscall，最大支持3个参数的系统调用，故只需要完成_syscall[0-3]。寄存器传递参数。eax为子功能号，ebx保存第1个参数，ecx保存第2个参数，edx保存第3个参数。</li></ol><h3 id="kernelkernelh创建"><a class="markdownIt-Anchor" href="#kernelkernelh创建"></a> kernel/kernel.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __KERNEL_KERNEL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __KERNEL_KERNEL_H</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">syscall_handler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="kernelinterruptc修改"><a class="markdownIt-Anchor" href="#kernelinterruptc修改"></a> kernel/interrupt.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;io.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIC_M_CTRL 0x20       <span class="hljs-comment">// 这里用的可编程中断控制器是8259A,主片的控制端口是0x20</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIC_M_DATA 0x21       <span class="hljs-comment">// 主片的数据端口是0x21</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIC_S_CTRL 0xa0       <span class="hljs-comment">// 从片的控制端口是0xa0</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIC_S_DATA 0xa1       <span class="hljs-comment">// 从片的数据端口是0xa1</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_CNT 0x81      <span class="hljs-comment">// 目前总共支持的中断数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EFLAGS_IF   0x00000200       <span class="hljs-comment">// eflags寄存器中的if位为1</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_EFLAGS(EFLAG_VAR) asm volatile(<span class="hljs-string">&quot;pushfl; popl %0&quot;</span> : <span class="hljs-string">&quot;=g&quot;</span> (EFLAG_VAR))</span><br><br><span class="hljs-comment">/*中断门描述符结构体*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gate_desc</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint16_t</span>    func_offset_low_word;<br>   <span class="hljs-type">uint16_t</span>    selector;<br>   <span class="hljs-type">uint8_t</span>     dcount;   <span class="hljs-comment">//此项为双字计数字段，是门描述符中的第4字节。此项固定值，不用考虑</span><br>   <span class="hljs-type">uint8_t</span>     attribute;<br>   <span class="hljs-type">uint16_t</span>    func_offset_high_word;<br>&#125;;<br><br><span class="hljs-comment">// 静态函数声明,非必须</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_idt_desc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> gate_desc* p_gdesc, <span class="hljs-type">uint8_t</span> attr, intr_handler function)</span>;<br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gate_desc</span> <span class="hljs-title">idt</span>[<span class="hljs-title">IDT_DESC_CNT</span>];</span>   <span class="hljs-comment">// idt是中断描述符表,本质上就是个中断门描述符数组</span><br><br><br><span class="hljs-type">char</span>* intr_name[IDT_DESC_CNT];     <span class="hljs-comment">// 用于保存异常的名字</span><br><br><br><span class="hljs-comment">/********    定义中断处理程序数组    ********</span><br><span class="hljs-comment"> * 在kernel.S中定义的intrXXentry只是中断处理程序的入口,</span><br><span class="hljs-comment"> * 最终调用的是ide_table中的处理程序*/</span><br>intr_handler idt_table[IDT_DESC_CNT];<br><br><span class="hljs-comment">/********************************************/</span><br><span class="hljs-keyword">extern</span> intr_handler intr_entry_table[IDT_DESC_CNT];    <span class="hljs-comment">// 声明引用定义在kernel.S中的中断处理函数入口数组</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title function_">syscall_handler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><br><br><br><span class="hljs-comment">/* 初始化可编程中断控制器8259A */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">pic_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>   <span class="hljs-comment">/* 初始化主片 */</span><br>   outb (PIC_M_CTRL, <span class="hljs-number">0x11</span>);   <span class="hljs-comment">// ICW1: 边沿触发,级联8259, 需要ICW4.</span><br>   outb (PIC_M_DATA, <span class="hljs-number">0x20</span>);   <span class="hljs-comment">// ICW2: 起始中断向量号为0x20,也就是IR[0-7] 为 0x20 ~ 0x27.</span><br>   outb (PIC_M_DATA, <span class="hljs-number">0x04</span>);   <span class="hljs-comment">// ICW3: IR2接从片. </span><br>   outb (PIC_M_DATA, <span class="hljs-number">0x01</span>);   <span class="hljs-comment">// ICW4: 8086模式, 正常EOI</span><br><br>   <span class="hljs-comment">/* 初始化从片 */</span><br>   outb (PIC_S_CTRL, <span class="hljs-number">0x11</span>);    <span class="hljs-comment">// ICW1: 边沿触发,级联8259, 需要ICW4.</span><br>   outb (PIC_S_DATA, <span class="hljs-number">0x28</span>);    <span class="hljs-comment">// ICW2: 起始中断向量号为0x28,也就是IR[8-15] 为 0x28 ~ 0x2F.</span><br>   outb (PIC_S_DATA, <span class="hljs-number">0x02</span>);    <span class="hljs-comment">// ICW3: 设置从片连接到主片的IR2引脚</span><br>   outb (PIC_S_DATA, <span class="hljs-number">0x01</span>);    <span class="hljs-comment">// ICW4: 8086模式, 正常EOI</span><br>   <br>   <span class="hljs-comment">//outb (PIC_M_DATA, 0xfe);</span><br>   <span class="hljs-comment">//outb (PIC_S_DATA, 0xff);</span><br><br>   <span class="hljs-comment">//outb (PIC_M_DATA, 0xfd);</span><br>   <span class="hljs-comment">//outb (PIC_S_DATA, 0xff);</span><br><br>   outb (PIC_M_DATA, <span class="hljs-number">0xfc</span>);<br>   outb (PIC_S_DATA, <span class="hljs-number">0xff</span>);<br><br>   put_str(<span class="hljs-string">&quot;   pic_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 创建中断门描述符 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_idt_desc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> gate_desc* p_gdesc, <span class="hljs-type">uint8_t</span> attr, intr_handler function)</span> <br>&#123; <br>   p_gdesc-&gt;func_offset_low_word = (<span class="hljs-type">uint32_t</span>)function &amp; <span class="hljs-number">0x0000FFFF</span>;<br>   p_gdesc-&gt;selector = SELECTOR_K_CODE;<br>   p_gdesc-&gt;dcount = <span class="hljs-number">0</span>;<br>   p_gdesc-&gt;attribute = attr;<br>   p_gdesc-&gt;func_offset_high_word = ((<span class="hljs-type">uint32_t</span>)function &amp; <span class="hljs-number">0xFFFF0000</span>) &gt;&gt; <span class="hljs-number">16</span>;<br>&#125;<br><br><br><span class="hljs-comment">/*初始化中断描述符表*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">idt_desc_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>   <span class="hljs-type">int</span> i, lastindex = IDT_DESC_CNT - <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; IDT_DESC_CNT; i++) <br>   &#123;<br>      make_idt_desc(&amp;idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); <br>   &#125;<br><span class="hljs-comment">/* 单独处理系统调用,系统调用对应的中断门dpl为3,</span><br><span class="hljs-comment"> * 中断处理程序为单独的syscall_handler */</span><br>   make_idt_desc(&amp;idt[lastindex], IDT_DESC_ATTR_DPL3, syscall_handler);<br>   put_str(<span class="hljs-string">&quot;   idt_desc_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 通用的中断处理函数,一般用在异常出现时的处理 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">general_intr_handler</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> vec_nr)</span> <br>&#123;<br>   <span class="hljs-keyword">if</span> (vec_nr == <span class="hljs-number">0x27</span> || vec_nr == <span class="hljs-number">0x2f</span>)     <span class="hljs-comment">// 0x2f是从片8259A上的最后一个irq引脚，保留</span><br>   &#123;<br>      <span class="hljs-keyword">return</span>;<span class="hljs-comment">//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。</span><br>   &#125;<br>   put_str(<span class="hljs-string">&quot;int vector : 0x&quot;</span>);<br>   put_int(vec_nr);<br>   put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 完成一般中断处理函数注册及异常名称注册 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">exception_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;    <span class="hljs-comment">// 完成一般中断处理函数注册及异常名称注册</span><br>   <span class="hljs-type">int</span> i;<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; IDT_DESC_CNT; i++) <br>   &#123;<br><span class="hljs-comment">/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,</span><br><span class="hljs-comment"> * 见kernel/kernel.S的call [idt_table + %1*4] */</span><br>      idt_table[i] = general_intr_handler;    <span class="hljs-comment">// 默认为general_intr_handler。</span><br>    <span class="hljs-comment">// 以后会由register_handler来注册具体处理函数。</span><br>      intr_name[i] = <span class="hljs-string">&quot;unknown&quot;</span>;    <span class="hljs-comment">// 先统一赋值为unknown </span><br>   &#125;<br>   intr_name[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;#DE Divide Error&quot;</span>;<br>   intr_name[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;#DB Debug Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;NMI Interrupt&quot;</span>;<br>   intr_name[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;#BP Breakpoint Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;#OF Overflow Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">5</span>] = <span class="hljs-string">&quot;#BR BOUND Range Exceeded Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;#UD Invalid Opcode Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">7</span>] = <span class="hljs-string">&quot;#NM Device Not Available Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">8</span>] = <span class="hljs-string">&quot;#DF Double Fault Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">9</span>] = <span class="hljs-string">&quot;Coprocessor Segment Overrun&quot;</span>;<br>   intr_name[<span class="hljs-number">10</span>] = <span class="hljs-string">&quot;#TS Invalid TSS Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">11</span>] = <span class="hljs-string">&quot;#NP Segment Not Present&quot;</span>;<br>   intr_name[<span class="hljs-number">12</span>] = <span class="hljs-string">&quot;#SS Stack Fault Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">13</span>] = <span class="hljs-string">&quot;#GP General Protection Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">14</span>] = <span class="hljs-string">&quot;#PF Page-Fault Exception&quot;</span>;<br>   <span class="hljs-comment">// intr_name[15] 第15项是intel保留项，未使用</span><br>   intr_name[<span class="hljs-number">16</span>] = <span class="hljs-string">&quot;#MF x87 FPU Floating-Point Error&quot;</span>;<br>   intr_name[<span class="hljs-number">17</span>] = <span class="hljs-string">&quot;#AC Alignment Check Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">18</span>] = <span class="hljs-string">&quot;#MC Machine-Check Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">19</span>] = <span class="hljs-string">&quot;#XF SIMD Floating-Point Exception&quot;</span>;<br><br>&#125;<br><br><br><span class="hljs-comment">/*完成有关中断的所有初始化工作*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">idt_init</span><span class="hljs-params">()</span> <br>&#123;<br>   put_str(<span class="hljs-string">&quot;idt_init start\n&quot;</span>);<br>   idt_desc_init();   <span class="hljs-comment">// 初始化中断描述符表</span><br>   exception_init();   <span class="hljs-comment">// 异常名初始化并注册通常的中断处理函数</span><br>   pic_init();   <span class="hljs-comment">// 初始化8259A</span><br><br>   <span class="hljs-comment">/* 加载idt */</span><br>   <span class="hljs-type">uint64_t</span> idt_operand = ((<span class="hljs-keyword">sizeof</span>(idt) - <span class="hljs-number">1</span>) | ((<span class="hljs-type">uint64_t</span>)(<span class="hljs-type">uint32_t</span>)idt &lt;&lt; <span class="hljs-number">16</span>));<br>   <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;lidt %0&quot;</span> : : <span class="hljs-string">&quot;m&quot;</span> (idt_operand))</span>;<br>   put_str(<span class="hljs-string">&quot;idt_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 开中断并返回开中断前的状态*/</span><br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_enable</span><span class="hljs-params">()</span> <br>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span>;</span><br>   <span class="hljs-keyword">if</span> (INTR_ON == intr_get_status()) <br>   &#123;<br>      old_status = INTR_ON;<br>      <span class="hljs-keyword">return</span> old_status;<br>   &#125; <br>   <span class="hljs-keyword">else</span> <br>   &#123;<br>      old_status = INTR_OFF;<br>      <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;sti&quot;</span>)</span>; <span class="hljs-comment">// 开中断,sti指令将IF位置1</span><br>      <span class="hljs-keyword">return</span> old_status;<br>   &#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 关中断,并且返回关中断前的状态 */</span><br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_disable</span><span class="hljs-params">()</span> <br>&#123;     <br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span>;</span><br>   <span class="hljs-keyword">if</span> (INTR_ON == intr_get_status()) <br>   &#123;<br>      old_status = INTR_ON;<br>      <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;cli&quot;</span> : : : <span class="hljs-string">&quot;memory&quot;</span>)</span>; <span class="hljs-comment">// 关中断,cli指令将IF位置0</span><br>      <span class="hljs-keyword">return</span> old_status;<br>   &#125; <br>   <span class="hljs-keyword">else</span> <br>   &#123;<br>      old_status = INTR_OFF;<br>      <span class="hljs-keyword">return</span> old_status;<br>   &#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 将中断状态设置为status */</span><br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_set_status</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> intr_status status)</span> <br>&#123;<br>   <span class="hljs-keyword">return</span> status &amp; INTR_ON ? intr_enable() : intr_disable();<br>&#125;<br><br><br><span class="hljs-comment">/* 获取当前中断状态 */</span><br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_get_status</span><span class="hljs-params">()</span> <br>&#123;<br>   <span class="hljs-type">uint32_t</span> eflags = <span class="hljs-number">0</span>; <br>   GET_EFLAGS(eflags);<br>   <span class="hljs-keyword">return</span> (EFLAGS_IF &amp; eflags) ? INTR_ON : INTR_OFF;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">register_handler</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> vector_no, intr_handler function)</span>;<br><br><br><span class="hljs-comment">/* 在中断处理程序数组第vector_no个元素中注册安装中断处理程序function */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">register_handler</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> vector_no, intr_handler function)</span> <br>&#123;<br><span class="hljs-comment">/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,</span><br><span class="hljs-comment"> * 见kernel/kernel.S的call [idt_table + %1*4] */</span><br>   idt_table[vector_no] = function; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="libusersyscallh创建"><a class="markdownIt-Anchor" href="#libusersyscallh创建"></a> lib/user/syscall.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LIB_USER_SYSCALL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LIB_USER_SYSCALL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SYSCALL_NR</span> </span><br><span class="hljs-class">&#123;</span><br>   SYS_GETPID,<br>&#125;;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="libusersyscallc创建"><a class="markdownIt-Anchor" href="#libusersyscallc创建"></a> lib/user/syscall.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall.h&quot;</span></span><br><br><span class="hljs-comment">/* 无参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall0(NUMBER) (&#123;       \</span><br><span class="hljs-meta">   int retval;               \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><br><span class="hljs-comment">/* 一个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall1(NUMBER, ARG1) (&#123;       \</span><br><span class="hljs-meta">   int retval;               \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 两个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall2(NUMBER, ARG1, ARG2) (&#123;       \</span><br><span class="hljs-meta">   int retval;       \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1), <span class="hljs-string">&quot;c&quot;</span> (ARG2)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 三个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall3(NUMBER, ARG1, ARG2, ARG3) (&#123;       \</span><br><span class="hljs-meta">   int retval;       \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">      <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1), <span class="hljs-string">&quot;c&quot;</span> (ARG2), <span class="hljs-string">&quot;d&quot;</span> (ARG3)       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 返回当前任务pid */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-keyword">return</span> _syscall0(SYS_GETPID);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelkernels修改"><a class="markdownIt-Anchor" href="#kernelkernels修改"></a> kernel/kernel.S修改</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">[<span class="hljs-meta">bits</span> <span class="hljs-number">32</span>]<br><span class="hljs-meta">%define</span> ERROR_CODE <span class="hljs-keyword">nop</span> <span class="hljs-comment">; 若在相关的异常中cpu已经自动压入了错误码,为保持栈中格式统一,这里不做操作.</span><br><span class="hljs-meta">%define</span> <span class="hljs-meta">ZERO</span> <span class="hljs-keyword">push</span> <span class="hljs-number">0</span> <span class="hljs-comment">; 若在相关的异常中cpu没有压入错误码,为了统一栈中格式,就手工压入一个0</span><br><br><span class="hljs-meta">extern</span> put_str<span class="hljs-comment">;</span><br><span class="hljs-meta">extern</span> idt_table<span class="hljs-comment">;</span><br><span class="hljs-meta">extern</span> syscall_table<span class="hljs-comment">;</span><br><br><span class="hljs-meta">section</span> .data<br><span class="hljs-meta">global</span> intr_entry_table<br><span class="hljs-symbol">intr_entry_table:</span><br><br>%macro VECTOR <span class="hljs-number">2</span><br><span class="hljs-meta">section</span> .text<br>intr<span class="hljs-subst">%1</span>entry: <span class="hljs-comment">; 每个中断处理程序都要压入中断向量号,所以一个中断类型一个中断处理程序，自己知道自己的中断向量号是多少</span><br><br>   <span class="hljs-subst">%2</span> <span class="hljs-comment">; 中断若有错误码会压在eip后面 </span><br><span class="hljs-comment">; 以下是保存上下文环境</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">ds</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">es</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">fs</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">gs</span><br>   <span class="hljs-keyword">pushad</span> <span class="hljs-comment">; PUSHAD指令压入32位寄存器,其入栈顺序是: EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI</span><br><br>   <span class="hljs-comment">; 如果是从片上进入的中断,除了往从片上发送EOI外,还要往主片上发送EOI </span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0x20</span>                   <span class="hljs-comment">; 中断结束命令EOI</span><br>   <span class="hljs-keyword">out</span> <span class="hljs-number">0xa0</span>,<span class="hljs-built_in">al</span>                   <span class="hljs-comment">; 向从片发送</span><br>   <span class="hljs-keyword">out</span> <span class="hljs-number">0x20</span>,<span class="hljs-built_in">al</span>                   <span class="hljs-comment">; 向主片发送</span><br><br>   <span class="hljs-keyword">push</span> <span class="hljs-subst">%1</span> <span class="hljs-comment">; 不管idt_table中的目标程序是否需要参数,都一律压入中断向量号,调试时很方便</span><br>   <span class="hljs-keyword">call</span> [idt_table + <span class="hljs-subst">%1</span>*<span class="hljs-number">4</span>]       <span class="hljs-comment">; 调用idt_table中的C版本中断处理函数</span><br>   <span class="hljs-keyword">jmp</span> intr_exit<br><br><span class="hljs-meta">section</span> .data<br>   <span class="hljs-built_in">dd</span>    intr<span class="hljs-subst">%1</span>entry <span class="hljs-comment">; 存储各个中断入口程序的地址，形成intr_entry_table数组</span><br>%endmacro<br><br><span class="hljs-meta">section</span> .text<br><span class="hljs-meta">global</span> intr_exit<br><span class="hljs-symbol">intr_exit:</span>     <br><span class="hljs-comment">; 以下是恢复上下文环境</span><br>   <span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span>   <span class="hljs-comment">; 跳过中断号</span><br>   <span class="hljs-keyword">popad</span><br>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">gs</span><br>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">fs</span><br>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">es</span><br>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ds</span><br>   <span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span>   <span class="hljs-comment">; 跳过error_code</span><br>   <span class="hljs-keyword">iretd</span><br><br><span class="hljs-comment">;;;;;;;;;;;;;;;;   0x80号中断   ;;;;;;;;;;;;;;;;</span><br><span class="hljs-meta">section</span> .text<br><span class="hljs-meta">global</span> syscall_handler<br><span class="hljs-symbol">syscall_handler:</span><br><span class="hljs-comment">;1 保存上下文环境</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-number">0</span>    <span class="hljs-comment">; 压入0, 使栈中格式统一</span><br><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">ds</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">es</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">fs</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">gs</span><br>   <span class="hljs-keyword">pushad</span>    <span class="hljs-comment">; PUSHAD指令压入32位寄存器，其入栈顺序是:</span><br>    <span class="hljs-comment">; EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI </span><br> <br>   <span class="hljs-keyword">push</span> <span class="hljs-number">0x80</span>    <span class="hljs-comment">; 此位置压入0x80也是为了保持统一的栈格式</span><br><br><span class="hljs-comment">;2 为系统调用子功能传入参数</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>    <span class="hljs-comment">; 系统调用中第3个参数</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>    <span class="hljs-comment">; 系统调用中第2个参数</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">ebx</span>    <span class="hljs-comment">; 系统调用中第1个参数</span><br><br><span class="hljs-comment">;3 调用子功能处理函数</span><br>   <span class="hljs-keyword">call</span> [syscall_table + <span class="hljs-built_in">eax</span>*<span class="hljs-number">4</span>]    <span class="hljs-comment">; 编译器会在栈中根据C函数声明匹配正确数量的参数</span><br>   <span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>, <span class="hljs-number">12</span>    <span class="hljs-comment">; 跨过上面的三个参数</span><br><br><span class="hljs-comment">;4 将call调用后的返回值存入待当前内核栈中eax的位置</span><br>   <span class="hljs-keyword">mov</span> [<span class="hljs-built_in">esp</span> + <span class="hljs-number">8</span>*<span class="hljs-number">4</span>], <span class="hljs-built_in">eax</span><br>   <span class="hljs-keyword">jmp</span> intr_exit    <span class="hljs-comment">; intr_exit返回,恢复上下文</span><br><br><br>VECTOR <span class="hljs-number">0x00</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x01</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x02</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x03</span>,<span class="hljs-meta">ZERO</span> <br>VECTOR <span class="hljs-number">0x04</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x05</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x06</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x07</span>,<span class="hljs-meta">ZERO</span> <br>VECTOR <span class="hljs-number">0x08</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x09</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x0a</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x0b</span>,ERROR_CODE <br>VECTOR <span class="hljs-number">0x0c</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x0d</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x0e</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x0f</span>,<span class="hljs-meta">ZERO</span> <br>VECTOR <span class="hljs-number">0x10</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x11</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x12</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x13</span>,<span class="hljs-meta">ZERO</span> <br>VECTOR <span class="hljs-number">0x14</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x15</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x16</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x17</span>,<span class="hljs-meta">ZERO</span> <br>VECTOR <span class="hljs-number">0x18</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x19</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x1a</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x1b</span>,ERROR_CODE <br>VECTOR <span class="hljs-number">0x1c</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x1d</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x1e</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x1f</span>,<span class="hljs-meta">ZERO</span> <br>VECTOR <span class="hljs-number">0x20</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;时钟中断对应的入口</span><br><br>VECTOR <span class="hljs-number">0x21</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;键盘中断对应的入口</span><br>VECTOR <span class="hljs-number">0x22</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;级联用的</span><br>VECTOR <span class="hljs-number">0x23</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;串口2对应的入口</span><br>VECTOR <span class="hljs-number">0x24</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;串口1对应的入口</span><br>VECTOR <span class="hljs-number">0x25</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;并口2对应的入口</span><br>VECTOR <span class="hljs-number">0x26</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;软盘对应的入口</span><br>VECTOR <span class="hljs-number">0x27</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;并口1对应的入口</span><br>VECTOR <span class="hljs-number">0x28</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;实时时钟对应的入口</span><br>VECTOR <span class="hljs-number">0x29</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;重定向</span><br>VECTOR <span class="hljs-number">0x2a</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;保留</span><br>VECTOR <span class="hljs-number">0x2b</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;保留</span><br>VECTOR <span class="hljs-number">0x2c</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;ps/2鼠标</span><br>VECTOR <span class="hljs-number">0x2d</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;fpu浮点单元异常</span><br>VECTOR <span class="hljs-number">0x2e</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;硬盘</span><br>VECTOR <span class="hljs-number">0x2f</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;保留</span><br><br>VECTOR <span class="hljs-number">0x30</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x31</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x32</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x33</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x34</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x35</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x36</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x37</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x38</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x39</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x3A</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x3B</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x3C</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x3D</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x3E</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x3F</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x40</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x41</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x42</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x43</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x44</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x45</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x46</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x47</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x48</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x49</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x4A</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x4B</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x4C</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x4D</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x4E</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x4F</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x50</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x51</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x52</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x53</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x54</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x55</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x56</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x57</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x58</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x59</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x5A</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x5B</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x5C</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x5D</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x5E</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x5F</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x61</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x62</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x63</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x64</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x65</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x66</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x67</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x68</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x69</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x6A</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x6B</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x6C</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x6D</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x6E</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x6F</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x70</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x71</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x72</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x73</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x74</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x75</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x76</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x77</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x78</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x79</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x7A</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x7B</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x7C</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x7D</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x7E</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x7F</span> ,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x80</span> ,<span class="hljs-meta">ZERO</span><br></code></pre></td></tr></table></figure><h3 id="userprogsyscall-inith创建"><a class="markdownIt-Anchor" href="#userprogsyscall-inith创建"></a> userprog/syscall-init.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __USERPROG_SYSCALLINIT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __USERPROG_SYSCALLINIT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">syscall_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">sys_getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="userprogsyscall-initc创建"><a class="markdownIt-Anchor" href="#userprogsyscall-initc创建"></a> userprog/syscall-init.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> syscall_nr 32 </span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span>* syscall;<br>syscall syscall_table[syscall_nr];<br><br><span class="hljs-comment">/* 返回当前任务的pid */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">sys_getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   <span class="hljs-keyword">return</span> running_thread()-&gt;pid;<br>&#125;<br><br><span class="hljs-comment">/* 初始化系统调用 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">syscall_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;syscall_init start\n&quot;</span>);<br>   syscall_table[SYS_GETPID]    = sys_getpid;<br>   put_str(<span class="hljs-string">&quot;syscall_init done\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="threadthreadh修改"><a class="markdownIt-Anchor" href="#threadthreadh修改"></a> thread/thread.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK_NAME_LEN 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_FILES_OPEN_PER_PROC 8</span><br><span class="hljs-comment">/* 自定义通用函数类型,它将在很多线程函数中做为形参类型 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> <span class="hljs-title function_">thread_func</span><span class="hljs-params">(<span class="hljs-type">void</span>*)</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int16_t</span> <span class="hljs-type">pid_t</span>;<br><br><span class="hljs-comment">/* 进程或线程的状态 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> </span><br><span class="hljs-class">&#123;</span><br>   TASK_RUNNING,<br>   TASK_READY,<br>   TASK_BLOCKED,<br>   TASK_WAITING,<br>   TASK_HANGING,<br>   TASK_DIED<br>&#125;;<br><br><span class="hljs-comment">/***********   中断栈intr_stack   ***********</span><br><span class="hljs-comment"> * 此结构用于中断发生时保护程序(线程或进程)的上下文环境:</span><br><span class="hljs-comment"> * 进程或线程被外部中断或软中断打断时,会按照此结构压入上下文</span><br><span class="hljs-comment"> * 寄存器,  intr_exit中的出栈操作是此结构的逆操作</span><br><span class="hljs-comment"> * 此栈在线程自己的内核栈中位置固定,所在页的最顶端</span><br><span class="hljs-comment">********************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">intr_stack</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">uint32_t</span> vec_no; <span class="hljs-comment">// kernel.S 宏VECTOR中push %1压入的中断号</span><br>    <span class="hljs-type">uint32_t</span> edi;<br>    <span class="hljs-type">uint32_t</span> esi;<br>    <span class="hljs-type">uint32_t</span> ebp;<br>    <span class="hljs-type">uint32_t</span> esp_dummy; <span class="hljs-comment">// 虽然pushad把esp也压入,但esp是不断变化的,所以会被popad忽略</span><br>    <span class="hljs-type">uint32_t</span> ebx;<br>    <span class="hljs-type">uint32_t</span> edx;<br>    <span class="hljs-type">uint32_t</span> ecx;<br>    <span class="hljs-type">uint32_t</span> eax;<br>    <span class="hljs-type">uint32_t</span> gs;<br>    <span class="hljs-type">uint32_t</span> fs;<br>    <span class="hljs-type">uint32_t</span> es;<br>    <span class="hljs-type">uint32_t</span> ds;<br><br><span class="hljs-comment">/* 以下由cpu从低特权级进入高特权级时压入 */</span><br>    <span class="hljs-type">uint32_t</span> err_code; <span class="hljs-comment">// err_code会被压入在eip之后</span><br>    <span class="hljs-type">void</span> (*eip) (<span class="hljs-type">void</span>);<br>    <span class="hljs-type">uint32_t</span> cs;<br>    <span class="hljs-type">uint32_t</span> eflags;<br>    <span class="hljs-type">void</span>* esp;<br>    <span class="hljs-type">uint32_t</span> ss;<br>&#125;;<br><br><span class="hljs-comment">/***********  线程栈thread_stack  ***********</span><br><span class="hljs-comment"> * 线程自己的栈,用于存储线程中待执行的函数</span><br><span class="hljs-comment"> * 此结构在线程自己的内核栈中位置不固定,</span><br><span class="hljs-comment"> * 用在switch_to时保存线程环境。</span><br><span class="hljs-comment"> * 实际位置取决于实际运行情况。</span><br><span class="hljs-comment"> ******************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint32_t</span> ebp;<br>   <span class="hljs-type">uint32_t</span> ebx;<br>   <span class="hljs-type">uint32_t</span> edi;<br>   <span class="hljs-type">uint32_t</span> esi;<br><br><span class="hljs-comment">/* 线程第一次执行时,eip指向待调用的函数kernel_thread </span><br><span class="hljs-comment">其它时候,eip是指向switch_to的返回地址*/</span><br>   <span class="hljs-type">void</span> (*eip) (thread_func* func, <span class="hljs-type">void</span>* func_arg);<br><br><span class="hljs-comment">/*****   以下仅供第一次被调度上cpu时使用   ****/</span><br><br><span class="hljs-comment">/* 参数unused_ret只为占位置充数为返回地址 */</span><br>   <span class="hljs-type">void</span> (*unused_retaddr);<br>   thread_func* function;   <span class="hljs-comment">// 由Kernel_thread所调用的函数名</span><br>   <span class="hljs-type">void</span>* func_arg;    <span class="hljs-comment">// 由Kernel_thread所调用的函数所需的参数</span><br>&#125;;<br><br><span class="hljs-comment">/* 进程或线程的pcb,程序控制块 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint32_t</span>* self_kstack; <span class="hljs-comment">// 各内核线程都用自己的内核栈</span><br>   <span class="hljs-type">pid_t</span> pid;<br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> <span class="hljs-title">status</span>;</span><br>   <span class="hljs-type">char</span> name[TASK_NAME_LEN];<br>   <span class="hljs-type">uint8_t</span> priority;<br>   <span class="hljs-type">uint8_t</span> ticks;   <span class="hljs-comment">// 每次在处理器上执行的时间嘀嗒数</span><br><span class="hljs-comment">/* 此任务自上cpu运行后至今占用了多少cpu嘀嗒数,</span><br><span class="hljs-comment"> * 也就是此任务执行了多久*/</span><br>   <span class="hljs-type">uint32_t</span> elapsed_ticks;<br><span class="hljs-comment">/* general_tag的作用是用于线程在一般的队列中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">general_tag</span>;</span>    <br><span class="hljs-comment">/* all_list_tag的作用是用于线程队列thread_all_list中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">all_list_tag</span>;</span><br>   <span class="hljs-type">uint32_t</span>* pgdir;              <span class="hljs-comment">// 进程自己页表的虚拟地址</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> <span class="hljs-title">userprog_vaddr</span>;</span>   <span class="hljs-comment">// 用户进程的虚拟地址 </span><br>   <span class="hljs-type">uint32_t</span> stack_magic; <span class="hljs-comment">// 用这串数字做栈的边界标记,用于检测栈的溢出</span><br>&#125;;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_ready_list</span>;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_all_list</span>;</span><br><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">running_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">kernel_thread</span><span class="hljs-params">(thread_func* function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread,thread_func function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread,<span class="hljs-type">char</span>* name,<span class="hljs-type">int</span> prio)</span>;<br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name,<span class="hljs-type">int</span> prio,thread_func function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_main_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">schedule</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_block</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> task_status stat)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_unblock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> <span class="hljs-title function_">allocate_pid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="threadthreadc修改"><a class="markdownIt-Anchor" href="#threadthreadc修改"></a> thread/thread.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;thread.h&quot;</span>   <span class="hljs-comment">//函数声明 各种结构体</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span>   <span class="hljs-comment">//前缀</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span>   <span class="hljs-comment">//memset</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span>   <span class="hljs-comment">//不清楚</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span>   <span class="hljs-comment">//分配页需要</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/sync.h&quot;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_SIZE 4096</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">main_thread</span>;</span>    <span class="hljs-comment">// 主线程PCB</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_ready_list</span>;</span>    <span class="hljs-comment">// 就绪队列</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_all_list</span>;</span>    <span class="hljs-comment">// 所有任务队列</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">thread_tag</span>;</span><span class="hljs-comment">// 用于保存队列中的线程结点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lock</span> <span class="hljs-title">pid_lock</span>;</span><br><br><span class="hljs-comment">/* 获取当前线程pcb指针 */</span><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">running_thread</span><span class="hljs-params">()</span> <br>&#123;<br>   <span class="hljs-type">uint32_t</span> esp; <br><span class="hljs-keyword">asm</span> (<span class="hljs-string">&quot;mov %%esp, %0&quot;</span> : <span class="hljs-string">&quot;=g&quot;</span> (esp));<br><span class="hljs-comment">/* 取esp整数部分即pcb起始地址 */</span><br><span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> task_struct*)(esp &amp; <span class="hljs-number">0xfffff000</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 由kernel_thread去执行function(func_arg) */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">kernel_thread</span><span class="hljs-params">(thread_func* function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* 执行function前要开中断,避免后面的时钟中断被屏蔽,而无法调度其它线程 */</span><br>intr_enable();<br>function(func_arg); <br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程栈thread_stack,将待执行的函数和参数放到thread_stack中相应的位置 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, thread_func function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* 先预留中断使用栈的空间,可见thread.h中定义的结构 */</span><br>pthread-&gt;self_kstack -= <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> intr_stack);<br><br><span class="hljs-comment">/* 再留出线程栈空间,可见thread.h中定义 */</span><br>pthread-&gt;self_kstack -= <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> thread_stack);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span>* <span class="hljs-title">kthread_stack</span> =</span> (<span class="hljs-keyword">struct</span> thread_stack*)pthread-&gt;self_kstack;<br>kthread_stack-&gt;eip = kernel_thread;<br>kthread_stack-&gt;function = function;<br>kthread_stack-&gt;func_arg = func_arg;<br>kthread_stack-&gt;ebp = kthread_stack-&gt;ebx = kthread_stack-&gt;esi = kthread_stack-&gt;edi = <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程基本信息 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, <span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio)</span> <br>&#123;<br><span class="hljs-built_in">memset</span>(pthread, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*pthread));<br>   pthread-&gt;pid = allocate_pid();<br>   <span class="hljs-built_in">strcpy</span>(pthread-&gt;name, name);<br><br><span class="hljs-keyword">if</span> (pthread == main_thread) <br>&#123;<br><span class="hljs-comment">/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */</span><br>pthread-&gt;status = TASK_RUNNING;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>pthread-&gt;status = TASK_READY;<br>&#125;<br><br><span class="hljs-comment">/* self_kstack是线程自己在内核态下使用的栈顶地址 */</span><br>pthread-&gt;self_kstack = (<span class="hljs-type">uint32_t</span>*)((<span class="hljs-type">uint32_t</span>)pthread + PG_SIZE);<br>pthread-&gt;priority = prio;<br>pthread-&gt;ticks = prio;<br>pthread-&gt;elapsed_ticks = <span class="hljs-number">0</span>;<br>pthread-&gt;pgdir = <span class="hljs-literal">NULL</span>;<br>pthread-&gt;stack_magic = <span class="hljs-number">0x19870916</span>;  <span class="hljs-comment">// 自定义的魔数</span><br>&#125;<br><br><br><span class="hljs-comment">/* 创建一优先级为prio的线程,线程名为name,线程所执行的函数是function(func_arg) */</span><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio, thread_func function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">thread</span> =</span> get_kernel_pages(<span class="hljs-number">1</span>);<br>init_thread(thread, name, prio);<br>thread_create(thread, function, func_arg);<br><br><span class="hljs-comment">/* 确保之前不在队列中 */</span><br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;thread-&gt;general_tag));<br><span class="hljs-comment">/* 加入就绪线程队列 */</span><br>list_append(&amp;thread_ready_list, &amp;thread-&gt;general_tag);<br><br><span class="hljs-comment">/* 确保之前不在队列中 */</span><br>ASSERT(!elem_find(&amp;thread_all_list, &amp;thread-&gt;all_list_tag));<br><span class="hljs-comment">/* 加入全部线程队列 */</span><br>list_append(&amp;thread_all_list, &amp;thread-&gt;all_list_tag);<br><br><span class="hljs-keyword">return</span> thread;<br>&#125;<br><br><br><span class="hljs-comment">/* 将kernel中的main函数完善为主线程 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_main_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br><span class="hljs-comment">/* 因为main线程早已运行,咱们在loader.S中进入内核时的mov esp,0xc009f000,</span><br><span class="hljs-comment">就是为其预留了tcb,地址为0xc009e000,因此不需要通过get_kernel_page另分配一页*/</span><br>main_thread = running_thread();<br>init_thread(main_thread, <span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-number">31</span>);<br><br><span class="hljs-comment">/* main函数是当前线程,当前线程不在thread_ready_list中,</span><br><span class="hljs-comment"> * 所以只将其加在thread_all_list中. */</span><br>ASSERT(!elem_find(&amp;thread_all_list, &amp;main_thread-&gt;all_list_tag));<br>list_append(&amp;thread_all_list, &amp;main_thread-&gt;all_list_tag);<br>&#125;<br><br><br><span class="hljs-comment">/* 实现任务调度 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">schedule</span><span class="hljs-params">()</span> <br>&#123;<br>ASSERT(intr_get_status() == INTR_OFF);<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread(); <br><span class="hljs-keyword">if</span> (cur-&gt;status == TASK_RUNNING) <span class="hljs-comment">// 若此线程只是cpu时间片到了,将其加入到就绪队列尾</span><br>&#123; <br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;cur-&gt;general_tag));<br>list_append(&amp;thread_ready_list, &amp;cur-&gt;general_tag);<br>cur-&gt;ticks = cur-&gt;priority;     <span class="hljs-comment">// 重新将当前线程的ticks再重置为其priority;</span><br>cur-&gt;status = TASK_READY;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123; <br><span class="hljs-comment">/* 若此线程需要某事件发生后才能继续上cpu运行,</span><br><span class="hljs-comment">不需要将其加入队列,因为当前线程不在就绪队列中。*/</span><br>&#125;<br><br><br>ASSERT(!list_empty(&amp;thread_ready_list));<br>thread_tag = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// thread_tag清空</span><br><span class="hljs-comment">/* 将thread_ready_list队列中的第一个就绪线程弹出,准备将其调度上cpu. */</span><br>thread_tag = list_pop(&amp;thread_ready_list);   <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">next</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> task_struct, general_tag, thread_tag);<br>next-&gt;status = TASK_RUNNING;<br><br>process_activate(next);<br>switch_to(cur, next);<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程环境 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>put_str(<span class="hljs-string">&quot;thread_init start\n&quot;</span>);<br><br>list_init(&amp;thread_ready_list);<br>list_init(&amp;thread_all_list);<br>lock_init(&amp;pid_lock);<br><span class="hljs-comment">/* 将当前main函数创建为线程 */</span><br>make_main_thread();<br>put_str(<span class="hljs-string">&quot;thread_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 当前线程将自己阻塞,标志其状态为stat. */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_block</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> task_status stat)</span> <br>&#123;<br><span class="hljs-comment">/* stat取值为TASK_BLOCKED,TASK_WAITING,TASK_HANGING,也就是只有这三种状态才不会被调度*/</span><br>ASSERT(((stat == TASK_BLOCKED) || (stat == TASK_WAITING) || (stat == TASK_HANGING)));<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur_thread</span> =</span> running_thread();<br>cur_thread-&gt;status = stat; <span class="hljs-comment">// 置其状态为stat </span><br>schedule();      <span class="hljs-comment">// 将当前线程换下处理器</span><br><span class="hljs-comment">/* 待当前线程被解除阻塞后才继续运行下面的intr_set_status */</span><br>   intr_set_status(old_status);<br>&#125;<br><br><br><span class="hljs-comment">/* 将线程pthread解除阻塞 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_unblock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread)</span> <br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>ASSERT(((pthread-&gt;status == TASK_BLOCKED) || (pthread-&gt;status == TASK_WAITING) || (pthread-&gt;status == TASK_HANGING)));<br><span class="hljs-keyword">if</span> (pthread-&gt;status != TASK_READY) <br>&#123;<br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;pthread-&gt;general_tag));<br><span class="hljs-keyword">if</span> (elem_find(&amp;thread_ready_list, &amp;pthread-&gt;general_tag)) <br>&#123;<br>PANIC(<span class="hljs-string">&quot;thread_unblock: blocked thread in ready_list\n&quot;</span>);<br>&#125;<br>list_push(&amp;thread_ready_list, &amp;pthread-&gt;general_tag);    <span class="hljs-comment">// 放到队列的最前面,使其尽快得到调度</span><br>pthread-&gt;status = TASK_READY;<br>&#125; <br>intr_set_status(old_status);<br>&#125;<br><br><br><span class="hljs-comment">/* 分配pid */</span><br><span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> <span class="hljs-title function_">allocate_pid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>   <span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> next_pid = <span class="hljs-number">0</span>;<br>   lock_acquire(&amp;pid_lock);<br>   next_pid++;<br>   lock_release(&amp;pid_lock);<br>   <span class="hljs-keyword">return</span> next_pid;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelinitc修改"><a class="markdownIt-Anchor" href="#kernelinitc修改"></a> kernel/init.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/timer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/tss.h&quot;</span></span><br><br><span class="hljs-comment">/*负责初始化所有模块 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_all</span><span class="hljs-params">()</span> <br>&#123;<br>   put_str(<span class="hljs-string">&quot;init_all\n&quot;</span>);<br>idt_init();     <span class="hljs-comment">// 初始化中断</span><br>mem_init();<br>timer_init();<br>thread_init();<br>console_init();<br>keyboard_init();<br>tss_init();<br>syscall_init();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改"><a class="markdownIt-Anchor" href="#kernelmainc修改"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_a</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_b</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">int</span> prog_a_pid = <span class="hljs-number">0</span>, prog_b_pid=<span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br><br>process_execute(u_prog_a, <span class="hljs-string">&quot;user_prog_a&quot;</span>);<br>process_execute(u_prog_b, <span class="hljs-string">&quot;user_prog_b&quot;</span>);<br><br>   intr_enable();<br>   console_put_str(<span class="hljs-string">&quot; main_pid:0x&quot;</span>);<br>   console_put_int(sys_getpid());<br>   console_put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>  <br>thread_start(<span class="hljs-string">&quot;k_thread_a&quot;</span>, <span class="hljs-number">31</span>, k_thread_a, <span class="hljs-string">&quot;argA &quot;</span>);<br>thread_start(<span class="hljs-string">&quot;k_thread_b&quot;</span>, <span class="hljs-number">8</span>, k_thread_b, <span class="hljs-string">&quot;argB &quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span>&#123;<br><span class="hljs-type">char</span>* para = arg;<br>console_put_str(<span class="hljs-string">&quot; thread_a_pid:0x&quot;</span>);<br>   console_put_int(sys_getpid());<br>   console_put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>console_put_str(<span class="hljs-string">&quot; prog_a_pid:0x&quot;</span>);<br>   console_put_int(prog_a_pid);<br>   console_put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span>&#123;<br><span class="hljs-type">char</span>* para = arg;<br>console_put_str(<span class="hljs-string">&quot; thread_b_pid:0x&quot;</span>);<br>   console_put_int(sys_getpid());<br>   console_put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>console_put_str(<span class="hljs-string">&quot; prog_b_pid:0x&quot;</span>);<br>   console_put_int(prog_b_pid);<br>   console_put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_a</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>prog_a_pid = getpid();<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_b</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>prog_b_pid = getpid();<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="makefile修改"><a class="markdownIt-Anchor" href="#makefile修改"></a> makefile修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs shell">BUILD_DIR = ./build<br>ENTRY_POINT = 0xc0001500<br>AS = nasm<br>CC = gcc<br>LD = ld<br>LIB = -I lib/ -I lib/kernel/ -I lib/user/ -I kernel/ -I device/ <br>ASFLAGS = -f elf<br>CFLAGS = -Wall -m32 -fno-stack-protector $(LIB) -c -fno-builtin -W -Wstrict-prototypes -Wmissing-prototypes<br>LDFLAGS =  -m elf_i386 -Ttext $(ENTRY_POINT) -e main -Map $(BUILD_DIR)/kernel.map<br>OBJS = $(BUILD_DIR)/main.o $(BUILD_DIR)/init.o $(BUILD_DIR)/interrupt.o \<br>      $(BUILD_DIR)/timer.o $(BUILD_DIR)/kernel.o $(BUILD_DIR)/print.o $(BUILD_DIR)/switch.o \<br>      $(BUILD_DIR)/debug.o $(BUILD_DIR)/string.o $(BUILD_DIR)/memory.o \<br>      $(BUILD_DIR)/bitmap.o $(BUILD_DIR)/thread.o $(BUILD_DIR)/list.o \<br>      $(BUILD_DIR)/sync.o $(BUILD_DIR)/console.o $(BUILD_DIR)/keyboard.o \<br>      $(BUILD_DIR)/ioqueue.o $(BUILD_DIR)/tss.o $(BUILD_DIR)/process.o \<br>      $(BUILD_DIR)/syscall-init.o $(BUILD_DIR)/syscall.o<br>      <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############     c代码编译     ###############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/main.o: kernel/main.c lib/kernel/print.h \</span><br><span class="language-bash">        lib/stdint.h kernel/init.h lib/string.h kernel/memory.h \</span><br><span class="language-bash">        thread/thread.h kernel/interrupt.h device/console.h \</span><br><span class="language-bash">        device/keyboard.h device/ioqueue.h userprog/process.h \</span><br><span class="language-bash">        lib/user/syscall.h userprog/syscall-init.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/init.o: kernel/init.c kernel/init.h lib/kernel/print.h \</span><br><span class="language-bash">        lib/stdint.h kernel/interrupt.h device/timer.h kernel/memory.h \</span><br><span class="language-bash">        thread/thread.h device/console.h device/keyboard.h userprog/tss.h \</span><br><span class="language-bash">        userprog/syscall-init.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/interrupt.o: kernel/interrupt.c kernel/interrupt.h \</span><br><span class="language-bash">        lib/stdint.h kernel/global.h lib/kernel/io.h lib/kernel/print.h \</span><br><span class="language-bash">        kernel/kernel.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/timer.o: device/timer.c device/timer.h lib/kernel/io.h lib/kernel/print.h \</span><br><span class="language-bash">        kernel/interrupt.h thread/thread.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/debug.o: kernel/debug.c kernel/debug.h \</span><br><span class="language-bash">        lib/kernel/print.h lib/stdint.h kernel/interrupt.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/string.o: lib/string.c lib/string.h \</span><br><span class="language-bash">kernel/debug.h kernel/global.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/memory.o: kernel/memory.c kernel/memory.h \</span><br><span class="language-bash">lib/stdint.h lib/kernel/bitmap.h kernel/debug.h lib/string.h \</span><br><span class="language-bash">thread/sync.h thread/thread.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/bitmap.o: lib/kernel/bitmap.c lib/kernel/bitmap.h kernel/global.h \</span><br><span class="language-bash">lib/string.h kernel/interrupt.h lib/kernel/print.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/thread.o: thread/thread.c thread/thread.h \</span><br><span class="language-bash">lib/stdint.h lib/string.h kernel/global.h kernel/memory.h \</span><br><span class="language-bash">kernel/debug.h kernel/interrupt.h lib/kernel/print.h \</span><br><span class="language-bash">userprog/process.h thread/sync.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/list.o: lib/kernel/list.c lib/kernel/list.h \</span><br><span class="language-bash">kernel/interrupt.h lib/stdint.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/sync.o: thread/sync.c thread/sync.h \</span><br><span class="language-bash">lib/stdint.h thread/thread.h kernel/debug.h kernel/interrupt.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/console.o: device/console.c device/console.h \</span><br><span class="language-bash">lib/kernel/print.h thread/sync.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/keyboard.o: device/keyboard.c device/keyboard.h \</span><br><span class="language-bash">lib/kernel/print.h lib/kernel/io.h kernel/interrupt.h \</span><br><span class="language-bash">kernel/global.h lib/stdint.h device/ioqueue.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/ioqueue.o: device/ioqueue.c device/ioqueue.h \</span><br><span class="language-bash">kernel/interrupt.h kernel/global.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/tss.o: userprog/tss.c userprog/tss.h \</span><br><span class="language-bash">kernel/global.h thread/thread.h lib/kernel/print.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/process.o: userprog/process.c userprog/process.h \</span><br><span class="language-bash">lib/string.h kernel/global.h kernel/memory.h lib/kernel/print.h \</span><br><span class="language-bash">thread/thread.h kernel/interrupt.h kernel/debug.h device/console.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/syscall-init.o: userprog/syscall-init.c userprog/syscall-init.h \</span><br><span class="language-bash">lib/user/syscall.h lib/stdint.h lib/kernel/print.h kernel/interrupt.h thread/thread.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/syscall.o: lib/user/syscall.c lib/user/syscall.h</span> <br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############    汇编代码编译    ###############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/kernel.o: kernel/kernel.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/print.o: lib/kernel/print.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/switch.o: thread/switch.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############    链接所有目标文件    #############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/kernel.bin: $(OBJS)</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(LD) $(LDFLAGS) $^ -o <span class="hljs-variable">$@</span></span><br><br>.PHONY : mk_dir hd clean all<br><br>mk_dir:<br>if [ ! -d $(BUILD_DIR) ]; then mkdir $(BUILD_DIR); fi<br><br>hd:<br>dd if=$(BUILD_DIR)/kernel.bin \<br>           of=/home/podest/bochs/hd60M.img \<br>           bs=512 count=200 seek=9 conv=notrunc<br><br>clean:<br>cd $(BUILD_DIR) &amp;&amp; rm -f  ./*<br><br>build: $(BUILD_DIR)/kernel.bin<br><br>all: mk_dir build hd<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h3><p><img src="/img/os/os12.1.png" alt="图为bochs运行界面" /></p><h2 id="实现printf函数"><a class="markdownIt-Anchor" href="#实现printf函数"></a> 实现printf函数</h2><h3 id="userprogsyscall-inith修改"><a class="markdownIt-Anchor" href="#userprogsyscall-inith修改"></a> userprog/syscall-init.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __USERPROG_SYSCALLINIT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __USERPROG_SYSCALLINIT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">syscall_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sys_write</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">sys_getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="userprogsyscall-initc修改"><a class="markdownIt-Anchor" href="#userprogsyscall-initc修改"></a> userprog/syscall-init.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> syscall_nr 32 </span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span>* syscall;<br>syscall syscall_table[syscall_nr];<br><br><span class="hljs-comment">/* 返回当前任务的pid */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">sys_getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   <span class="hljs-keyword">return</span> running_thread()-&gt;pid;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sys_write</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span><br>&#123;<br>    console_put_str(str);<br>&#125;<br><br><span class="hljs-comment">/* 初始化系统调用 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">syscall_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;syscall_init start\n&quot;</span>);<br>   syscall_table[SYS_GETPID] = sys_getpid;<br>   syscall_table[SYS_WRITE] = sys_write;<br>   put_str(<span class="hljs-string">&quot;syscall_init done\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="libusersyscallh修改"><a class="markdownIt-Anchor" href="#libusersyscallh修改"></a> lib/user/syscall.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LIB_USER_SYSCALL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LIB_USER_SYSCALL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SYSCALL_NR</span> </span><br><span class="hljs-class">&#123;</span><br>   SYS_GETPID,<br>   SYS_WRITE<br>&#125;;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="libusersyscallc修改"><a class="markdownIt-Anchor" href="#libusersyscallc修改"></a> lib/user/syscall.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall.h&quot;</span></span><br><br><span class="hljs-comment">/* 无参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall0(NUMBER) (&#123;       \</span><br><span class="hljs-meta">   int retval;               \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><br><span class="hljs-comment">/* 一个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall1(NUMBER, ARG1) (&#123;       \</span><br><span class="hljs-meta">   int retval;               \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 两个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall2(NUMBER, ARG1, ARG2) (&#123;       \</span><br><span class="hljs-meta">   int retval;       \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1), <span class="hljs-string">&quot;c&quot;</span> (ARG2)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 三个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall3(NUMBER, ARG1, ARG2, ARG3) (&#123;       \</span><br><span class="hljs-meta">   int retval;       \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">      <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1), <span class="hljs-string">&quot;c&quot;</span> (ARG2), <span class="hljs-string">&quot;d&quot;</span> (ARG3)       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 返回当前任务pid */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">()</span> <br>&#123;<br>   <span class="hljs-keyword">return</span> _syscall0(SYS_GETPID);<br>&#125;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> _syscall1(SYS_WRITE,str);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="libstdioh创建"><a class="markdownIt-Anchor" href="#libstdioh创建"></a> lib/stdio.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LIB_STDIO_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LIB_STDIO_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span>* va_list;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str, ...)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">vsprintf</span><span class="hljs-params">(<span class="hljs-type">char</span>* str, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, va_list ap)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">sprintf</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, ...)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="libstdioc创建"><a class="markdownIt-Anchor" href="#libstdioc创建"></a> lib/stdio.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_start(ap, v) ap = (va_list)&amp;v  <span class="hljs-comment">// 把ap指向第一个固定参数v</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_arg(ap, t) *((t*)(ap += 4))  <span class="hljs-comment">// ap指向下一个参数并返回其值</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_end(ap) ap = NULL  <span class="hljs-comment">// 清除ap</span></span><br><br><span class="hljs-comment">/* 将整型转换成字符(integer to ascii) */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">itoa</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> value, <span class="hljs-type">char</span>** buf_ptr_addr, <span class="hljs-type">uint8_t</span> base)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> m = value % base;    <span class="hljs-comment">// 求模,最先掉下来的是最低位   </span><br>   <span class="hljs-type">uint32_t</span> i = value / base;    <span class="hljs-comment">// 取整</span><br>   <span class="hljs-keyword">if</span> (i) &#123;    <span class="hljs-comment">// 如果倍数不为0则递归调用。</span><br>      itoa(i, buf_ptr_addr, base);<br>   &#125;<br>   <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">10</span>) &#123;      <span class="hljs-comment">// 如果余数是0~9</span><br>      *((*buf_ptr_addr)++) = m + <span class="hljs-string">&#x27;0&#x27;</span>;  <span class="hljs-comment">// 将数字0~9转换为字符&#x27;0&#x27;~&#x27;9&#x27;</span><br>   &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-comment">// 否则余数是A~F</span><br>      *((*buf_ptr_addr)++) = m - <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;A&#x27;</span>; <span class="hljs-comment">// 将数字A~F转换为字符&#x27;A&#x27;~&#x27;F&#x27;</span><br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/* 将参数ap按照格式format输出到字符串str,并返回替换后str长度 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">vsprintf</span><span class="hljs-params">(<span class="hljs-type">char</span>* str, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, va_list ap)</span> &#123;<br>   <span class="hljs-type">char</span>* buf_ptr = str;<br>   <span class="hljs-type">const</span> <span class="hljs-type">char</span>* index_ptr = format;<br>   <span class="hljs-type">char</span> index_char = *index_ptr;<br>   <span class="hljs-type">int32_t</span> arg_int;<br>   <span class="hljs-type">char</span>* arg_str;<br>   <span class="hljs-keyword">while</span>(index_char) &#123;<br>      <span class="hljs-keyword">if</span> (index_char != <span class="hljs-string">&#x27;%&#x27;</span>) &#123;<br> *(buf_ptr++) = index_char;<br> index_char = *(++index_ptr);<br> <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      index_char = *(++index_ptr); <span class="hljs-comment">// 得到%后面的字符</span><br>      <span class="hljs-keyword">switch</span>(index_char) &#123;<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>    arg_str = va_arg(ap, <span class="hljs-type">char</span>*);<br>    <span class="hljs-built_in">strcpy</span>(buf_ptr, arg_str);<br>    buf_ptr += <span class="hljs-built_in">strlen</span>(arg_str);<br>    index_char = *(++index_ptr);<br>    <span class="hljs-keyword">break</span>;<br><br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>    *(buf_ptr++) = va_arg(ap, <span class="hljs-type">char</span>);<br>    index_char = *(++index_ptr);<br>    <span class="hljs-keyword">break</span>;<br><br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>    arg_int = va_arg(ap, <span class="hljs-type">int</span>);<br>      <span class="hljs-comment">/* 若是负数, 将其转为正数后,再正数前面输出个负号&#x27;-&#x27;. */</span><br>    <span class="hljs-keyword">if</span> (arg_int &lt; <span class="hljs-number">0</span>) &#123;<br>       arg_int = <span class="hljs-number">0</span> - arg_int;<br>       *buf_ptr++ = <span class="hljs-string">&#x27;-&#x27;</span>;<br>    &#125;<br>    itoa(arg_int, &amp;buf_ptr, <span class="hljs-number">10</span>); <br>    index_char = *(++index_ptr);<br>    <span class="hljs-keyword">break</span>;<br><br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;x&#x27;</span>:<br>    arg_int = va_arg(ap, <span class="hljs-type">int</span>);<br>    itoa(arg_int, &amp;buf_ptr, <span class="hljs-number">16</span>); <br>    index_char = *(++index_ptr); <span class="hljs-comment">// 跳过格式字符并更新index_char</span><br>    <span class="hljs-keyword">break</span>;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">strlen</span>(str);<br>&#125;<br><br><span class="hljs-comment">/* 同printf不同的地方就是字符串不是写到终端,而是写到buf中 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">sprintf</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, ...)</span> &#123;<br>   va_list args;<br>   <span class="hljs-type">uint32_t</span> retval;<br>   va_start(args, format);<br>   retval = <span class="hljs-built_in">vsprintf</span>(buf, format, args);<br>   va_end(args);<br>   <span class="hljs-keyword">return</span> retval;<br>&#125;<br><br><span class="hljs-comment">/* 格式化输出字符串format */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, ...)</span> &#123;<br>   va_list args;<br>   va_start(args, format);       <span class="hljs-comment">// 使args指向format</span><br>   <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;       <span class="hljs-comment">// 用于存储拼接后的字符串</span><br>   <span class="hljs-built_in">vsprintf</span>(buf, format, args);<br>   va_end(args);<br>   <span class="hljs-keyword">return</span> write(buf); <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-2"><a class="markdownIt-Anchor" href="#kernelmainc修改-2"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_a</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_b</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">int</span> prog_a_pid = <span class="hljs-number">0</span>, prog_b_pid=<span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br><br>process_execute(u_prog_a, <span class="hljs-string">&quot;user_prog_a&quot;</span>);<br>process_execute(u_prog_b, <span class="hljs-string">&quot;user_prog_b&quot;</span>);<br><br>   intr_enable();<br>   console_put_str(<span class="hljs-string">&quot; main_pid:0x&quot;</span>);<br>   console_put_int(sys_getpid());<br>   console_put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>  <br>thread_start(<span class="hljs-string">&quot;k_thread_a&quot;</span>, <span class="hljs-number">31</span>, k_thread_a, <span class="hljs-string">&quot;argA &quot;</span>);<br>thread_start(<span class="hljs-string">&quot;k_thread_b&quot;</span>, <span class="hljs-number">31</span>, k_thread_b, <span class="hljs-string">&quot;argB &quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span>&#123;<br><span class="hljs-type">char</span>* para = arg;<br>console_put_str(<span class="hljs-string">&quot; thread_a_pid:0x&quot;</span>);<br>   console_put_int(sys_getpid());<br>   console_put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span>&#123;<br><span class="hljs-type">char</span>* para = arg;<br>console_put_str(<span class="hljs-string">&quot; thread_b_pid:0x&quot;</span>);<br>   console_put_int(sys_getpid());<br>   console_put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_a</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><span class="hljs-type">char</span>* name = <span class="hljs-string">&quot;prog_a&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; i am %s, my pid:%d%c&quot;</span>,name ,getpid(), <span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_b</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><span class="hljs-type">char</span>* name = <span class="hljs-string">&quot;prog_b&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; i am %s, my pid:%d%c&quot;</span>,name ,getpid(), <span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="makefile修改-2"><a class="markdownIt-Anchor" href="#makefile修改-2"></a> makefile修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs shell">BUILD_DIR = ./build<br>ENTRY_POINT = 0xc0001500<br>AS = nasm<br>CC = gcc<br>LD = ld<br>LIB = -I lib/ -I lib/kernel/ -I lib/user/ -I kernel/ -I device/ <br>ASFLAGS = -f elf<br>CFLAGS = -Wall -m32 -fno-stack-protector $(LIB) -c -fno-builtin -W -Wstrict-prototypes -Wmissing-prototypes<br>LDFLAGS =  -m elf_i386 -Ttext $(ENTRY_POINT) -e main -Map $(BUILD_DIR)/kernel.map<br>OBJS = $(BUILD_DIR)/main.o $(BUILD_DIR)/init.o $(BUILD_DIR)/interrupt.o \<br>      $(BUILD_DIR)/timer.o $(BUILD_DIR)/kernel.o $(BUILD_DIR)/print.o $(BUILD_DIR)/switch.o \<br>      $(BUILD_DIR)/debug.o $(BUILD_DIR)/string.o $(BUILD_DIR)/memory.o \<br>      $(BUILD_DIR)/bitmap.o $(BUILD_DIR)/thread.o $(BUILD_DIR)/list.o \<br>      $(BUILD_DIR)/sync.o $(BUILD_DIR)/console.o $(BUILD_DIR)/keyboard.o \<br>      $(BUILD_DIR)/ioqueue.o $(BUILD_DIR)/tss.o $(BUILD_DIR)/process.o \<br>      $(BUILD_DIR)/syscall-init.o $(BUILD_DIR)/syscall.o $(BUILD_DIR)/stdio.o<br>      <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############     c代码编译     ###############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/main.o: kernel/main.c lib/kernel/print.h \</span><br><span class="language-bash">        lib/stdint.h kernel/init.h lib/string.h kernel/memory.h \</span><br><span class="language-bash">        thread/thread.h kernel/interrupt.h device/console.h \</span><br><span class="language-bash">        device/keyboard.h device/ioqueue.h userprog/process.h \</span><br><span class="language-bash">        lib/user/syscall.h userprog/syscall-init.h lib/stdio.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/init.o: kernel/init.c kernel/init.h lib/kernel/print.h \</span><br><span class="language-bash">        lib/stdint.h kernel/interrupt.h device/timer.h kernel/memory.h \</span><br><span class="language-bash">        thread/thread.h device/console.h device/keyboard.h userprog/tss.h \</span><br><span class="language-bash">        userprog/syscall-init.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/interrupt.o: kernel/interrupt.c kernel/interrupt.h \</span><br><span class="language-bash">        lib/stdint.h kernel/global.h lib/kernel/io.h lib/kernel/print.h \</span><br><span class="language-bash">        kernel/kernel.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/timer.o: device/timer.c device/timer.h lib/kernel/io.h lib/kernel/print.h \</span><br><span class="language-bash">        kernel/interrupt.h thread/thread.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/debug.o: kernel/debug.c kernel/debug.h \</span><br><span class="language-bash">        lib/kernel/print.h lib/stdint.h kernel/interrupt.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/string.o: lib/string.c lib/string.h \</span><br><span class="language-bash">kernel/debug.h kernel/global.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/memory.o: kernel/memory.c kernel/memory.h \</span><br><span class="language-bash">lib/stdint.h lib/kernel/bitmap.h kernel/debug.h lib/string.h \</span><br><span class="language-bash">thread/sync.h thread/thread.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/bitmap.o: lib/kernel/bitmap.c lib/kernel/bitmap.h kernel/global.h \</span><br><span class="language-bash">lib/string.h kernel/interrupt.h lib/kernel/print.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/thread.o: thread/thread.c thread/thread.h \</span><br><span class="language-bash">lib/stdint.h lib/string.h kernel/global.h kernel/memory.h \</span><br><span class="language-bash">kernel/debug.h kernel/interrupt.h lib/kernel/print.h \</span><br><span class="language-bash">userprog/process.h thread/sync.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/list.o: lib/kernel/list.c lib/kernel/list.h \</span><br><span class="language-bash">kernel/interrupt.h lib/stdint.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/sync.o: thread/sync.c thread/sync.h \</span><br><span class="language-bash">lib/stdint.h thread/thread.h kernel/debug.h kernel/interrupt.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/console.o: device/console.c device/console.h \</span><br><span class="language-bash">lib/kernel/print.h thread/sync.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/keyboard.o: device/keyboard.c device/keyboard.h \</span><br><span class="language-bash">lib/kernel/print.h lib/kernel/io.h kernel/interrupt.h \</span><br><span class="language-bash">kernel/global.h lib/stdint.h device/ioqueue.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/ioqueue.o: device/ioqueue.c device/ioqueue.h \</span><br><span class="language-bash">kernel/interrupt.h kernel/global.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/tss.o: userprog/tss.c userprog/tss.h \</span><br><span class="language-bash">kernel/global.h thread/thread.h lib/kernel/print.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/process.o: userprog/process.c userprog/process.h \</span><br><span class="language-bash">lib/string.h kernel/global.h kernel/memory.h lib/kernel/print.h \</span><br><span class="language-bash">thread/thread.h kernel/interrupt.h kernel/debug.h device/console.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/syscall-init.o: userprog/syscall-init.c userprog/syscall-init.h \</span><br><span class="language-bash">lib/user/syscall.h lib/stdint.h lib/kernel/print.h kernel/interrupt.h thread/thread.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/syscall.o: lib/user/syscall.c lib/user/syscall.h</span> <br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/stdio.o: lib/stdio.c lib/stdio.h lib/stdint.h lib/string.h lib/user/syscall.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############    汇编代码编译    ###############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/kernel.o: kernel/kernel.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/print.o: lib/kernel/print.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/switch.o: thread/switch.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############    链接所有目标文件    #############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/kernel.bin: $(OBJS)</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(LD) $(LDFLAGS) $^ -o <span class="hljs-variable">$@</span></span><br><br>.PHONY : mk_dir hd clean all<br><br>mk_dir:<br>if [ ! -d $(BUILD_DIR) ]; then mkdir $(BUILD_DIR); fi<br><br>hd:<br>dd if=$(BUILD_DIR)/kernel.bin \<br>           of=/home/podest/bochs/hd60M.img \<br>           bs=512 count=200 seek=9 conv=notrunc<br><br>clean:<br>cd $(BUILD_DIR) &amp;&amp; rm -f  ./*<br><br>build: $(BUILD_DIR)/kernel.bin<br><br>all: mk_dir build hd<br></code></pre></td></tr></table></figure><h3 id="运行结果-2"><a class="markdownIt-Anchor" href="#运行结果-2"></a> 运行结果</h3><p><img src="/img/os/os12.2.png" alt="图为bochs运行界面" /></p><h2 id="完善堆内存管理"><a class="markdownIt-Anchor" href="#完善堆内存管理"></a> 完善堆内存管理</h2><h3 id="目的"><a class="markdownIt-Anchor" href="#目的"></a> 目的</h3><p>我们在第八章实现了动态申请多页内存的函数，但是申请一页以下的内存并未实现，内存释放完全没有实现，所以这次实验就是动态申请内存的完善。</p><h3 id="kernelmemoryh修改"><a class="markdownIt-Anchor" href="#kernelmemoryh修改"></a> kernel/memory.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __KERNEL_MEMORY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __KERNEL_MEMORY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><br><span class="hljs-comment">/* 内存池标记,用于判断用哪个内存池 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">pool_flags</span> &#123;</span><br>PF_KERNEL = <span class="hljs-number">1</span>,    <span class="hljs-comment">// 内核内存池</span><br>PF_USER = <span class="hljs-number">2</span>     <span class="hljs-comment">// 用户内存池</span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_P_1  1<span class="hljs-comment">// 页表项或页目录项存在属性位</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_P_0  0<span class="hljs-comment">// 页表项或页目录项存在属性位</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_RW_R  0<span class="hljs-comment">// R/W 属性位值, 读/执行</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_RW_W  2<span class="hljs-comment">// R/W 属性位值, 读/写/执行</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_US_S  0<span class="hljs-comment">// U/S 属性位值, 系统级</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_US_U  4<span class="hljs-comment">// U/S 属性位值, 用户级</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DESC_CNT 7</span><br><br><span class="hljs-comment">/* 用于虚拟地址管理 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> &#123;</span><br><span class="hljs-comment">/* 虚拟地址用到的位图结构，用于记录哪些虚拟地址被占用了。以页为单位。*/</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bitmap</span> <span class="hljs-title">vaddr_bitmap</span>;</span><br><span class="hljs-comment">/* 管理的虚拟地址 */</span><br>  <span class="hljs-type">uint32_t</span> vaddr_start;<br>&#125;;<br><br><br><span class="hljs-comment">/* 内存块 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block</span> &#123;</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">free_elem</span>;</span><br>&#125;;<br><br><span class="hljs-comment">/* 内存块描述符 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block_desc</span> &#123;</span><br><span class="hljs-type">uint32_t</span> block_size; <span class="hljs-comment">// 内存块大小</span><br><span class="hljs-type">uint32_t</span> blocks_per_arena; <span class="hljs-comment">// 本arena中可容纳此mem_block的数量.</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">free_list</span>;</span> <span class="hljs-comment">// 目前可用的mem_block链表</span><br>&#125;;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span> <span class="hljs-title">kernel_pool</span>,<span class="hljs-title">user_pool</span>;</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">vaddr_get</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf,<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pte_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pde_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">palloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pool* m_pool)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">page_table_add</span><span class="hljs-params">(<span class="hljs-type">void</span>* _vaddr,<span class="hljs-type">void</span>* _page_phyaddr)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf,<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_kernel_pages</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_user_pages</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_a_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf,<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">addr_v2p</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mem_pool_init</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> all_mem)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">mem_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="kernelmemoryc修改"><a class="markdownIt-Anchor" href="#kernelmemoryc修改"></a> kernel/memory.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/sync.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_SIZE 4096</span><br><br><span class="hljs-comment">/***************  位图地址 ********************</span><br><span class="hljs-comment">* 因为0xc009f000是内核主线程栈顶，0xc009e000是内核主线程的pcb.</span><br><span class="hljs-comment">* 一个页框大小的位图可表示128M内存, 位图位置安排在地址0xc009a000,</span><br><span class="hljs-comment">* 这样本系统最大支持4个页框的位图,即512M内存 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MEM_BITMAP_BASE 0xc009a000</span><br><span class="hljs-comment">/*************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PDE_IDX(addr) ((addr &amp; 0xffc00000) &gt;&gt; 22)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTE_IDX(addr) ((addr &amp; 0x003ff000) &gt;&gt; 12)</span><br><br><span class="hljs-comment">/* 0xc0000000是内核从虚拟地址3G起. 0x100000意指跨过低端1M内存,使虚拟地址在逻辑上连续 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> K_HEAP_START 0xc0100000</span><br><br><span class="hljs-comment">/* 内存池结构,生成两个实例用于管理内核内存池和用户内存池 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span> </span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bitmap</span> <span class="hljs-title">pool_bitmap</span>;</span> <span class="hljs-comment">// 本内存池用到的位图结构,用于管理物理内存</span><br>  <span class="hljs-type">uint32_t</span> phy_addr_start; <span class="hljs-comment">// 本内存池所管理物理内存的起始地址</span><br>  <span class="hljs-type">uint32_t</span> pool_size; <span class="hljs-comment">// 本内存池字节容量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lock</span> <span class="hljs-title">lock</span>;</span> <span class="hljs-comment">// 申请内存时互斥</span><br>&#125;;<br><span class="hljs-comment">/* 内存仓库arena元信息 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">arena</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block_desc</span>* <span class="hljs-title">desc</span>;</span> <span class="hljs-comment">// 此arena关联的mem_block_desc</span><br><span class="hljs-comment">/* large为ture时,cnt表示的是页框数。</span><br><span class="hljs-comment"> * 否则cnt表示空闲mem_block数量 */</span><br>   <span class="hljs-type">uint32_t</span> cnt;<br>   <span class="hljs-type">bool</span> large;   <br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block_desc</span> <span class="hljs-title">k_block_descs</span>[<span class="hljs-title">DESC_CNT</span>];</span><span class="hljs-comment">// 内核内存块描述符数组</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span> <span class="hljs-title">kernel_pool</span>, <span class="hljs-title">user_pool</span>;</span>      <span class="hljs-comment">// 生成内核内存池和用户内存池</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> <span class="hljs-title">kernel_vaddr</span>;</span> <span class="hljs-comment">// 此结构是用来给内核分配虚拟地址</span><br><br><br><span class="hljs-comment">/* 在pf表示的虚拟内存池中申请pg_cnt个虚拟页,</span><br><span class="hljs-comment">* 成功则返回虚拟页的起始地址, 失败则返回NULL */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">vaddr_get</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf, <span class="hljs-type">uint32_t</span> pg_cnt)</span> <br>&#123;<br>   <span class="hljs-type">int</span> vaddr_start = <span class="hljs-number">0</span>, bit_idx_start = <span class="hljs-number">-1</span>;<br>   <span class="hljs-type">uint32_t</span> cnt = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">if</span> (pf == PF_KERNEL) <span class="hljs-comment">// 内核内存池</span><br>&#123;     <br>      bit_idx_start  = bitmap_scan(&amp;kernel_vaddr.vaddr_bitmap, pg_cnt);<br>      <span class="hljs-keyword">if</span> (bit_idx_start == <span class="hljs-number">-1</span>) <br>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span>(cnt &lt; pg_cnt) <br>&#123;<br> bitmap_set(&amp;kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, <span class="hljs-number">1</span>);<br>      &#125;<br>      vaddr_start = kernel_vaddr.vaddr_start + bit_idx_start * PG_SIZE;<br>   &#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 用户内存池</span><br>&#123;     <br>      <span class="hljs-keyword">struct</span> task_struct* cur = running_thread();<br>      bit_idx_start  = bitmap_scan(&amp;cur-&gt;userprog_vaddr.vaddr_bitmap, pg_cnt);<br>      <span class="hljs-keyword">if</span> (bit_idx_start == <span class="hljs-number">-1</span>) <br>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span>(cnt &lt; pg_cnt) <br>&#123;<br> bitmap_set(&amp;cur-&gt;userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, <span class="hljs-number">1</span>);<br>      &#125;<br>      vaddr_start = cur-&gt;userprog_vaddr.vaddr_start + bit_idx_start * PG_SIZE;<br><br>   <span class="hljs-comment">/* (0xc0000000 - PG_SIZE)做为用户3级栈已经在start_process被分配 */</span><br>      ASSERT((<span class="hljs-type">uint32_t</span>)vaddr_start &lt; (<span class="hljs-number">0xc0000000</span> - PG_SIZE));<br>   &#125;<br>   <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)vaddr_start;<br>&#125;<br><br><br><span class="hljs-comment">/* 得到虚拟地址vaddr对应的pte指针*/</span><br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pte_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span> <br>&#123;<br>  <span class="hljs-comment">/* 先访问到页表自己 + \</span><br><span class="hljs-comment">   * 再用页目录项pde(页目录内页表的索引)做为pte的索引访问到页表 + \</span><br><span class="hljs-comment">   * 再用pte的索引做为页内偏移*/</span><br>  <span class="hljs-type">uint32_t</span>* pte = (<span class="hljs-type">uint32_t</span>*)(<span class="hljs-number">0xffc00000</span> + \<br>    ((vaddr &amp; <span class="hljs-number">0xffc00000</span>) &gt;&gt; <span class="hljs-number">10</span>) + \<br>    PTE_IDX(vaddr) * <span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">return</span> pte;<br>&#125;<br><br><br><span class="hljs-comment">/* 得到虚拟地址vaddr对应的pde的指针 */</span><br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pde_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span> <br>&#123;<br>  <span class="hljs-comment">/* 0xfffff是用来访问到页表本身所在的地址 */</span><br>  <span class="hljs-type">uint32_t</span>* pde = (<span class="hljs-type">uint32_t</span>*)((<span class="hljs-number">0xfffff000</span>) + PDE_IDX(vaddr) * <span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">return</span> pde;<br>&#125;<br><br><br><span class="hljs-comment">/* 在m_pool指向的物理内存池中分配1个物理页,</span><br><span class="hljs-comment">* 成功则返回页框的物理地址,失败则返回NULL */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">palloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pool* m_pool)</span> <br>&#123;<br>  <span class="hljs-comment">/* 扫描或设置位图要保证原子操作 */</span><br>  <span class="hljs-type">int</span> bit_idx = bitmap_scan(&amp;m_pool-&gt;pool_bitmap, <span class="hljs-number">1</span>);    <span class="hljs-comment">// 找一个物理页面</span><br>  <span class="hljs-keyword">if</span> (bit_idx == <span class="hljs-number">-1</span> ) <br>&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>  &#125;<br>  bitmap_set(&amp;m_pool-&gt;pool_bitmap, bit_idx, <span class="hljs-number">1</span>);<span class="hljs-comment">// 将此位bit_idx置1</span><br>  <span class="hljs-type">uint32_t</span> page_phyaddr = ((bit_idx * PG_SIZE) + m_pool-&gt;phy_addr_start);<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)page_phyaddr;<br>&#125;<br><br><br><span class="hljs-comment">/* 页表中添加虚拟地址_vaddr与物理地址_page_phyaddr的映射 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">page_table_add</span><span class="hljs-params">(<span class="hljs-type">void</span>* _vaddr, <span class="hljs-type">void</span>* _page_phyaddr)</span> <br>&#123;<br>  <span class="hljs-type">uint32_t</span> vaddr = (<span class="hljs-type">uint32_t</span>)_vaddr, page_phyaddr = (<span class="hljs-type">uint32_t</span>)_page_phyaddr;<br>  <span class="hljs-type">uint32_t</span>* pde = pde_ptr(vaddr);<br>  <span class="hljs-type">uint32_t</span>* pte = pte_ptr(vaddr);<br><br><span class="hljs-comment">/************************   注意   *************************</span><br><span class="hljs-comment">* 执行*pte,会访问到pde。所以确保pde创建完成后才能执行*pte,</span><br><span class="hljs-comment">* 否则会引发page_fault。因此在pde未创建时,</span><br><span class="hljs-comment">* *pte只能出现在下面最外层else语句块中的*pde后面。</span><br><span class="hljs-comment">* *********************************************************/</span><br>  <span class="hljs-comment">/* 先在页目录内判断目录项的P位，若为1,则表示该表已存在 */</span><br>  <span class="hljs-keyword">if</span> (*pde &amp; <span class="hljs-number">0x00000001</span>) <br>&#123;<br>     ASSERT(!(*pte &amp; <span class="hljs-number">0x00000001</span>));<br><br>     <span class="hljs-keyword">if</span> (!(*pte &amp; <span class="hljs-number">0x00000001</span>)) <span class="hljs-comment">// 只要是创建页表,pte就应该不存在,多判断一下放心</span><br>&#123;   <br>    *pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);    <span class="hljs-comment">// US=1,RW=1,P=1</span><br>     &#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 调试模式下不会执行到此,上面的ASSERT会先执行.关闭调试时下面的PANIC会起作用</span><br>&#123;  <br>    PANIC(<span class="hljs-string">&quot;pte repeat&quot;</span>);<br>     &#125;<br>  &#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 页目录项不存在,所以要先创建页目录项再创建页表项.</span><br>&#123;  <br>     <span class="hljs-comment">/* 页表中用到的页框一律从内核空间分配 */</span><br>     <span class="hljs-type">uint32_t</span> pde_phyaddr = (<span class="hljs-type">uint32_t</span>)palloc(&amp;kernel_pool);<br>     *pde = (pde_phyaddr | PG_US_U | PG_RW_W | PG_P_1);<br><br><span class="hljs-comment">/*******************   必须将页表所在的页清0   *********************</span><br><span class="hljs-comment">* 必须把分配到的物理页地址pde_phyaddr对应的物理内存清0,</span><br><span class="hljs-comment">* 避免里面的陈旧数据变成了页表中的页表项,从而让页表混乱.</span><br><span class="hljs-comment">* pte的高20位会映射到pde所指向的页表的物理起始地址.*/</span><br>     <span class="hljs-built_in">memset</span>((<span class="hljs-type">void</span>*)((<span class="hljs-type">int</span>)pte &amp; <span class="hljs-number">0xfffff000</span>), <span class="hljs-number">0</span>, PG_SIZE); <br><span class="hljs-comment">/************************************************************/</span><br>     ASSERT(!(*pte &amp; <span class="hljs-number">0x00000001</span>));<br>     *pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);      <span class="hljs-comment">// US=1,RW=1,P=1</span><br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 分配pg_cnt个页空间,成功则返回起始虚拟地址,失败时返回NULL */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf, <span class="hljs-type">uint32_t</span> pg_cnt)</span> <br>&#123;<br>  ASSERT(pg_cnt &gt; <span class="hljs-number">0</span> &amp;&amp; pg_cnt &lt; <span class="hljs-number">3840</span>);<br><span class="hljs-comment">/***********   malloc_page的原理是三个动作的合成:   ***********</span><br><span class="hljs-comment">     1通过vaddr_get在虚拟内存池中申请虚拟地址</span><br><span class="hljs-comment">     2通过palloc在物理内存池中申请物理页</span><br><span class="hljs-comment">     3通过page_table_add将以上两步得到的虚拟地址和物理地址在页表中完成映射</span><br><span class="hljs-comment">***************************************************************/</span><br>  <span class="hljs-type">void</span>* vaddr_start = vaddr_get(pf, pg_cnt);<br>  <span class="hljs-keyword">if</span> (vaddr_start == <span class="hljs-literal">NULL</span>) <br>&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>  &#125;<br>  <span class="hljs-type">uint32_t</span> vaddr = (<span class="hljs-type">uint32_t</span>)vaddr_start, cnt = pg_cnt;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span>* <span class="hljs-title">mem_pool</span> =</span> pf &amp; PF_KERNEL ? &amp;kernel_pool : &amp;user_pool;<br><br><span class="hljs-comment">/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/</span><br>  <span class="hljs-keyword">while</span> (cnt-- &gt; <span class="hljs-number">0</span>) <br>&#123;<br>     <span class="hljs-type">void</span>* page_phyaddr = palloc(mem_pool);<br><br><span class="hljs-comment">/* 失败时要将曾经已申请的虚拟地址和物理页全部回滚，</span><br><span class="hljs-comment">* 在将来完成内存回收时再补充 */</span><br>     <span class="hljs-keyword">if</span> (page_phyaddr == <span class="hljs-literal">NULL</span>) <br>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>     &#125;<br>     page_table_add((<span class="hljs-type">void</span>*)vaddr, page_phyaddr); <span class="hljs-comment">// 在页表中做映射 </span><br>     vaddr += PG_SIZE; <span class="hljs-comment">// 下一个虚拟页</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> vaddr_start;<br>&#125;<br><br><br><span class="hljs-comment">/* 从内核物理内存池中申请pg_cnt页内存,</span><br><span class="hljs-comment">* 成功则返回其虚拟地址,失败则返回NULL */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_kernel_pages</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_cnt)</span> <br>&#123;<br>  <span class="hljs-type">void</span>* vaddr =  malloc_page(PF_KERNEL, pg_cnt);<br>  <span class="hljs-keyword">if</span> (vaddr != <span class="hljs-literal">NULL</span>) <br>&#123;   <span class="hljs-comment">// 若分配的地址不为空,将页框清0后返回</span><br>     <span class="hljs-built_in">memset</span>(vaddr, <span class="hljs-number">0</span>, pg_cnt * PG_SIZE);<br>  &#125;<br>  <span class="hljs-keyword">return</span> vaddr;<br>&#125;<br><br><br><span class="hljs-comment">/* 在用户空间中申请4k内存,并返回其虚拟地址 */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_user_pages</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_cnt)</span> <br>&#123;<br>   lock_acquire(&amp;user_pool.lock);<br>   <span class="hljs-type">void</span>* vaddr = malloc_page(PF_USER, pg_cnt);<br>   <span class="hljs-keyword">if</span> (vaddr != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">// 若分配的地址不为空,将页框清0后返回</span><br>&#123;   <br>      <span class="hljs-built_in">memset</span>(vaddr, <span class="hljs-number">0</span>, pg_cnt * PG_SIZE);<br>   &#125;<br>   lock_release(&amp;user_pool.lock);<br>   <span class="hljs-keyword">return</span> vaddr;<br>&#125;<br><br><br><span class="hljs-comment">/* 将地址vaddr与pf池中的物理地址关联,仅支持一页空间分配 */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_a_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf, <span class="hljs-type">uint32_t</span> vaddr)</span> <br>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span>* <span class="hljs-title">mem_pool</span> =</span> pf &amp; PF_KERNEL ? &amp;kernel_pool : &amp;user_pool;<br>   lock_acquire(&amp;mem_pool-&gt;lock);<br><br>   <span class="hljs-comment">/* 先将虚拟地址对应的位图置1 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();<br>   <span class="hljs-type">int32_t</span> bit_idx = <span class="hljs-number">-1</span>;<br><br><span class="hljs-comment">/* 若当前是用户进程申请用户内存,就修改用户进程自己的虚拟地址位图 */</span><br>   <span class="hljs-keyword">if</span> (cur-&gt;pgdir != <span class="hljs-literal">NULL</span> &amp;&amp; pf == PF_USER) <br>&#123;<br>      bit_idx = (vaddr - cur-&gt;userprog_vaddr.vaddr_start) / PG_SIZE;<br>      ASSERT(bit_idx &gt;= <span class="hljs-number">0</span>);<br>      bitmap_set(&amp;cur-&gt;userprog_vaddr.vaddr_bitmap, bit_idx, <span class="hljs-number">1</span>);<br>   &#125; <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;pgdir == <span class="hljs-literal">NULL</span> &amp;&amp; pf == PF_KERNEL)<br>&#123;<br><span class="hljs-comment">/* 如果是内核线程申请内核内存,就修改kernel_vaddr. */</span><br>      bit_idx = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;<br>      ASSERT(bit_idx &gt; <span class="hljs-number">0</span>);<br>      bitmap_set(&amp;kernel_vaddr.vaddr_bitmap, bit_idx, <span class="hljs-number">1</span>);<br>   &#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>      PANIC(<span class="hljs-string">&quot;get_a_page:not allow kernel alloc userspace or user alloc kernelspace by get_a_page&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-type">void</span>* page_phyaddr = palloc(mem_pool);<br>   <span class="hljs-keyword">if</span> (page_phyaddr == <span class="hljs-literal">NULL</span>) <br>&#123;<br>      lock_release(&amp;mem_pool-&gt;lock);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>   &#125;<br>   page_table_add((<span class="hljs-type">void</span>*)vaddr, page_phyaddr); <br>   lock_release(&amp;mem_pool-&gt;lock);<br>   <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)vaddr;<br>&#125;<br><br><br><span class="hljs-comment">/* 得到虚拟地址映射到的物理地址 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">addr_v2p</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span> <br>&#123;<br>   <span class="hljs-type">uint32_t</span>* pte = pte_ptr(vaddr);<br><span class="hljs-comment">/* (*pte)的值是页表所在的物理页框地址,</span><br><span class="hljs-comment"> * 去掉其低12位的页表项属性+虚拟地址vaddr的低12位 */</span><br>   <span class="hljs-keyword">return</span> ((*pte &amp; <span class="hljs-number">0xfffff000</span>) + (vaddr &amp; <span class="hljs-number">0x00000fff</span>));<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化内存池 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mem_pool_init</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> all_mem)</span> <br>&#123;<br>  put_str(<span class="hljs-string">&quot;   mem_pool_init start\n&quot;</span>);<br>  <span class="hljs-type">uint32_t</span> page_table_size = PG_SIZE * <span class="hljs-number">256</span>;  <span class="hljs-comment">// 页表大小= 1页的页目录表+第0和第768个页目录项指向同一个页表+</span><br>                                                 <span class="hljs-comment">// 第769~1022个页目录项共指向254个页表,共256个页框</span><br>  <span class="hljs-type">uint32_t</span> used_mem = page_table_size + <span class="hljs-number">0x100000</span>;  <span class="hljs-comment">// 0x100000为低端1M内存</span><br>  <span class="hljs-type">uint32_t</span> free_mem = all_mem - used_mem;<br>  <span class="hljs-type">uint16_t</span> all_free_pages = free_mem / PG_SIZE;  <span class="hljs-comment">// 1页为4k,不管总内存是不是4k的倍数,</span><br>     <span class="hljs-comment">// 对于以页为单位的内存分配策略，不足1页的内存不用考虑了。</span><br>  <span class="hljs-type">uint16_t</span> kernel_free_pages = all_free_pages / <span class="hljs-number">2</span>;<br>  <span class="hljs-type">uint16_t</span> user_free_pages = all_free_pages - kernel_free_pages;<br><br><span class="hljs-comment">/* 为简化位图操作，余数不处理，坏处是这样做会丢内存。</span><br><span class="hljs-comment">好处是不用做内存的越界检查,因为位图表示的内存少于实际物理内存*/</span><br>  <span class="hljs-type">uint32_t</span> kbm_length = kernel_free_pages / <span class="hljs-number">8</span>;  <span class="hljs-comment">// Kernel BitMap的长度,位图中的一位表示一页,以字节为单位</span><br>  <span class="hljs-type">uint32_t</span> ubm_length = user_free_pages / <span class="hljs-number">8</span>;  <span class="hljs-comment">// User BitMap的长度.</span><br><br>  <span class="hljs-type">uint32_t</span> kp_start = used_mem;  <span class="hljs-comment">// Kernel Pool start,内核内存池的起始地址</span><br>  <span class="hljs-type">uint32_t</span> up_start = kp_start + kernel_free_pages * PG_SIZE;  <span class="hljs-comment">// User Pool start,用户内存池的起始地址</span><br><br>  kernel_pool.phy_addr_start = kp_start;<br>  user_pool.phy_addr_start   = up_start;<br><br>  kernel_pool.pool_size = kernel_free_pages * PG_SIZE;<br>  user_pool.pool_size = user_free_pages * PG_SIZE;<br><br>  kernel_pool.pool_bitmap.btmp_bytes_len = kbm_length;<br>  user_pool.pool_bitmap.btmp_bytes_len  = ubm_length;<br><br><span class="hljs-comment">/*********    内核内存池和用户内存池位图   ***********</span><br><span class="hljs-comment">*   位图是全局的数据，长度不固定。</span><br><span class="hljs-comment">*   全局或静态的数组需要在编译时知道其长度，</span><br><span class="hljs-comment">*   而我们需要根据总内存大小算出需要多少字节。</span><br><span class="hljs-comment">*   所以改为指定一块内存来生成位图.</span><br><span class="hljs-comment">*   ************************************************/</span><br><span class="hljs-comment">// 内核使用的最高地址是0xc009f000,这是主线程的栈地址.(内核的大小预计为70K左右)</span><br><span class="hljs-comment">// 32M内存占用的位图是2k.内核内存池的位图先定在MEM_BITMAP_BASE(0xc009a000)处.</span><br>  kernel_pool.pool_bitmap.bits = (<span class="hljs-type">void</span>*)MEM_BITMAP_BASE;<br>          <br><span class="hljs-comment">/* 用户内存池的位图紧跟在内核内存池位图之后 */</span><br>  user_pool.pool_bitmap.bits = (<span class="hljs-type">void</span>*)(MEM_BITMAP_BASE + kbm_length);<br>  <span class="hljs-comment">/******************** 输出内存池信息 **********************/</span><br>  put_str(<span class="hljs-string">&quot;      kernel_pool_bitmap_start:&quot;</span>);put_int((<span class="hljs-type">int</span>)kernel_pool.pool_bitmap.bits);<br>  put_str(<span class="hljs-string">&quot; kernel_pool_phy_addr_start:&quot;</span>);put_int(kernel_pool.phy_addr_start);<br>  put_str(<span class="hljs-string">&quot;\n&quot;</span>);<br>  put_str(<span class="hljs-string">&quot;      user_pool_bitmap_start:&quot;</span>);put_int((<span class="hljs-type">int</span>)user_pool.pool_bitmap.bits);<br>  put_str(<span class="hljs-string">&quot; user_pool_phy_addr_start:&quot;</span>);put_int(user_pool.phy_addr_start);<br>  put_str(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>  <span class="hljs-comment">/* 将位图置0*/</span><br>  bitmap_init(&amp;kernel_pool.pool_bitmap);<br>  bitmap_init(&amp;user_pool.pool_bitmap);<br><br>  <span class="hljs-comment">/* 下面初始化内核虚拟地址的位图,按实际物理内存大小生成数组。*/</span><br>  kernel_vaddr.vaddr_bitmap.btmp_bytes_len = kbm_length;      <span class="hljs-comment">// 用于维护内核堆的虚拟地址,所以要和内核内存池大小一致</span><br><br> <span class="hljs-comment">/* 位图的数组指向一块未使用的内存,目前定位在内核内存池和用户内存池之外*/</span><br>  kernel_vaddr.vaddr_bitmap.bits = (<span class="hljs-type">void</span>*)(MEM_BITMAP_BASE + kbm_length + ubm_length);<br><br>  kernel_vaddr.vaddr_start = K_HEAP_START;<br>  bitmap_init(&amp;kernel_vaddr.vaddr_bitmap);<br>lock_init(&amp;kernel_pool.lock);<br>  lock_init(&amp;user_pool.lock);<br>  put_str(<span class="hljs-string">&quot;   mem_pool_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 为malloc做准备 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">block_desc_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mem_block_desc* desc_array)</span> <br>&#123;   <br><span class="hljs-type">uint16_t</span> desc_idx, block_size = <span class="hljs-number">16</span>;<br><span class="hljs-comment">/* 初始化每个mem_block_desc描述符 */</span><br><span class="hljs-keyword">for</span> (desc_idx = <span class="hljs-number">0</span>; desc_idx &lt; DESC_CNT; desc_idx++) <br>&#123;<br>desc_array[desc_idx].block_size = block_size;<br><span class="hljs-comment">/* 初始化arena中的内存块数量 */</span><br>desc_array[desc_idx].blocks_per_arena = (PG_SIZE - <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> arena)) / block_size;  <br>list_init(&amp;desc_array[desc_idx].free_list);<br>block_size *= <span class="hljs-number">2</span>;         <span class="hljs-comment">// 更新为下一个规格内存块</span><br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 内存管理部分初始化入口 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">mem_init</span><span class="hljs-params">()</span> <br>&#123;<br>put_str(<span class="hljs-string">&quot;mem_init start\n&quot;</span>);<br><span class="hljs-type">uint32_t</span> mem_bytes_total = (*(<span class="hljs-type">uint32_t</span>*)(<span class="hljs-number">0xb00</span>));<br>mem_pool_init(mem_bytes_total);  <span class="hljs-comment">// 初始化内存池</span><br><span class="hljs-comment">/* 初始化mem_block_desc数组descs,为malloc做准备 */</span><br>block_desc_init(k_block_descs);<br>put_str(<span class="hljs-string">&quot;mem_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 返回arena中第idx个内存块的地址 */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> mem_block* <span class="hljs-title function_">arena2block</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> arena* a, <span class="hljs-type">uint32_t</span> idx)</span> <br>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> mem_block*)((<span class="hljs-type">uint32_t</span>)a + <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> arena) + idx * a-&gt;desc-&gt;block_size);<br>&#125;<br><br><br><span class="hljs-comment">/* 返回内存块b所在的arena地址 */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> arena* <span class="hljs-title function_">block2arena</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mem_block* b)</span> <br>&#123;<br>   <span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> arena*)((<span class="hljs-type">uint32_t</span>)b &amp; <span class="hljs-number">0xfffff000</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 在堆中申请size字节内存 */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">sys_malloc</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> size)</span> <br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">pool_flags</span> <span class="hljs-title">PF</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span>* <span class="hljs-title">mem_pool</span>;</span><br><span class="hljs-type">uint32_t</span> pool_size;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block_desc</span>* <span class="hljs-title">descs</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur_thread</span> =</span> running_thread();<br><br><span class="hljs-comment">/* 判断用哪个内存池*/</span><br><span class="hljs-keyword">if</span> (cur_thread-&gt;pgdir == <span class="hljs-literal">NULL</span>) <br>&#123;     <span class="hljs-comment">// 若为内核线程</span><br>PF = PF_KERNEL; <br>pool_size = kernel_pool.pool_size;<br>mem_pool = &amp;kernel_pool;<br>descs = k_block_descs;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;      <span class="hljs-comment">// 用户进程pcb中的pgdir会在为其分配页表时创建</span><br>PF = PF_USER;<br>pool_size = user_pool.pool_size;<br>mem_pool = &amp;user_pool;<br>descs = cur_thread-&gt;u_block_desc;<br>&#125;<br><br><span class="hljs-comment">/* 若申请的内存不在内存池容量范围内则直接返回NULL */</span><br><span class="hljs-keyword">if</span> (!(size &gt; <span class="hljs-number">0</span> &amp;&amp; size &lt; pool_size)) <br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">arena</span>* <span class="hljs-title">a</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block</span>* <span class="hljs-title">b</span>;</span><br>lock_acquire(&amp;mem_pool-&gt;lock);<br><span class="hljs-comment">/* 超过最大内存块1024, 就分配页框 */</span><br><span class="hljs-keyword">if</span> (size &gt; <span class="hljs-number">1024</span>) <br>&#123;<br><span class="hljs-type">uint32_t</span> page_cnt = DIV_ROUND_UP(size + <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> arena), PG_SIZE);    <span class="hljs-comment">// 向上取整需要的页框数</span><br><br>a = malloc_page(PF, page_cnt);<br><br><span class="hljs-keyword">if</span> (a != <span class="hljs-literal">NULL</span>) <br>&#123;<br><span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, page_cnt * PG_SIZE); <span class="hljs-comment">// 将分配的内存清0  </span><br><br><span class="hljs-comment">/* 对于分配的大块页框,将desc置为NULL, cnt置为页框数,large置为true */</span><br>a-&gt;desc = <span class="hljs-literal">NULL</span>;<br>a-&gt;cnt = page_cnt;<br>a-&gt;large = <span class="hljs-literal">true</span>;<br>lock_release(&amp;mem_pool-&gt;lock);<br><span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)(a + <span class="hljs-number">1</span>); <span class="hljs-comment">// 跨过arena大小，把剩下的内存返回</span><br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123; <br>lock_release(&amp;mem_pool-&gt;lock);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <br>&#125;<br>&#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配</span><br>&#123;    <br><span class="hljs-type">uint8_t</span> desc_idx;<br><br><span class="hljs-comment">/* 从内存块描述符中匹配合适的内存块规格 */</span><br><span class="hljs-keyword">for</span> (desc_idx = <span class="hljs-number">0</span>; desc_idx &lt; DESC_CNT; desc_idx++) <br>&#123;<br><span class="hljs-keyword">if</span> (size &lt;= descs[desc_idx].block_size) <span class="hljs-comment">// 从小往大后,找到后退出</span><br>&#123;  <br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* 若mem_block_desc的free_list中已经没有可用的mem_block,</span><br><span class="hljs-comment">* 就创建新的arena提供mem_block */</span><br><span class="hljs-keyword">if</span> (list_empty(&amp;descs[desc_idx].free_list)) <br>&#123;<br>a = malloc_page(PF, <span class="hljs-number">1</span>);       <span class="hljs-comment">// 分配1页框做为arena</span><br><span class="hljs-keyword">if</span> (a == <span class="hljs-literal">NULL</span>) <br>&#123;<br>lock_release(&amp;mem_pool-&gt;lock);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, PG_SIZE);<br><br><span class="hljs-comment">/* 对于分配的小块内存,将desc置为相应内存块描述符, </span><br><span class="hljs-comment">* cnt置为此arena可用的内存块数,large置为false */</span><br>a-&gt;desc = &amp;descs[desc_idx];<br>a-&gt;large = <span class="hljs-literal">false</span>;<br>a-&gt;cnt = descs[desc_idx].blocks_per_arena;<br><span class="hljs-type">uint32_t</span> block_idx;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br><br><span class="hljs-comment">/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */</span><br><span class="hljs-keyword">for</span> (block_idx = <span class="hljs-number">0</span>; block_idx &lt; descs[desc_idx].blocks_per_arena; block_idx++) <br>&#123;<br>b = arena2block(a, block_idx);<br>ASSERT(!elem_find(&amp;a-&gt;desc-&gt;free_list, &amp;b-&gt;free_elem));<br>list_append(&amp;a-&gt;desc-&gt;free_list, &amp;b-&gt;free_elem);<br>&#125;<br>intr_set_status(old_status);<br>&#125;    <br><span class="hljs-comment">/* 开始分配内存块 */</span><br>b = elem2entry(<span class="hljs-keyword">struct</span> mem_block, free_elem, list_pop(&amp;(descs[desc_idx].free_list)));<br><span class="hljs-built_in">memset</span>(b, <span class="hljs-number">0</span>, descs[desc_idx].block_size);<br><br>a = block2arena(b);  <span class="hljs-comment">// 获取内存块b所在的arena</span><br>a-&gt;cnt--;   <span class="hljs-comment">// 将此arena中的空闲内存块数减1</span><br>lock_release(&amp;mem_pool-&gt;lock);<br><span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)b;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="threadthreadh修改-2"><a class="markdownIt-Anchor" href="#threadthreadh修改-2"></a> thread/thread.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../kernel/memory.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK_NAME_LEN 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_FILES_OPEN_PER_PROC 8</span><br><span class="hljs-comment">/* 自定义通用函数类型,它将在很多线程函数中做为形参类型 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> <span class="hljs-title function_">thread_func</span><span class="hljs-params">(<span class="hljs-type">void</span>*)</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int16_t</span> <span class="hljs-type">pid_t</span>;<br><br><span class="hljs-comment">/* 进程或线程的状态 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> </span><br><span class="hljs-class">&#123;</span><br>   TASK_RUNNING,<br>   TASK_READY,<br>   TASK_BLOCKED,<br>   TASK_WAITING,<br>   TASK_HANGING,<br>   TASK_DIED<br>&#125;;<br><br><span class="hljs-comment">/***********   中断栈intr_stack   ***********</span><br><span class="hljs-comment"> * 此结构用于中断发生时保护程序(线程或进程)的上下文环境:</span><br><span class="hljs-comment"> * 进程或线程被外部中断或软中断打断时,会按照此结构压入上下文</span><br><span class="hljs-comment"> * 寄存器,  intr_exit中的出栈操作是此结构的逆操作</span><br><span class="hljs-comment"> * 此栈在线程自己的内核栈中位置固定,所在页的最顶端</span><br><span class="hljs-comment">********************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">intr_stack</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">uint32_t</span> vec_no; <span class="hljs-comment">// kernel.S 宏VECTOR中push %1压入的中断号</span><br>    <span class="hljs-type">uint32_t</span> edi;<br>    <span class="hljs-type">uint32_t</span> esi;<br>    <span class="hljs-type">uint32_t</span> ebp;<br>    <span class="hljs-type">uint32_t</span> esp_dummy; <span class="hljs-comment">// 虽然pushad把esp也压入,但esp是不断变化的,所以会被popad忽略</span><br>    <span class="hljs-type">uint32_t</span> ebx;<br>    <span class="hljs-type">uint32_t</span> edx;<br>    <span class="hljs-type">uint32_t</span> ecx;<br>    <span class="hljs-type">uint32_t</span> eax;<br>    <span class="hljs-type">uint32_t</span> gs;<br>    <span class="hljs-type">uint32_t</span> fs;<br>    <span class="hljs-type">uint32_t</span> es;<br>    <span class="hljs-type">uint32_t</span> ds;<br><br><span class="hljs-comment">/* 以下由cpu从低特权级进入高特权级时压入 */</span><br>    <span class="hljs-type">uint32_t</span> err_code; <span class="hljs-comment">// err_code会被压入在eip之后</span><br>    <span class="hljs-type">void</span> (*eip) (<span class="hljs-type">void</span>);<br>    <span class="hljs-type">uint32_t</span> cs;<br>    <span class="hljs-type">uint32_t</span> eflags;<br>    <span class="hljs-type">void</span>* esp;<br>    <span class="hljs-type">uint32_t</span> ss;<br>&#125;;<br><br><span class="hljs-comment">/***********  线程栈thread_stack  ***********</span><br><span class="hljs-comment"> * 线程自己的栈,用于存储线程中待执行的函数</span><br><span class="hljs-comment"> * 此结构在线程自己的内核栈中位置不固定,</span><br><span class="hljs-comment"> * 用在switch_to时保存线程环境。</span><br><span class="hljs-comment"> * 实际位置取决于实际运行情况。</span><br><span class="hljs-comment"> ******************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint32_t</span> ebp;<br>   <span class="hljs-type">uint32_t</span> ebx;<br>   <span class="hljs-type">uint32_t</span> edi;<br>   <span class="hljs-type">uint32_t</span> esi;<br><br><span class="hljs-comment">/* 线程第一次执行时,eip指向待调用的函数kernel_thread </span><br><span class="hljs-comment">其它时候,eip是指向switch_to的返回地址*/</span><br>   <span class="hljs-type">void</span> (*eip) (thread_func* func, <span class="hljs-type">void</span>* func_arg);<br><br><span class="hljs-comment">/*****   以下仅供第一次被调度上cpu时使用   ****/</span><br><br><span class="hljs-comment">/* 参数unused_ret只为占位置充数为返回地址 */</span><br>   <span class="hljs-type">void</span> (*unused_retaddr);<br>   thread_func* function;   <span class="hljs-comment">// 由Kernel_thread所调用的函数名</span><br>   <span class="hljs-type">void</span>* func_arg;    <span class="hljs-comment">// 由Kernel_thread所调用的函数所需的参数</span><br>&#125;;<br><br><span class="hljs-comment">/* 进程或线程的pcb,程序控制块 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint32_t</span>* self_kstack; <span class="hljs-comment">// 各内核线程都用自己的内核栈</span><br>   <span class="hljs-type">pid_t</span> pid;<br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> <span class="hljs-title">status</span>;</span><br>   <span class="hljs-type">char</span> name[TASK_NAME_LEN];<br>   <span class="hljs-type">uint8_t</span> priority;<br>   <span class="hljs-type">uint8_t</span> ticks;   <span class="hljs-comment">// 每次在处理器上执行的时间嘀嗒数</span><br><span class="hljs-comment">/* 此任务自上cpu运行后至今占用了多少cpu嘀嗒数,</span><br><span class="hljs-comment"> * 也就是此任务执行了多久*/</span><br>   <span class="hljs-type">uint32_t</span> elapsed_ticks;<br><span class="hljs-comment">/* general_tag的作用是用于线程在一般的队列中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">general_tag</span>;</span>    <br><span class="hljs-comment">/* all_list_tag的作用是用于线程队列thread_all_list中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">all_list_tag</span>;</span><br>   <span class="hljs-type">uint32_t</span>* pgdir;              <span class="hljs-comment">// 进程自己页表的虚拟地址</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> <span class="hljs-title">userprog_vaddr</span>;</span>   <span class="hljs-comment">// 用户进程的虚拟地址 </span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block_desc</span> <span class="hljs-title">u_block_desc</span>[<span class="hljs-title">DESC_CNT</span>];</span>   <span class="hljs-comment">// 用户进程内存块描述符</span><br>   <span class="hljs-type">uint32_t</span> stack_magic; <span class="hljs-comment">// 用这串数字做栈的边界标记,用于检测栈的溢出</span><br>&#125;;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_ready_list</span>;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_all_list</span>;</span><br><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">running_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">kernel_thread</span><span class="hljs-params">(thread_func* function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread,thread_func function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread,<span class="hljs-type">char</span>* name,<span class="hljs-type">int</span> prio)</span>;<br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name,<span class="hljs-type">int</span> prio,thread_func function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_main_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">schedule</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_block</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> task_status stat)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_unblock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> <span class="hljs-title function_">allocate_pid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="userprogprocessc修改"><a class="markdownIt-Anchor" href="#userprogprocessc修改"></a> userprog/process.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tss.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../kernel/interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">intr_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">/* 构建用户进程初始上下文信息 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">start_process</span><span class="hljs-params">(<span class="hljs-type">void</span>* filename_)</span> <br>&#123;<br><span class="hljs-type">void</span>* function = filename_;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();<br>cur-&gt;self_kstack += <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> thread_stack);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">intr_stack</span>* <span class="hljs-title">proc_stack</span> =</span> (<span class="hljs-keyword">struct</span> intr_stack*)cur-&gt;self_kstack; <br>proc_stack-&gt;edi = proc_stack-&gt;esi = proc_stack-&gt;ebp = proc_stack-&gt;esp_dummy = <span class="hljs-number">0</span>;<br>proc_stack-&gt;ebx = proc_stack-&gt;edx = proc_stack-&gt;ecx = proc_stack-&gt;eax = <span class="hljs-number">0</span>;<br>proc_stack-&gt;gs = <span class="hljs-number">0</span>; <span class="hljs-comment">// 用户态用不上,直接初始为0</span><br>proc_stack-&gt;ds = proc_stack-&gt;es = proc_stack-&gt;fs = SELECTOR_U_DATA;<br>proc_stack-&gt;eip = function; <span class="hljs-comment">// 待执行的用户程序地址</span><br>proc_stack-&gt;cs = SELECTOR_U_CODE;<br>proc_stack-&gt;eflags = (EFLAGS_IOPL_0 | EFLAGS_MBS | EFLAGS_IF_1);<br>proc_stack-&gt;esp = (<span class="hljs-type">void</span>*)((<span class="hljs-type">uint32_t</span>)get_a_page(PF_USER, USER_STACK3_VADDR) + PG_SIZE);<br>proc_stack-&gt;ss = SELECTOR_U_DATA; <br><span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;movl %0, %%esp; jmp intr_exit&quot;</span> : : <span class="hljs-string">&quot;g&quot;</span> (proc_stack) : <span class="hljs-string">&quot;memory&quot;</span>)</span>;<br>&#125;<br><br><span class="hljs-comment">/* 击活页表 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">page_dir_activate</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* p_thread)</span> <br>&#123;<br><span class="hljs-comment">/********************************************************</span><br><span class="hljs-comment"> * 执行此函数时,当前任务可能是线程。</span><br><span class="hljs-comment"> * 之所以对线程也要重新安装页表, 原因是上一次被调度的可能是进程,</span><br><span class="hljs-comment"> * 否则不恢复页表的话,线程就会使用进程的页表了。</span><br><span class="hljs-comment"> ********************************************************/</span><br><br><span class="hljs-comment">/* 若为内核线程,需要重新填充页表为0x100000 */</span><br><span class="hljs-type">uint32_t</span> pagedir_phy_addr = <span class="hljs-number">0x100000</span>;  <span class="hljs-comment">// 默认为内核的页目录物理地址,也就是内核线程所用的页目录表</span><br><span class="hljs-keyword">if</span> (p_thread-&gt;pgdir != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">// 用户态进程有自己的页目录表</span><br>&#123;   <br>pagedir_phy_addr = addr_v2p((<span class="hljs-type">uint32_t</span>)p_thread-&gt;pgdir);<br>&#125;<br><br><span class="hljs-comment">/* 更新页目录寄存器cr3,使新页表生效 */</span><br><span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;movl %0, %%cr3&quot;</span> : : <span class="hljs-string">&quot;r&quot;</span> (pagedir_phy_addr) : <span class="hljs-string">&quot;memory&quot;</span>)</span>;<br>&#125;<br><br><span class="hljs-comment">/* 击活线程或进程的页表,更新tss中的esp0为进程的特权级0的栈 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">process_activate</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* p_thread)</span> <br>&#123;<br>ASSERT(p_thread != <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">/* 击活该进程或线程的页表 */</span><br>page_dir_activate(p_thread);<br><br><span class="hljs-comment">/* 内核线程特权级本身就是0,处理器进入中断时并不会从tss中获取0特权级栈地址,故不需要更新esp0 */</span><br><span class="hljs-keyword">if</span> (p_thread-&gt;pgdir) <br>&#123;<br><span class="hljs-comment">/* 更新该进程的esp0,用于此进程被中断时保留上下文 */</span><br>update_tss_esp(p_thread);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* 创建页目录表,将当前页表的表示内核空间的pde复制,</span><br><span class="hljs-comment"> * 成功则返回页目录的虚拟地址,否则返回-1 */</span><br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">create_page_dir</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br><br>   <span class="hljs-comment">/* 用户进程的页表不能让用户直接访问到,所以在内核空间来申请 */</span><br><span class="hljs-type">uint32_t</span>* page_dir_vaddr = get_kernel_pages(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (page_dir_vaddr == <span class="hljs-literal">NULL</span>) <br>&#123;<br>console_put_str(<span class="hljs-string">&quot;create_page_dir: get_kernel_page failed!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">/************************** 1  先复制页表  *************************************/</span><br>   <span class="hljs-comment">/*  page_dir_vaddr + 0x300*4 是内核页目录的第768项 */</span><br>   <span class="hljs-built_in">memcpy</span>((<span class="hljs-type">uint32_t</span>*)((<span class="hljs-type">uint32_t</span>)page_dir_vaddr + <span class="hljs-number">0x300</span>*<span class="hljs-number">4</span>), (<span class="hljs-type">uint32_t</span>*)(<span class="hljs-number">0xfffff000</span>+<span class="hljs-number">0x300</span>*<span class="hljs-number">4</span>), <span class="hljs-number">1024</span>);<br><span class="hljs-comment">/*****************************************************************************/</span><br><br><span class="hljs-comment">/************************** 2  更新页目录地址 **********************************/</span><br>   <span class="hljs-type">uint32_t</span> new_page_dir_phy_addr = addr_v2p((<span class="hljs-type">uint32_t</span>)page_dir_vaddr);<br>   <span class="hljs-comment">/* 页目录地址是存入在页目录的最后一项,更新页目录地址为新页目录的物理地址 */</span><br>   page_dir_vaddr[<span class="hljs-number">1023</span>] = new_page_dir_phy_addr | PG_US_U | PG_RW_W | PG_P_1;<br><span class="hljs-comment">/*****************************************************************************/</span><br>   <span class="hljs-keyword">return</span> page_dir_vaddr;<br>&#125;<br><br><span class="hljs-comment">/* 创建用户进程虚拟地址位图 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_user_vaddr_bitmap</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* user_prog)</span> <br>&#123;<br>user_prog-&gt;userprog_vaddr.vaddr_start = USER_VADDR_START;<br><span class="hljs-type">uint32_t</span> bitmap_pg_cnt = DIV_ROUND_UP((<span class="hljs-number">0xc0000000</span> - USER_VADDR_START) / PG_SIZE / <span class="hljs-number">8</span> , PG_SIZE);<br>user_prog-&gt;userprog_vaddr.vaddr_bitmap.bits = get_kernel_pages(bitmap_pg_cnt);<br>user_prog-&gt;userprog_vaddr.vaddr_bitmap.btmp_bytes_len = (<span class="hljs-number">0xc0000000</span> - USER_VADDR_START) / PG_SIZE / <span class="hljs-number">8</span>;<br>bitmap_init(&amp;user_prog-&gt;userprog_vaddr.vaddr_bitmap);<br>&#125;<br><br><span class="hljs-comment">/* 创建用户进程 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">process_execute</span><span class="hljs-params">(<span class="hljs-type">void</span>* filename, <span class="hljs-type">char</span>* name)</span> <br>&#123; <br><span class="hljs-comment">/* pcb内核的数据结构,由内核来维护进程信息,因此要在内核内存池中申请 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">thread</span> =</span> get_kernel_pages(<span class="hljs-number">1</span>);<br>init_thread(thread, name, default_prio); <br>create_user_vaddr_bitmap(thread);<br>thread_create(thread, start_process, filename);<br><span class="hljs-comment">/* pcb内核的数据结构,由内核来维护进程信息,因此要在内核内存池中申请 */</span><br>thread-&gt;pgdir = create_page_dir();<br>block_desc_init(thread-&gt;u_block_desc);<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;thread-&gt;general_tag));<br>list_append(&amp;thread_ready_list, &amp;thread-&gt;general_tag);<br><br>ASSERT(!elem_find(&amp;thread_all_list, &amp;thread-&gt;all_list_tag));<br>list_append(&amp;thread_all_list, &amp;thread-&gt;all_list_tag);<br>intr_set_status(old_status);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-3"><a class="markdownIt-Anchor" href="#kernelmainc修改-3"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br><br>   intr_enable();<br>thread_start(<span class="hljs-string">&quot;k_thread_a&quot;</span>, <span class="hljs-number">31</span>, k_thread_a, <span class="hljs-string">&quot;argA &quot;</span>);<br>thread_start(<span class="hljs-string">&quot;k_thread_b&quot;</span>, <span class="hljs-number">31</span>, k_thread_b, <span class="hljs-string">&quot;argB &quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span>&#123;<br><span class="hljs-type">char</span>* para = arg;<br><span class="hljs-type">void</span>* addr = sys_malloc(<span class="hljs-number">33</span>);<br>console_put_str(<span class="hljs-string">&quot;  I am thread_a, sys_malloc(33), addr is 0x&quot;</span>);<br>   console_put_int((<span class="hljs-type">int</span>)addr);<br>   console_put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span>&#123;<br><span class="hljs-type">char</span>* para = arg;<br><span class="hljs-type">void</span>* addr = sys_malloc(<span class="hljs-number">63</span>);<br>console_put_str(<span class="hljs-string">&quot;  I am thread_b, sys_malloc(63), addr is 0x&quot;</span>);<br>   console_put_int((<span class="hljs-type">int</span>)addr);<br>   console_put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-3"><a class="markdownIt-Anchor" href="#运行结果-3"></a> 运行结果</h3><p><img src="/img/os/os12.3.png" alt="图为bochs运行界面" /></p><h3 id="kernelmemoryh修改-2"><a class="markdownIt-Anchor" href="#kernelmemoryh修改-2"></a> kernel/memory.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __KERNEL_MEMORY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __KERNEL_MEMORY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><br><span class="hljs-comment">/* 内存池标记,用于判断用哪个内存池 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">pool_flags</span> &#123;</span><br>PF_KERNEL = <span class="hljs-number">1</span>,    <span class="hljs-comment">// 内核内存池</span><br>PF_USER = <span class="hljs-number">2</span>     <span class="hljs-comment">// 用户内存池</span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_P_1  1<span class="hljs-comment">// 页表项或页目录项存在属性位</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_P_0  0<span class="hljs-comment">// 页表项或页目录项存在属性位</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_RW_R  0<span class="hljs-comment">// R/W 属性位值, 读/执行</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_RW_W  2<span class="hljs-comment">// R/W 属性位值, 读/写/执行</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_US_S  0<span class="hljs-comment">// U/S 属性位值, 系统级</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_US_U  4<span class="hljs-comment">// U/S 属性位值, 用户级</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DESC_CNT 7</span><br><br><span class="hljs-comment">/* 用于虚拟地址管理 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> &#123;</span><br><span class="hljs-comment">/* 虚拟地址用到的位图结构，用于记录哪些虚拟地址被占用了。以页为单位。*/</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bitmap</span> <span class="hljs-title">vaddr_bitmap</span>;</span><br><span class="hljs-comment">/* 管理的虚拟地址 */</span><br>  <span class="hljs-type">uint32_t</span> vaddr_start;<br>&#125;;<br><br><br><span class="hljs-comment">/* 内存块 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block</span> &#123;</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">free_elem</span>;</span><br>&#125;;<br><br><span class="hljs-comment">/* 内存块描述符 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block_desc</span> &#123;</span><br><span class="hljs-type">uint32_t</span> block_size; <span class="hljs-comment">// 内存块大小</span><br><span class="hljs-type">uint32_t</span> blocks_per_arena; <span class="hljs-comment">// 本arena中可容纳此mem_block的数量.</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">free_list</span>;</span> <span class="hljs-comment">// 目前可用的mem_block链表</span><br>&#125;;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span> <span class="hljs-title">kernel_pool</span>,<span class="hljs-title">user_pool</span>;</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">vaddr_get</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf,<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pte_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pde_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">palloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pool* m_pool)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">page_table_add</span><span class="hljs-params">(<span class="hljs-type">void</span>* _vaddr,<span class="hljs-type">void</span>* _page_phyaddr)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf,<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_kernel_pages</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_user_pages</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_a_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf,<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">addr_v2p</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mem_pool_init</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> all_mem)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">mem_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">block_desc_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mem_block_desc* desc_array)</span>;<br><span class="hljs-comment">//static struct mem_block* arena2block(struct arena* a, uint32_t idx);</span><br><span class="hljs-comment">//static struct arena* block2arena(struct mem_block* b);</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">sys_malloc</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> size)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">pfree</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_phy_addr)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">page_table_pte_remove</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">vaddr_remove</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf,<span class="hljs-type">void</span>* _vaddr,<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">mfree_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf,<span class="hljs-type">void</span>* _vaddr,<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sys_free</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr)</span>;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="kernelmemoryc修改-2"><a class="markdownIt-Anchor" href="#kernelmemoryc修改-2"></a> kernel/memory.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/sync.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_SIZE 4096</span><br><br><span class="hljs-comment">/***************  位图地址 ********************</span><br><span class="hljs-comment">* 因为0xc009f000是内核主线程栈顶，0xc009e000是内核主线程的pcb.</span><br><span class="hljs-comment">* 一个页框大小的位图可表示128M内存, 位图位置安排在地址0xc009a000,</span><br><span class="hljs-comment">* 这样本系统最大支持4个页框的位图,即512M内存 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MEM_BITMAP_BASE 0xc009a000</span><br><span class="hljs-comment">/*************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PDE_IDX(addr) ((addr &amp; 0xffc00000) &gt;&gt; 22)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTE_IDX(addr) ((addr &amp; 0x003ff000) &gt;&gt; 12)</span><br><br><span class="hljs-comment">/* 0xc0000000是内核从虚拟地址3G起. 0x100000意指跨过低端1M内存,使虚拟地址在逻辑上连续 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> K_HEAP_START 0xc0100000</span><br><br><span class="hljs-comment">/* 内存池结构,生成两个实例用于管理内核内存池和用户内存池 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span> </span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bitmap</span> <span class="hljs-title">pool_bitmap</span>;</span> <span class="hljs-comment">// 本内存池用到的位图结构,用于管理物理内存</span><br>  <span class="hljs-type">uint32_t</span> phy_addr_start; <span class="hljs-comment">// 本内存池所管理物理内存的起始地址</span><br>  <span class="hljs-type">uint32_t</span> pool_size; <span class="hljs-comment">// 本内存池字节容量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lock</span> <span class="hljs-title">lock</span>;</span> <span class="hljs-comment">// 申请内存时互斥</span><br>&#125;;<br><span class="hljs-comment">/* 内存仓库arena元信息 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">arena</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block_desc</span>* <span class="hljs-title">desc</span>;</span> <span class="hljs-comment">// 此arena关联的mem_block_desc</span><br><span class="hljs-comment">/* large为ture时,cnt表示的是页框数。</span><br><span class="hljs-comment"> * 否则cnt表示空闲mem_block数量 */</span><br>   <span class="hljs-type">uint32_t</span> cnt;<br>   <span class="hljs-type">bool</span> large;   <br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block_desc</span> <span class="hljs-title">k_block_descs</span>[<span class="hljs-title">DESC_CNT</span>];</span><span class="hljs-comment">// 内核内存块描述符数组</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span> <span class="hljs-title">kernel_pool</span>, <span class="hljs-title">user_pool</span>;</span>      <span class="hljs-comment">// 生成内核内存池和用户内存池</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> <span class="hljs-title">kernel_vaddr</span>;</span> <span class="hljs-comment">// 此结构是用来给内核分配虚拟地址</span><br><br><br><span class="hljs-comment">/* 在pf表示的虚拟内存池中申请pg_cnt个虚拟页,</span><br><span class="hljs-comment">* 成功则返回虚拟页的起始地址, 失败则返回NULL */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">vaddr_get</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf, <span class="hljs-type">uint32_t</span> pg_cnt)</span> <br>&#123;<br>   <span class="hljs-type">int</span> vaddr_start = <span class="hljs-number">0</span>, bit_idx_start = <span class="hljs-number">-1</span>;<br>   <span class="hljs-type">uint32_t</span> cnt = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">if</span> (pf == PF_KERNEL) <span class="hljs-comment">// 内核内存池</span><br>&#123;     <br>      bit_idx_start  = bitmap_scan(&amp;kernel_vaddr.vaddr_bitmap, pg_cnt);<br>      <span class="hljs-keyword">if</span> (bit_idx_start == <span class="hljs-number">-1</span>) <br>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span>(cnt &lt; pg_cnt) <br>&#123;<br> bitmap_set(&amp;kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, <span class="hljs-number">1</span>);<br>      &#125;<br>      vaddr_start = kernel_vaddr.vaddr_start + bit_idx_start * PG_SIZE;<br>   &#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 用户内存池</span><br>&#123;     <br>      <span class="hljs-keyword">struct</span> task_struct* cur = running_thread();<br>      bit_idx_start  = bitmap_scan(&amp;cur-&gt;userprog_vaddr.vaddr_bitmap, pg_cnt);<br>      <span class="hljs-keyword">if</span> (bit_idx_start == <span class="hljs-number">-1</span>) <br>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span>(cnt &lt; pg_cnt) <br>&#123;<br> bitmap_set(&amp;cur-&gt;userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, <span class="hljs-number">1</span>);<br>      &#125;<br>      vaddr_start = cur-&gt;userprog_vaddr.vaddr_start + bit_idx_start * PG_SIZE;<br><br>   <span class="hljs-comment">/* (0xc0000000 - PG_SIZE)做为用户3级栈已经在start_process被分配 */</span><br>      ASSERT((<span class="hljs-type">uint32_t</span>)vaddr_start &lt; (<span class="hljs-number">0xc0000000</span> - PG_SIZE));<br>   &#125;<br>   <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)vaddr_start;<br>&#125;<br><br><br><span class="hljs-comment">/* 得到虚拟地址vaddr对应的pte指针*/</span><br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pte_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span> <br>&#123;<br>  <span class="hljs-comment">/* 先访问到页表自己 + \</span><br><span class="hljs-comment">   * 再用页目录项pde(页目录内页表的索引)做为pte的索引访问到页表 + \</span><br><span class="hljs-comment">   * 再用pte的索引做为页内偏移*/</span><br>  <span class="hljs-type">uint32_t</span>* pte = (<span class="hljs-type">uint32_t</span>*)(<span class="hljs-number">0xffc00000</span> + \<br>    ((vaddr &amp; <span class="hljs-number">0xffc00000</span>) &gt;&gt; <span class="hljs-number">10</span>) + \<br>    PTE_IDX(vaddr) * <span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">return</span> pte;<br>&#125;<br><br><br><span class="hljs-comment">/* 得到虚拟地址vaddr对应的pde的指针 */</span><br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pde_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span> <br>&#123;<br>  <span class="hljs-comment">/* 0xfffff是用来访问到页表本身所在的地址 */</span><br>  <span class="hljs-type">uint32_t</span>* pde = (<span class="hljs-type">uint32_t</span>*)((<span class="hljs-number">0xfffff000</span>) + PDE_IDX(vaddr) * <span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">return</span> pde;<br>&#125;<br><br><br><span class="hljs-comment">/* 在m_pool指向的物理内存池中分配1个物理页,</span><br><span class="hljs-comment">* 成功则返回页框的物理地址,失败则返回NULL */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">palloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pool* m_pool)</span> <br>&#123;<br>  <span class="hljs-comment">/* 扫描或设置位图要保证原子操作 */</span><br>  <span class="hljs-type">int</span> bit_idx = bitmap_scan(&amp;m_pool-&gt;pool_bitmap, <span class="hljs-number">1</span>);    <span class="hljs-comment">// 找一个物理页面</span><br>  <span class="hljs-keyword">if</span> (bit_idx == <span class="hljs-number">-1</span> ) <br>&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>  &#125;<br>  bitmap_set(&amp;m_pool-&gt;pool_bitmap, bit_idx, <span class="hljs-number">1</span>);<span class="hljs-comment">// 将此位bit_idx置1</span><br>  <span class="hljs-type">uint32_t</span> page_phyaddr = ((bit_idx * PG_SIZE) + m_pool-&gt;phy_addr_start);<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)page_phyaddr;<br>&#125;<br><br><br><span class="hljs-comment">/* 页表中添加虚拟地址_vaddr与物理地址_page_phyaddr的映射 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">page_table_add</span><span class="hljs-params">(<span class="hljs-type">void</span>* _vaddr, <span class="hljs-type">void</span>* _page_phyaddr)</span> <br>&#123;<br>  <span class="hljs-type">uint32_t</span> vaddr = (<span class="hljs-type">uint32_t</span>)_vaddr, page_phyaddr = (<span class="hljs-type">uint32_t</span>)_page_phyaddr;<br>  <span class="hljs-type">uint32_t</span>* pde = pde_ptr(vaddr);<br>  <span class="hljs-type">uint32_t</span>* pte = pte_ptr(vaddr);<br><br><span class="hljs-comment">/************************   注意   *************************</span><br><span class="hljs-comment">* 执行*pte,会访问到pde。所以确保pde创建完成后才能执行*pte,</span><br><span class="hljs-comment">* 否则会引发page_fault。因此在pde未创建时,</span><br><span class="hljs-comment">* *pte只能出现在下面最外层else语句块中的*pde后面。</span><br><span class="hljs-comment">* *********************************************************/</span><br>  <span class="hljs-comment">/* 先在页目录内判断目录项的P位，若为1,则表示该表已存在 */</span><br>  <span class="hljs-keyword">if</span> (*pde &amp; <span class="hljs-number">0x00000001</span>) <br>&#123;<br>     ASSERT(!(*pte &amp; <span class="hljs-number">0x00000001</span>));<br><br>     <span class="hljs-keyword">if</span> (!(*pte &amp; <span class="hljs-number">0x00000001</span>)) <span class="hljs-comment">// 只要是创建页表,pte就应该不存在,多判断一下放心</span><br>&#123;   <br>    *pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);    <span class="hljs-comment">// US=1,RW=1,P=1</span><br>     &#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 调试模式下不会执行到此,上面的ASSERT会先执行.关闭调试时下面的PANIC会起作用</span><br>&#123;  <br>    PANIC(<span class="hljs-string">&quot;pte repeat&quot;</span>);<br>     &#125;<br>  &#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 页目录项不存在,所以要先创建页目录项再创建页表项.</span><br>&#123;  <br>     <span class="hljs-comment">/* 页表中用到的页框一律从内核空间分配 */</span><br>     <span class="hljs-type">uint32_t</span> pde_phyaddr = (<span class="hljs-type">uint32_t</span>)palloc(&amp;kernel_pool);<br>     *pde = (pde_phyaddr | PG_US_U | PG_RW_W | PG_P_1);<br><br><span class="hljs-comment">/*******************   必须将页表所在的页清0   *********************</span><br><span class="hljs-comment">* 必须把分配到的物理页地址pde_phyaddr对应的物理内存清0,</span><br><span class="hljs-comment">* 避免里面的陈旧数据变成了页表中的页表项,从而让页表混乱.</span><br><span class="hljs-comment">* pte的高20位会映射到pde所指向的页表的物理起始地址.*/</span><br>     <span class="hljs-built_in">memset</span>((<span class="hljs-type">void</span>*)((<span class="hljs-type">int</span>)pte &amp; <span class="hljs-number">0xfffff000</span>), <span class="hljs-number">0</span>, PG_SIZE); <br><span class="hljs-comment">/************************************************************/</span><br>     ASSERT(!(*pte &amp; <span class="hljs-number">0x00000001</span>));<br>     *pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);      <span class="hljs-comment">// US=1,RW=1,P=1</span><br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 分配pg_cnt个页空间,成功则返回起始虚拟地址,失败时返回NULL */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf, <span class="hljs-type">uint32_t</span> pg_cnt)</span> <br>&#123;<br>  ASSERT(pg_cnt &gt; <span class="hljs-number">0</span> &amp;&amp; pg_cnt &lt; <span class="hljs-number">3840</span>);<br><span class="hljs-comment">/***********   malloc_page的原理是三个动作的合成:   ***********</span><br><span class="hljs-comment">     1通过vaddr_get在虚拟内存池中申请虚拟地址</span><br><span class="hljs-comment">     2通过palloc在物理内存池中申请物理页</span><br><span class="hljs-comment">     3通过page_table_add将以上两步得到的虚拟地址和物理地址在页表中完成映射</span><br><span class="hljs-comment">***************************************************************/</span><br>  <span class="hljs-type">void</span>* vaddr_start = vaddr_get(pf, pg_cnt);<br>  <span class="hljs-keyword">if</span> (vaddr_start == <span class="hljs-literal">NULL</span>) <br>&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>  &#125;<br>  <span class="hljs-type">uint32_t</span> vaddr = (<span class="hljs-type">uint32_t</span>)vaddr_start, cnt = pg_cnt;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span>* <span class="hljs-title">mem_pool</span> =</span> pf &amp; PF_KERNEL ? &amp;kernel_pool : &amp;user_pool;<br><br><span class="hljs-comment">/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/</span><br>  <span class="hljs-keyword">while</span> (cnt-- &gt; <span class="hljs-number">0</span>) <br>&#123;<br>     <span class="hljs-type">void</span>* page_phyaddr = palloc(mem_pool);<br><br><span class="hljs-comment">/* 失败时要将曾经已申请的虚拟地址和物理页全部回滚，</span><br><span class="hljs-comment">* 在将来完成内存回收时再补充 */</span><br>     <span class="hljs-keyword">if</span> (page_phyaddr == <span class="hljs-literal">NULL</span>) <br>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>     &#125;<br>     page_table_add((<span class="hljs-type">void</span>*)vaddr, page_phyaddr); <span class="hljs-comment">// 在页表中做映射 </span><br>     vaddr += PG_SIZE; <span class="hljs-comment">// 下一个虚拟页</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> vaddr_start;<br>&#125;<br><br><br><span class="hljs-comment">/* 从内核物理内存池中申请pg_cnt页内存,</span><br><span class="hljs-comment">* 成功则返回其虚拟地址,失败则返回NULL */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_kernel_pages</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_cnt)</span> <br>&#123;<br>  <span class="hljs-type">void</span>* vaddr =  malloc_page(PF_KERNEL, pg_cnt);<br>  <span class="hljs-keyword">if</span> (vaddr != <span class="hljs-literal">NULL</span>) <br>&#123;   <span class="hljs-comment">// 若分配的地址不为空,将页框清0后返回</span><br>     <span class="hljs-built_in">memset</span>(vaddr, <span class="hljs-number">0</span>, pg_cnt * PG_SIZE);<br>  &#125;<br>  <span class="hljs-keyword">return</span> vaddr;<br>&#125;<br><br><br><span class="hljs-comment">/* 在用户空间中申请4k内存,并返回其虚拟地址 */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_user_pages</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_cnt)</span> <br>&#123;<br>   lock_acquire(&amp;user_pool.lock);<br>   <span class="hljs-type">void</span>* vaddr = malloc_page(PF_USER, pg_cnt);<br>   <span class="hljs-keyword">if</span> (vaddr != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">// 若分配的地址不为空,将页框清0后返回</span><br>&#123;   <br>      <span class="hljs-built_in">memset</span>(vaddr, <span class="hljs-number">0</span>, pg_cnt * PG_SIZE);<br>   &#125;<br>   lock_release(&amp;user_pool.lock);<br>   <span class="hljs-keyword">return</span> vaddr;<br>&#125;<br><br><br><span class="hljs-comment">/* 将地址vaddr与pf池中的物理地址关联,仅支持一页空间分配 */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_a_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf, <span class="hljs-type">uint32_t</span> vaddr)</span> <br>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span>* <span class="hljs-title">mem_pool</span> =</span> pf &amp; PF_KERNEL ? &amp;kernel_pool : &amp;user_pool;<br>   lock_acquire(&amp;mem_pool-&gt;lock);<br><br>   <span class="hljs-comment">/* 先将虚拟地址对应的位图置1 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();<br>   <span class="hljs-type">int32_t</span> bit_idx = <span class="hljs-number">-1</span>;<br><br><span class="hljs-comment">/* 若当前是用户进程申请用户内存,就修改用户进程自己的虚拟地址位图 */</span><br>   <span class="hljs-keyword">if</span> (cur-&gt;pgdir != <span class="hljs-literal">NULL</span> &amp;&amp; pf == PF_USER) <br>&#123;<br>      bit_idx = (vaddr - cur-&gt;userprog_vaddr.vaddr_start) / PG_SIZE;<br>      ASSERT(bit_idx &gt;= <span class="hljs-number">0</span>);<br>      bitmap_set(&amp;cur-&gt;userprog_vaddr.vaddr_bitmap, bit_idx, <span class="hljs-number">1</span>);<br>   &#125; <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;pgdir == <span class="hljs-literal">NULL</span> &amp;&amp; pf == PF_KERNEL)<br>&#123;<br><span class="hljs-comment">/* 如果是内核线程申请内核内存,就修改kernel_vaddr. */</span><br>      bit_idx = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;<br>      ASSERT(bit_idx &gt; <span class="hljs-number">0</span>);<br>      bitmap_set(&amp;kernel_vaddr.vaddr_bitmap, bit_idx, <span class="hljs-number">1</span>);<br>   &#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>      PANIC(<span class="hljs-string">&quot;get_a_page:not allow kernel alloc userspace or user alloc kernelspace by get_a_page&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-type">void</span>* page_phyaddr = palloc(mem_pool);<br>   <span class="hljs-keyword">if</span> (page_phyaddr == <span class="hljs-literal">NULL</span>) <br>&#123;<br>      lock_release(&amp;mem_pool-&gt;lock);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>   &#125;<br>   page_table_add((<span class="hljs-type">void</span>*)vaddr, page_phyaddr); <br>   lock_release(&amp;mem_pool-&gt;lock);<br>   <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)vaddr;<br>&#125;<br><br><br><span class="hljs-comment">/* 得到虚拟地址映射到的物理地址 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">addr_v2p</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span> <br>&#123;<br>   <span class="hljs-type">uint32_t</span>* pte = pte_ptr(vaddr);<br><span class="hljs-comment">/* (*pte)的值是页表所在的物理页框地址,</span><br><span class="hljs-comment"> * 去掉其低12位的页表项属性+虚拟地址vaddr的低12位 */</span><br>   <span class="hljs-keyword">return</span> ((*pte &amp; <span class="hljs-number">0xfffff000</span>) + (vaddr &amp; <span class="hljs-number">0x00000fff</span>));<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化内存池 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mem_pool_init</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> all_mem)</span> <br>&#123;<br>  put_str(<span class="hljs-string">&quot;   mem_pool_init start\n&quot;</span>);<br>  <span class="hljs-type">uint32_t</span> page_table_size = PG_SIZE * <span class="hljs-number">256</span>;  <span class="hljs-comment">// 页表大小= 1页的页目录表+第0和第768个页目录项指向同一个页表+</span><br>                                                 <span class="hljs-comment">// 第769~1022个页目录项共指向254个页表,共256个页框</span><br>  <span class="hljs-type">uint32_t</span> used_mem = page_table_size + <span class="hljs-number">0x100000</span>;  <span class="hljs-comment">// 0x100000为低端1M内存</span><br>  <span class="hljs-type">uint32_t</span> free_mem = all_mem - used_mem;<br>  <span class="hljs-type">uint16_t</span> all_free_pages = free_mem / PG_SIZE;  <span class="hljs-comment">// 1页为4k,不管总内存是不是4k的倍数,</span><br>     <span class="hljs-comment">// 对于以页为单位的内存分配策略，不足1页的内存不用考虑了。</span><br>  <span class="hljs-type">uint16_t</span> kernel_free_pages = all_free_pages / <span class="hljs-number">2</span>;<br>  <span class="hljs-type">uint16_t</span> user_free_pages = all_free_pages - kernel_free_pages;<br><br><span class="hljs-comment">/* 为简化位图操作，余数不处理，坏处是这样做会丢内存。</span><br><span class="hljs-comment">好处是不用做内存的越界检查,因为位图表示的内存少于实际物理内存*/</span><br>  <span class="hljs-type">uint32_t</span> kbm_length = kernel_free_pages / <span class="hljs-number">8</span>;  <span class="hljs-comment">// Kernel BitMap的长度,位图中的一位表示一页,以字节为单位</span><br>  <span class="hljs-type">uint32_t</span> ubm_length = user_free_pages / <span class="hljs-number">8</span>;  <span class="hljs-comment">// User BitMap的长度.</span><br><br>  <span class="hljs-type">uint32_t</span> kp_start = used_mem;  <span class="hljs-comment">// Kernel Pool start,内核内存池的起始地址</span><br>  <span class="hljs-type">uint32_t</span> up_start = kp_start + kernel_free_pages * PG_SIZE;  <span class="hljs-comment">// User Pool start,用户内存池的起始地址</span><br><br>  kernel_pool.phy_addr_start = kp_start;<br>  user_pool.phy_addr_start   = up_start;<br><br>  kernel_pool.pool_size = kernel_free_pages * PG_SIZE;<br>  user_pool.pool_size = user_free_pages * PG_SIZE;<br><br>  kernel_pool.pool_bitmap.btmp_bytes_len = kbm_length;<br>  user_pool.pool_bitmap.btmp_bytes_len  = ubm_length;<br><br><span class="hljs-comment">/*********    内核内存池和用户内存池位图   ***********</span><br><span class="hljs-comment">*   位图是全局的数据，长度不固定。</span><br><span class="hljs-comment">*   全局或静态的数组需要在编译时知道其长度，</span><br><span class="hljs-comment">*   而我们需要根据总内存大小算出需要多少字节。</span><br><span class="hljs-comment">*   所以改为指定一块内存来生成位图.</span><br><span class="hljs-comment">*   ************************************************/</span><br><span class="hljs-comment">// 内核使用的最高地址是0xc009f000,这是主线程的栈地址.(内核的大小预计为70K左右)</span><br><span class="hljs-comment">// 32M内存占用的位图是2k.内核内存池的位图先定在MEM_BITMAP_BASE(0xc009a000)处.</span><br>  kernel_pool.pool_bitmap.bits = (<span class="hljs-type">void</span>*)MEM_BITMAP_BASE;<br>          <br><span class="hljs-comment">/* 用户内存池的位图紧跟在内核内存池位图之后 */</span><br>  user_pool.pool_bitmap.bits = (<span class="hljs-type">void</span>*)(MEM_BITMAP_BASE + kbm_length);<br>  <span class="hljs-comment">/******************** 输出内存池信息 **********************/</span><br>  put_str(<span class="hljs-string">&quot;      kernel_pool_bitmap_start:&quot;</span>);put_int((<span class="hljs-type">int</span>)kernel_pool.pool_bitmap.bits);<br>  put_str(<span class="hljs-string">&quot; kernel_pool_phy_addr_start:&quot;</span>);put_int(kernel_pool.phy_addr_start);<br>  put_str(<span class="hljs-string">&quot;\n&quot;</span>);<br>  put_str(<span class="hljs-string">&quot;      user_pool_bitmap_start:&quot;</span>);put_int((<span class="hljs-type">int</span>)user_pool.pool_bitmap.bits);<br>  put_str(<span class="hljs-string">&quot; user_pool_phy_addr_start:&quot;</span>);put_int(user_pool.phy_addr_start);<br>  put_str(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>  <span class="hljs-comment">/* 将位图置0*/</span><br>  bitmap_init(&amp;kernel_pool.pool_bitmap);<br>  bitmap_init(&amp;user_pool.pool_bitmap);<br><br>  <span class="hljs-comment">/* 下面初始化内核虚拟地址的位图,按实际物理内存大小生成数组。*/</span><br>  kernel_vaddr.vaddr_bitmap.btmp_bytes_len = kbm_length;      <span class="hljs-comment">// 用于维护内核堆的虚拟地址,所以要和内核内存池大小一致</span><br><br> <span class="hljs-comment">/* 位图的数组指向一块未使用的内存,目前定位在内核内存池和用户内存池之外*/</span><br>  kernel_vaddr.vaddr_bitmap.bits = (<span class="hljs-type">void</span>*)(MEM_BITMAP_BASE + kbm_length + ubm_length);<br><br>  kernel_vaddr.vaddr_start = K_HEAP_START;<br>  bitmap_init(&amp;kernel_vaddr.vaddr_bitmap);<br>lock_init(&amp;kernel_pool.lock);<br>  lock_init(&amp;user_pool.lock);<br>  put_str(<span class="hljs-string">&quot;   mem_pool_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 为malloc做准备 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">block_desc_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mem_block_desc* desc_array)</span> <br>&#123;   <br><span class="hljs-type">uint16_t</span> desc_idx, block_size = <span class="hljs-number">16</span>;<br><span class="hljs-comment">/* 初始化每个mem_block_desc描述符 */</span><br><span class="hljs-keyword">for</span> (desc_idx = <span class="hljs-number">0</span>; desc_idx &lt; DESC_CNT; desc_idx++) <br>&#123;<br>desc_array[desc_idx].block_size = block_size;<br><span class="hljs-comment">/* 初始化arena中的内存块数量 */</span><br>desc_array[desc_idx].blocks_per_arena = (PG_SIZE - <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> arena)) / block_size;  <br>list_init(&amp;desc_array[desc_idx].free_list);<br>block_size *= <span class="hljs-number">2</span>;         <span class="hljs-comment">// 更新为下一个规格内存块</span><br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 内存管理部分初始化入口 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">mem_init</span><span class="hljs-params">()</span> <br>&#123;<br>put_str(<span class="hljs-string">&quot;mem_init start\n&quot;</span>);<br><span class="hljs-type">uint32_t</span> mem_bytes_total = (*(<span class="hljs-type">uint32_t</span>*)(<span class="hljs-number">0xb00</span>));<br>mem_pool_init(mem_bytes_total);  <span class="hljs-comment">// 初始化内存池</span><br><span class="hljs-comment">/* 初始化mem_block_desc数组descs,为malloc做准备 */</span><br>block_desc_init(k_block_descs);<br>put_str(<span class="hljs-string">&quot;mem_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 返回arena中第idx个内存块的地址 */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> mem_block* <span class="hljs-title function_">arena2block</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> arena* a, <span class="hljs-type">uint32_t</span> idx)</span> <br>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> mem_block*)((<span class="hljs-type">uint32_t</span>)a + <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> arena) + idx * a-&gt;desc-&gt;block_size);<br>&#125;<br><br><br><span class="hljs-comment">/* 返回内存块b所在的arena地址 */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> arena* <span class="hljs-title function_">block2arena</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mem_block* b)</span> <br>&#123;<br>   <span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> arena*)((<span class="hljs-type">uint32_t</span>)b &amp; <span class="hljs-number">0xfffff000</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 在堆中申请size字节内存 */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">sys_malloc</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> size)</span> <br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">pool_flags</span> <span class="hljs-title">PF</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span>* <span class="hljs-title">mem_pool</span>;</span><br><span class="hljs-type">uint32_t</span> pool_size;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block_desc</span>* <span class="hljs-title">descs</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur_thread</span> =</span> running_thread();<br><br><span class="hljs-comment">/* 判断用哪个内存池*/</span><br><span class="hljs-keyword">if</span> (cur_thread-&gt;pgdir == <span class="hljs-literal">NULL</span>) <br>&#123;     <span class="hljs-comment">// 若为内核线程</span><br>PF = PF_KERNEL; <br>pool_size = kernel_pool.pool_size;<br>mem_pool = &amp;kernel_pool;<br>descs = k_block_descs;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;      <span class="hljs-comment">// 用户进程pcb中的pgdir会在为其分配页表时创建</span><br>PF = PF_USER;<br>pool_size = user_pool.pool_size;<br>mem_pool = &amp;user_pool;<br>descs = cur_thread-&gt;u_block_desc;<br>&#125;<br><br><span class="hljs-comment">/* 若申请的内存不在内存池容量范围内则直接返回NULL */</span><br><span class="hljs-keyword">if</span> (!(size &gt; <span class="hljs-number">0</span> &amp;&amp; size &lt; pool_size)) <br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">arena</span>* <span class="hljs-title">a</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block</span>* <span class="hljs-title">b</span>;</span><br>lock_acquire(&amp;mem_pool-&gt;lock);<br><span class="hljs-comment">/* 超过最大内存块1024, 就分配页框 */</span><br><span class="hljs-keyword">if</span> (size &gt; <span class="hljs-number">1024</span>) <br>&#123;<br><span class="hljs-type">uint32_t</span> page_cnt = DIV_ROUND_UP(size + <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> arena), PG_SIZE);    <span class="hljs-comment">// 向上取整需要的页框数</span><br><br>a = malloc_page(PF, page_cnt);<br><br><span class="hljs-keyword">if</span> (a != <span class="hljs-literal">NULL</span>) <br>&#123;<br><span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, page_cnt * PG_SIZE); <span class="hljs-comment">// 将分配的内存清0  </span><br><br><span class="hljs-comment">/* 对于分配的大块页框,将desc置为NULL, cnt置为页框数,large置为true */</span><br>a-&gt;desc = <span class="hljs-literal">NULL</span>;<br>a-&gt;cnt = page_cnt;<br>a-&gt;large = <span class="hljs-literal">true</span>;<br>lock_release(&amp;mem_pool-&gt;lock);<br><span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)(a + <span class="hljs-number">1</span>); <span class="hljs-comment">// 跨过arena大小，把剩下的内存返回</span><br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123; <br>lock_release(&amp;mem_pool-&gt;lock);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <br>&#125;<br>&#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配</span><br>&#123;    <br><span class="hljs-type">uint8_t</span> desc_idx;<br><br><span class="hljs-comment">/* 从内存块描述符中匹配合适的内存块规格 */</span><br><span class="hljs-keyword">for</span> (desc_idx = <span class="hljs-number">0</span>; desc_idx &lt; DESC_CNT; desc_idx++) <br>&#123;<br><span class="hljs-keyword">if</span> (size &lt;= descs[desc_idx].block_size) <span class="hljs-comment">// 从小往大后,找到后退出</span><br>&#123;  <br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* 若mem_block_desc的free_list中已经没有可用的mem_block,</span><br><span class="hljs-comment">* 就创建新的arena提供mem_block */</span><br><span class="hljs-keyword">if</span> (list_empty(&amp;descs[desc_idx].free_list)) <br>&#123;<br>a = malloc_page(PF, <span class="hljs-number">1</span>);       <span class="hljs-comment">// 分配1页框做为arena</span><br><span class="hljs-keyword">if</span> (a == <span class="hljs-literal">NULL</span>) <br>&#123;<br>lock_release(&amp;mem_pool-&gt;lock);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, PG_SIZE);<br><br><span class="hljs-comment">/* 对于分配的小块内存,将desc置为相应内存块描述符, </span><br><span class="hljs-comment">* cnt置为此arena可用的内存块数,large置为false */</span><br>a-&gt;desc = &amp;descs[desc_idx];<br>a-&gt;large = <span class="hljs-literal">false</span>;<br>a-&gt;cnt = descs[desc_idx].blocks_per_arena;<br><span class="hljs-type">uint32_t</span> block_idx;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br><br><span class="hljs-comment">/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */</span><br><span class="hljs-keyword">for</span> (block_idx = <span class="hljs-number">0</span>; block_idx &lt; descs[desc_idx].blocks_per_arena; block_idx++) <br>&#123;<br>b = arena2block(a, block_idx);<br>ASSERT(!elem_find(&amp;a-&gt;desc-&gt;free_list, &amp;b-&gt;free_elem));<br>list_append(&amp;a-&gt;desc-&gt;free_list, &amp;b-&gt;free_elem);<br>&#125;<br>intr_set_status(old_status);<br>&#125;    <br><span class="hljs-comment">/* 开始分配内存块 */</span><br>b = elem2entry(<span class="hljs-keyword">struct</span> mem_block, free_elem, list_pop(&amp;(descs[desc_idx].free_list)));<br><span class="hljs-built_in">memset</span>(b, <span class="hljs-number">0</span>, descs[desc_idx].block_size);<br><br>a = block2arena(b);  <span class="hljs-comment">// 获取内存块b所在的arena</span><br>a-&gt;cnt--;   <span class="hljs-comment">// 将此arena中的空闲内存块数减1</span><br>lock_release(&amp;mem_pool-&gt;lock);<br><span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)b;<br>   &#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 将物理地址pg_phy_addr回收到物理内存池 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">pfree</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_phy_addr)</span> <br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span>* <span class="hljs-title">mem_pool</span>;</span><br><span class="hljs-type">uint32_t</span> bit_idx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (pg_phy_addr &gt;= user_pool.phy_addr_start) <span class="hljs-comment">// 用户物理内存池</span><br>&#123;     <br>mem_pool = &amp;user_pool;<br>bit_idx = (pg_phy_addr - user_pool.phy_addr_start) / PG_SIZE;<br>&#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 内核物理内存池</span><br>&#123;  <br>mem_pool = &amp;kernel_pool;<br>bit_idx = (pg_phy_addr - kernel_pool.phy_addr_start) / PG_SIZE;<br>&#125;<br>bitmap_set(&amp;mem_pool-&gt;pool_bitmap, bit_idx, <span class="hljs-number">0</span>); <span class="hljs-comment">// 将位图中该位清0</span><br>&#125;<br><br><br><span class="hljs-comment">/* 去掉页表中虚拟地址vaddr的映射,只去掉vaddr对应的pte */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">page_table_pte_remove</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span> <br>&#123;<br><span class="hljs-type">uint32_t</span>* pte = pte_ptr(vaddr);<br>*pte &amp;= ~PG_P_1;<span class="hljs-comment">// 将页表项pte的P位置0</span><br><span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;invlpg %0&quot;</span>::<span class="hljs-string">&quot;m&quot;</span> (vaddr):<span class="hljs-string">&quot;memory&quot;</span>)</span>;    <span class="hljs-comment">//更新tlb</span><br>&#125;<br><br><br><span class="hljs-comment">/* 在虚拟地址池中释放以_vaddr起始的连续pg_cnt个虚拟页地址 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">vaddr_remove</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf, <span class="hljs-type">void</span>* _vaddr, <span class="hljs-type">uint32_t</span> pg_cnt)</span> <br>&#123;<br><span class="hljs-type">uint32_t</span> bit_idx_start = <span class="hljs-number">0</span>, vaddr = (<span class="hljs-type">uint32_t</span>)_vaddr, cnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (pf == PF_KERNEL) <span class="hljs-comment">// 内核虚拟内存池</span><br>&#123;  <br>bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;<br><span class="hljs-keyword">while</span>(cnt &lt; pg_cnt) <br>&#123;<br>bitmap_set(&amp;kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, <span class="hljs-number">0</span>);<br>&#125;<br>&#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 用户虚拟内存池</span><br>&#123;  <br><span class="hljs-keyword">struct</span> task_struct* cur_thread = running_thread();<br>bit_idx_start = (vaddr - cur_thread-&gt;userprog_vaddr.vaddr_start) / PG_SIZE;<br><span class="hljs-keyword">while</span>(cnt &lt; pg_cnt) <br>&#123;<br>bitmap_set(&amp;cur_thread-&gt;userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, <span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 释放以虚拟地址vaddr为起始的cnt个物理页框 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">mfree_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf, <span class="hljs-type">void</span>* _vaddr, <span class="hljs-type">uint32_t</span> pg_cnt)</span> <br>&#123;<br><span class="hljs-type">uint32_t</span> pg_phy_addr;<br><span class="hljs-type">uint32_t</span> vaddr = (<span class="hljs-type">int32_t</span>)_vaddr, page_cnt = <span class="hljs-number">0</span>;<br>ASSERT(pg_cnt &gt;=<span class="hljs-number">1</span> &amp;&amp; vaddr % PG_SIZE == <span class="hljs-number">0</span>); <br>pg_phy_addr = addr_v2p(vaddr);  <span class="hljs-comment">// 获取虚拟地址vaddr对应的物理地址</span><br><br><span class="hljs-comment">/* 确保待释放的物理内存在低端1M+1k大小的页目录+1k大小的页表地址范围外 */</span><br>   ASSERT((pg_phy_addr % PG_SIZE) == <span class="hljs-number">0</span> &amp;&amp; pg_phy_addr &gt;= <span class="hljs-number">0x102000</span>);<br>   <br><span class="hljs-comment">/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */</span><br>   <span class="hljs-keyword">if</span> (pg_phy_addr &gt;= user_pool.phy_addr_start) <span class="hljs-comment">// 位于user_pool内存池</span><br>&#123;   <br>vaddr -= PG_SIZE;<br><span class="hljs-keyword">while</span> (page_cnt &lt; pg_cnt) <br>&#123;<br>vaddr += PG_SIZE;<br>pg_phy_addr = addr_v2p(vaddr);<br><br><span class="hljs-comment">/* 确保物理地址属于用户物理内存池 */</span><br>ASSERT((pg_phy_addr % PG_SIZE) == <span class="hljs-number">0</span> &amp;&amp; pg_phy_addr &gt;= user_pool.phy_addr_start);<br><br><span class="hljs-comment">/* 先将对应的物理页框归还到内存池 */</span><br>pfree(pg_phy_addr);<br><br><span class="hljs-comment">/* 再从页表中清除此虚拟地址所在的页表项pte */</span><br>page_table_pte_remove(vaddr);<br><br>page_cnt++;<br>&#125;<br>   <span class="hljs-comment">/* 清空虚拟地址的位图中的相应位 */</span><br>      vaddr_remove(pf, _vaddr, pg_cnt);<br>&#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 位于kernel_pool内存池</span><br>&#123;     <br>vaddr -= PG_SIZE;      <br><span class="hljs-keyword">while</span> (page_cnt &lt; pg_cnt) <br>&#123;<br>vaddr += PG_SIZE;<br>pg_phy_addr = addr_v2p(vaddr);<br><span class="hljs-comment">/* 确保待释放的物理内存只属于内核物理内存池 */</span><br>ASSERT((pg_phy_addr % PG_SIZE) == <span class="hljs-number">0</span> &amp;&amp; \<br>pg_phy_addr &gt;= kernel_pool.phy_addr_start &amp;&amp; \<br>pg_phy_addr &lt; user_pool.phy_addr_start);<br><br><span class="hljs-comment">/* 先将对应的物理页框归还到内存池 */</span><br>pfree(pg_phy_addr);<br><br><span class="hljs-comment">/* 再从页表中清除此虚拟地址所在的页表项pte */</span><br>page_table_pte_remove(vaddr);<br><br>page_cnt++;<br>&#125;<br><span class="hljs-comment">/* 清空虚拟地址的位图中的相应位 */</span><br>vaddr_remove(pf, _vaddr, pg_cnt);<br>   &#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 回收内存ptr */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sys_free</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr)</span> <br>&#123;<br>ASSERT(ptr != <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (ptr != <span class="hljs-literal">NULL</span>) <br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">pool_flags</span> <span class="hljs-title">PF</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span>* <span class="hljs-title">mem_pool</span>;</span><br><br><span class="hljs-comment">/* 判断是线程还是进程 */</span><br><span class="hljs-keyword">if</span> (running_thread()-&gt;pgdir == <span class="hljs-literal">NULL</span>) <br>&#123;<br>ASSERT((<span class="hljs-type">uint32_t</span>)ptr &gt;= K_HEAP_START);<br>PF = PF_KERNEL; <br>mem_pool = &amp;kernel_pool;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>PF = PF_USER;<br>mem_pool = &amp;user_pool;<br>&#125;<br><br>lock_acquire(&amp;mem_pool-&gt;lock);   <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block</span>* <span class="hljs-title">b</span> =</span> ptr;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">arena</span>* <span class="hljs-title">a</span> =</span> block2arena(b);     <span class="hljs-comment">// 把mem_block转换成arena,获取元信息</span><br>ASSERT(a-&gt;large == <span class="hljs-number">0</span> || a-&gt;large == <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (a-&gt;desc == <span class="hljs-literal">NULL</span> &amp;&amp; a-&gt;large == <span class="hljs-literal">true</span>) <span class="hljs-comment">// 大于1024的内存</span><br>&#123; <br>mfree_page(PF, a, a-&gt;cnt); <br>&#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 小于等于1024的内存块 </span><br>&#123; <br><span class="hljs-comment">/* 先将内存块回收到free_list */</span><br>list_append(&amp;a-&gt;desc-&gt;free_list, &amp;b-&gt;free_elem);<br><br><span class="hljs-comment">/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */</span><br><span class="hljs-keyword">if</span> (++a-&gt;cnt == a-&gt;desc-&gt;blocks_per_arena) <br>&#123;<br><span class="hljs-type">uint32_t</span> block_idx;<br><span class="hljs-keyword">for</span> (block_idx = <span class="hljs-number">0</span>; block_idx &lt; a-&gt;desc-&gt;blocks_per_arena; block_idx++) <br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_block</span>*  <span class="hljs-title">b</span> =</span> arena2block(a, block_idx);<br>ASSERT(elem_find(&amp;a-&gt;desc-&gt;free_list, &amp;b-&gt;free_elem));<br>list_remove(&amp;b-&gt;free_elem);<br>&#125;<br>mfree_page(PF, a, <span class="hljs-number">1</span>); <br>&#125; <br>&#125;   <br>lock_release(&amp;mem_pool-&gt;lock); <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="libusersyscallh修改-2"><a class="markdownIt-Anchor" href="#libusersyscallh修改-2"></a> lib/user/syscall.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LIB_USER_SYSCALL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LIB_USER_SYSCALL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SYSCALL_NR</span> </span><br><span class="hljs-class">&#123;</span><br>   SYS_GETPID,<br>   SYS_WRITE,<br>   SYS_MALLOC,<br>   SYS_FREE<br>&#125;;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> size)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="libusersyscallc修改-2"><a class="markdownIt-Anchor" href="#libusersyscallc修改-2"></a> lib/user/syscall.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall.h&quot;</span></span><br><br><span class="hljs-comment">/* 无参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall0(NUMBER) (&#123;       \</span><br><span class="hljs-meta">   int retval;               \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><br><span class="hljs-comment">/* 一个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall1(NUMBER, ARG1) (&#123;       \</span><br><span class="hljs-meta">   int retval;               \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 两个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall2(NUMBER, ARG1, ARG2) (&#123;       \</span><br><span class="hljs-meta">   int retval;       \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">   <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1), <span class="hljs-string">&quot;c&quot;</span> (ARG2)       \</span><br><span class="hljs-meta">   : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 三个参数的系统调用 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _syscall3(NUMBER, ARG1, ARG2, ARG3) (&#123;       \</span><br><span class="hljs-meta">   int retval;       \</span><br><span class="hljs-meta">   asm volatile (       \</span><br><span class="hljs-meta">      <span class="hljs-string">&quot;int $0x80&quot;</span>       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;=a&quot;</span> (retval)       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;a&quot;</span> (NUMBER), <span class="hljs-string">&quot;b&quot;</span> (ARG1), <span class="hljs-string">&quot;c&quot;</span> (ARG2), <span class="hljs-string">&quot;d&quot;</span> (ARG3)       \</span><br><span class="hljs-meta">      : <span class="hljs-string">&quot;memory&quot;</span>       \</span><br><span class="hljs-meta">   );       \</span><br><span class="hljs-meta">   retval;       \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-comment">/* 返回当前任务pid */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">()</span> <br>&#123;<br>   <span class="hljs-keyword">return</span> _syscall0(SYS_GETPID);<br>&#125;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> _syscall1(SYS_WRITE,str);<br>&#125;<br><br><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> size)</span><br>&#123;<br>   <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)_syscall1(SYS_MALLOC, size);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr)</span><br>&#123;<br>   _syscall1(SYS_FREE, ptr);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="userprogsyscall-initc修改-2"><a class="markdownIt-Anchor" href="#userprogsyscall-initc修改-2"></a> userprog/syscall-init.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../kernel/memory.h&quot;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> syscall_nr 32 </span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span>* syscall;<br>syscall syscall_table[syscall_nr];<br><br><span class="hljs-comment">/* 返回当前任务的pid */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">sys_getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>   <span class="hljs-keyword">return</span> running_thread()-&gt;pid;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sys_write</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span><br>&#123;<br>   console_put_str(str);<br>&#125;<br><br><span class="hljs-comment">/* 初始化系统调用 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">syscall_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>put_str(<span class="hljs-string">&quot;syscall_init start\n&quot;</span>);<br>syscall_table[SYS_GETPID] = sys_getpid;<br>syscall_table[SYS_WRITE] = sys_write;<br>syscall_table[SYS_MALLOC] = sys_malloc;<br>syscall_table[SYS_FREE] = sys_free;<br>put_str(<span class="hljs-string">&quot;syscall_init done\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-4"><a class="markdownIt-Anchor" href="#kernelmainc修改-4"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/user/syscall.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/syscall-init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../lib/stdio.h&quot;</span></span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_a</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_b</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br><br>   intr_enable();<br>   process_execute(u_prog_a, <span class="hljs-string">&quot;u_prog_a&quot;</span>);<br>   process_execute(u_prog_b, <span class="hljs-string">&quot;u_prog_b&quot;</span>);   <br>thread_start(<span class="hljs-string">&quot;k_thread_a&quot;</span>, <span class="hljs-number">31</span>, k_thread_a, <span class="hljs-string">&quot;argA &quot;</span>);<br>thread_start(<span class="hljs-string">&quot;k_thread_b&quot;</span>, <span class="hljs-number">31</span>, k_thread_b, <span class="hljs-string">&quot;argB &quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span>&#123;<br><br><span class="hljs-type">void</span>* addr1 = sys_malloc(<span class="hljs-number">256</span>);<br><span class="hljs-type">void</span>* addr2 = sys_malloc(<span class="hljs-number">255</span>);<br><span class="hljs-type">void</span>* addr3 = sys_malloc(<span class="hljs-number">254</span>);<br>console_put_str(<span class="hljs-string">&quot; thread_a malloc addr:0x&quot;</span>);<br>console_put_int((<span class="hljs-type">int</span>)addr1);<br>console_put_char(<span class="hljs-string">&#x27;,&#x27;</span>);<br>console_put_int((<span class="hljs-type">int</span>)addr2);<br>console_put_char(<span class="hljs-string">&#x27;,&#x27;</span>);<br>console_put_int((<span class="hljs-type">int</span>)addr3);<br>console_put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-type">int</span> cpu_delay = <span class="hljs-number">100000</span>;<br><span class="hljs-keyword">while</span>(cpu_delay--&gt;<span class="hljs-number">0</span>);<br>sys_free(addr1);<br>sys_free(addr2);<br>sys_free(addr3);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span>&#123;<br><span class="hljs-type">void</span>* addr1 = sys_malloc(<span class="hljs-number">256</span>);<br><span class="hljs-type">void</span>* addr2 = sys_malloc(<span class="hljs-number">255</span>);<br><span class="hljs-type">void</span>* addr3 = sys_malloc(<span class="hljs-number">254</span>);<br>console_put_str(<span class="hljs-string">&quot; thread_b malloc addr:0x&quot;</span>);<br>console_put_int((<span class="hljs-type">int</span>)addr1);<br>console_put_char(<span class="hljs-string">&#x27;,&#x27;</span>);<br>console_put_int((<span class="hljs-type">int</span>)addr2);<br>console_put_char(<span class="hljs-string">&#x27;,&#x27;</span>);<br>console_put_int((<span class="hljs-type">int</span>)addr3);<br>console_put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-type">int</span> cpu_delay = <span class="hljs-number">100000</span>;<br><span class="hljs-keyword">while</span>(cpu_delay--&gt;<span class="hljs-number">0</span>);<br>sys_free(addr1);<br>sys_free(addr2);<br>sys_free(addr3);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_a</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><span class="hljs-type">void</span>* addr1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">256</span>);<br><span class="hljs-type">void</span>* addr2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">255</span>);<br><span class="hljs-type">void</span>* addr3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">254</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; prog_a malloc addr:0x%x, 0x%x, 0x%x\n&quot;</span>, (<span class="hljs-type">int</span>)addr1,(<span class="hljs-type">int</span>)addr2,(<span class="hljs-type">int</span>)addr3);<br><span class="hljs-type">int</span> cpu_delay = <span class="hljs-number">100000</span>;<br><span class="hljs-keyword">while</span>(cpu_delay--&gt;<span class="hljs-number">0</span>);<br><span class="hljs-built_in">free</span>(addr1);<br><span class="hljs-built_in">free</span>(addr2);<br><span class="hljs-built_in">free</span>(addr3);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_b</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><span class="hljs-type">void</span>* addr1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">256</span>);<br><span class="hljs-type">void</span>* addr2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">255</span>);<br><span class="hljs-type">void</span>* addr3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">254</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; prog_b malloc addr:0x%x, 0x%x, 0x%x\n&quot;</span>, (<span class="hljs-type">int</span>)addr1,(<span class="hljs-type">int</span>)addr2,(<span class="hljs-type">int</span>)addr3);<br><span class="hljs-type">int</span> cpu_delay = <span class="hljs-number">100000</span>;<br><span class="hljs-keyword">while</span>(cpu_delay--&gt;<span class="hljs-number">0</span>);<br><span class="hljs-built_in">free</span>(addr1);<br><span class="hljs-built_in">free</span>(addr2);<br><span class="hljs-built_in">free</span>(addr3);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-4"><a class="markdownIt-Anchor" href="#运行结果-4"></a> 运行结果</h3><p><img src="/img/os/os12.4.png" alt="图为bochs运行界面" /></p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>这章内容也太多了，不过原理理解起来不是那么困难，还剩三章就一口气做完吧！</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十一章 加入TSS 终于补齐进程调度</title>
    <link href="/2022/08/01/os(11)/"/>
    <url>/2022/08/01/os(11)/</url>
    
    <content type="html"><![CDATA[<h1 id="第十一章"><a class="markdownIt-Anchor" href="#第十一章"></a> 第十一章</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>动笔写这篇博客的时候已经是8月1日的深夜了，其实这一章的内容我在前几天就已经实现了，但因为这几天建模国赛在校内进行了一次模拟，所以耽搁了几天，刚刚提交完论文之后就马不停蹄地开始写这篇博客了。同时呢，我在月初时立下的这个月刷完这本书的flag也宣告失败了。不过进度其实也很令我满意了，伸手摘星，即使徒劳无功，亦不至满手污泥嘛。</p><h2 id="定义并初始化tss"><a class="markdownIt-Anchor" href="#定义并初始化tss"></a> 定义并初始化TSS</h2><h3 id="kernelglobalh修改"><a class="markdownIt-Anchor" href="#kernelglobalh修改"></a> kernel/global.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __KERNEL_GLOBAL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __KERNEL_GLOBAL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RPL0  0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RPL1  1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RPL2  2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RPL3  3</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TI_GDT 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TI_LDT 1</span><br><br><br><span class="hljs-comment">// ----------------  GDT描述符属性  ----------------</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_G_4K    1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_D_32    1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_L      0<span class="hljs-comment">// 64位代码标记，此处标记为0便可。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_AVL     0<span class="hljs-comment">// cpu不用此位，暂置为0  </span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_P      1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_DPL_0   0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_DPL_1   1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_DPL_2   2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_DPL_3   3</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">   代码段和数据段属于存储段，tss和各种门描述符属于系统段</span><br><span class="hljs-comment">   s为1时表示存储段,为0时表示系统段.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_S_CODE1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_S_DATADESC_S_CODE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_S_SYS0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_TYPE_CODE8<span class="hljs-comment">// x=1,c=0,r=0,a=0 代码段是可执行的,非依从的,不可读的,已访问位a清0.  </span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_TYPE_DATA  2<span class="hljs-comment">// x=0,e=0,w=1,a=0 数据段是不可执行的,向上扩展的,可写的,已访问位a清0.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DESC_TYPE_TSS   9<span class="hljs-comment">// B位为0,不忙</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SELECTOR_K_CODE   ((1 &lt;&lt; 3) + (TI_GDT &lt;&lt; 2) + RPL0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SELECTOR_K_DATA   ((2 &lt;&lt; 3) + (TI_GDT &lt;&lt; 2) + RPL0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SELECTOR_K_STACK   SELECTOR_K_DATA </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SELECTOR_K_GS   ((3 &lt;&lt; 3) + (TI_GDT &lt;&lt; 2) + RPL0)</span><br><span class="hljs-comment">/* 第3个段描述符是显存,第4个是tss */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SELECTOR_U_CODE   ((5 &lt;&lt; 3) + (TI_GDT &lt;&lt; 2) + RPL3)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SELECTOR_U_DATA   ((6 &lt;&lt; 3) + (TI_GDT &lt;&lt; 2) + RPL3)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SELECTOR_U_STACK   SELECTOR_U_DATA</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GDT_ATTR_HIGH ((DESC_G_4K &lt;&lt; 7) + (DESC_D_32 &lt;&lt; 6) + (DESC_L &lt;&lt; 5) + (DESC_AVL &lt;&lt; 4))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GDT_CODE_ATTR_LOW_DPL3 ((DESC_P &lt;&lt; 7) + (DESC_DPL_3 &lt;&lt; 5) + (DESC_S_CODE &lt;&lt; 4) + DESC_TYPE_CODE)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GDT_DATA_ATTR_LOW_DPL3 ((DESC_P &lt;&lt; 7) + (DESC_DPL_3 &lt;&lt; 5) + (DESC_S_DATA &lt;&lt; 4) + DESC_TYPE_DATA)</span><br><br><br><span class="hljs-comment">//--------------   IDT描述符属性  ------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_P 1 </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_DPL0   0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_DPL3   3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_32_TYPE     0xE   <span class="hljs-comment">// 32位的门</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_16_TYPE     0x6   <span class="hljs-comment">// 16位的门，不用，定义它只为和32位门区分</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_ATTR_DPL0  ((IDT_DESC_P &lt;&lt; 7) + (IDT_DESC_DPL0 &lt;&lt; 5) + IDT_DESC_32_TYPE)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_ATTR_DPL3  ((IDT_DESC_P &lt;&lt; 7) + (IDT_DESC_DPL3 &lt;&lt; 5) + IDT_DESC_32_TYPE)</span><br><br><span class="hljs-comment">//---------------  TSS描述符属性  ------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TSS_DESC_D  0 </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TSS_ATTR_HIGH ((DESC_G_4K &lt;&lt; 7) + (TSS_DESC_D &lt;&lt; 6) + (DESC_L &lt;&lt; 5) + (DESC_AVL &lt;&lt; 4) + 0x0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TSS_ATTR_LOW ((DESC_P &lt;&lt; 7) + (DESC_DPL_0 &lt;&lt; 5) + (DESC_S_SYS &lt;&lt; 4) + DESC_TYPE_TSS)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SELECTOR_TSS ((4 &lt;&lt; 3) + (TI_GDT &lt;&lt; 2 ) + RPL0)</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gdt_desc</span> &#123;</span><br>   <span class="hljs-type">uint16_t</span> limit_low_word;<br>   <span class="hljs-type">uint16_t</span> base_low_word;<br>   <span class="hljs-type">uint8_t</span>  base_mid_byte;<br>   <span class="hljs-type">uint8_t</span>  attr_low_byte;<br>   <span class="hljs-type">uint8_t</span>  limit_high_attr_high;<br>   <span class="hljs-type">uint8_t</span>  base_high_byte;<br>&#125;; <br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EFLAGS_MBS(1 &lt;&lt; 1)<span class="hljs-comment">// 此项必须要设置</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EFLAGS_IF_1(1 &lt;&lt; 9)<span class="hljs-comment">// if为1,开中断</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EFLAGS_IF_00<span class="hljs-comment">// if为0,关中断</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EFLAGS_IOPL_3(3 &lt;&lt; 12)<span class="hljs-comment">// IOPL3,用于测试用户程序在非系统调用下进行IO</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EFLAGS_IOPL_0(0 &lt;&lt; 12)<span class="hljs-comment">// IOPL0</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NULL ((void*)0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DIV_ROUND_UP(X, STEP) ((X + STEP - 1) / (STEP))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> default_prio   31</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USER_STACK3_VADDR (0xc0000000 - 0x1000) </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> bool int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_SIZE 4096</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="userprogtssc创建"><a class="markdownIt-Anchor" href="#userprogtssc创建"></a> userprog/tss.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tss.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><br><br><span class="hljs-comment">/* 任务状态段tss结构 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tss</span> </span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-type">uint32_t</span> backlink;<br>   <span class="hljs-type">uint32_t</span>* esp0;<br>   <span class="hljs-type">uint32_t</span> ss0;<br>   <span class="hljs-type">uint32_t</span>* esp1;<br>   <span class="hljs-type">uint32_t</span> ss1;<br>   <span class="hljs-type">uint32_t</span>* esp2;<br>   <span class="hljs-type">uint32_t</span> ss2;<br>   <span class="hljs-type">uint32_t</span> cr3;<br>   <span class="hljs-type">uint32_t</span> (*eip) (<span class="hljs-type">void</span>);<br>   <span class="hljs-type">uint32_t</span> eflags;<br>   <span class="hljs-type">uint32_t</span> eax;<br>   <span class="hljs-type">uint32_t</span> ecx;<br>   <span class="hljs-type">uint32_t</span> edx;<br>   <span class="hljs-type">uint32_t</span> ebx;<br>   <span class="hljs-type">uint32_t</span> esp;<br>   <span class="hljs-type">uint32_t</span> ebp;<br>   <span class="hljs-type">uint32_t</span> esi;<br>   <span class="hljs-type">uint32_t</span> edi;<br>   <span class="hljs-type">uint32_t</span> es;<br>   <span class="hljs-type">uint32_t</span> cs;<br>   <span class="hljs-type">uint32_t</span> ss;<br>   <span class="hljs-type">uint32_t</span> ds;<br>   <span class="hljs-type">uint32_t</span> fs;<br>   <span class="hljs-type">uint32_t</span> gs;<br>   <span class="hljs-type">uint32_t</span> ldt;<br>   <span class="hljs-type">uint32_t</span> trace;<br>   <span class="hljs-type">uint32_t</span> io_base;<br>&#125;; <br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tss</span> <span class="hljs-title">tss</span>;</span><br><br><span class="hljs-comment">/* 更新tss中esp0字段的值为pthread的0级线 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">update_tss_esp</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread)</span> <br>&#123;<br>   tss.esp0 = (<span class="hljs-type">uint32_t</span>*)((<span class="hljs-type">uint32_t</span>)pthread + PG_SIZE);<br>&#125;<br><br><span class="hljs-comment">/* 创建gdt描述符 */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> gdt_desc <span class="hljs-title function_">make_gdt_desc</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* desc_addr, <span class="hljs-type">uint32_t</span> limit, <span class="hljs-type">uint8_t</span> attr_low, <span class="hljs-type">uint8_t</span> attr_high)</span> <br>&#123;<br>   <span class="hljs-type">uint32_t</span> desc_base = (<span class="hljs-type">uint32_t</span>)desc_addr;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gdt_desc</span> <span class="hljs-title">desc</span>;</span><br>   desc.limit_low_word = limit &amp; <span class="hljs-number">0x0000ffff</span>;<br>   desc.base_low_word = desc_base &amp; <span class="hljs-number">0x0000ffff</span>;<br>   desc.base_mid_byte = ((desc_base &amp; <span class="hljs-number">0x00ff0000</span>) &gt;&gt; <span class="hljs-number">16</span>);<br>   desc.attr_low_byte = (<span class="hljs-type">uint8_t</span>)(attr_low);<br>   desc.limit_high_attr_high = (((limit &amp; <span class="hljs-number">0x000f0000</span>) &gt;&gt; <span class="hljs-number">16</span>) + (<span class="hljs-type">uint8_t</span>)(attr_high));<br>   desc.base_high_byte = desc_base &gt;&gt; <span class="hljs-number">24</span>;<br>   <span class="hljs-keyword">return</span> desc;<br>&#125;<br><br><span class="hljs-comment">/* 在gdt中创建tss并重新加载gdt */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">tss_init</span><span class="hljs-params">()</span> <br>&#123;<br>   put_str(<span class="hljs-string">&quot;tss_init start\n&quot;</span>);<br>   <span class="hljs-type">uint32_t</span> tss_size = <span class="hljs-keyword">sizeof</span>(tss);<br>   <span class="hljs-built_in">memset</span>(&amp;tss, <span class="hljs-number">0</span>, tss_size);<br>   tss.ss0 = SELECTOR_K_STACK;<br>   tss.io_base = tss_size;<br><br><span class="hljs-comment">/* gdt段基址为0x900,把tss放到第4个位置,也就是0x900+0x20的位置 */</span><br><br>  <span class="hljs-comment">/* 在gdt中添加dpl为0的TSS描述符 */</span><br>  *((<span class="hljs-keyword">struct</span> gdt_desc*)<span class="hljs-number">0xc0000920</span>) = make_gdt_desc((<span class="hljs-type">uint32_t</span>*)&amp;tss, tss_size - <span class="hljs-number">1</span>, TSS_ATTR_LOW, TSS_ATTR_HIGH);<br><br>  <span class="hljs-comment">/* 在gdt中添加dpl为3的数据段和代码段描述符 */</span><br>  *((<span class="hljs-keyword">struct</span> gdt_desc*)<span class="hljs-number">0xc0000928</span>) = make_gdt_desc((<span class="hljs-type">uint32_t</span>*)<span class="hljs-number">0</span>, <span class="hljs-number">0xfffff</span>, GDT_CODE_ATTR_LOW_DPL3, GDT_ATTR_HIGH);<br>  *((<span class="hljs-keyword">struct</span> gdt_desc*)<span class="hljs-number">0xc0000930</span>) = make_gdt_desc((<span class="hljs-type">uint32_t</span>*)<span class="hljs-number">0</span>, <span class="hljs-number">0xfffff</span>, GDT_DATA_ATTR_LOW_DPL3, GDT_ATTR_HIGH);<br>   <br>  <span class="hljs-comment">/* gdt 16位的limit 32位的段基址 */</span><br>   <span class="hljs-type">uint64_t</span> gdt_operand = ((<span class="hljs-number">8</span> * <span class="hljs-number">7</span> - <span class="hljs-number">1</span>) | ((<span class="hljs-type">uint64_t</span>)(<span class="hljs-type">uint32_t</span>)<span class="hljs-number">0xc0000900</span> &lt;&lt; <span class="hljs-number">16</span>));   <span class="hljs-comment">// 7个描述符大小</span><br>   <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;lgdt %0&quot;</span> : : <span class="hljs-string">&quot;m&quot;</span> (gdt_operand))</span>;<br>   <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;ltr %w0&quot;</span> : : <span class="hljs-string">&quot;r&quot;</span> (SELECTOR_TSS))</span>;<br>   put_str(<span class="hljs-string">&quot;tss_init and ltr done\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="userprogtssh创建"><a class="markdownIt-Anchor" href="#userprogtssh创建"></a> userprog/tss.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __USERPROG_TSS_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __USERPROG_TSS_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">update_tss_esp</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">tss_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="kernelinitc修改"><a class="markdownIt-Anchor" href="#kernelinitc修改"></a> kernel/init.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/timer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/tss.h&quot;</span></span><br><br><span class="hljs-comment">/*负责初始化所有模块 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_all</span><span class="hljs-params">()</span> <br>&#123;<br>   put_str(<span class="hljs-string">&quot;init_all\n&quot;</span>);<br>idt_init();     <span class="hljs-comment">// 初始化中断</span><br>mem_init();<br>timer_init();<br>thread_init();<br>console_init();<br>keyboard_init();<br>tss_init();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="makefile修改"><a class="markdownIt-Anchor" href="#makefile修改"></a> makefile修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs shell">BUILD_DIR = ./build<br>ENTRY_POINT = 0xc0001500<br>AS = nasm<br>CC = gcc<br>LD = ld<br>LIB = -I lib/ -I lib/kernel/ -I lib/user/ -I kernel/ -I device/ <br>ASFLAGS = -f elf<br>CFLAGS = -Wall -m32 -fno-stack-protector $(LIB) -c -fno-builtin -W -Wstrict-prototypes -Wmissing-prototypes<br>LDFLAGS =  -m elf_i386 -Ttext $(ENTRY_POINT) -e main -Map $(BUILD_DIR)/kernel.map<br>OBJS = $(BUILD_DIR)/main.o $(BUILD_DIR)/init.o $(BUILD_DIR)/interrupt.o \<br>      $(BUILD_DIR)/timer.o $(BUILD_DIR)/kernel.o $(BUILD_DIR)/print.o $(BUILD_DIR)/switch.o \<br>      $(BUILD_DIR)/debug.o $(BUILD_DIR)/string.o $(BUILD_DIR)/memory.o \<br>      $(BUILD_DIR)/bitmap.o $(BUILD_DIR)/thread.o $(BUILD_DIR)/list.o \<br>      $(BUILD_DIR)/sync.o $(BUILD_DIR)/console.o $(BUILD_DIR)/keyboard.o \<br>      $(BUILD_DIR)/ioqueue.o $(BUILD_DIR)/tss.o<br>      <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############     c代码编译     ###############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/main.o: kernel/main.c lib/kernel/print.h \</span><br><span class="language-bash">        lib/stdint.h kernel/init.h lib/string.h kernel/memory.h \</span><br><span class="language-bash">        thread/thread.h kernel/interrupt.h device/console.h \</span><br><span class="language-bash">        device/keyboard.h device/ioqueue.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/init.o: kernel/init.c kernel/init.h lib/kernel/print.h \</span><br><span class="language-bash">        lib/stdint.h kernel/interrupt.h device/timer.h kernel/memory.h \</span><br><span class="language-bash">        thread/thread.h device/console.h device/keyboard.h userprog/tss.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/interrupt.o: kernel/interrupt.c kernel/interrupt.h \</span><br><span class="language-bash">        lib/stdint.h kernel/global.h lib/kernel/io.h lib/kernel/print.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/timer.o: device/timer.c device/timer.h lib/kernel/io.h lib/kernel/print.h \</span><br><span class="language-bash">        kernel/interrupt.h thread/thread.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/debug.o: kernel/debug.c kernel/debug.h \</span><br><span class="language-bash">        lib/kernel/print.h lib/stdint.h kernel/interrupt.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/string.o: lib/string.c lib/string.h \</span><br><span class="language-bash">kernel/debug.h kernel/global.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/memory.o: kernel/memory.c kernel/memory.h \</span><br><span class="language-bash">lib/stdint.h lib/kernel/bitmap.h kernel/debug.h lib/string.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/bitmap.o: lib/kernel/bitmap.c lib/kernel/bitmap.h kernel/global.h \</span><br><span class="language-bash">lib/string.h kernel/interrupt.h lib/kernel/print.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/thread.o: thread/thread.c thread/thread.h \</span><br><span class="language-bash">lib/stdint.h lib/string.h kernel/global.h kernel/memory.h \</span><br><span class="language-bash">kernel/debug.h kernel/interrupt.h lib/kernel/print.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/list.o: lib/kernel/list.c lib/kernel/list.h \</span><br><span class="language-bash">kernel/interrupt.h lib/stdint.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/sync.o: thread/sync.c thread/sync.h \</span><br><span class="language-bash">lib/stdint.h thread/thread.h kernel/debug.h kernel/interrupt.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/console.o: device/console.c device/console.h \</span><br><span class="language-bash">lib/kernel/print.h thread/sync.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/keyboard.o: device/keyboard.c device/keyboard.h \</span><br><span class="language-bash">lib/kernel/print.h lib/kernel/io.h kernel/interrupt.h \</span><br><span class="language-bash">kernel/global.h lib/stdint.h device/ioqueue.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/ioqueue.o: device/ioqueue.c device/ioqueue.h \</span><br><span class="language-bash">kernel/interrupt.h kernel/global.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/tss.o: userprog/tss.c userprog/tss.h \</span><br><span class="language-bash">kernel/global.h thread/thread.h lib/kernel/print.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############    汇编代码编译    ###############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/kernel.o: kernel/kernel.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/print.o: lib/kernel/print.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/switch.o: thread/switch.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############    链接所有目标文件    #############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/kernel.bin: $(OBJS)</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(LD) $(LDFLAGS) $^ -o <span class="hljs-variable">$@</span></span><br><br>.PHONY : mk_dir hd clean all<br><br>mk_dir:<br>if [ ! -d $(BUILD_DIR) ]; then mkdir $(BUILD_DIR); fi<br><br>hd:<br>dd if=$(BUILD_DIR)/kernel.bin \<br>           of=/home/podest/bochs/hd60M.img \<br>           bs=512 count=200 seek=9 conv=notrunc<br><br>clean:<br>cd $(BUILD_DIR) &amp;&amp; rm -f  ./*<br><br>build: $(BUILD_DIR)/kernel.bin<br><br>all: mk_dir build hd<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h3><p><img src="/img/os/os11.1.png" alt="图为bochs运行界面" /></p><h2 id="实现用户进程"><a class="markdownIt-Anchor" href="#实现用户进程"></a> 实现用户进程</h2><h3 id="threadthreadh修改"><a class="markdownIt-Anchor" href="#threadthreadh修改"></a> thread/thread.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK_NAME_LEN 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_FILES_OPEN_PER_PROC 8</span><br><span class="hljs-comment">/* 自定义通用函数类型,它将在很多线程函数中做为形参类型 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> <span class="hljs-title function_">thread_func</span><span class="hljs-params">(<span class="hljs-type">void</span>*)</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int16_t</span> <span class="hljs-type">pid_t</span>;<br><br><span class="hljs-comment">/* 进程或线程的状态 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> &#123;</span><br>   TASK_RUNNING,<br>   TASK_READY,<br>   TASK_BLOCKED,<br>   TASK_WAITING,<br>   TASK_HANGING,<br>   TASK_DIED<br>&#125;;<br><br><span class="hljs-comment">/***********   中断栈intr_stack   ***********</span><br><span class="hljs-comment"> * 此结构用于中断发生时保护程序(线程或进程)的上下文环境:</span><br><span class="hljs-comment"> * 进程或线程被外部中断或软中断打断时,会按照此结构压入上下文</span><br><span class="hljs-comment"> * 寄存器,  intr_exit中的出栈操作是此结构的逆操作</span><br><span class="hljs-comment"> * 此栈在线程自己的内核栈中位置固定,所在页的最顶端</span><br><span class="hljs-comment">********************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">intr_stack</span> &#123;</span><br>    <span class="hljs-type">uint32_t</span> vec_no; <span class="hljs-comment">// kernel.S 宏VECTOR中push %1压入的中断号</span><br>    <span class="hljs-type">uint32_t</span> edi;<br>    <span class="hljs-type">uint32_t</span> esi;<br>    <span class="hljs-type">uint32_t</span> ebp;<br>    <span class="hljs-type">uint32_t</span> esp_dummy; <span class="hljs-comment">// 虽然pushad把esp也压入,但esp是不断变化的,所以会被popad忽略</span><br>    <span class="hljs-type">uint32_t</span> ebx;<br>    <span class="hljs-type">uint32_t</span> edx;<br>    <span class="hljs-type">uint32_t</span> ecx;<br>    <span class="hljs-type">uint32_t</span> eax;<br>    <span class="hljs-type">uint32_t</span> gs;<br>    <span class="hljs-type">uint32_t</span> fs;<br>    <span class="hljs-type">uint32_t</span> es;<br>    <span class="hljs-type">uint32_t</span> ds;<br><br><span class="hljs-comment">/* 以下由cpu从低特权级进入高特权级时压入 */</span><br>    <span class="hljs-type">uint32_t</span> err_code; <span class="hljs-comment">// err_code会被压入在eip之后</span><br>    <span class="hljs-type">void</span> (*eip) (<span class="hljs-type">void</span>);<br>    <span class="hljs-type">uint32_t</span> cs;<br>    <span class="hljs-type">uint32_t</span> eflags;<br>    <span class="hljs-type">void</span>* esp;<br>    <span class="hljs-type">uint32_t</span> ss;<br>&#125;;<br><br><span class="hljs-comment">/***********  线程栈thread_stack  ***********</span><br><span class="hljs-comment"> * 线程自己的栈,用于存储线程中待执行的函数</span><br><span class="hljs-comment"> * 此结构在线程自己的内核栈中位置不固定,</span><br><span class="hljs-comment"> * 用在switch_to时保存线程环境。</span><br><span class="hljs-comment"> * 实际位置取决于实际运行情况。</span><br><span class="hljs-comment"> ******************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span> &#123;</span><br>   <span class="hljs-type">uint32_t</span> ebp;<br>   <span class="hljs-type">uint32_t</span> ebx;<br>   <span class="hljs-type">uint32_t</span> edi;<br>   <span class="hljs-type">uint32_t</span> esi;<br><br><span class="hljs-comment">/* 线程第一次执行时,eip指向待调用的函数kernel_thread </span><br><span class="hljs-comment">其它时候,eip是指向switch_to的返回地址*/</span><br>   <span class="hljs-type">void</span> (*eip) (thread_func* func, <span class="hljs-type">void</span>* func_arg);<br><br><span class="hljs-comment">/*****   以下仅供第一次被调度上cpu时使用   ****/</span><br><br><span class="hljs-comment">/* 参数unused_ret只为占位置充数为返回地址 */</span><br>   <span class="hljs-type">void</span> (*unused_retaddr);<br>   thread_func* function;   <span class="hljs-comment">// 由Kernel_thread所调用的函数名</span><br>   <span class="hljs-type">void</span>* func_arg;    <span class="hljs-comment">// 由Kernel_thread所调用的函数所需的参数</span><br>&#125;;<br><br><span class="hljs-comment">/* 进程或线程的pcb,程序控制块 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> &#123;</span><br>   <span class="hljs-type">uint32_t</span>* self_kstack; <span class="hljs-comment">// 各内核线程都用自己的内核栈</span><br>   <span class="hljs-type">pid_t</span> pid;<br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> <span class="hljs-title">status</span>;</span><br>   <span class="hljs-type">char</span> name[TASK_NAME_LEN];<br>   <span class="hljs-type">uint8_t</span> priority;<br>   <span class="hljs-type">uint8_t</span> ticks;   <span class="hljs-comment">// 每次在处理器上执行的时间嘀嗒数</span><br><span class="hljs-comment">/* 此任务自上cpu运行后至今占用了多少cpu嘀嗒数,</span><br><span class="hljs-comment"> * 也就是此任务执行了多久*/</span><br>   <span class="hljs-type">uint32_t</span> elapsed_ticks;<br><span class="hljs-comment">/* general_tag的作用是用于线程在一般的队列中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">general_tag</span>;</span>    <br><span class="hljs-comment">/* all_list_tag的作用是用于线程队列thread_all_list中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">all_list_tag</span>;</span><br>   <span class="hljs-type">uint32_t</span>* pgdir;              <span class="hljs-comment">// 进程自己页表的虚拟地址</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> <span class="hljs-title">userprog_vaddr</span>;</span>   <span class="hljs-comment">// 用户进程的虚拟地址 </span><br>   <span class="hljs-type">uint32_t</span> stack_magic; <span class="hljs-comment">// 用这串数字做栈的边界标记,用于检测栈的溢出</span><br>&#125;;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_ready_list</span>;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_all_list</span>;</span><br><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">running_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">kernel_thread</span><span class="hljs-params">(thread_func* function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread,thread_func function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread,<span class="hljs-type">char</span>* name,<span class="hljs-type">int</span> prio)</span>;<br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name,<span class="hljs-type">int</span> prio,thread_func function,<span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_main_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">schedule</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_block</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> task_status stat)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_unblock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="threadthreadc修改"><a class="markdownIt-Anchor" href="#threadthreadc修改"></a> thread/thread.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;thread.h&quot;</span>   <span class="hljs-comment">//函数声明 各种结构体</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span>   <span class="hljs-comment">//前缀</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span>   <span class="hljs-comment">//memset</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span>   <span class="hljs-comment">//不清楚</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span>   <span class="hljs-comment">//分配页需要</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_SIZE 4096</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">main_thread</span>;</span>    <span class="hljs-comment">// 主线程PCB</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_ready_list</span>;</span>    <span class="hljs-comment">// 就绪队列</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_all_list</span>;</span>    <span class="hljs-comment">// 所有任务队列</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">thread_tag</span>;</span><span class="hljs-comment">// 用于保存队列中的线程结点</span><br><br><br><span class="hljs-comment">/* 获取当前线程pcb指针 */</span><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">running_thread</span><span class="hljs-params">()</span> <br>&#123;<br>   <span class="hljs-type">uint32_t</span> esp; <br><span class="hljs-keyword">asm</span> (<span class="hljs-string">&quot;mov %%esp, %0&quot;</span> : <span class="hljs-string">&quot;=g&quot;</span> (esp));<br><span class="hljs-comment">/* 取esp整数部分即pcb起始地址 */</span><br><span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> task_struct*)(esp &amp; <span class="hljs-number">0xfffff000</span>);<br>&#125;<br><br><span class="hljs-comment">/* 由kernel_thread去执行function(func_arg) */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">kernel_thread</span><span class="hljs-params">(thread_func* function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* 执行function前要开中断,避免后面的时钟中断被屏蔽,而无法调度其它线程 */</span><br>intr_enable();<br>function(func_arg); <br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程栈thread_stack,将待执行的函数和参数放到thread_stack中相应的位置 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, thread_func function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* 先预留中断使用栈的空间,可见thread.h中定义的结构 */</span><br>pthread-&gt;self_kstack -= <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> intr_stack);<br><br><span class="hljs-comment">/* 再留出线程栈空间,可见thread.h中定义 */</span><br>pthread-&gt;self_kstack -= <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> thread_stack);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span>* <span class="hljs-title">kthread_stack</span> =</span> (<span class="hljs-keyword">struct</span> thread_stack*)pthread-&gt;self_kstack;<br>kthread_stack-&gt;eip = kernel_thread;<br>kthread_stack-&gt;function = function;<br>kthread_stack-&gt;func_arg = func_arg;<br>kthread_stack-&gt;ebp = kthread_stack-&gt;ebx = kthread_stack-&gt;esi = kthread_stack-&gt;edi = <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程基本信息 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, <span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio)</span> <br>&#123;<br><span class="hljs-built_in">memset</span>(pthread, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*pthread));<br><span class="hljs-built_in">strcpy</span>(pthread-&gt;name, name);<br><br><span class="hljs-keyword">if</span> (pthread == main_thread) <br>&#123;<br><span class="hljs-comment">/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */</span><br>pthread-&gt;status = TASK_RUNNING;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>pthread-&gt;status = TASK_READY;<br>&#125;<br><br><span class="hljs-comment">/* self_kstack是线程自己在内核态下使用的栈顶地址 */</span><br>pthread-&gt;self_kstack = (<span class="hljs-type">uint32_t</span>*)((<span class="hljs-type">uint32_t</span>)pthread + PG_SIZE);<br>pthread-&gt;priority = prio;<br>pthread-&gt;ticks = prio;<br>pthread-&gt;elapsed_ticks = <span class="hljs-number">0</span>;<br>pthread-&gt;pgdir = <span class="hljs-literal">NULL</span>;<br>pthread-&gt;stack_magic = <span class="hljs-number">0x19870916</span>;  <span class="hljs-comment">// 自定义的魔数</span><br>&#125;<br><br><br><span class="hljs-comment">/* 创建一优先级为prio的线程,线程名为name,线程所执行的函数是function(func_arg) */</span><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio, thread_func function, <span class="hljs-type">void</span>* func_arg)</span> <br>&#123;<br><span class="hljs-comment">/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">thread</span> =</span> get_kernel_pages(<span class="hljs-number">1</span>);<br>init_thread(thread, name, prio);<br>thread_create(thread, function, func_arg);<br><br><span class="hljs-comment">/* 确保之前不在队列中 */</span><br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;thread-&gt;general_tag));<br><span class="hljs-comment">/* 加入就绪线程队列 */</span><br>list_append(&amp;thread_ready_list, &amp;thread-&gt;general_tag);<br><br><span class="hljs-comment">/* 确保之前不在队列中 */</span><br>ASSERT(!elem_find(&amp;thread_all_list, &amp;thread-&gt;all_list_tag));<br><span class="hljs-comment">/* 加入全部线程队列 */</span><br>list_append(&amp;thread_all_list, &amp;thread-&gt;all_list_tag);<br><br><span class="hljs-keyword">return</span> thread;<br>&#125;<br><br><br><span class="hljs-comment">/* 将kernel中的main函数完善为主线程 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_main_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br><span class="hljs-comment">/* 因为main线程早已运行,咱们在loader.S中进入内核时的mov esp,0xc009f000,</span><br><span class="hljs-comment">就是为其预留了tcb,地址为0xc009e000,因此不需要通过get_kernel_page另分配一页*/</span><br>main_thread = running_thread();<br>init_thread(main_thread, <span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-number">31</span>);<br><br><span class="hljs-comment">/* main函数是当前线程,当前线程不在thread_ready_list中,</span><br><span class="hljs-comment"> * 所以只将其加在thread_all_list中. */</span><br>ASSERT(!elem_find(&amp;thread_all_list, &amp;main_thread-&gt;all_list_tag));<br>list_append(&amp;thread_all_list, &amp;main_thread-&gt;all_list_tag);<br>&#125;<br><br><br><span class="hljs-comment">/* 实现任务调度 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">schedule</span><span class="hljs-params">()</span> <br>&#123;<br>ASSERT(intr_get_status() == INTR_OFF);<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread(); <br><span class="hljs-keyword">if</span> (cur-&gt;status == TASK_RUNNING) <span class="hljs-comment">// 若此线程只是cpu时间片到了,将其加入到就绪队列尾</span><br>&#123; <br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;cur-&gt;general_tag));<br>list_append(&amp;thread_ready_list, &amp;cur-&gt;general_tag);<br>cur-&gt;ticks = cur-&gt;priority;     <span class="hljs-comment">// 重新将当前线程的ticks再重置为其priority;</span><br>cur-&gt;status = TASK_READY;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123; <br><span class="hljs-comment">/* 若此线程需要某事件发生后才能继续上cpu运行,</span><br><span class="hljs-comment">不需要将其加入队列,因为当前线程不在就绪队列中。*/</span><br>&#125;<br><br><br>ASSERT(!list_empty(&amp;thread_ready_list));<br>thread_tag = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// thread_tag清空</span><br><span class="hljs-comment">/* 将thread_ready_list队列中的第一个就绪线程弹出,准备将其调度上cpu. */</span><br>thread_tag = list_pop(&amp;thread_ready_list);   <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">next</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> task_struct, general_tag, thread_tag);<br>next-&gt;status = TASK_RUNNING;<br><br>process_activate(next);<br>switch_to(cur, next);<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程环境 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>put_str(<span class="hljs-string">&quot;thread_init start\n&quot;</span>);<br><br>list_init(&amp;thread_ready_list);<br>list_init(&amp;thread_all_list);<br><br><span class="hljs-comment">/* 将当前main函数创建为线程 */</span><br>make_main_thread();<br><br>put_str(<span class="hljs-string">&quot;thread_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 当前线程将自己阻塞,标志其状态为stat. */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_block</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> task_status stat)</span> <br>&#123;<br><span class="hljs-comment">/* stat取值为TASK_BLOCKED,TASK_WAITING,TASK_HANGING,也就是只有这三种状态才不会被调度*/</span><br>ASSERT(((stat == TASK_BLOCKED) || (stat == TASK_WAITING) || (stat == TASK_HANGING)));<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur_thread</span> =</span> running_thread();<br>cur_thread-&gt;status = stat; <span class="hljs-comment">// 置其状态为stat </span><br>schedule();      <span class="hljs-comment">// 将当前线程换下处理器</span><br><span class="hljs-comment">/* 待当前线程被解除阻塞后才继续运行下面的intr_set_status */</span><br>   intr_set_status(old_status);<br>&#125;<br><br><br><span class="hljs-comment">/* 将线程pthread解除阻塞 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_unblock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread)</span> <br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>ASSERT(((pthread-&gt;status == TASK_BLOCKED) || (pthread-&gt;status == TASK_WAITING) || (pthread-&gt;status == TASK_HANGING)));<br><span class="hljs-keyword">if</span> (pthread-&gt;status != TASK_READY) <br>&#123;<br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;pthread-&gt;general_tag));<br><span class="hljs-keyword">if</span> (elem_find(&amp;thread_ready_list, &amp;pthread-&gt;general_tag)) <br>&#123;<br>PANIC(<span class="hljs-string">&quot;thread_unblock: blocked thread in ready_list\n&quot;</span>);<br>&#125;<br>list_push(&amp;thread_ready_list, &amp;pthread-&gt;general_tag);    <span class="hljs-comment">// 放到队列的最前面,使其尽快得到调度</span><br>pthread-&gt;status = TASK_READY;<br>&#125; <br>intr_set_status(old_status);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmemoryh修改"><a class="markdownIt-Anchor" href="#kernelmemoryh修改"></a> kernel/memory.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __KERNEL_MEMORY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __KERNEL_MEMORY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><br><span class="hljs-comment">/* 内存池标记,用于判断用哪个内存池 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">pool_flags</span> &#123;</span><br>  PF_KERNEL = <span class="hljs-number">1</span>,    <span class="hljs-comment">// 内核内存池</span><br>  PF_USER = <span class="hljs-number">2</span>     <span class="hljs-comment">// 用户内存池</span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_P_1  1<span class="hljs-comment">// 页表项或页目录项存在属性位</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_P_0  0<span class="hljs-comment">// 页表项或页目录项存在属性位</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_RW_R  0<span class="hljs-comment">// R/W 属性位值, 读/执行</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_RW_W  2<span class="hljs-comment">// R/W 属性位值, 读/写/执行</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_US_S  0<span class="hljs-comment">// U/S 属性位值, 系统级</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_US_U  4<span class="hljs-comment">// U/S 属性位值, 用户级</span></span><br><br><span class="hljs-comment">/* 用于虚拟地址管理 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> &#123;</span><br><span class="hljs-comment">/* 虚拟地址用到的位图结构，用于记录哪些虚拟地址被占用了。以页为单位。*/</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bitmap</span> <span class="hljs-title">vaddr_bitmap</span>;</span><br><span class="hljs-comment">/* 管理的虚拟地址 */</span><br>  <span class="hljs-type">uint32_t</span> vaddr_start;<br>&#125;;<br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span> <span class="hljs-title">kernel_pool</span>,<span class="hljs-title">user_pool</span>;</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">vaddr_get</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf,<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pte_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pde_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">palloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pool* m_pool)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">page_table_add</span><span class="hljs-params">(<span class="hljs-type">void</span>* _vaddr,<span class="hljs-type">void</span>* _page_phyaddr)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf,<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_kernel_pages</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_user_pages</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_a_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf,<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">addr_v2p</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mem_pool_init</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> all_mem)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">mem_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="kernelmemoryc修改"><a class="markdownIt-Anchor" href="#kernelmemoryc修改"></a> kernel/memory.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/sync.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_SIZE 4096</span><br><br><span class="hljs-comment">/***************  位图地址 ********************</span><br><span class="hljs-comment">* 因为0xc009f000是内核主线程栈顶，0xc009e000是内核主线程的pcb.</span><br><span class="hljs-comment">* 一个页框大小的位图可表示128M内存, 位图位置安排在地址0xc009a000,</span><br><span class="hljs-comment">* 这样本系统最大支持4个页框的位图,即512M内存 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MEM_BITMAP_BASE 0xc009a000</span><br><span class="hljs-comment">/*************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PDE_IDX(addr) ((addr &amp; 0xffc00000) &gt;&gt; 22)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTE_IDX(addr) ((addr &amp; 0x003ff000) &gt;&gt; 12)</span><br><br><span class="hljs-comment">/* 0xc0000000是内核从虚拟地址3G起. 0x100000意指跨过低端1M内存,使虚拟地址在逻辑上连续 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> K_HEAP_START 0xc0100000</span><br><br><span class="hljs-comment">/* 内存池结构,生成两个实例用于管理内核内存池和用户内存池 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span> </span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bitmap</span> <span class="hljs-title">pool_bitmap</span>;</span> <span class="hljs-comment">// 本内存池用到的位图结构,用于管理物理内存</span><br>  <span class="hljs-type">uint32_t</span> phy_addr_start; <span class="hljs-comment">// 本内存池所管理物理内存的起始地址</span><br>  <span class="hljs-type">uint32_t</span> pool_size; <span class="hljs-comment">// 本内存池字节容量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lock</span> <span class="hljs-title">lock</span>;</span> <span class="hljs-comment">// 申请内存时互斥</span><br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span> <span class="hljs-title">kernel_pool</span>, <span class="hljs-title">user_pool</span>;</span>      <span class="hljs-comment">// 生成内核内存池和用户内存池</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> <span class="hljs-title">kernel_vaddr</span>;</span> <span class="hljs-comment">// 此结构是用来给内核分配虚拟地址</span><br><br><span class="hljs-comment">/* 在pf表示的虚拟内存池中申请pg_cnt个虚拟页,</span><br><span class="hljs-comment">* 成功则返回虚拟页的起始地址, 失败则返回NULL */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">vaddr_get</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf, <span class="hljs-type">uint32_t</span> pg_cnt)</span> <br>&#123;<br>   <span class="hljs-type">int</span> vaddr_start = <span class="hljs-number">0</span>, bit_idx_start = <span class="hljs-number">-1</span>;<br>   <span class="hljs-type">uint32_t</span> cnt = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">if</span> (pf == PF_KERNEL) <span class="hljs-comment">// 内核内存池</span><br>&#123;     <br>      bit_idx_start  = bitmap_scan(&amp;kernel_vaddr.vaddr_bitmap, pg_cnt);<br>      <span class="hljs-keyword">if</span> (bit_idx_start == <span class="hljs-number">-1</span>) <br>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span>(cnt &lt; pg_cnt) <br>&#123;<br> bitmap_set(&amp;kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, <span class="hljs-number">1</span>);<br>      &#125;<br>      vaddr_start = kernel_vaddr.vaddr_start + bit_idx_start * PG_SIZE;<br>   &#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 用户内存池</span><br>&#123;     <br>      <span class="hljs-keyword">struct</span> task_struct* cur = running_thread();<br>      bit_idx_start  = bitmap_scan(&amp;cur-&gt;userprog_vaddr.vaddr_bitmap, pg_cnt);<br>      <span class="hljs-keyword">if</span> (bit_idx_start == <span class="hljs-number">-1</span>) <br>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span>(cnt &lt; pg_cnt) <br>&#123;<br> bitmap_set(&amp;cur-&gt;userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, <span class="hljs-number">1</span>);<br>      &#125;<br>      vaddr_start = cur-&gt;userprog_vaddr.vaddr_start + bit_idx_start * PG_SIZE;<br><br>   <span class="hljs-comment">/* (0xc0000000 - PG_SIZE)做为用户3级栈已经在start_process被分配 */</span><br>      ASSERT((<span class="hljs-type">uint32_t</span>)vaddr_start &lt; (<span class="hljs-number">0xc0000000</span> - PG_SIZE));<br>   &#125;<br>   <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)vaddr_start;<br>&#125;<br><br><br><span class="hljs-comment">/* 得到虚拟地址vaddr对应的pte指针*/</span><br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pte_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span> <br>&#123;<br>  <span class="hljs-comment">/* 先访问到页表自己 + \</span><br><span class="hljs-comment">   * 再用页目录项pde(页目录内页表的索引)做为pte的索引访问到页表 + \</span><br><span class="hljs-comment">   * 再用pte的索引做为页内偏移*/</span><br>  <span class="hljs-type">uint32_t</span>* pte = (<span class="hljs-type">uint32_t</span>*)(<span class="hljs-number">0xffc00000</span> + \<br>    ((vaddr &amp; <span class="hljs-number">0xffc00000</span>) &gt;&gt; <span class="hljs-number">10</span>) + \<br>    PTE_IDX(vaddr) * <span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">return</span> pte;<br>&#125;<br><br><br><span class="hljs-comment">/* 得到虚拟地址vaddr对应的pde的指针 */</span><br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pde_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span> <br>&#123;<br>  <span class="hljs-comment">/* 0xfffff是用来访问到页表本身所在的地址 */</span><br>  <span class="hljs-type">uint32_t</span>* pde = (<span class="hljs-type">uint32_t</span>*)((<span class="hljs-number">0xfffff000</span>) + PDE_IDX(vaddr) * <span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">return</span> pde;<br>&#125;<br><br><br><span class="hljs-comment">/* 在m_pool指向的物理内存池中分配1个物理页,</span><br><span class="hljs-comment">* 成功则返回页框的物理地址,失败则返回NULL */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">palloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pool* m_pool)</span> <br>&#123;<br>  <span class="hljs-comment">/* 扫描或设置位图要保证原子操作 */</span><br>  <span class="hljs-type">int</span> bit_idx = bitmap_scan(&amp;m_pool-&gt;pool_bitmap, <span class="hljs-number">1</span>);    <span class="hljs-comment">// 找一个物理页面</span><br>  <span class="hljs-keyword">if</span> (bit_idx == <span class="hljs-number">-1</span> ) <br>&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>  &#125;<br>  bitmap_set(&amp;m_pool-&gt;pool_bitmap, bit_idx, <span class="hljs-number">1</span>);<span class="hljs-comment">// 将此位bit_idx置1</span><br>  <span class="hljs-type">uint32_t</span> page_phyaddr = ((bit_idx * PG_SIZE) + m_pool-&gt;phy_addr_start);<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)page_phyaddr;<br>&#125;<br><br><br><span class="hljs-comment">/* 页表中添加虚拟地址_vaddr与物理地址_page_phyaddr的映射 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">page_table_add</span><span class="hljs-params">(<span class="hljs-type">void</span>* _vaddr, <span class="hljs-type">void</span>* _page_phyaddr)</span> <br>&#123;<br>  <span class="hljs-type">uint32_t</span> vaddr = (<span class="hljs-type">uint32_t</span>)_vaddr, page_phyaddr = (<span class="hljs-type">uint32_t</span>)_page_phyaddr;<br>  <span class="hljs-type">uint32_t</span>* pde = pde_ptr(vaddr);<br>  <span class="hljs-type">uint32_t</span>* pte = pte_ptr(vaddr);<br><br><span class="hljs-comment">/************************   注意   *************************</span><br><span class="hljs-comment">* 执行*pte,会访问到pde。所以确保pde创建完成后才能执行*pte,</span><br><span class="hljs-comment">* 否则会引发page_fault。因此在pde未创建时,</span><br><span class="hljs-comment">* *pte只能出现在下面最外层else语句块中的*pde后面。</span><br><span class="hljs-comment">* *********************************************************/</span><br>  <span class="hljs-comment">/* 先在页目录内判断目录项的P位，若为1,则表示该表已存在 */</span><br>  <span class="hljs-keyword">if</span> (*pde &amp; <span class="hljs-number">0x00000001</span>) <br>&#123;<br>     ASSERT(!(*pte &amp; <span class="hljs-number">0x00000001</span>));<br><br>     <span class="hljs-keyword">if</span> (!(*pte &amp; <span class="hljs-number">0x00000001</span>)) <span class="hljs-comment">// 只要是创建页表,pte就应该不存在,多判断一下放心</span><br>&#123;   <br>    *pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);    <span class="hljs-comment">// US=1,RW=1,P=1</span><br>     &#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 调试模式下不会执行到此,上面的ASSERT会先执行.关闭调试时下面的PANIC会起作用</span><br>&#123;  <br>    PANIC(<span class="hljs-string">&quot;pte repeat&quot;</span>);<br>     &#125;<br>  &#125; <br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 页目录项不存在,所以要先创建页目录项再创建页表项.</span><br>&#123;  <br>     <span class="hljs-comment">/* 页表中用到的页框一律从内核空间分配 */</span><br>     <span class="hljs-type">uint32_t</span> pde_phyaddr = (<span class="hljs-type">uint32_t</span>)palloc(&amp;kernel_pool);<br>     *pde = (pde_phyaddr | PG_US_U | PG_RW_W | PG_P_1);<br><br><span class="hljs-comment">/*******************   必须将页表所在的页清0   *********************</span><br><span class="hljs-comment">* 必须把分配到的物理页地址pde_phyaddr对应的物理内存清0,</span><br><span class="hljs-comment">* 避免里面的陈旧数据变成了页表中的页表项,从而让页表混乱.</span><br><span class="hljs-comment">* pte的高20位会映射到pde所指向的页表的物理起始地址.*/</span><br>     <span class="hljs-built_in">memset</span>((<span class="hljs-type">void</span>*)((<span class="hljs-type">int</span>)pte &amp; <span class="hljs-number">0xfffff000</span>), <span class="hljs-number">0</span>, PG_SIZE); <br><span class="hljs-comment">/************************************************************/</span><br>     ASSERT(!(*pte &amp; <span class="hljs-number">0x00000001</span>));<br>     *pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);      <span class="hljs-comment">// US=1,RW=1,P=1</span><br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 分配pg_cnt个页空间,成功则返回起始虚拟地址,失败时返回NULL */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf, <span class="hljs-type">uint32_t</span> pg_cnt)</span> <br>&#123;<br>  ASSERT(pg_cnt &gt; <span class="hljs-number">0</span> &amp;&amp; pg_cnt &lt; <span class="hljs-number">3840</span>);<br><span class="hljs-comment">/***********   malloc_page的原理是三个动作的合成:   ***********</span><br><span class="hljs-comment">     1通过vaddr_get在虚拟内存池中申请虚拟地址</span><br><span class="hljs-comment">     2通过palloc在物理内存池中申请物理页</span><br><span class="hljs-comment">     3通过page_table_add将以上两步得到的虚拟地址和物理地址在页表中完成映射</span><br><span class="hljs-comment">***************************************************************/</span><br>  <span class="hljs-type">void</span>* vaddr_start = vaddr_get(pf, pg_cnt);<br>  <span class="hljs-keyword">if</span> (vaddr_start == <span class="hljs-literal">NULL</span>) <br>&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>  &#125;<br>  <span class="hljs-type">uint32_t</span> vaddr = (<span class="hljs-type">uint32_t</span>)vaddr_start, cnt = pg_cnt;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span>* <span class="hljs-title">mem_pool</span> =</span> pf &amp; PF_KERNEL ? &amp;kernel_pool : &amp;user_pool;<br><br><span class="hljs-comment">/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/</span><br>  <span class="hljs-keyword">while</span> (cnt-- &gt; <span class="hljs-number">0</span>) <br>&#123;<br>     <span class="hljs-type">void</span>* page_phyaddr = palloc(mem_pool);<br><br><span class="hljs-comment">/* 失败时要将曾经已申请的虚拟地址和物理页全部回滚，</span><br><span class="hljs-comment">* 在将来完成内存回收时再补充 */</span><br>     <span class="hljs-keyword">if</span> (page_phyaddr == <span class="hljs-literal">NULL</span>) <br>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>     &#125;<br>     page_table_add((<span class="hljs-type">void</span>*)vaddr, page_phyaddr); <span class="hljs-comment">// 在页表中做映射 </span><br>     vaddr += PG_SIZE; <span class="hljs-comment">// 下一个虚拟页</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> vaddr_start;<br>&#125;<br><br><br><span class="hljs-comment">/* 从内核物理内存池中申请pg_cnt页内存,</span><br><span class="hljs-comment">* 成功则返回其虚拟地址,失败则返回NULL */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_kernel_pages</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_cnt)</span> <br>&#123;<br>  <span class="hljs-type">void</span>* vaddr =  malloc_page(PF_KERNEL, pg_cnt);<br>  <span class="hljs-keyword">if</span> (vaddr != <span class="hljs-literal">NULL</span>) <br>&#123;   <span class="hljs-comment">// 若分配的地址不为空,将页框清0后返回</span><br>     <span class="hljs-built_in">memset</span>(vaddr, <span class="hljs-number">0</span>, pg_cnt * PG_SIZE);<br>  &#125;<br>  <span class="hljs-keyword">return</span> vaddr;<br>&#125;<br><br><br><span class="hljs-comment">/* 在用户空间中申请4k内存,并返回其虚拟地址 */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_user_pages</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_cnt)</span> <br>&#123;<br>   lock_acquire(&amp;user_pool.lock);<br>   <span class="hljs-type">void</span>* vaddr = malloc_page(PF_USER, pg_cnt);<br>   <span class="hljs-keyword">if</span> (vaddr != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">// 若分配的地址不为空,将页框清0后返回</span><br>&#123;   <br>      <span class="hljs-built_in">memset</span>(vaddr, <span class="hljs-number">0</span>, pg_cnt * PG_SIZE);<br>   &#125;<br>   lock_release(&amp;user_pool.lock);<br>   <span class="hljs-keyword">return</span> vaddr;<br>&#125;<br><br><br><span class="hljs-comment">/* 将地址vaddr与pf池中的物理地址关联,仅支持一页空间分配 */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_a_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf, <span class="hljs-type">uint32_t</span> vaddr)</span> <br>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span>* <span class="hljs-title">mem_pool</span> =</span> pf &amp; PF_KERNEL ? &amp;kernel_pool : &amp;user_pool;<br>   lock_acquire(&amp;mem_pool-&gt;lock);<br><br>   <span class="hljs-comment">/* 先将虚拟地址对应的位图置1 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();<br>   <span class="hljs-type">int32_t</span> bit_idx = <span class="hljs-number">-1</span>;<br><br><span class="hljs-comment">/* 若当前是用户进程申请用户内存,就修改用户进程自己的虚拟地址位图 */</span><br>   <span class="hljs-keyword">if</span> (cur-&gt;pgdir != <span class="hljs-literal">NULL</span> &amp;&amp; pf == PF_USER) <br>&#123;<br>      bit_idx = (vaddr - cur-&gt;userprog_vaddr.vaddr_start) / PG_SIZE;<br>      ASSERT(bit_idx &gt;= <span class="hljs-number">0</span>);<br>      bitmap_set(&amp;cur-&gt;userprog_vaddr.vaddr_bitmap, bit_idx, <span class="hljs-number">1</span>);<br>   &#125; <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;pgdir == <span class="hljs-literal">NULL</span> &amp;&amp; pf == PF_KERNEL)<br>&#123;<br><span class="hljs-comment">/* 如果是内核线程申请内核内存,就修改kernel_vaddr. */</span><br>      bit_idx = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;<br>      ASSERT(bit_idx &gt; <span class="hljs-number">0</span>);<br>      bitmap_set(&amp;kernel_vaddr.vaddr_bitmap, bit_idx, <span class="hljs-number">1</span>);<br>   &#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>      PANIC(<span class="hljs-string">&quot;get_a_page:not allow kernel alloc userspace or user alloc kernelspace by get_a_page&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-type">void</span>* page_phyaddr = palloc(mem_pool);<br>   <span class="hljs-keyword">if</span> (page_phyaddr == <span class="hljs-literal">NULL</span>) <br>&#123;<br>      lock_release(&amp;mem_pool-&gt;lock);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>   &#125;<br>   page_table_add((<span class="hljs-type">void</span>*)vaddr, page_phyaddr); <br>   lock_release(&amp;mem_pool-&gt;lock);<br>   <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)vaddr;<br>&#125;<br><br><br><span class="hljs-comment">/* 得到虚拟地址映射到的物理地址 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">addr_v2p</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span> <br>&#123;<br>   <span class="hljs-type">uint32_t</span>* pte = pte_ptr(vaddr);<br><span class="hljs-comment">/* (*pte)的值是页表所在的物理页框地址,</span><br><span class="hljs-comment"> * 去掉其低12位的页表项属性+虚拟地址vaddr的低12位 */</span><br>   <span class="hljs-keyword">return</span> ((*pte &amp; <span class="hljs-number">0xfffff000</span>) + (vaddr &amp; <span class="hljs-number">0x00000fff</span>));<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化内存池 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mem_pool_init</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> all_mem)</span> &#123;<br>  put_str(<span class="hljs-string">&quot;   mem_pool_init start\n&quot;</span>);<br>  <span class="hljs-type">uint32_t</span> page_table_size = PG_SIZE * <span class="hljs-number">256</span>;  <span class="hljs-comment">// 页表大小= 1页的页目录表+第0和第768个页目录项指向同一个页表+</span><br>                                                 <span class="hljs-comment">// 第769~1022个页目录项共指向254个页表,共256个页框</span><br>  <span class="hljs-type">uint32_t</span> used_mem = page_table_size + <span class="hljs-number">0x100000</span>;  <span class="hljs-comment">// 0x100000为低端1M内存</span><br>  <span class="hljs-type">uint32_t</span> free_mem = all_mem - used_mem;<br>  <span class="hljs-type">uint16_t</span> all_free_pages = free_mem / PG_SIZE;  <span class="hljs-comment">// 1页为4k,不管总内存是不是4k的倍数,</span><br>     <span class="hljs-comment">// 对于以页为单位的内存分配策略，不足1页的内存不用考虑了。</span><br>  <span class="hljs-type">uint16_t</span> kernel_free_pages = all_free_pages / <span class="hljs-number">2</span>;<br>  <span class="hljs-type">uint16_t</span> user_free_pages = all_free_pages - kernel_free_pages;<br><br><span class="hljs-comment">/* 为简化位图操作，余数不处理，坏处是这样做会丢内存。</span><br><span class="hljs-comment">好处是不用做内存的越界检查,因为位图表示的内存少于实际物理内存*/</span><br>  <span class="hljs-type">uint32_t</span> kbm_length = kernel_free_pages / <span class="hljs-number">8</span>;  <span class="hljs-comment">// Kernel BitMap的长度,位图中的一位表示一页,以字节为单位</span><br>  <span class="hljs-type">uint32_t</span> ubm_length = user_free_pages / <span class="hljs-number">8</span>;  <span class="hljs-comment">// User BitMap的长度.</span><br><br>  <span class="hljs-type">uint32_t</span> kp_start = used_mem;  <span class="hljs-comment">// Kernel Pool start,内核内存池的起始地址</span><br>  <span class="hljs-type">uint32_t</span> up_start = kp_start + kernel_free_pages * PG_SIZE;  <span class="hljs-comment">// User Pool start,用户内存池的起始地址</span><br><br>  kernel_pool.phy_addr_start = kp_start;<br>  user_pool.phy_addr_start   = up_start;<br><br>  kernel_pool.pool_size = kernel_free_pages * PG_SIZE;<br>  user_pool.pool_size = user_free_pages * PG_SIZE;<br><br>  kernel_pool.pool_bitmap.btmp_bytes_len = kbm_length;<br>  user_pool.pool_bitmap.btmp_bytes_len  = ubm_length;<br><br><span class="hljs-comment">/*********    内核内存池和用户内存池位图   ***********</span><br><span class="hljs-comment">*   位图是全局的数据，长度不固定。</span><br><span class="hljs-comment">*   全局或静态的数组需要在编译时知道其长度，</span><br><span class="hljs-comment">*   而我们需要根据总内存大小算出需要多少字节。</span><br><span class="hljs-comment">*   所以改为指定一块内存来生成位图.</span><br><span class="hljs-comment">*   ************************************************/</span><br><span class="hljs-comment">// 内核使用的最高地址是0xc009f000,这是主线程的栈地址.(内核的大小预计为70K左右)</span><br><span class="hljs-comment">// 32M内存占用的位图是2k.内核内存池的位图先定在MEM_BITMAP_BASE(0xc009a000)处.</span><br>  kernel_pool.pool_bitmap.bits = (<span class="hljs-type">void</span>*)MEM_BITMAP_BASE;<br>          <br><span class="hljs-comment">/* 用户内存池的位图紧跟在内核内存池位图之后 */</span><br>  user_pool.pool_bitmap.bits = (<span class="hljs-type">void</span>*)(MEM_BITMAP_BASE + kbm_length);<br>  <span class="hljs-comment">/******************** 输出内存池信息 **********************/</span><br>  put_str(<span class="hljs-string">&quot;      kernel_pool_bitmap_start:&quot;</span>);put_int((<span class="hljs-type">int</span>)kernel_pool.pool_bitmap.bits);<br>  put_str(<span class="hljs-string">&quot; kernel_pool_phy_addr_start:&quot;</span>);put_int(kernel_pool.phy_addr_start);<br>  put_str(<span class="hljs-string">&quot;\n&quot;</span>);<br>  put_str(<span class="hljs-string">&quot;      user_pool_bitmap_start:&quot;</span>);put_int((<span class="hljs-type">int</span>)user_pool.pool_bitmap.bits);<br>  put_str(<span class="hljs-string">&quot; user_pool_phy_addr_start:&quot;</span>);put_int(user_pool.phy_addr_start);<br>  put_str(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>  <span class="hljs-comment">/* 将位图置0*/</span><br>  bitmap_init(&amp;kernel_pool.pool_bitmap);<br>  bitmap_init(&amp;user_pool.pool_bitmap);<br><br>  <span class="hljs-comment">/* 下面初始化内核虚拟地址的位图,按实际物理内存大小生成数组。*/</span><br>  kernel_vaddr.vaddr_bitmap.btmp_bytes_len = kbm_length;      <span class="hljs-comment">// 用于维护内核堆的虚拟地址,所以要和内核内存池大小一致</span><br><br> <span class="hljs-comment">/* 位图的数组指向一块未使用的内存,目前定位在内核内存池和用户内存池之外*/</span><br>  kernel_vaddr.vaddr_bitmap.bits = (<span class="hljs-type">void</span>*)(MEM_BITMAP_BASE + kbm_length + ubm_length);<br><br>  kernel_vaddr.vaddr_start = K_HEAP_START;<br>  bitmap_init(&amp;kernel_vaddr.vaddr_bitmap);<br>lock_init(&amp;kernel_pool.lock);<br>  lock_init(&amp;user_pool.lock);<br>  put_str(<span class="hljs-string">&quot;   mem_pool_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 内存管理部分初始化入口 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">mem_init</span><span class="hljs-params">()</span> <br>&#123;<br>  put_str(<span class="hljs-string">&quot;mem_init start\n&quot;</span>);<br>  <span class="hljs-type">uint32_t</span> mem_bytes_total = (*(<span class="hljs-type">uint32_t</span>*)(<span class="hljs-number">0xb00</span>));<br>  mem_pool_init(mem_bytes_total);  <span class="hljs-comment">// 初始化内存池</span><br>  put_str(<span class="hljs-string">&quot;mem_init done\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="userprogprocessh创建"><a class="markdownIt-Anchor" href="#userprogprocessh创建"></a> userprog/process.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __USERPROG__PROCESS_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __USERPROG__PROCESS_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USER_VADDR_START 0x8048000</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">intr_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">start_process</span><span class="hljs-params">(<span class="hljs-type">void</span>* filename_)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">page_dir_activate</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* p_thread)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">process_activate</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* p_thread)</span>;<br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">create_page_dir</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">create_user_vaddr_bitmap</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* user_prog)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">process_execute</span><span class="hljs-params">(<span class="hljs-type">void</span>* filename,<span class="hljs-type">char</span>* name)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="userprogprocessc创建"><a class="markdownIt-Anchor" href="#userprogprocessc创建"></a> userprog/process.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tss.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;process.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../kernel/memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../kernel/interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">intr_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">/* 构建用户进程初始上下文信息 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">start_process</span><span class="hljs-params">(<span class="hljs-type">void</span>* filename_)</span> <br>&#123;<br><span class="hljs-type">void</span>* function = filename_;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread();<br>cur-&gt;self_kstack += <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> thread_stack);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">intr_stack</span>* <span class="hljs-title">proc_stack</span> =</span> (<span class="hljs-keyword">struct</span> intr_stack*)cur-&gt;self_kstack; <br>proc_stack-&gt;edi = proc_stack-&gt;esi = proc_stack-&gt;ebp = proc_stack-&gt;esp_dummy = <span class="hljs-number">0</span>;<br>proc_stack-&gt;ebx = proc_stack-&gt;edx = proc_stack-&gt;ecx = proc_stack-&gt;eax = <span class="hljs-number">0</span>;<br>proc_stack-&gt;gs = <span class="hljs-number">0</span>; <span class="hljs-comment">// 用户态用不上,直接初始为0</span><br>proc_stack-&gt;ds = proc_stack-&gt;es = proc_stack-&gt;fs = SELECTOR_U_DATA;<br>proc_stack-&gt;eip = function; <span class="hljs-comment">// 待执行的用户程序地址</span><br>proc_stack-&gt;cs = SELECTOR_U_CODE;<br>proc_stack-&gt;eflags = (EFLAGS_IOPL_0 | EFLAGS_MBS | EFLAGS_IF_1);<br>proc_stack-&gt;esp = (<span class="hljs-type">void</span>*)((<span class="hljs-type">uint32_t</span>)get_a_page(PF_USER, USER_STACK3_VADDR) + PG_SIZE);<br>proc_stack-&gt;ss = SELECTOR_U_DATA; <br><span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;movl %0, %%esp; jmp intr_exit&quot;</span> : : <span class="hljs-string">&quot;g&quot;</span> (proc_stack) : <span class="hljs-string">&quot;memory&quot;</span>)</span>;<br>&#125;<br><br><span class="hljs-comment">/* 击活页表 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">page_dir_activate</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* p_thread)</span> <br>&#123;<br><span class="hljs-comment">/********************************************************</span><br><span class="hljs-comment"> * 执行此函数时,当前任务可能是线程。</span><br><span class="hljs-comment"> * 之所以对线程也要重新安装页表, 原因是上一次被调度的可能是进程,</span><br><span class="hljs-comment"> * 否则不恢复页表的话,线程就会使用进程的页表了。</span><br><span class="hljs-comment"> ********************************************************/</span><br><br><span class="hljs-comment">/* 若为内核线程,需要重新填充页表为0x100000 */</span><br><span class="hljs-type">uint32_t</span> pagedir_phy_addr = <span class="hljs-number">0x100000</span>;  <span class="hljs-comment">// 默认为内核的页目录物理地址,也就是内核线程所用的页目录表</span><br><span class="hljs-keyword">if</span> (p_thread-&gt;pgdir != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">// 用户态进程有自己的页目录表</span><br>&#123;   <br>pagedir_phy_addr = addr_v2p((<span class="hljs-type">uint32_t</span>)p_thread-&gt;pgdir);<br>&#125;<br><br><span class="hljs-comment">/* 更新页目录寄存器cr3,使新页表生效 */</span><br><span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;movl %0, %%cr3&quot;</span> : : <span class="hljs-string">&quot;r&quot;</span> (pagedir_phy_addr) : <span class="hljs-string">&quot;memory&quot;</span>)</span>;<br>&#125;<br><br><span class="hljs-comment">/* 击活线程或进程的页表,更新tss中的esp0为进程的特权级0的栈 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">process_activate</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* p_thread)</span> <br>&#123;<br>ASSERT(p_thread != <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">/* 击活该进程或线程的页表 */</span><br>page_dir_activate(p_thread);<br><br><span class="hljs-comment">/* 内核线程特权级本身就是0,处理器进入中断时并不会从tss中获取0特权级栈地址,故不需要更新esp0 */</span><br><span class="hljs-keyword">if</span> (p_thread-&gt;pgdir) <br>&#123;<br><span class="hljs-comment">/* 更新该进程的esp0,用于此进程被中断时保留上下文 */</span><br>update_tss_esp(p_thread);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* 创建页目录表,将当前页表的表示内核空间的pde复制,</span><br><span class="hljs-comment"> * 成功则返回页目录的虚拟地址,否则返回-1 */</span><br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">create_page_dir</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br><br>   <span class="hljs-comment">/* 用户进程的页表不能让用户直接访问到,所以在内核空间来申请 */</span><br><span class="hljs-type">uint32_t</span>* page_dir_vaddr = get_kernel_pages(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (page_dir_vaddr == <span class="hljs-literal">NULL</span>) <br>&#123;<br>console_put_str(<span class="hljs-string">&quot;create_page_dir: get_kernel_page failed!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">/************************** 1  先复制页表  *************************************/</span><br>   <span class="hljs-comment">/*  page_dir_vaddr + 0x300*4 是内核页目录的第768项 */</span><br>   <span class="hljs-built_in">memcpy</span>((<span class="hljs-type">uint32_t</span>*)((<span class="hljs-type">uint32_t</span>)page_dir_vaddr + <span class="hljs-number">0x300</span>*<span class="hljs-number">4</span>), (<span class="hljs-type">uint32_t</span>*)(<span class="hljs-number">0xfffff000</span>+<span class="hljs-number">0x300</span>*<span class="hljs-number">4</span>), <span class="hljs-number">1024</span>);<br><span class="hljs-comment">/*****************************************************************************/</span><br><br><span class="hljs-comment">/************************** 2  更新页目录地址 **********************************/</span><br>   <span class="hljs-type">uint32_t</span> new_page_dir_phy_addr = addr_v2p((<span class="hljs-type">uint32_t</span>)page_dir_vaddr);<br>   <span class="hljs-comment">/* 页目录地址是存入在页目录的最后一项,更新页目录地址为新页目录的物理地址 */</span><br>   page_dir_vaddr[<span class="hljs-number">1023</span>] = new_page_dir_phy_addr | PG_US_U | PG_RW_W | PG_P_1;<br><span class="hljs-comment">/*****************************************************************************/</span><br>   <span class="hljs-keyword">return</span> page_dir_vaddr;<br>&#125;<br><br><span class="hljs-comment">/* 创建用户进程虚拟地址位图 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_user_vaddr_bitmap</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* user_prog)</span> <br>&#123;<br>user_prog-&gt;userprog_vaddr.vaddr_start = USER_VADDR_START;<br><span class="hljs-type">uint32_t</span> bitmap_pg_cnt = DIV_ROUND_UP((<span class="hljs-number">0xc0000000</span> - USER_VADDR_START) / PG_SIZE / <span class="hljs-number">8</span> , PG_SIZE);<br>user_prog-&gt;userprog_vaddr.vaddr_bitmap.bits = get_kernel_pages(bitmap_pg_cnt);<br>user_prog-&gt;userprog_vaddr.vaddr_bitmap.btmp_bytes_len = (<span class="hljs-number">0xc0000000</span> - USER_VADDR_START) / PG_SIZE / <span class="hljs-number">8</span>;<br>bitmap_init(&amp;user_prog-&gt;userprog_vaddr.vaddr_bitmap);<br>&#125;<br><br><span class="hljs-comment">/* 创建用户进程 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">process_execute</span><span class="hljs-params">(<span class="hljs-type">void</span>* filename, <span class="hljs-type">char</span>* name)</span> <br>&#123; <br><span class="hljs-comment">/* pcb内核的数据结构,由内核来维护进程信息,因此要在内核内存池中申请 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">thread</span> =</span> get_kernel_pages(<span class="hljs-number">1</span>);<br>init_thread(thread, name, default_prio); <br>create_user_vaddr_bitmap(thread);<br>thread_create(thread, start_process, filename);<br>thread-&gt;pgdir = create_page_dir();<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>ASSERT(!elem_find(&amp;thread_ready_list, &amp;thread-&gt;general_tag));<br>list_append(&amp;thread_ready_list, &amp;thread-&gt;general_tag);<br><br>ASSERT(!elem_find(&amp;thread_all_list, &amp;thread-&gt;all_list_tag));<br>list_append(&amp;thread_all_list, &amp;thread-&gt;all_list_tag);<br>intr_set_status(old_status);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改"><a class="markdownIt-Anchor" href="#kernelmainc修改"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../userprog/process.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_a</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_b</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">int</span> test_var_a=<span class="hljs-number">0</span>, test_var_b=<span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>init_all();<br><br>thread_start(<span class="hljs-string">&quot;k_thread_a&quot;</span>, <span class="hljs-number">31</span>, k_thread_a, <span class="hljs-string">&quot;argA &quot;</span>);<br>thread_start(<span class="hljs-string">&quot;k_thread_b&quot;</span>, <span class="hljs-number">8</span>, k_thread_b, <span class="hljs-string">&quot;argB &quot;</span>);<br>process_execute(u_prog_a, <span class="hljs-string">&quot;user_prog_a&quot;</span>);<br>process_execute(u_prog_b, <span class="hljs-string">&quot;user_prog_b&quot;</span>);<br><br>intr_enable();<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span><br>&#123;<br><span class="hljs-type">char</span>* para = arg;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>console_put_str(<span class="hljs-string">&quot;v_a:0x&quot;</span>);<br>console_put_int(test_var_a);<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span><br>&#123;<br><span class="hljs-type">char</span>* para = arg;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>console_put_str(<span class="hljs-string">&quot;v_b:0x&quot;</span>);<br>console_put_int(test_var_b);<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_a</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <br>&#123;<br>test_var_a++;<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">u_prog_b</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <br>&#123;<br>test_var_b++;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="makefile修改-2"><a class="markdownIt-Anchor" href="#makefile修改-2"></a> makefile修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs c">BUILD_DIR = ./build<br>ENTRY_POINT = <span class="hljs-number">0xc0001500</span><br>AS = nasm<br>CC = gcc<br>LD = ld<br>LIB = -I lib/ -I lib/kernel/ -I lib/user/ -I kernel/ -I device/ <br>ASFLAGS = -f elf<br>CFLAGS = -Wall -m32 -fno-<span class="hljs-built_in">stack</span>-protector $(LIB) -c -fno-builtin -W -Wstrict-prototypes -Wmissing-prototypes<br>LDFLAGS =  -m elf_i386 -Ttext $(ENTRY_POINT) -e main -Map $(BUILD_DIR)/kernel.<span class="hljs-built_in">map</span><br>OBJS = $(BUILD_DIR)/main.o $(BUILD_DIR)/init.o $(BUILD_DIR)/interrupt.o \<br>      $(BUILD_DIR)/timer.o $(BUILD_DIR)/kernel.o $(BUILD_DIR)/print.o $(BUILD_DIR)/<span class="hljs-keyword">switch</span>.o \<br>      $(BUILD_DIR)/debug.o $(BUILD_DIR)/<span class="hljs-built_in">string</span>.o $(BUILD_DIR)/memory.o \<br>      $(BUILD_DIR)/bitmap.o $(BUILD_DIR)/thread.o $(BUILD_DIR)/<span class="hljs-built_in">list</span>.o \<br>      $(BUILD_DIR)/sync.o $(BUILD_DIR)/console.o $(BUILD_DIR)/keyboard.o \<br>      $(BUILD_DIR)/ioqueue.o $(BUILD_DIR)/tss.o $(BUILD_DIR)/process.o<br>      <br>#############<span class="hljs-meta">#     c代码编译     ###############</span><br>$(BUILD_DIR)/main.o: kernel/main.c lib/kernel/print.h \<br>        lib/stdint.h kernel/init.h lib/<span class="hljs-built_in">string</span>.h kernel/memory.h \<br>        thread/thread.h kernel/interrupt.h device/console.h \<br>        device/keyboard.h device/ioqueue.h userprog/process.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/init.o: kernel/init.c kernel/init.h lib/kernel/print.h \<br>        lib/stdint.h kernel/interrupt.h device/timer.h kernel/memory.h \<br>        thread/thread.h device/console.h device/keyboard.h userprog/tss.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/interrupt.o: kernel/interrupt.c kernel/interrupt.h \<br>        lib/stdint.h kernel/global.h lib/kernel/io.h lib/kernel/print.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/timer.o: device/timer.c device/timer.h lib/kernel/io.h lib/kernel/print.h \<br>        kernel/interrupt.h thread/thread.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/debug.o: kernel/debug.c kernel/debug.h \<br>        lib/kernel/print.h lib/stdint.h kernel/interrupt.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/<span class="hljs-built_in">string</span>.o: lib/<span class="hljs-built_in">string</span>.c lib/<span class="hljs-built_in">string</span>.h \<br>kernel/debug.h kernel/global.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/memory.o: kernel/memory.c kernel/memory.h \<br>lib/stdint.h lib/kernel/bitmap.h kernel/debug.h lib/<span class="hljs-built_in">string</span>.h \<br>thread/sync.h thread/thread.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/bitmap.o: lib/kernel/bitmap.c lib/kernel/bitmap.h kernel/global.h \<br>lib/<span class="hljs-built_in">string</span>.h kernel/interrupt.h lib/kernel/print.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/thread.o: thread/thread.c thread/thread.h \<br>lib/stdint.h lib/<span class="hljs-built_in">string</span>.h kernel/global.h kernel/memory.h \<br>kernel/debug.h kernel/interrupt.h lib/kernel/print.h \<br>userprog/process.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/<span class="hljs-built_in">list</span>.o: lib/kernel/<span class="hljs-built_in">list</span>.c lib/kernel/<span class="hljs-built_in">list</span>.h \<br>kernel/interrupt.h lib/stdint.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/sync.o: thread/sync.c thread/sync.h \<br>lib/stdint.h thread/thread.h kernel/debug.h kernel/interrupt.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/console.o: device/console.c device/console.h \<br>lib/kernel/print.h thread/sync.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/keyboard.o: device/keyboard.c device/keyboard.h \<br>lib/kernel/print.h lib/kernel/io.h kernel/interrupt.h \<br>kernel/global.h lib/stdint.h device/ioqueue.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/ioqueue.o: device/ioqueue.c device/ioqueue.h \<br>kernel/interrupt.h kernel/global.h kernel/debug.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/tss.o: userprog/tss.c userprog/tss.h \<br>kernel/global.h thread/thread.h lib/kernel/print.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/process.o: userprog/process.c userprog/process.h \<br>lib/<span class="hljs-built_in">string</span>.h kernel/global.h kernel/memory.h lib/kernel/print.h \<br>thread/thread.h kernel/interrupt.h kernel/debug.h device/console.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>##############    汇编代码编译    ###############<br>$(BUILD_DIR)/kernel.o: kernel/kernel.S<br>$(AS) $(ASFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/print.o: lib/kernel/print.S<br>$(AS) $(ASFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/<span class="hljs-keyword">switch</span>.o: thread/<span class="hljs-keyword">switch</span>.S<br>$(AS) $(ASFLAGS) $&lt; -o $@<br><br>##############    链接所有目标文件    #############<br>$(BUILD_DIR)/kernel.bin: $(OBJS)<br>$(LD) $(LDFLAGS) $^ -o $@<br><br>.PHONY : mk_dir hd clean all<br><br>mk_dir:<br><span class="hljs-keyword">if</span> [ ! -d $(BUILD_DIR) ]; then mkdir $(BUILD_DIR); fi<br><br>hd:<br>dd <span class="hljs-keyword">if</span>=$(BUILD_DIR)/kernel.bin \<br>           of=/home/podest/bochs/hd60M.img \<br>           bs=<span class="hljs-number">512</span> count=<span class="hljs-number">200</span> seek=<span class="hljs-number">9</span> conv=notrunc<br><br>clean:<br>cd $(BUILD_DIR) &amp;&amp; rm -f  .<span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">build: $(BUILD_DIR)/kernel.bin</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">all: mk_dir build hd</span><br></code></pre></td></tr></table></figure><h3 id="运行结果-2"><a class="markdownIt-Anchor" href="#运行结果-2"></a> 运行结果</h3><p><img src="/img/os/os11.2.png" alt="图为bochs运行界面" /></p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>从开始阅读到现在差不多一个月的时间了，收获很多，除了涉及到的操作系统知识，还有前期的汇编语言等等关乎硬件的内容。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十章 输入输出系统 锁机制实现</title>
    <link href="/2022/07/26/os(10)/"/>
    <url>/2022/07/26/os(10)/</url>
    
    <content type="html"><![CDATA[<h1 id="第十章-输入输出系统-锁机制实现"><a class="markdownIt-Anchor" href="#第十章-输入输出系统-锁机制实现"></a> 第十章 输入输出系统 锁机制实现</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><h2 id="用锁实现终端输出"><a class="markdownIt-Anchor" href="#用锁实现终端输出"></a> 用锁实现终端输出</h2><h3 id="threadthreadc增加"><a class="markdownIt-Anchor" href="#threadthreadc增加"></a> thread/thread.c增加</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 当前线程将自己阻塞,标志其状态为stat. */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_block</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> task_status stat)</span> &#123;<br><span class="hljs-comment">/* stat取值为TASK_BLOCKED,TASK_WAITING,TASK_HANGING,也就是只有这三种状态才不会被调度*/</span><br>   ASSERT(((stat == TASK_BLOCKED) || (stat == TASK_WAITING) || (stat == TASK_HANGING)));<br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur_thread</span> =</span> running_thread();<br>   cur_thread-&gt;status = stat; <span class="hljs-comment">// 置其状态为stat </span><br>   schedule();      <span class="hljs-comment">// 将当前线程换下处理器</span><br><span class="hljs-comment">/* 待当前线程被解除阻塞后才继续运行下面的intr_set_status */</span><br>   intr_set_status(old_status);<br>&#125;<br><br><span class="hljs-comment">/* 将线程pthread解除阻塞 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_unblock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>   ASSERT(((pthread-&gt;status == TASK_BLOCKED) || (pthread-&gt;status == TASK_WAITING) || (pthread-&gt;status == TASK_HANGING)));<br>   <span class="hljs-keyword">if</span> (pthread-&gt;status != TASK_READY) &#123;<br>      ASSERT(!elem_find(&amp;thread_ready_list, &amp;pthread-&gt;general_tag));<br>      <span class="hljs-keyword">if</span> (elem_find(&amp;thread_ready_list, &amp;pthread-&gt;general_tag)) &#123;<br> PANIC(<span class="hljs-string">&quot;thread_unblock: blocked thread in ready_list\n&quot;</span>);<br>      &#125;<br>      list_push(&amp;thread_ready_list, &amp;pthread-&gt;general_tag);    <span class="hljs-comment">// 放到队列的最前面,使其尽快得到调度</span><br>      pthread-&gt;status = TASK_READY;<br>   &#125; <br>   intr_set_status(old_status);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="threadthreadh创建"><a class="markdownIt-Anchor" href="#threadthreadh创建"></a> thread/thread.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __THREAD_SYNC_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __THREAD_SYNC_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;thread.h&quot;</span></span><br><br><span class="hljs-comment">/* 信号量结构 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">semaphore</span> &#123;</span><br>   <span class="hljs-type">uint8_t</span>  value;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span>   <span class="hljs-title">list</span> <span class="hljs-title">waiters</span>;</span><br>&#125;;<br><br><span class="hljs-comment">/* 锁结构 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lock</span> &#123;</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span>   <span class="hljs-title">task_struct</span>* <span class="hljs-title">holder</span>;</span>    <span class="hljs-comment">// 锁的持有者</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span>   <span class="hljs-title">semaphore</span> <span class="hljs-title">semaphore</span>;</span>    <span class="hljs-comment">// 用二元信号量实现锁</span><br>   <span class="hljs-type">uint32_t</span> holder_repeat_nr;    <span class="hljs-comment">// 锁的持有者重复申请锁的次数</span><br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sema_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> semaphore* psema, <span class="hljs-type">uint8_t</span> value)</span>; <br><span class="hljs-type">void</span> <span class="hljs-title function_">sema_down</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> semaphore* psema)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sema_up</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> semaphore* psema)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">lock_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> lock* plock)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">lock_acquire</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> lock* plock)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">lock_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> lock* plock)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="threadsyncc创建"><a class="markdownIt-Anchor" href="#threadsyncc创建"></a> thread/sync.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sync.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><br><span class="hljs-comment">/* 初始化信号量 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sema_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> semaphore* psema, <span class="hljs-type">uint8_t</span> value)</span> &#123;<br>   psema-&gt;value = value;       <span class="hljs-comment">// 为信号量赋初值</span><br>   list_init(&amp;psema-&gt;waiters); <span class="hljs-comment">//初始化信号量的等待队列</span><br>&#125;<br><br><span class="hljs-comment">/* 初始化锁plock */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">lock_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> lock* plock)</span> &#123;<br>   plock-&gt;holder = <span class="hljs-literal">NULL</span>;<br>   plock-&gt;holder_repeat_nr = <span class="hljs-number">0</span>;<br>   sema_init(&amp;plock-&gt;semaphore, <span class="hljs-number">1</span>);  <span class="hljs-comment">// 信号量初值为1</span><br>&#125;<br><br><span class="hljs-comment">/* 信号量down操作 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sema_down</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> semaphore* psema)</span> &#123;<br><span class="hljs-comment">/* 关中断来保证原子操作 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>   <span class="hljs-keyword">while</span>(psema-&gt;value == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 若value为0,表示已经被别人持有</span><br>      ASSERT(!elem_find(&amp;psema-&gt;waiters, &amp;running_thread()-&gt;general_tag));<br>      <span class="hljs-comment">/* 当前线程不应该已在信号量的waiters队列中 */</span><br>      <span class="hljs-keyword">if</span> (elem_find(&amp;psema-&gt;waiters, &amp;running_thread()-&gt;general_tag)) &#123;<br> PANIC(<span class="hljs-string">&quot;sema_down: thread blocked has been in waiters_list\n&quot;</span>);<br>      &#125;<br><span class="hljs-comment">/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */</span><br>      list_append(&amp;psema-&gt;waiters, &amp;running_thread()-&gt;general_tag); <br>      thread_block(TASK_BLOCKED);    <span class="hljs-comment">// 阻塞线程,直到被唤醒</span><br>   &#125;<br><span class="hljs-comment">/* 若value为1或被唤醒后,会执行下面的代码,也就是获得了锁。*/</span><br>   psema-&gt;value--;<br>   ASSERT(psema-&gt;value == <span class="hljs-number">0</span>);    <br><span class="hljs-comment">/* 恢复之前的中断状态 */</span><br>   intr_set_status(old_status);<br>&#125;<br><br><span class="hljs-comment">/* 信号量的up操作 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sema_up</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> semaphore* psema)</span> &#123;<br><span class="hljs-comment">/* 关中断,保证原子操作 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>   ASSERT(psema-&gt;value == <span class="hljs-number">0</span>);    <br>   <span class="hljs-keyword">if</span> (!list_empty(&amp;psema-&gt;waiters)) &#123;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">thread_blocked</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> task_struct, general_tag, list_pop(&amp;psema-&gt;waiters));<br>      thread_unblock(thread_blocked);<br>   &#125;<br>   psema-&gt;value++;<br>   ASSERT(psema-&gt;value == <span class="hljs-number">1</span>);    <br><span class="hljs-comment">/* 恢复之前的中断状态 */</span><br>   intr_set_status(old_status);<br>&#125;<br><br><span class="hljs-comment">/* 获取锁plock */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">lock_acquire</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> lock* plock)</span> &#123;<br><span class="hljs-comment">/* 排除曾经自己已经持有锁但还未将其释放的情况。*/</span><br>   <span class="hljs-keyword">if</span> (plock-&gt;holder != running_thread()) &#123; <br>      sema_down(&amp;plock-&gt;semaphore);    <span class="hljs-comment">// 对信号量P操作,原子操作</span><br>      plock-&gt;holder = running_thread();<br>      ASSERT(plock-&gt;holder_repeat_nr == <span class="hljs-number">0</span>);<br>      plock-&gt;holder_repeat_nr = <span class="hljs-number">1</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      plock-&gt;holder_repeat_nr++;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/* 释放锁plock */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">lock_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> lock* plock)</span> &#123;<br>   ASSERT(plock-&gt;holder == running_thread());<br>   <span class="hljs-keyword">if</span> (plock-&gt;holder_repeat_nr &gt; <span class="hljs-number">1</span>) &#123;<br>      plock-&gt;holder_repeat_nr--;<br>      <span class="hljs-keyword">return</span>;<br>   &#125;<br>   ASSERT(plock-&gt;holder_repeat_nr == <span class="hljs-number">1</span>);<br><br>   plock-&gt;holder = <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">// 把锁的持有者置空放在V操作之前</span><br>   plock-&gt;holder_repeat_nr = <span class="hljs-number">0</span>;<br>   sema_up(&amp;plock-&gt;semaphore);   <span class="hljs-comment">// 信号量的V操作,也是原子操作</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="deviceconsolec创建"><a class="markdownIt-Anchor" href="#deviceconsolec创建"></a> device/console.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/sync.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lock</span> <span class="hljs-title">console_lock</span>;</span>    <span class="hljs-comment">// 控制台锁</span><br><br><span class="hljs-comment">/* 初始化终端 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">console_init</span><span class="hljs-params">()</span> &#123;<br>  lock_init(&amp;console_lock); <br>&#125;<br><br><span class="hljs-comment">/* 获取终端 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">console_acquire</span><span class="hljs-params">()</span> &#123;<br>   lock_acquire(&amp;console_lock);<br>&#125;<br><br><span class="hljs-comment">/* 释放终端 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">console_release</span><span class="hljs-params">()</span> &#123;<br>   lock_release(&amp;console_lock);<br>&#125;<br><br><span class="hljs-comment">/* 终端中输出字符串 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">console_put_str</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span> &#123;<br>   console_acquire(); <br>   put_str(str); <br>   console_release();<br>&#125;<br><br><span class="hljs-comment">/* 终端中输出字符 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">console_put_char</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> char_asci)</span> &#123;<br>   console_acquire(); <br>   put_char(char_asci); <br>   console_release();<br>&#125;<br><br><span class="hljs-comment">/* 终端中输出16进制整数 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">console_put_int</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> num)</span> &#123;<br>   console_acquire(); <br>   put_int(num); <br>   console_release();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="initc修改"><a class="markdownIt-Anchor" href="#initc修改"></a> init.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;timer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;console.h&quot;</span></span><br><br><br><span class="hljs-comment">/*负责初始化所有模块 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_all</span><span class="hljs-params">()</span> &#123;<br>   put_str(<span class="hljs-string">&quot;init_all\n&quot;</span>);<br>   idt_init();     <span class="hljs-comment">// 初始化中断</span><br>   mem_init();     <span class="hljs-comment">// 初始化内存管理系统</span><br>   thread_init();    <span class="hljs-comment">// 初始化线程相关结构</span><br>   timer_init();     <span class="hljs-comment">// 初始化PIT</span><br>   console_init();   <span class="hljs-comment">// 控制台初始化最好放在开中断之前</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mainc修改"><a class="markdownIt-Anchor" href="#mainc修改"></a> main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;console.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br>thread_start(<span class="hljs-string">&quot;k_thread_a&quot;</span>, <span class="hljs-number">31</span>, k_thread_a, <span class="hljs-string">&quot;argA &quot;</span>);<br>thread_start(<span class="hljs-string">&quot;k_thread_b&quot;</span>, <span class="hljs-number">8</span>, k_thread_b, <span class="hljs-string">&quot;argB &quot;</span>);<br>   intr_enable();<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>console_put_str(<span class="hljs-string">&quot;Main &quot;</span>);<br>&#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span>&#123;<br><span class="hljs-type">char</span>* para = arg;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>console_put_str(para);<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span>&#123;<br><span class="hljs-type">char</span>* para = arg;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>console_put_str(para);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h3><p><img src="/img/os/os10.1.png" alt="图为bochs运行界面" /></p><h2 id="实现键盘输入"><a class="markdownIt-Anchor" href="#实现键盘输入"></a> 实现键盘输入</h2><h3 id="kernelkernels增加"><a class="markdownIt-Anchor" href="#kernelkernels增加"></a> kernel/kernel.S增加</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">VECTOR <span class="hljs-number">0x21</span>,ZERO;键盘中断对应的入口<br>VECTOR <span class="hljs-number">0x22</span>,ZERO;级联用的<br>VECTOR <span class="hljs-number">0x23</span>,ZERO;串口<span class="hljs-number">2</span>对应的入口<br>VECTOR <span class="hljs-number">0x24</span>,ZERO;串口<span class="hljs-number">1</span>对应的入口<br>VECTOR <span class="hljs-number">0x25</span>,ZERO;并口<span class="hljs-number">2</span>对应的入口<br>VECTOR <span class="hljs-number">0x26</span>,ZERO;软盘对应的入口<br>VECTOR <span class="hljs-number">0x27</span>,ZERO;并口<span class="hljs-number">1</span>对应的入口<br>VECTOR <span class="hljs-number">0x28</span>,ZERO;实时时钟对应的入口<br>VECTOR <span class="hljs-number">0x29</span>,ZERO;重定向<br>VECTOR <span class="hljs-number">0x2a</span>,ZERO;保留<br>VECTOR <span class="hljs-number">0x2b</span>,ZERO;保留<br>VECTOR <span class="hljs-number">0x2c</span>,ZERO;ps/<span class="hljs-number">2</span>鼠标<br>VECTOR <span class="hljs-number">0x2d</span>,ZERO;fpu浮点单元异常<br>VECTOR <span class="hljs-number">0x2e</span>,ZERO;硬盘<br>VECTOR <span class="hljs-number">0x2f</span>,ZERO;保留<br></code></pre></td></tr></table></figure><h3 id="kernelinterrupts增加"><a class="markdownIt-Anchor" href="#kernelinterrupts增加"></a> kernel/interrupt.S增加</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_CNT 0x30      <span class="hljs-comment">// 目前总共支持的中断数</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">pic_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><br>   outb (PIC_M_DATA, <span class="hljs-number">0xfd</span>);<br>   outb (PIC_S_DATA, <span class="hljs-number">0xff</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改"><a class="markdownIt-Anchor" href="#kernelmainc修改"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;console.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br><span class="hljs-comment">//thread_start(&quot;k_thread_a&quot;, 31, k_thread_a, &quot;argA &quot;);</span><br><span class="hljs-comment">//thread_start(&quot;k_thread_b&quot;, 8, k_thread_b, &quot;argB &quot;);</span><br>   intr_enable();<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//console_put_str(&quot;Main &quot;);</span><br><span class="hljs-comment">//&#125;</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelinitc修改"><a class="markdownIt-Anchor" href="#kernelinitc修改"></a> kernel/init.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/timer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/console.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/keyboard.h&quot;</span></span><br><br><span class="hljs-comment">/*负责初始化所有模块 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_all</span><span class="hljs-params">()</span> &#123;<br>   put_str(<span class="hljs-string">&quot;init_all\n&quot;</span>);<br>   idt_init();     <span class="hljs-comment">// 初始化中断</span><br>   mem_init();<br>   timer_init();<br>   thread_init();<br>   console_init();<br>   keyboard_init();  <span class="hljs-comment">//新增</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="devicekeyboardc创建"><a class="markdownIt-Anchor" href="#devicekeyboardc创建"></a> device/keyboard.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;keyboard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;io.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KBD_BUF_PORT 0X60</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KBD_BUF_PORT 0X60</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> esc <span class="hljs-string">&#x27;\033&#x27;</span><span class="hljs-comment">//esc 和 delete都没有</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> delete <span class="hljs-string">&#x27;\0177&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> enter <span class="hljs-string">&#x27;\r&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tab <span class="hljs-string">&#x27;\t&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> backspace <span class="hljs-string">&#x27;\b&#x27;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> char_invisible 0<span class="hljs-comment">//功能性 不可见字符均设置为0</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ctrl_l_char char_invisible</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ctrl_r_char char_invisible </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> shift_l_char char_invisible</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> shift_r_char char_invisible</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> alt_l_char char_invisible</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> alt_r_char char_invisible</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> caps_lock_char char_invisible</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> shift_l_make 0x2a</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> shift_r_make 0x36</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> alt_l_make 0x38</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> alt_r_make 0xe038</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> alt_r_break 0xe0b8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ctrl_l_make 0x1d</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ctrl_r_make 0xe01d</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ctrl_r_break 0xe09d</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> caps_lock_make 0x3a</span><br><br><span class="hljs-type">bool</span> ctrl_status = <span class="hljs-literal">false</span>,shift_status = <span class="hljs-literal">false</span>,alt_status = <span class="hljs-literal">false</span>,caps_lock_status = <span class="hljs-literal">false</span>,ext_scancode = <span class="hljs-literal">false</span>;<br><br><br><span class="hljs-type">char</span> keymap[][<span class="hljs-number">2</span>] = &#123;<br><span class="hljs-comment">/* 0x00 */</span>&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,<br><span class="hljs-comment">/* 0x01 */</span>&#123;esc,esc&#125;,<br><span class="hljs-comment">/* 0x02 */</span>&#123;<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;!&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x03 */</span>&#123;<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;@&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x04 */</span>&#123;<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;#&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x05 */</span>&#123;<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;$&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x06 */</span>&#123;<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;%&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x07 */</span>&#123;<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;^&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x08 */</span>&#123;<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x09 */</span>&#123;<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x0A */</span>&#123;<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;(&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x0B */</span>&#123;<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;)&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x0C */</span>&#123;<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x0D */</span>&#123;<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;+&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x0E */</span>&#123;backspace, backspace&#125;,<br><span class="hljs-comment">/* 0x0F */</span>&#123;tab,tab&#125;,<br><span class="hljs-comment">/* 0x10 */</span>&#123;<span class="hljs-string">&#x27;q&#x27;</span>,<span class="hljs-string">&#x27;Q&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x11 */</span>&#123;<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;W&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x12 */</span>&#123;<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x13 */</span>&#123;<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;R&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x14 */</span>&#123;<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;T&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x15 */</span>&#123;<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x16 */</span>&#123;<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;U&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x17 */</span>&#123;<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;I&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x18 */</span>&#123;<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;O&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x19 */</span>&#123;<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;P&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x1A */</span>&#123;<span class="hljs-string">&#x27;[&#x27;</span>,<span class="hljs-string">&#x27;&#123;&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x1B */</span>&#123;<span class="hljs-string">&#x27;]&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x1C */</span>&#123;enter,  enter&#125;,<br><span class="hljs-comment">/* 0x1D */</span>&#123;ctrl_l_char, ctrl_l_char&#125;,<br><span class="hljs-comment">/* 0x1E */</span>&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x1F */</span>&#123;<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;S&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x20 */</span>&#123;<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x21 */</span>&#123;<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x22 */</span>&#123;<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;G&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x23 */</span>&#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;H&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x24 */</span>&#123;<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;J&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x25 */</span>&#123;<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;K&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x26 */</span>&#123;<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x27 */</span>&#123;<span class="hljs-string">&#x27;;&#x27;</span>,<span class="hljs-string">&#x27;:&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x28 */</span>&#123;<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&quot;&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x29 */</span>&#123;<span class="hljs-string">&#x27;`&#x27;</span>,<span class="hljs-string">&#x27;~&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x2A */</span>&#123;shift_l_char, shift_l_char&#125;,<br><span class="hljs-comment">/* 0x2B */</span>&#123;<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;|&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x2C */</span>&#123;<span class="hljs-string">&#x27;z&#x27;</span>,<span class="hljs-string">&#x27;Z&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x2D */</span>&#123;<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;X&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x2E */</span>&#123;<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x2F */</span>&#123;<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-string">&#x27;V&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x30 */</span>&#123;<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x31 */</span>&#123;<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;N&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x32 */</span>&#123;<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x33 */</span>&#123;<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x34 */</span>&#123;<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x35 */</span>&#123;<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-string">&#x27;?&#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x36*/</span>&#123;shift_r_char, shift_r_char&#125;,<br><span class="hljs-comment">/* 0x37 */</span>&#123;<span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>&#125;,    <br><span class="hljs-comment">/* 0x38 */</span>&#123;alt_l_char, alt_l_char&#125;,<br><span class="hljs-comment">/* 0x39 */</span>&#123;<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>&#125;,<br><span class="hljs-comment">/* 0x3A */</span>&#123;caps_lock_char, caps_lock_char&#125;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">keyboard_init</span><span class="hljs-params">()</span><br>&#123;<br>    put_str(<span class="hljs-string">&quot;keyboard init start\n&quot;</span>);<br>    register_handler(<span class="hljs-number">0x21</span>,intr_keyboard_handler);<br>    put_str(<span class="hljs-string">&quot;keyboard init done\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">intr_keyboard_handler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">bool</span> ctrl_down_last = ctrl_status;<br>    <span class="hljs-type">bool</span> shift_down_last = shift_status;<br>    <span class="hljs-type">bool</span> caps_lock_last = caps_lock_status;<br>    <br>    <span class="hljs-type">bool</span> break_code;<br>    <span class="hljs-type">uint16_t</span> scancode = inb(KBD_BUF_PORT);<br>    <br>    <span class="hljs-keyword">if</span>(scancode == <span class="hljs-number">0xe0</span>)<span class="hljs-comment">//多字节处理</span><br>    &#123;<br>    ext_scancode = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    break_code = ((scancode &amp; <span class="hljs-number">0x0080</span>) != <span class="hljs-number">0</span>); <span class="hljs-comment">//断码 = 通码 + 0x80 通码最小比0x80小 则只有断码才可以有</span><br>    <br>    <span class="hljs-keyword">if</span>(break_code)<br>    &#123;<br>    <span class="hljs-type">uint16_t</span> make_code = (scancode &amp;= <span class="hljs-number">0xff7f</span>); <span class="hljs-comment">//多字节不处理</span><br>    <span class="hljs-keyword">if</span>(make_code == ctrl_l_make || make_code == ctrl_r_make) ctrl_status = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(make_code == shift_l_make || make_code == shift_r_make) shift_status = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(make_code == alt_l_make || make_code == alt_r_make) alt_status = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((scancode &gt; <span class="hljs-number">0x00</span> &amp;&amp; scancode &lt; <span class="hljs-number">0x3b</span>) || (scancode == alt_r_make) || (scancode == ctrl_r_make))<br>    &#123;<br>    <span class="hljs-type">bool</span> shift = <span class="hljs-literal">false</span>; <span class="hljs-comment">//先默认设置成false</span><br>    <span class="hljs-keyword">if</span>((scancode &lt; <span class="hljs-number">0x0e</span>) || (scancode == <span class="hljs-number">0x29</span>) || (scancode == <span class="hljs-number">0x1a</span>) || \<br>    (scancode == <span class="hljs-number">0x1b</span>) || (scancode == <span class="hljs-number">0x2b</span>) || (scancode == <span class="hljs-number">0x27</span>) || \<br>    (scancode == <span class="hljs-number">0x28</span>) || (scancode == <span class="hljs-number">0x33</span>) || (scancode == <span class="hljs-number">0x34</span>) || \<br>    (scancode == <span class="hljs-number">0x35</span>))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(shift_down_last)shift = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(shift_down_last &amp;&amp; caps_lock_last)shift = <span class="hljs-literal">false</span>; <span class="hljs-comment">//效果确实是这样子的 我试了一下</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(shift_down_last || caps_lock_last) shift = <span class="hljs-literal">true</span>; <span class="hljs-comment">//其中任意一个都是大写的作用</span><br>        <span class="hljs-keyword">else</span> shift = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">uint8_t</span> index = (scancode &amp; <span class="hljs-number">0x00ff</span>);<br>        <span class="hljs-type">char</span> cur_char = keymap[index][shift];<br>    <br>        <span class="hljs-keyword">if</span>(cur_char)<br>        &#123;<br>        put_char(cur_char);<br>    <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br><span class="hljs-keyword">if</span>(scancode == ctrl_l_make || scancode == ctrl_r_make)    <br>    ctrl_status = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scancode == shift_l_make || scancode == shift_r_make)<br>            shift_status = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scancode == alt_l_make || scancode == alt_r_make)<br>    alt_status = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scancode == caps_lock_make)<br>    caps_lock_status = !caps_lock_status;<br><span class="hljs-keyword">else</span> put_str(<span class="hljs-string">&quot;unknown key\n&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="devicekeyboardh创建"><a class="markdownIt-Anchor" href="#devicekeyboardh创建"></a> device/keyboard.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __DEVICE_KEYBOARD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __DEVICE_KEYBOARD_H</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">intr_keyboard_handler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">keyboard_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="实验结果"><a class="markdownIt-Anchor" href="#实验结果"></a> 实验结果</h3><p><img src="/img/os/os10.3.png" alt="图为bochs运行界面" /></p><h2 id="环形缓冲区"><a class="markdownIt-Anchor" href="#环形缓冲区"></a> 环形缓冲区</h2><h3 id="deviceioqueueh创建"><a class="markdownIt-Anchor" href="#deviceioqueueh创建"></a> device/ioqueue.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __DEVICE_IOQUEUE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __DEVICE_IOQUEUE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../thread/sync.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> bufsize  64</span><br><span class="hljs-comment">/* 环形队列 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ioqueue</span> &#123;</span><br><span class="hljs-comment">// 生产者消费者问题</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lock</span> <span class="hljs-title">lock</span>;</span><br> <span class="hljs-comment">/* 生产者,缓冲区不满时就继续往里面放数据,</span><br><span class="hljs-comment">  * 否则就睡眠,此项记录哪个生产者在此缓冲区上睡眠。*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">producer</span>;</span><br><br> <span class="hljs-comment">/* 消费者,缓冲区不空时就继续从往里面拿数据,</span><br><span class="hljs-comment">  * 否则就睡眠,此项记录哪个消费者在此缓冲区上睡眠。*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">consumer</span>;</span><br>    <span class="hljs-type">char</span> buf[bufsize];    <span class="hljs-comment">// 缓冲区大小</span><br>    <span class="hljs-type">int32_t</span> head;    <span class="hljs-comment">// 队首,数据往队首处写入</span><br>    <span class="hljs-type">int32_t</span> tail;    <span class="hljs-comment">// 队尾,数据从队尾处读出</span><br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ioqueue_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ioqueue* ioq)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int32_t</span> <span class="hljs-title function_">next_pos</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> pos)</span>;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">ioq_full</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ioqueue* ioq)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">ioq_empty</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ioqueue* ioq)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ioq_wait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct** waiter)</span>; <span class="hljs-comment">//这里是waiter的二级指针 取二级指针的原因是这样可以对指针的地址值进行修改</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wakeup</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct** waiter)</span>; <br><span class="hljs-type">char</span> <span class="hljs-title function_">ioq_getchar</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ioqueue* ioq)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">ioq_putchar</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ioqueue* ioq, <span class="hljs-type">char</span> byte)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">ioq_length</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ioqueue* ioq)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="deviceioqueuec创建"><a class="markdownIt-Anchor" href="#deviceioqueuec创建"></a> device/ioqueue.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ioqueue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><br><span class="hljs-comment">/* 初始化io队列ioq */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ioqueue_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ioqueue* ioq)</span> &#123;<br>   lock_init(&amp;ioq-&gt;lock);     <span class="hljs-comment">// 初始化io队列的锁</span><br>   ioq-&gt;producer = ioq-&gt;consumer = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 生产者和消费者置空</span><br>   ioq-&gt;head = ioq-&gt;tail = <span class="hljs-number">0</span>; <span class="hljs-comment">// 队列的首尾指针指向缓冲区数组第0个位置</span><br>&#125;<br><br><span class="hljs-comment">/* 返回pos在缓冲区中的下一个位置值 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int32_t</span> <span class="hljs-title function_">next_pos</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> pos)</span> &#123;<br>   <span class="hljs-keyword">return</span> (pos + <span class="hljs-number">1</span>) % bufsize; <br>&#125;<br><br><span class="hljs-comment">/* 判断队列是否已满 */</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">ioq_full</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ioqueue* ioq)</span> &#123;<br>   ASSERT(intr_get_status() == INTR_OFF);<br>   <span class="hljs-keyword">return</span> next_pos(ioq-&gt;head) == ioq-&gt;tail;<br>&#125;<br><br><span class="hljs-comment">/* 判断队列是否已空 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">ioq_empty</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ioqueue* ioq)</span> &#123;<br>   ASSERT(intr_get_status() == INTR_OFF);<br>   <span class="hljs-keyword">return</span> ioq-&gt;head == ioq-&gt;tail;<br>&#125;<br><br><span class="hljs-comment">/* 使当前生产者或消费者在此缓冲区上等待 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ioq_wait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct** waiter)</span> &#123;<br>   ASSERT(*waiter == <span class="hljs-literal">NULL</span> &amp;&amp; waiter != <span class="hljs-literal">NULL</span>);<br>   *waiter = running_thread();<br>   thread_block(TASK_BLOCKED);<br>&#125;<br><br><span class="hljs-comment">/* 唤醒waiter */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wakeup</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct** waiter)</span> &#123;<br>   ASSERT(*waiter != <span class="hljs-literal">NULL</span>);<br>   thread_unblock(*waiter); <br>   *waiter = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">/* 消费者从ioq队列中获取一个字符 */</span><br><span class="hljs-type">char</span> <span class="hljs-title function_">ioq_getchar</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ioqueue* ioq)</span> &#123;<br>   ASSERT(intr_get_status() == INTR_OFF);<br><br><span class="hljs-comment">/* 若缓冲区(队列)为空,把消费者ioq-&gt;consumer记为当前线程自己,</span><br><span class="hljs-comment"> * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,</span><br><span class="hljs-comment"> * 也就是唤醒当前线程自己*/</span><br>   <span class="hljs-keyword">while</span> (ioq_empty(ioq)) &#123;<br>      lock_acquire(&amp;ioq-&gt;lock); <br>      ioq_wait(&amp;ioq-&gt;consumer);<br>      lock_release(&amp;ioq-&gt;lock);<br>   &#125;<br><br>   <span class="hljs-type">char</span> byte = ioq-&gt;buf[ioq-&gt;tail];  <span class="hljs-comment">// 从缓冲区中取出</span><br>   ioq-&gt;tail = next_pos(ioq-&gt;tail);  <span class="hljs-comment">// 把读游标移到下一位置</span><br><br>   <span class="hljs-keyword">if</span> (ioq-&gt;producer != <span class="hljs-literal">NULL</span>) &#123;<br>      wakeup(&amp;ioq-&gt;producer);  <span class="hljs-comment">// 唤醒生产者</span><br>   &#125;<br><br>   <span class="hljs-keyword">return</span> byte; <br>&#125;<br><br><span class="hljs-comment">/* 生产者往ioq队列中写入一个字符byte */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ioq_putchar</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ioqueue* ioq, <span class="hljs-type">char</span> byte)</span> &#123;<br>   ASSERT(intr_get_status() == INTR_OFF);<br><br><span class="hljs-comment">/* 若缓冲区(队列)已经满了,把生产者ioq-&gt;producer记为自己,</span><br><span class="hljs-comment"> * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,</span><br><span class="hljs-comment"> * 也就是唤醒当前线程自己*/</span><br>   <span class="hljs-keyword">while</span> (ioq_full(ioq)) &#123;<br>      lock_acquire(&amp;ioq-&gt;lock);<br>      ioq_wait(&amp;ioq-&gt;producer);<br>      lock_release(&amp;ioq-&gt;lock);<br>   &#125;<br>   ioq-&gt;buf[ioq-&gt;head] = byte;      <span class="hljs-comment">// 把字节放入缓冲区中</span><br>   ioq-&gt;head = next_pos(ioq-&gt;head); <span class="hljs-comment">// 把写游标移到下一位置</span><br><br>   <span class="hljs-keyword">if</span> (ioq-&gt;consumer != <span class="hljs-literal">NULL</span>) &#123;<br>      wakeup(&amp;ioq-&gt;consumer);          <span class="hljs-comment">// 唤醒消费者</span><br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/* 返回环形缓冲区中的数据长度 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">ioq_length</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ioqueue* ioq)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> len = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">if</span> (ioq-&gt;head &gt;= ioq-&gt;tail) &#123;<br>      len = ioq-&gt;head - ioq-&gt;tail;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      len = bufsize - (ioq-&gt;tail - ioq-&gt;head);     <br>   &#125;<br>   <span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="devicekeyboardc修改"><a class="markdownIt-Anchor" href="#devicekeyboardc修改"></a> device/keyboard.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">……<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ioqueue</span> <span class="hljs-title">kbd_buf</span>;</span>   <span class="hljs-comment">// 定义键盘缓冲区</span><br>……<br><span class="hljs-keyword">if</span> (cur_char) &#123;<br>   <span class="hljs-keyword">if</span> (!ioq_full(&amp;kbd_buf)) &#123;<br>   put_char(cur_char);<br>       ioq_putchar(&amp;kbd_buf, cur_char);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-2"><a class="markdownIt-Anchor" href="#运行结果-2"></a> 运行结果</h3><p><img src="/img/os/os10.4.png" alt="图为bochs运行界面" /></p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>这个月完成这本书基本上是不可能了，这一章内容太多了，足足花了三、四天的时间，不过c语言完成的这些功能理解起来倒不是很困难。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第九章 实现内核线程 启动多线程调度</title>
    <link href="/2022/07/24/os(9)/"/>
    <url>/2022/07/24/os(9)/</url>
    
    <content type="html"><![CDATA[<h1 id="第九章-实现内核线程-启动多线程调度"><a class="markdownIt-Anchor" href="#第九章-实现内核线程-启动多线程调度"></a> 第九章 实现内核线程 启动多线程调度</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>24日，进入到线程部分了，感觉应该是要接触到一些基本的算法调度了。书上为了教学和方便，采用了创建内核线程的方式，我们一起来看看。</p><h2 id="创建内核线程"><a class="markdownIt-Anchor" href="#创建内核线程"></a> 创建内核线程</h2><p>首先我们梳理一下进程和线程的基础知识。书上举了一个非常生动的例子：将饭店的厨房比作一个进程，其中在厨房工作的人，比如厨师、配菜员、餐具清洁员等，就是一个个线程，食材和烹饪的锅具就是进程的资源。由此可见，</p><blockquote><p>线程=进程+资源</p></blockquote><p>进程有资源即页表，进程的所有线程公用进程的页表。</p><p>这次试验创造的是一个内核线程，所以它使用的内存空间是内核内存池，1MB到2MB的页目录和页表。</p><p>整个流程如下：<br />定义了PCB结构体，中断栈结构体（本次实验只是留了个位置，可以不管），线程栈结构体。<br />其中，PCB中重要的成员变量便是线程名，线程栈指针。<br />线程栈结构体重要的成员变量便是线程需要执行的函数的指针。因为如果切换到该线程，线程应该知道要执行哪个函数。</p><h3 id="threadthreadh创建"><a class="markdownIt-Anchor" href="#threadthreadh创建"></a> thread/thread.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> <span class="hljs-title function_">thread_func</span><span class="hljs-params">(<span class="hljs-type">void</span>*)</span>;<br><br><span class="hljs-comment">/* 进程或线程的状态 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> &#123;</span><br>   TASK_RUNNING,<br>   TASK_READY,<br>   TASK_BLOCKED,<br>   TASK_WAITING,<br>   TASK_HANGING,<br>   TASK_DIED<br>&#125;;<br><br><span class="hljs-comment">/***********   中断栈intr_stack   ***********</span><br><span class="hljs-comment"> * 此结构用于中断发生时保护程序(线程或进程)的上下文环境:</span><br><span class="hljs-comment"> * 进程或线程被外部中断或软中断打断时,会按照此结构压入上下文</span><br><span class="hljs-comment"> * 寄存器,  intr_exit中的出栈操作是此结构的逆操作</span><br><span class="hljs-comment"> * 此栈在线程自己的内核栈中位置固定,所在页的最顶端</span><br><span class="hljs-comment">********************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">intr_stack</span> &#123;</span><br>    <span class="hljs-type">uint32_t</span> vec_no; <span class="hljs-comment">// kernel.S 宏VECTOR中push %1压入的中断号</span><br>    <span class="hljs-type">uint32_t</span> edi;<br>    <span class="hljs-type">uint32_t</span> esi;<br>    <span class="hljs-type">uint32_t</span> ebp;<br>    <span class="hljs-type">uint32_t</span> esp_dummy; <span class="hljs-comment">// 虽然pushad把esp也压入,但esp是不断变化的,所以会被popad忽略</span><br>    <span class="hljs-type">uint32_t</span> ebx;<br>    <span class="hljs-type">uint32_t</span> edx;<br>    <span class="hljs-type">uint32_t</span> ecx;<br>    <span class="hljs-type">uint32_t</span> eax;<br>    <span class="hljs-type">uint32_t</span> gs;<br>    <span class="hljs-type">uint32_t</span> fs;<br>    <span class="hljs-type">uint32_t</span> es;<br>    <span class="hljs-type">uint32_t</span> ds;<br><br><span class="hljs-comment">/* 以下由cpu从低特权级进入高特权级时压入 */</span><br>    <span class="hljs-type">uint32_t</span> err_code; <span class="hljs-comment">// err_code会被压入在eip之后</span><br>    <span class="hljs-type">void</span> (*eip) (<span class="hljs-type">void</span>);<br>    <span class="hljs-type">uint32_t</span> cs;<br>    <span class="hljs-type">uint32_t</span> eflags;<br>    <span class="hljs-type">void</span>* esp;<br>    <span class="hljs-type">uint32_t</span> ss;<br>&#125;;<br><br><span class="hljs-comment">/***********  线程栈thread_stack  ***********</span><br><span class="hljs-comment"> * 线程自己的栈,用于存储线程中待执行的函数</span><br><span class="hljs-comment"> * 此结构在线程自己的内核栈中位置不固定,</span><br><span class="hljs-comment"> * 用在switch_to时保存线程环境。</span><br><span class="hljs-comment"> * 实际位置取决于实际运行情况。</span><br><span class="hljs-comment"> ******************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span> &#123;</span><br>   <span class="hljs-type">uint32_t</span> ebp;<br>   <span class="hljs-type">uint32_t</span> ebx;<br>   <span class="hljs-type">uint32_t</span> edi;<br>   <span class="hljs-type">uint32_t</span> esi;<br><br><span class="hljs-comment">/* 线程第一次执行时,eip指向待调用的函数kernel_thread </span><br><span class="hljs-comment">其它时候,eip是指向switch_to的返回地址*/</span><br>   <span class="hljs-type">void</span> (*eip) (thread_func* func, <span class="hljs-type">void</span>* func_arg);<br><br><span class="hljs-comment">/*****   以下仅供第一次被调度上cpu时使用   ****/</span><br><br><span class="hljs-comment">/* 参数unused_ret只为占位置充数为返回地址 */</span><br>   <span class="hljs-type">void</span> (*unused_retaddr);<br>   thread_func* function;   <span class="hljs-comment">// 由Kernel_thread所调用的函数名</span><br>   <span class="hljs-type">void</span>* func_arg;    <span class="hljs-comment">// 由Kernel_thread所调用的函数所需的参数</span><br>&#125;;<br><br><span class="hljs-comment">/* 进程或线程的pcb,程序控制块 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> &#123;</span><br>   <span class="hljs-type">uint32_t</span>* self_kstack; <span class="hljs-comment">// 各内核线程都用自己的内核栈</span><br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> <span class="hljs-title">status</span>;</span><br>   <span class="hljs-type">char</span> name[<span class="hljs-number">16</span>];<br>   <span class="hljs-type">uint8_t</span> priority;<br>   <span class="hljs-type">uint32_t</span> stack_magic; <span class="hljs-comment">// 用这串数字做栈的边界标记,用于检测栈的溢出</span><br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, thread_func function, <span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, <span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio)</span>;<br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio, thread_func function, <span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="threadthreadc创建"><a class="markdownIt-Anchor" href="#threadthreadc创建"></a> thread/thread.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_SIZE 4096</span><br><br><span class="hljs-comment">/* 由kernel_thread去执行function(func_arg) */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">kernel_thread</span><span class="hljs-params">(thread_func* function, <span class="hljs-type">void</span>* func_arg)</span> &#123;<br><br>   function(func_arg); <br>&#125;<br><br><span class="hljs-comment">/* 初始化线程栈thread_stack,将待执行的函数和参数放到thread_stack中相应的位置 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, thread_func function, <span class="hljs-type">void</span>* func_arg)</span> &#123;<br>   <span class="hljs-comment">/* 先预留中断使用栈的空间,可见thread.h中定义的结构 */</span><br>   pthread-&gt;self_kstack -= <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> intr_stack);<br><br>   <span class="hljs-comment">/* 再留出线程栈空间,可见thread.h中定义 */</span><br>   pthread-&gt;self_kstack -= <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> thread_stack);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span>* <span class="hljs-title">kthread_stack</span> =</span> (<span class="hljs-keyword">struct</span> thread_stack*)pthread-&gt;self_kstack;<br>   kthread_stack-&gt;eip = kernel_thread;<br>   kthread_stack-&gt;function = function;<br>   kthread_stack-&gt;func_arg = func_arg;<br>   kthread_stack-&gt;ebp = kthread_stack-&gt;ebx = kthread_stack-&gt;esi = kthread_stack-&gt;edi = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 初始化线程基本信息 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, <span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio)</span> &#123;<br>   <span class="hljs-built_in">memset</span>(pthread, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*pthread));<br>   <span class="hljs-built_in">strcpy</span>(pthread-&gt;name, name);<br><br>  pthread-&gt;status = TASK_RUNNING;<br><br><span class="hljs-comment">/* self_kstack是线程自己在内核态下使用的栈顶地址 */</span><br>   pthread-&gt;self_kstack = (<span class="hljs-type">uint32_t</span>*)((<span class="hljs-type">uint32_t</span>)pthread + PG_SIZE);<br>   pthread-&gt;priority = prio;<br><br>   pthread-&gt;stack_magic = <span class="hljs-number">0x19870916</span>;  <span class="hljs-comment">// 自定义的魔数</span><br>&#125;<br><br><span class="hljs-comment">/* 创建一优先级为prio的线程,线程名为name,线程所执行的函数是function(func_arg) */</span><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio, thread_func function, <span class="hljs-type">void</span>* func_arg)</span> &#123;<br><span class="hljs-comment">/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">thread</span> =</span> get_kernel_pages(<span class="hljs-number">1</span>);<br>   init_thread(thread, name, prio);<br>   thread_create(thread, function, func_arg);<br><br>  <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;movl %0, %%esp; pop %%ebp; pop %%ebx; pop %%edi; pop %%esi; \</span></span><br><span class="hljs-string"><span class="hljs-params">ret &quot;</span>: : <span class="hljs-string">&quot;g&quot;</span> (thread-&gt;self_kstack) :<span class="hljs-string">&quot;memory&quot;</span>)</span>;<br>   <span class="hljs-keyword">return</span> thread;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改"><a class="markdownIt-Anchor" href="#kernelmainc修改"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;thread.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br><br>thread_start(<span class="hljs-string">&quot;k_thread_a&quot;</span>, <span class="hljs-number">31</span>, k_thread_a, <span class="hljs-string">&quot;argA &quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span>&#123;<br><span class="hljs-type">char</span>* para = arg;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>put_str(para);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="makefile修改"><a class="markdownIt-Anchor" href="#makefile修改"></a> makefile修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs shell">BUILD_DIR = ./build<br>ENTRY_POINT = 0xc0001500<br>AS = nasm<br>CC = gcc<br>LD = ld<br>LIB = -I lib/ -I lib/kernel/ -I lib/user/ -I kernel/ -I device/ -I thread/<br>ASFLAGS = -f elf<br>CFLAGS = -Wall -m32 -fno-stack-protector $(LIB) -c -fno-builtin -W -Wstrict-prototypes -Wmissing-prototypes<br>LDFLAGS =  -m elf_i386 -Ttext $(ENTRY_POINT) -e main -Map $(BUILD_DIR)/kernel.map<br>OBJS = $(BUILD_DIR)/main.o $(BUILD_DIR)/init.o $(BUILD_DIR)/interrupt.o \<br>      $(BUILD_DIR)/timer.o $(BUILD_DIR)/kernel.o $(BUILD_DIR)/print.o \<br>      $(BUILD_DIR)/debug.o $(BUILD_DIR)/string.o $(BUILD_DIR)/memory.o \<br>      $(BUILD_DIR)/bitmap.o $(BUILD_DIR)/thread.o<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############     c代码编译     ###############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/main.o: kernel/main.c lib/kernel/print.h \</span><br><span class="language-bash">        lib/stdint.h kernel/init.h lib/string.h kernel/memory.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/init.o: kernel/init.c kernel/init.h lib/kernel/print.h \</span><br><span class="language-bash">        lib/stdint.h kernel/interrupt.h device/timer.h kernel/memory.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/interrupt.o: kernel/interrupt.c kernel/interrupt.h \</span><br><span class="language-bash">        lib/stdint.h kernel/global.h lib/kernel/io.h lib/kernel/print.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/timer.o: device/timer.c device/timer.h lib/stdint.h\</span><br><span class="language-bash">        lib/kernel/io.h lib/kernel/print.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/debug.o: kernel/debug.c kernel/debug.h \</span><br><span class="language-bash">        lib/kernel/print.h lib/stdint.h kernel/interrupt.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/string.o: lib/string.c lib/string.h \</span><br><span class="language-bash">kernel/debug.h kernel/global.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/memory.o: kernel/memory.c kernel/memory.h \</span><br><span class="language-bash">lib/stdint.h lib/kernel/bitmap.h kernel/debug.h lib/string.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/bitmap.o: lib/kernel/bitmap.c lib/kernel/bitmap.h \</span><br><span class="language-bash">lib/string.h kernel/interrupt.h lib/kernel/print.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/thread.o: thread/thread.c thread/thread.h lib/stdint.h  \</span><br><span class="language-bash">    kernel/global.h lib/string.h lib/stdint.h kernel/debug.h \</span><br><span class="language-bash">    lib/kernel/print.h kernel/memory.h \</span><br><span class="language-bash">    lib/kernel/bitmap.h thread/thread.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############    汇编代码编译    ###############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/kernel.o: kernel/kernel.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/print.o: lib/kernel/print.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############    链接所有目标文件    #############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/kernel.bin: $(OBJS)</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(LD) $(LDFLAGS) $^ -o <span class="hljs-variable">$@</span></span><br><br>.PHONY : mk_dir hd clean all<br><br>mk_dir:<br>if [ ! -d $(BUILD_DIR) ]; then mkdir $(BUILD_DIR); fi<br><br>hd:<br>dd if=$(BUILD_DIR)/kernel.bin \<br>           of=/home/podest/bochs/hd60M.img \<br>           bs=512 count=200 seek=9 conv=notrunc<br><br>clean:<br>cd $(BUILD_DIR) &amp;&amp; rm -f  ./*<br><br>build: $(BUILD_DIR)/kernel.bin<br><br>all: mk_dir build hd<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h3><p><img src="/img/os/os9.1.png" alt="图为bochs运行界面" /></p><h2 id="编写双向链表"><a class="markdownIt-Anchor" href="#编写双向链表"></a> 编写双向链表</h2><h3 id="libkernellisth创建"><a class="markdownIt-Anchor" href="#libkernellisth创建"></a> lib/kernel/list.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LIB_KERNEL_LIST_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LIB_KERNEL_LIST_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> offset(struct_type,member) (int)(&amp;((struct_type*)0)-&gt;member)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> elem2entry(struct_type, struct_member_name, elem_ptr) \</span><br><span class="hljs-meta"> (struct_type*)((int)elem_ptr - offset(struct_type, struct_member_name))</span><br><br><span class="hljs-comment">/**********   定义链表结点成员结构   ***********</span><br><span class="hljs-comment">*结点中不需要数据成元,只要求前驱和后继结点指针*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> &#123;</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">prev</span>;</span> <span class="hljs-comment">// 前躯结点</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">next</span>;</span> <span class="hljs-comment">// 后继结点</span><br>&#125;;<br><br><span class="hljs-comment">/* 链表结构,用来实现队列 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> &#123;</span><br><span class="hljs-comment">/* head是队首,是固定不变的，不是第1个元素,第1个元素为head.next */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">head</span>;</span><br><span class="hljs-comment">/* tail是队尾,同样是固定不变的 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">tail</span>;</span><br>&#125;;<br><br><span class="hljs-comment">/* 自定义函数类型function,用于在list_traversal中做回调函数 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">bool</span> <span class="hljs-params">(function)</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem*, <span class="hljs-type">int</span> arg)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">list_init</span> <span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>*)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">list_insert_before</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* before, <span class="hljs-keyword">struct</span> list_elem* elem)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">list_push</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist, <span class="hljs-keyword">struct</span> list_elem* elem)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">list_iterate</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">list_append</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist, <span class="hljs-keyword">struct</span> list_elem* elem)</span>;  <br><span class="hljs-type">void</span> <span class="hljs-title function_">list_remove</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* pelem)</span>;<br><span class="hljs-keyword">struct</span> list_elem* <span class="hljs-title function_">list_pop</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist)</span>;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">list_empty</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">list_len</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist)</span>;<br><span class="hljs-keyword">struct</span> list_elem* <span class="hljs-title function_">list_traversal</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist, function func, <span class="hljs-type">int</span> arg)</span>;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">elem_find</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist, <span class="hljs-keyword">struct</span> list_elem* obj_elem)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="libkernellistc创建"><a class="markdownIt-Anchor" href="#libkernellistc创建"></a> lib/kernel/list.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><br><span class="hljs-comment">/* 初始化双向链表list */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">list_init</span> <span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* <span class="hljs-built_in">list</span>)</span> &#123;<br>   <span class="hljs-built_in">list</span>-&gt;head.prev = <span class="hljs-literal">NULL</span>;<br>   <span class="hljs-built_in">list</span>-&gt;head.next = &amp;<span class="hljs-built_in">list</span>-&gt;tail;<br>   <span class="hljs-built_in">list</span>-&gt;tail.prev = &amp;<span class="hljs-built_in">list</span>-&gt;head;<br>   <span class="hljs-built_in">list</span>-&gt;tail.next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">/* 把链表元素elem插入在元素before之前 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">list_insert_before</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* before, <span class="hljs-keyword">struct</span> list_elem* elem)</span> &#123; <br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br><br><span class="hljs-comment">/* 将before前驱元素的后继元素更新为elem, 暂时使before脱离链表*/</span> <br>   before-&gt;prev-&gt;next = elem; <br><br><span class="hljs-comment">/* 更新elem自己的前驱结点为before的前驱,</span><br><span class="hljs-comment"> * 更新elem自己的后继结点为before, 于是before又回到链表 */</span><br>   elem-&gt;prev = before-&gt;prev;<br>   elem-&gt;next = before;<br><br><span class="hljs-comment">/* 更新before的前驱结点为elem */</span><br>   before-&gt;prev = elem;<br><br>   intr_set_status(old_status);<br>&#125;<br><br><span class="hljs-comment">/* 添加元素到列表队首,类似栈push操作 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">list_push</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist, <span class="hljs-keyword">struct</span> list_elem* elem)</span> &#123;<br>   list_insert_before(plist-&gt;head.next, elem); <span class="hljs-comment">// 在队头插入elem</span><br>&#125;<br><br><span class="hljs-comment">/* 追加元素到链表队尾,类似队列的先进先出操作 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">list_append</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist, <span class="hljs-keyword">struct</span> list_elem* elem)</span> &#123;<br>   list_insert_before(&amp;plist-&gt;tail, elem);     <span class="hljs-comment">// 在队尾的前面插入</span><br>&#125;<br><br><span class="hljs-comment">/* 使元素pelem脱离链表 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">list_remove</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> list_elem* pelem)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span> =</span> intr_disable();<br>   <br>   pelem-&gt;prev-&gt;next = pelem-&gt;next;<br>   pelem-&gt;next-&gt;prev = pelem-&gt;prev;<br><br>   intr_set_status(old_status);<br>&#125;<br><br><span class="hljs-comment">/* 将链表第一个元素弹出并返回,类似栈的pop操作 */</span><br><span class="hljs-keyword">struct</span> list_elem* <span class="hljs-title function_">list_pop</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">elem</span> =</span> plist-&gt;head.next;<br>   list_remove(elem);<br>   <span class="hljs-keyword">return</span> elem;<br>&#125; <br><br><span class="hljs-comment">/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">elem_find</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist, <span class="hljs-keyword">struct</span> list_elem* obj_elem)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">elem</span> =</span> plist-&gt;head.next;<br>   <span class="hljs-keyword">while</span> (elem != &amp;plist-&gt;tail) &#123;<br>      <span class="hljs-keyword">if</span> (elem == obj_elem) &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>      elem = elem-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">/* 把列表plist中的每个元素elem和arg传给回调函数func,</span><br><span class="hljs-comment"> * arg给func用来判断elem是否符合条件.</span><br><span class="hljs-comment"> * 本函数的功能是遍历列表内所有元素,逐个判断是否有符合条件的元素。</span><br><span class="hljs-comment"> * 找到符合条件的元素返回元素指针,否则返回NULL. */</span><br><span class="hljs-keyword">struct</span> list_elem* <span class="hljs-title function_">list_traversal</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist, function func, <span class="hljs-type">int</span> arg)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">elem</span> =</span> plist-&gt;head.next;<br><span class="hljs-comment">/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */</span><br>   <span class="hljs-keyword">if</span> (list_empty(plist)) &#123; <br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">while</span> (elem != &amp;plist-&gt;tail) &#123;<br>      <span class="hljs-keyword">if</span> (func(elem, arg)) &#123;  <span class="hljs-comment">// func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历</span><br> <span class="hljs-keyword">return</span> elem;<br>      &#125;  <span class="hljs-comment">// 若回调函数func返回true,则继续遍历</span><br>      elem = elem-&gt;next;       <br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">/* 返回链表长度 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">list_len</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">elem</span> =</span> plist-&gt;head.next;<br>   <span class="hljs-type">uint32_t</span> length = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (elem != &amp;plist-&gt;tail) &#123;<br>      length++; <br>      elem = elem-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-comment">/* 判断链表是否为空,空时返回true,否则返回false */</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">list_empty</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">list</span>* plist)</span> &#123;<span class="hljs-comment">// 判断队列是否为空</span><br>   <span class="hljs-keyword">return</span> (plist-&gt;head.next == &amp;plist-&gt;tail ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现多线程调度"><a class="markdownIt-Anchor" href="#实现多线程调度"></a> 实现多线程调度</h2><p>本次实验实现了多线程的调度，增加的功能如下<br />1.增了加专门的时钟中断处理函数，判断如果当前线程时间片用完，则执行调度函数schedule<br />2.schedule对当前线程如果时间片用完，则加入就绪队列，然后弹出队头，调用switch_to(cur,next)函数<br />3.switch_to函数保护当前线程环境，恢复下一个线程环境，ret开始执行下一个线程。<br />具体流程如下：<br />1.main.c里的init_all创建了主线程main_thread，为运行态，然后thread_start创建了两个线程。<br />注意：此时的thread_start没有ret指令了，说明没有开启此线程，仅仅完成了单线程实验init和create的工作，并将线程挂上就绪队列，此线程的开启由时钟中断引出。<br />2.main线程时间片31，argA时间片31，argB时间片8。开中断后，时钟中断频繁发生，cpu频繁执行新写的时钟中断处理程序，不断判断主线程时间片是否够用，如果为0，在schedule中将主线程则放入就绪队列，补满时间片，并出栈队头的argA，从而执行argA线程。<br />3.之后便是依次循环执行，因此main argA argB会循环打印。</p><h3 id="threadthreadh修改"><a class="markdownIt-Anchor" href="#threadthreadh修改"></a> thread/thread.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __THREAD_THREAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK_NAME_LEN 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_FILES_OPEN_PER_PROC 8</span><br><span class="hljs-comment">/* 自定义通用函数类型,它将在很多线程函数中做为形参类型 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> <span class="hljs-title function_">thread_func</span><span class="hljs-params">(<span class="hljs-type">void</span>*)</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int16_t</span> <span class="hljs-type">pid_t</span>;<br><br><span class="hljs-comment">/* 进程或线程的状态 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> &#123;</span><br>   TASK_RUNNING,<br>   TASK_READY,<br>   TASK_BLOCKED,<br>   TASK_WAITING,<br>   TASK_HANGING,<br>   TASK_DIED<br>&#125;;<br><br><span class="hljs-comment">/***********   中断栈intr_stack   ***********</span><br><span class="hljs-comment"> * 此结构用于中断发生时保护程序(线程或进程)的上下文环境:</span><br><span class="hljs-comment"> * 进程或线程被外部中断或软中断打断时,会按照此结构压入上下文</span><br><span class="hljs-comment"> * 寄存器,  intr_exit中的出栈操作是此结构的逆操作</span><br><span class="hljs-comment"> * 此栈在线程自己的内核栈中位置固定,所在页的最顶端</span><br><span class="hljs-comment">********************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">intr_stack</span> &#123;</span><br>    <span class="hljs-type">uint32_t</span> vec_no; <span class="hljs-comment">// kernel.S 宏VECTOR中push %1压入的中断号</span><br>    <span class="hljs-type">uint32_t</span> edi;<br>    <span class="hljs-type">uint32_t</span> esi;<br>    <span class="hljs-type">uint32_t</span> ebp;<br>    <span class="hljs-type">uint32_t</span> esp_dummy; <span class="hljs-comment">// 虽然pushad把esp也压入,但esp是不断变化的,所以会被popad忽略</span><br>    <span class="hljs-type">uint32_t</span> ebx;<br>    <span class="hljs-type">uint32_t</span> edx;<br>    <span class="hljs-type">uint32_t</span> ecx;<br>    <span class="hljs-type">uint32_t</span> eax;<br>    <span class="hljs-type">uint32_t</span> gs;<br>    <span class="hljs-type">uint32_t</span> fs;<br>    <span class="hljs-type">uint32_t</span> es;<br>    <span class="hljs-type">uint32_t</span> ds;<br><br><span class="hljs-comment">/* 以下由cpu从低特权级进入高特权级时压入 */</span><br>    <span class="hljs-type">uint32_t</span> err_code; <span class="hljs-comment">// err_code会被压入在eip之后</span><br>    <span class="hljs-type">void</span> (*eip) (<span class="hljs-type">void</span>);<br>    <span class="hljs-type">uint32_t</span> cs;<br>    <span class="hljs-type">uint32_t</span> eflags;<br>    <span class="hljs-type">void</span>* esp;<br>    <span class="hljs-type">uint32_t</span> ss;<br>&#125;;<br><br><span class="hljs-comment">/***********  线程栈thread_stack  ***********</span><br><span class="hljs-comment"> * 线程自己的栈,用于存储线程中待执行的函数</span><br><span class="hljs-comment"> * 此结构在线程自己的内核栈中位置不固定,</span><br><span class="hljs-comment"> * 用在switch_to时保存线程环境。</span><br><span class="hljs-comment"> * 实际位置取决于实际运行情况。</span><br><span class="hljs-comment"> ******************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span> &#123;</span><br>   <span class="hljs-type">uint32_t</span> ebp;<br>   <span class="hljs-type">uint32_t</span> ebx;<br>   <span class="hljs-type">uint32_t</span> edi;<br>   <span class="hljs-type">uint32_t</span> esi;<br><br><span class="hljs-comment">/* 线程第一次执行时,eip指向待调用的函数kernel_thread </span><br><span class="hljs-comment">其它时候,eip是指向switch_to的返回地址*/</span><br>   <span class="hljs-type">void</span> (*eip) (thread_func* func, <span class="hljs-type">void</span>* func_arg);<br><br><span class="hljs-comment">/*****   以下仅供第一次被调度上cpu时使用   ****/</span><br><br><span class="hljs-comment">/* 参数unused_ret只为占位置充数为返回地址 */</span><br>   <span class="hljs-type">void</span> (*unused_retaddr);<br>   thread_func* function;   <span class="hljs-comment">// 由Kernel_thread所调用的函数名</span><br>   <span class="hljs-type">void</span>* func_arg;    <span class="hljs-comment">// 由Kernel_thread所调用的函数所需的参数</span><br>&#125;;<br><br><span class="hljs-comment">/* 进程或线程的pcb,程序控制块 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> &#123;</span><br>   <span class="hljs-type">uint32_t</span>* self_kstack; <span class="hljs-comment">// 各内核线程都用自己的内核栈</span><br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_status</span> <span class="hljs-title">status</span>;</span><br>   <span class="hljs-type">char</span> name[<span class="hljs-number">16</span>];<br>   <span class="hljs-type">uint8_t</span> priority;<br>   <span class="hljs-type">uint8_t</span> ticks;   <span class="hljs-comment">// 每次在处理器上执行的时间嘀嗒数</span><br><span class="hljs-comment">/* 此任务自上cpu运行后至今占用了多少cpu嘀嗒数,</span><br><span class="hljs-comment"> * 也就是此任务执行了多久*/</span><br>   <span class="hljs-type">uint32_t</span> elapsed_ticks;<br><span class="hljs-comment">/* general_tag的作用是用于线程在一般的队列中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">general_tag</span>;</span>    <br><span class="hljs-comment">/* all_list_tag的作用是用于线程队列thread_all_list中的结点 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span> <span class="hljs-title">all_list_tag</span>;</span><br>   <span class="hljs-type">uint32_t</span>* pgdir;              <span class="hljs-comment">// 进程自己页表的虚拟地址</span><br>   <span class="hljs-type">uint32_t</span> stack_magic; <span class="hljs-comment">// 用这串数字做栈的边界标记,用于检测栈的溢出</span><br>&#125;;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_ready_list</span>;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_all_list</span>;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, thread_func function, <span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, <span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio)</span>;<br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio, thread_func function, <span class="hljs-type">void</span>* func_arg)</span>;<br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">running_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">schedule</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="threadthreadc修改"><a class="markdownIt-Anchor" href="#threadthreadc修改"></a> thread/thread.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_SIZE 4096</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">main_thread</span>;</span>    <span class="hljs-comment">// 主线程PCB</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_ready_list</span>;</span>    <span class="hljs-comment">// 就绪队列</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> <span class="hljs-title">thread_all_list</span>;</span>    <span class="hljs-comment">// 所有任务队列</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_elem</span>* <span class="hljs-title">thread_tag</span>;</span><span class="hljs-comment">// 用于保存队列中的线程结点</span><br><br><br><span class="hljs-comment">/* 获取当前线程pcb指针 */</span><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">running_thread</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">uint32_t</span> esp; <br>   <span class="hljs-keyword">asm</span> (<span class="hljs-string">&quot;mov %%esp, %0&quot;</span> : <span class="hljs-string">&quot;=g&quot;</span> (esp));<br>  <span class="hljs-comment">/* 取esp整数部分即pcb起始地址 */</span><br>   <span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> task_struct*)(esp &amp; <span class="hljs-number">0xfffff000</span>);<br>&#125;<br><br><span class="hljs-comment">/* 由kernel_thread去执行function(func_arg) */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">kernel_thread</span><span class="hljs-params">(thread_func* function, <span class="hljs-type">void</span>* func_arg)</span> &#123;<br><span class="hljs-comment">/* 执行function前要开中断,避免后面的时钟中断被屏蔽,而无法调度其它线程 */</span><br>   intr_enable();<br>   function(func_arg); <br>&#125;<br><br><br><span class="hljs-comment">/* 初始化线程栈thread_stack,将待执行的函数和参数放到thread_stack中相应的位置 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, thread_func function, <span class="hljs-type">void</span>* func_arg)</span> &#123;<br>   <span class="hljs-comment">/* 先预留中断使用栈的空间,可见thread.h中定义的结构 */</span><br>   pthread-&gt;self_kstack -= <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> intr_stack);<br><br>   <span class="hljs-comment">/* 再留出线程栈空间,可见thread.h中定义 */</span><br>   pthread-&gt;self_kstack -= <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> thread_stack);<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_stack</span>* <span class="hljs-title">kthread_stack</span> =</span> (<span class="hljs-keyword">struct</span> thread_stack*)pthread-&gt;self_kstack;<br>   kthread_stack-&gt;eip = kernel_thread;<br>   kthread_stack-&gt;function = function;<br>   kthread_stack-&gt;func_arg = func_arg;<br>   kthread_stack-&gt;ebp = kthread_stack-&gt;ebx = kthread_stack-&gt;esi = kthread_stack-&gt;edi = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 初始化线程基本信息 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct* pthread, <span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio)</span> &#123;<br>   <span class="hljs-built_in">memset</span>(pthread, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*pthread));<br>   <span class="hljs-built_in">strcpy</span>(pthread-&gt;name, name);<br><br>   <span class="hljs-keyword">if</span> (pthread == main_thread) &#123;<br><span class="hljs-comment">/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */</span><br>      pthread-&gt;status = TASK_RUNNING;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      pthread-&gt;status = TASK_READY;<br>   &#125;<br><br><span class="hljs-comment">/* self_kstack是线程自己在内核态下使用的栈顶地址 */</span><br>   pthread-&gt;self_kstack = (<span class="hljs-type">uint32_t</span>*)((<span class="hljs-type">uint32_t</span>)pthread + PG_SIZE);<br>   pthread-&gt;priority = prio;<br>   pthread-&gt;ticks = prio;<br>   pthread-&gt;elapsed_ticks = <span class="hljs-number">0</span>;<br>   pthread-&gt;pgdir = <span class="hljs-literal">NULL</span>;<br>   pthread-&gt;stack_magic = <span class="hljs-number">0x19870916</span>;  <span class="hljs-comment">// 自定义的魔数</span><br>&#125;<br><br><br><span class="hljs-comment">/* 创建一优先级为prio的线程,线程名为name,线程所执行的函数是function(func_arg) */</span><br><span class="hljs-keyword">struct</span> task_struct* <span class="hljs-title function_">thread_start</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> prio, thread_func function, <span class="hljs-type">void</span>* func_arg)</span> &#123;<br><span class="hljs-comment">/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">thread</span> =</span> get_kernel_pages(<span class="hljs-number">1</span>);<br>   init_thread(thread, name, prio);<br>   thread_create(thread, function, func_arg);<br><br>   <span class="hljs-comment">/* 确保之前不在队列中 */</span><br>   ASSERT(!elem_find(&amp;thread_ready_list, &amp;thread-&gt;general_tag));<br>   <span class="hljs-comment">/* 加入就绪线程队列 */</span><br>   list_append(&amp;thread_ready_list, &amp;thread-&gt;general_tag);<br><br>   <span class="hljs-comment">/* 确保之前不在队列中 */</span><br>   ASSERT(!elem_find(&amp;thread_all_list, &amp;thread-&gt;all_list_tag));<br>   <span class="hljs-comment">/* 加入全部线程队列 */</span><br>   list_append(&amp;thread_all_list, &amp;thread-&gt;all_list_tag);<br><br>   <span class="hljs-keyword">return</span> thread;<br>&#125;<br><br><span class="hljs-comment">/* 将kernel中的main函数完善为主线程 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_main_thread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><span class="hljs-comment">/* 因为main线程早已运行,咱们在loader.S中进入内核时的mov esp,0xc009f000,</span><br><span class="hljs-comment">就是为其预留了tcb,地址为0xc009e000,因此不需要通过get_kernel_page另分配一页*/</span><br>   main_thread = running_thread();<br>   init_thread(main_thread, <span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-number">31</span>);<br><br><span class="hljs-comment">/* main函数是当前线程,当前线程不在thread_ready_list中,</span><br><span class="hljs-comment"> * 所以只将其加在thread_all_list中. */</span><br>   ASSERT(!elem_find(&amp;thread_all_list, &amp;main_thread-&gt;all_list_tag));<br>   list_append(&amp;thread_all_list, &amp;main_thread-&gt;all_list_tag);<br>&#125;<br><br><span class="hljs-comment">/* 实现任务调度 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">schedule</span><span class="hljs-params">()</span> &#123;<br>   ASSERT(intr_get_status() == INTR_OFF);<br><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur</span> =</span> running_thread(); <br>   <span class="hljs-keyword">if</span> (cur-&gt;status == TASK_RUNNING) &#123; <span class="hljs-comment">// 若此线程只是cpu时间片到了,将其加入到就绪队列尾</span><br>      ASSERT(!elem_find(&amp;thread_ready_list, &amp;cur-&gt;general_tag));<br>      list_append(&amp;thread_ready_list, &amp;cur-&gt;general_tag);<br>      cur-&gt;ticks = cur-&gt;priority;     <span class="hljs-comment">// 重新将当前线程的ticks再重置为其priority;</span><br>      cur-&gt;status = TASK_READY;<br>   &#125; <span class="hljs-keyword">else</span> &#123; <br>      <span class="hljs-comment">/* 若此线程需要某事件发生后才能继续上cpu运行,</span><br><span class="hljs-comment">      不需要将其加入队列,因为当前线程不在就绪队列中。*/</span><br>   &#125;<br><br>  <br><br>   ASSERT(!list_empty(&amp;thread_ready_list));<br>   thread_tag = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// thread_tag清空</span><br><span class="hljs-comment">/* 将thread_ready_list队列中的第一个就绪线程弹出,准备将其调度上cpu. */</span><br>   thread_tag = list_pop(&amp;thread_ready_list);   <br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">next</span> =</span> elem2entry(<span class="hljs-keyword">struct</span> task_struct, general_tag, thread_tag);<br>   next-&gt;status = TASK_RUNNING;<br><br><br>   switch_to(cur, next);<br>&#125;<br><span class="hljs-comment">/* 初始化线程环境 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;thread_init start\n&quot;</span>);<br><br>   list_init(&amp;thread_ready_list);<br>   list_init(&amp;thread_all_list);<br><br><span class="hljs-comment">/* 将当前main函数创建为线程 */</span><br>   make_main_thread();<br><br>   put_str(<span class="hljs-string">&quot;thread_init done\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelinterruptc增加"><a class="markdownIt-Anchor" href="#kernelinterruptc增加"></a> kernel/interrupt.c增加</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">register_handler</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> vector_no, intr_handler function)</span>;<br><br><span class="hljs-comment">/* 在中断处理程序数组第vector_no个元素中注册安装中断处理程序function */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">register_handler</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> vector_no, intr_handler function)</span> &#123;<br><span class="hljs-comment">/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,</span><br><span class="hljs-comment"> * 见kernel/kernel.S的call [idt_table + %1*4] */</span><br>   idt_table[vector_no] = function; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="devicetimerc修改"><a class="markdownIt-Anchor" href="#devicetimerc修改"></a> device/timer.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;timer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;io.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IRQ0_FREQUENCY   100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INPUT_FREQUENCY   1193180</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COUNTER0_VALUE   INPUT_FREQUENCY / IRQ0_FREQUENCY</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONTRER0_PORT   0x40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COUNTER0_NO   0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COUNTER_MODE   2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> READ_WRITE_LATCH   3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIT_CONTROL_PORT   0x43</span><br><br><br><span class="hljs-type">uint32_t</span> ticks;          <span class="hljs-comment">// ticks是内核自中断开启以来总共的嘀嗒数</span><br><br><span class="hljs-comment">/* 把操作的计数器counter_no、读写锁属性rwl、计数器模式counter_mode写入模式控制寄存器并赋予初始值counter_value */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">frequency_set</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> counter_port, \</span><br><span class="hljs-params">  <span class="hljs-type">uint8_t</span> counter_no, \</span><br><span class="hljs-params">  <span class="hljs-type">uint8_t</span> rwl, \</span><br><span class="hljs-params">  <span class="hljs-type">uint8_t</span> counter_mode, \</span><br><span class="hljs-params">  <span class="hljs-type">uint16_t</span> counter_value)</span> &#123;<br><span class="hljs-comment">/* 往控制字寄存器端口0x43中写入控制字 */</span><br>   outb(PIT_CONTROL_PORT, (<span class="hljs-type">uint8_t</span>)(counter_no &lt;&lt; <span class="hljs-number">6</span> | rwl &lt;&lt; <span class="hljs-number">4</span> | counter_mode &lt;&lt; <span class="hljs-number">1</span>));<br><span class="hljs-comment">/* 先写入counter_value的低8位 */</span><br>   outb(counter_port, (<span class="hljs-type">uint8_t</span>)counter_value);<br><span class="hljs-comment">/* 再写入counter_value的高8位 */</span><br>   outb(counter_port, (<span class="hljs-type">uint8_t</span>)counter_value &gt;&gt; <span class="hljs-number">8</span>);<br>&#125;<br><br><span class="hljs-comment">/* 时钟的中断处理函数 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">intr_timer_handler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>* <span class="hljs-title">cur_thread</span> =</span> running_thread();<br><br>   ASSERT(cur_thread-&gt;stack_magic == <span class="hljs-number">0x19870916</span>);         <span class="hljs-comment">// 检查栈是否溢出</span><br><br>   cur_thread-&gt;elapsed_ticks++;  <span class="hljs-comment">// 记录此线程占用的cpu时间嘀</span><br>   ticks++;  <span class="hljs-comment">//从内核第一次处理时间中断后开始至今的滴哒数,内核态和用户态总共的嘀哒数</span><br><br>   <span class="hljs-keyword">if</span> (cur_thread-&gt;ticks == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 若进程时间片用完就开始调度新的进程上cpu</span><br>      schedule(); <br>   &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 将当前进程的时间片-1</span><br>      cur_thread-&gt;ticks--;<br>   &#125;<br>&#125;<br><br><br><br><span class="hljs-comment">/* 初始化PIT8253 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">timer_init</span><span class="hljs-params">()</span> &#123;<br>   put_str(<span class="hljs-string">&quot;timer_init start\n&quot;</span>);<br>   <span class="hljs-comment">/* 设置8253的定时周期,也就是发中断的周期 */</span><br>   frequency_set(CONTRER0_PORT, COUNTER0_NO, READ_WRITE_LATCH, COUNTER_MODE, COUNTER0_VALUE);<br>   register_handler(<span class="hljs-number">0x20</span>, intr_timer_handler);<br>   put_str(<span class="hljs-string">&quot;timer_init done\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelinitc创建"><a class="markdownIt-Anchor" href="#kernelinitc创建"></a> kernel/init.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/timer.h&quot;</span></span><br><br><br><span class="hljs-comment">/*负责初始化所有模块 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_all</span><span class="hljs-params">()</span> &#123;<br>   put_str(<span class="hljs-string">&quot;init_all\n&quot;</span>);<br>   idt_init();     <span class="hljs-comment">// 初始化中断</span><br><br>   mem_init();     <span class="hljs-comment">// 初始化内存管理系统</span><br> thread_init();    <span class="hljs-comment">// 初始化线程相关结构</span><br>timer_init();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="threadswitchs创建"><a class="markdownIt-Anchor" href="#threadswitchs创建"></a> thread/switch.S创建</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">[<span class="hljs-meta">bits</span> <span class="hljs-number">32</span>]<br><span class="hljs-meta">section</span> .text<br><span class="hljs-meta">global</span> switch_to<br><span class="hljs-symbol">switch_to:</span><br>   <span class="hljs-comment">;栈中此处是返回地址       </span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">esi</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">edi</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">ebx</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">ebp</span><br><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">esp</span> + <span class="hljs-number">20</span>] <span class="hljs-comment">; 得到栈中的参数cur, cur = [esp+20]</span><br>   <span class="hljs-keyword">mov</span> [<span class="hljs-built_in">eax</span>], <span class="hljs-built_in">esp</span>                <span class="hljs-comment">; 保存栈顶指针esp. task_struct的self_kstack字段,</span><br> <span class="hljs-comment">; self_kstack在task_struct中的偏移为0,</span><br> <span class="hljs-comment">; 所以直接往thread开头处存4字节便可。</span><br><span class="hljs-comment">;------------------  以上是备份当前线程的环境，下面是恢复下一个线程的环境  ----------------</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">esp</span> + <span class="hljs-number">24</span>] <span class="hljs-comment">; 得到栈中的参数next, next = [esp+24]</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">esp</span>, [<span class="hljs-built_in">eax</span>] <span class="hljs-comment">; pcb的第一个成员是self_kstack成员,用来记录0级栈顶指针,</span><br> <span class="hljs-comment">; 用来上cpu时恢复0级栈,0级栈中保存了进程或线程所有信息,包括3级栈指针</span><br>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ebp</span><br>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ebx</span><br>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">edi</span><br>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">esi</span><br>   <span class="hljs-keyword">ret</span> <span class="hljs-comment">; 返回到上面switch_to下面的那句注释的返回地址,</span><br> <span class="hljs-comment">; 未由中断进入,第一次执行时会返回到kernel_thread</span><br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-2"><a class="markdownIt-Anchor" href="#kernelmainc修改-2"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;thread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* )</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br>thread_start(<span class="hljs-string">&quot;k_thread_a&quot;</span>, <span class="hljs-number">31</span>, k_thread_a, <span class="hljs-string">&quot;argA &quot;</span>);<br>thread_start(<span class="hljs-string">&quot;k_thread_b&quot;</span>, <span class="hljs-number">8</span>, k_thread_b, <span class="hljs-string">&quot;argB &quot;</span>);<br>   intr_enable();<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>put_str(<span class="hljs-string">&quot;Main &quot;</span>);<br>&#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_a</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span>&#123;<br><span class="hljs-type">char</span>* para = arg;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>put_str(para);<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">k_thread_b</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span>&#123;<br><span class="hljs-type">char</span>* para = arg;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>put_str(para);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实验结果"><a class="markdownIt-Anchor" href="#实验结果"></a> 实验结果</h3><p><img src="/img/os/os9.2.png" alt="图为bochs运行界面" /></p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>做完这章愈发感觉自己的知识还很浅薄，在做完这剩下的几章之后，等过几个月回过头来再重新过一遍，这本书真心不错。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第八章 浅尝makefile 实现assert和内存管理系统</title>
    <link href="/2022/07/23/os(8)/"/>
    <url>/2022/07/23/os(8)/</url>
    
    <content type="html"><![CDATA[<h1 id="第八章-浅尝makefile-实现assert和内存管理系统"><a class="markdownIt-Anchor" href="#第八章-浅尝makefile-实现assert和内存管理系统"></a> 第八章 浅尝makefile 实现assert和内存管理系统</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>已经22日了，距离本月结束只剩下9天的时间，奈何又要迎来连续四天的数学建模考试。压力已经伴随我很长时间了，回过头想想，其实压力是来源于现状跟不上内心的欲望，终归还是能力不足以让我从容摆平眼前的障碍。</p><h2 id="实现assert断言"><a class="markdownIt-Anchor" href="#实现assert断言"></a> 实现assert断言</h2><h3 id="kernelinterruptc新增"><a class="markdownIt-Anchor" href="#kernelinterruptc新增"></a> kernel/interrupt.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> EFLAGS_IF   0x00000200       <span class="hljs-comment">// eflags寄存器中的if位为1</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_EFLAGS(EFLAG_VAR) asm volatile(<span class="hljs-string">&quot;pushfl; popl %0&quot;</span> : <span class="hljs-string">&quot;=g&quot;</span> (EFLAG_VAR))</span><br><br><br><span class="hljs-comment">/* 开中断并返回开中断前的状态*/</span><br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_enable</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span>;</span><br>   <span class="hljs-keyword">if</span> (INTR_ON == intr_get_status()) &#123;<br>      old_status = INTR_ON;<br>      <span class="hljs-keyword">return</span> old_status;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      old_status = INTR_OFF;<br>      <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;sti&quot;</span>)</span>; <span class="hljs-comment">// 开中断,sti指令将IF位置1</span><br>      <span class="hljs-keyword">return</span> old_status;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/* 关中断,并且返回关中断前的状态 */</span><br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_disable</span><span class="hljs-params">()</span> &#123;     <br>   <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> <span class="hljs-title">old_status</span>;</span><br>   <span class="hljs-keyword">if</span> (INTR_ON == intr_get_status()) &#123;<br>      old_status = INTR_ON;<br>      <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;cli&quot;</span> : : : <span class="hljs-string">&quot;memory&quot;</span>)</span>; <span class="hljs-comment">// 关中断,cli指令将IF位置0</span><br>      <span class="hljs-keyword">return</span> old_status;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      old_status = INTR_OFF;<br>      <span class="hljs-keyword">return</span> old_status;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/* 将中断状态设置为status */</span><br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_set_status</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> intr_status status)</span> &#123;<br>   <span class="hljs-keyword">return</span> status &amp; INTR_ON ? intr_enable() : intr_disable();<br>&#125;<br><br><span class="hljs-comment">/* 获取当前中断状态 */</span><br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_get_status</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">uint32_t</span> eflags = <span class="hljs-number">0</span>; <br>   GET_EFLAGS(eflags);<br>   <span class="hljs-keyword">return</span> (EFLAGS_IF &amp; eflags) ? INTR_ON : INTR_OFF;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelinterrupth修改"><a class="markdownIt-Anchor" href="#kernelinterrupth修改"></a> kernel/interrupt.h修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __KERNEL_INTERRUPT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __KERNEL_INTERRUPT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span>* intr_handler;<br><span class="hljs-type">void</span> <span class="hljs-title function_">idt_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">/* 定义中断的两种状态:</span><br><span class="hljs-comment"> * INTR_OFF值为0,表示关中断,</span><br><span class="hljs-comment"> * INTR_ON值为1,表示开中断 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">intr_status</span> &#123;</span> <span class="hljs-comment">// 中断状态</span><br>    INTR_OFF, <span class="hljs-comment">// 中断关闭</span><br>    INTR_ON         <span class="hljs-comment">// 中断打开</span><br>&#125;;<br><br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_get_status</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_set_status</span> <span class="hljs-params">(<span class="hljs-keyword">enum</span> intr_status)</span>;<br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_enable</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-keyword">enum</span> intr_status <span class="hljs-title function_">intr_disable</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">register_handler</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> vector_no, intr_handler function)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="kerneldebugh创建"><a class="markdownIt-Anchor" href="#kerneldebugh创建"></a> kernel/debug.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __KERNEL_DEBUG_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __KERNEL_DEBUG_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">panic_spin</span><span class="hljs-params">(<span class="hljs-type">char</span>* filename, <span class="hljs-type">int</span> line, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* func, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* condition)</span>;<br><br><span class="hljs-comment">/***************************  __VA_ARGS__  *******************************</span><br><span class="hljs-comment"> * __VA_ARGS__ 是预处理器所支持的专用标识符。</span><br><span class="hljs-comment"> * 代表所有与省略号相对应的参数. </span><br><span class="hljs-comment"> * &quot;...&quot;表示定义的宏其参数可变.*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PANIC(...) panic_spin (__FILE__, __LINE__, __func__, __VA_ARGS__)</span><br> <span class="hljs-comment">/***********************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> NDEBUG</span><br>   <span class="hljs-meta">#<span class="hljs-keyword">define</span> ASSERT(CONDITION) ((void)0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>   <span class="hljs-meta">#<span class="hljs-keyword">define</span> ASSERT(CONDITION)                                      \</span><br><span class="hljs-meta">      <span class="hljs-keyword">if</span> (CONDITION) &#123;&#125; <span class="hljs-keyword">else</span> &#123;                                    \</span><br><span class="hljs-meta">  <span class="hljs-comment">/* 符号#让编译器将宏的参数转化为字符串字面量 */</span>  \</span><br><span class="hljs-meta"> PANIC(#CONDITION);                                       \</span><br><span class="hljs-meta">      &#125;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/*__NDEBUG */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/*__KERNEL_DEBUG_H*/</span></span><br></code></pre></td></tr></table></figure><h3 id="kerneldebugc创建"><a class="markdownIt-Anchor" href="#kerneldebugc创建"></a> kernel/debug.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><br><span class="hljs-comment">/* 打印文件名,行号,函数名,条件并使程序悬停 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">panic_spin</span><span class="hljs-params">(<span class="hljs-type">char</span>* filename,       \</span><br><span class="hljs-params">        <span class="hljs-type">int</span> line,       \</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* func,      \</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* condition)</span> \<br>&#123;<br>   intr_disable();<span class="hljs-comment">// 因为有时候会单独调用panic_spin,所以在此处关中断。</span><br>   put_str(<span class="hljs-string">&quot;\n\n\n!!!!! error !!!!!\n&quot;</span>);<br>   put_str(<span class="hljs-string">&quot;filename:&quot;</span>);put_str(filename);put_str(<span class="hljs-string">&quot;\n&quot;</span>);<br>   put_str(<span class="hljs-string">&quot;line:0x&quot;</span>);put_int(line);put_str(<span class="hljs-string">&quot;\n&quot;</span>);<br>   put_str(<span class="hljs-string">&quot;function:&quot;</span>);put_str((<span class="hljs-type">char</span>*)func);put_str(<span class="hljs-string">&quot;\n&quot;</span>);<br>   put_str(<span class="hljs-string">&quot;condition:&quot;</span>);put_str((<span class="hljs-type">char</span>*)condition);put_str(<span class="hljs-string">&quot;\n&quot;</span>);<br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改"><a class="markdownIt-Anchor" href="#kernelmainc修改"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br><span class="hljs-comment">//asm volatile(&quot;sti&quot;); //临时开中断</span><br>    ASSERT(<span class="hljs-number">1</span>==<span class="hljs-number">2</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="makefile创建"><a class="markdownIt-Anchor" href="#makefile创建"></a> makefile创建</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs clean">BUILD_DIR = ./build<br>ENTRY_POINT = <span class="hljs-number">0xc0001500</span><br>AS = nasm<br>CC = gcc<br>LD = ld<br>LIB = -I lib/ -I lib/kernel/ -I lib/user/ -I kernel/ -I device/ <br>ASFLAGS = -f elf<br>CFLAGS = -Wall -m32 -fno-stack-protector $(LIB) -c -fno-builtin -W -Wstrict-prototypes -Wmissing-prototypes<br>LDFLAGS =  -m elf_i386 -Ttext $(ENTRY_POINT) -e main -Map $(BUILD_DIR)/kernel.map<br>OBJS = $(BUILD_DIR)/main.o $(BUILD_DIR)/init.o $(BUILD_DIR)/interrupt.o \<br>      $(BUILD_DIR)/timer.o $(BUILD_DIR)/kernel.o $(BUILD_DIR)/print.o \<br>      $(BUILD_DIR)/debug.o <br>##############     c代码编译     ###############<br>$(BUILD_DIR)/main.o: kernel/main.c lib/kernel/print.h \<br>        lib/kernel/stdint.h kernel/init.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/init.o: kernel/init.c kernel/init.h lib/kernel/print.h \<br>        lib/kernel/stdint.h kernel/interrupt.h device/timer.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/interrupt.o: kernel/interrupt.c kernel/interrupt.h \<br>        lib/kernel/stdint.h kernel/global.h lib/kernel/io.h lib/kernel/print.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/timer.o: device/timer.c device/timer.h lib/kernel/stdint.h \<br>        lib/kernel/io.h lib/kernel/print.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/debug.o: kernel/debug.c kernel/debug.h \<br>        lib/kernel/print.h lib/kernel/stdint.h kernel/interrupt.h<br>$(CC) $(CFLAGS) $&lt; -o $@<br><br><br>##############    汇编代码编译    ###############<br>$(BUILD_DIR)/kernel.o: kernel/kernel.S<br>$(AS) $(ASFLAGS) $&lt; -o $@<br><br>$(BUILD_DIR)/print.o: lib/kernel/print.S<br>$(AS) $(ASFLAGS) $&lt; -o $@<br><br>##############    链接所有目标文件    #############<br>$(BUILD_DIR)/kernel.bin: $(OBJS)<br>$(LD) $(LDFLAGS) $^ -o $@<br><br>.PHONY : mk_dir hd clean all<br><br>mk_dir:<br><span class="hljs-keyword">if</span> [ ! -d $(BUILD_DIR) ]; then mkdir $(BUILD_DIR); fi<br><br>hd:<br>dd <span class="hljs-keyword">if</span>=$(BUILD_DIR)/kernel.bin \<br>           <span class="hljs-keyword">of</span>=hd60M.img \<br>           bs=<span class="hljs-number">512</span> count=<span class="hljs-number">200</span> seek=<span class="hljs-number">9</span> conv=notrunc<br><br>clean:<br>cd $(BUILD_DIR) &amp;&amp; rm -f  .<span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">build: $(BUILD_DIR)/kernel.bin</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">all: mk_dir build hd</span><br></code></pre></td></tr></table></figure><p>注意在写makefile时修改好路径，以后就直接一句make all就编译链接完了。</p><h2 id="实现字符串操作函数"><a class="markdownIt-Anchor" href="#实现字符串操作函数"></a> 实现字符串操作函数</h2><h3 id="libstringh创建"><a class="markdownIt-Anchor" href="#libstringh创建"></a> lib/string.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LIB_STRING_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LIB_STRING_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NULL ((void*)0)</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">memset</span><span class="hljs-params">(<span class="hljs-type">void</span>* dst_, <span class="hljs-type">uint8_t</span> value, <span class="hljs-type">uint32_t</span> size)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">memcpy</span><span class="hljs-params">(<span class="hljs-type">void</span>* dst_, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* src_, <span class="hljs-type">uint32_t</span> size)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">memcmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a_, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b_, <span class="hljs-type">uint32_t</span> size)</span>;<br><span class="hljs-type">char</span>* <span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span>* dst_, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* src_)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str)</span>;<br><span class="hljs-type">int8_t</span> <span class="hljs-title function_">strcmp</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *b)</span>; <br><span class="hljs-type">char</span>* <span class="hljs-title function_">strchr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-built_in">string</span>, <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> ch)</span>;<br><span class="hljs-type">char</span>* <span class="hljs-title function_">strrchr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-built_in">string</span>, <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> ch)</span>;<br><span class="hljs-type">char</span>* <span class="hljs-title function_">strcat</span><span class="hljs-params">(<span class="hljs-type">char</span>* dst_, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* src_)</span>;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">strchrs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* filename, <span class="hljs-type">uint8_t</span> ch)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="libstringc创建"><a class="markdownIt-Anchor" href="#libstringc创建"></a> lib/string.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><br><span class="hljs-comment">/* 将dst_起始的size个字节置为value */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">memset</span><span class="hljs-params">(<span class="hljs-type">void</span>* dst_, <span class="hljs-type">uint8_t</span> value, <span class="hljs-type">uint32_t</span> size)</span> &#123;<br>   ASSERT(dst_ != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">uint8_t</span>* dst = (<span class="hljs-type">uint8_t</span>*)dst_;<br>   <span class="hljs-keyword">while</span> (size-- &gt; <span class="hljs-number">0</span>)<br>      *dst++ = value;<br>&#125;<br><br><span class="hljs-comment">/* 将src_起始的size个字节复制到dst_ */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">memcpy</span><span class="hljs-params">(<span class="hljs-type">void</span>* dst_, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* src_, <span class="hljs-type">uint32_t</span> size)</span> &#123;<br>   ASSERT(dst_ != <span class="hljs-literal">NULL</span> &amp;&amp; src_ != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">uint8_t</span>* dst = dst_;<br>   <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>* src = src_;<br>   <span class="hljs-keyword">while</span> (size-- &gt; <span class="hljs-number">0</span>)<br>      *dst++ = *src++;<br>&#125;<br><br><span class="hljs-comment">/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">memcmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a_, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b_, <span class="hljs-type">uint32_t</span> size)</span> &#123;<br>   <span class="hljs-type">const</span> <span class="hljs-type">char</span>* a = a_;<br>   <span class="hljs-type">const</span> <span class="hljs-type">char</span>* b = b_;<br>   ASSERT(a != <span class="hljs-literal">NULL</span> || b != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-keyword">while</span> (size-- &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span>(*a != *b) &#123;<br> <span class="hljs-keyword">return</span> *a &gt; *b ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>; <br>      &#125;<br>      a++;<br>      b++;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 将字符串从src_复制到dst_ */</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span>* dst_, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* src_)</span> &#123;<br>   ASSERT(dst_ != <span class="hljs-literal">NULL</span> &amp;&amp; src_ != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">char</span>* r = dst_;       <span class="hljs-comment">// 用来返回目的字符串起始地址</span><br>   <span class="hljs-keyword">while</span>((*dst_++ = *src_++));<br>   <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-comment">/* 返回字符串长度 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str)</span> &#123;<br>   ASSERT(str != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">const</span> <span class="hljs-type">char</span>* p = str;<br>   <span class="hljs-keyword">while</span>(*p++);<br>   <span class="hljs-keyword">return</span> (p - str - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */</span><br><span class="hljs-type">int8_t</span> <span class="hljs-title function_">strcmp</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* b)</span> &#123;<br>   ASSERT(a != <span class="hljs-literal">NULL</span> &amp;&amp; b != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-keyword">while</span> (*a != <span class="hljs-number">0</span> &amp;&amp; *a == *b) &#123;<br>      a++;<br>      b++;<br>   &#125;<br><span class="hljs-comment">/* 如果*a小于*b就返回-1,否则就属于*a大于等于*b的情况。在后面的布尔表达式&quot;*a &gt; *b&quot;中,</span><br><span class="hljs-comment"> * 若*a大于*b,表达式就等于1,否则就表达式不成立,也就是布尔值为0,恰恰表示*a等于*b */</span><br>   <span class="hljs-keyword">return</span> *a &lt; *b ? <span class="hljs-number">-1</span> : *a &gt; *b;<br>&#125;<br><br><span class="hljs-comment">/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">strchr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str, <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> ch)</span> &#123;<br>   ASSERT(str != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-keyword">while</span> (*str != <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (*str == ch) &#123;<br> <span class="hljs-keyword">return</span> (<span class="hljs-type">char</span>*)str;    <span class="hljs-comment">// 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.</span><br>      &#125;<br>      str++;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">strrchr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str, <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> ch)</span> &#123;<br>   ASSERT(str != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">const</span> <span class="hljs-type">char</span>* last_char = <span class="hljs-literal">NULL</span>;<br>   <span class="hljs-comment">/* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/</span><br>   <span class="hljs-keyword">while</span> (*str != <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (*str == ch) &#123;<br> last_char = str;<br>      &#125;<br>      str++;<br>   &#125;<br>   <span class="hljs-keyword">return</span> (<span class="hljs-type">char</span>*)last_char;<br>&#125;<br><br><span class="hljs-comment">/* 将字符串src_拼接到dst_后,将回拼接的串地址 */</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">strcat</span><span class="hljs-params">(<span class="hljs-type">char</span>* dst_, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* src_)</span> &#123;<br>   ASSERT(dst_ != <span class="hljs-literal">NULL</span> &amp;&amp; src_ != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">char</span>* str = dst_;<br>   <span class="hljs-keyword">while</span> (*str++);<br>   --str;      <span class="hljs-comment">// 别看错了，--str是独立的一句，并不是while的循环体</span><br>   <span class="hljs-keyword">while</span>((*str++ = *src_++)); <span class="hljs-comment">// 当*str被赋值为0时,此时表达式不成立,正好添加了字符串结尾的0.</span><br>   <span class="hljs-keyword">return</span> dst_;<br>&#125;<br><br><span class="hljs-comment">/* 在字符串str中查找指定字符ch出现的次数 */</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">strchrs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str, <span class="hljs-type">uint8_t</span> ch)</span> &#123;<br>   ASSERT(str != <span class="hljs-literal">NULL</span>);<br>   <span class="hljs-type">uint32_t</span> ch_cnt = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">const</span> <span class="hljs-type">char</span>* p = str;<br>   <span class="hljs-keyword">while</span>(*p != <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (*p == ch) &#123;<br> ch_cnt++;<br>      &#125;<br>      p++;<br>   &#125;<br>   <span class="hljs-keyword">return</span> ch_cnt;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="位图bitmap及其函数实现"><a class="markdownIt-Anchor" href="#位图bitmap及其函数实现"></a> 位图bitmap及其函数实现</h2><h3 id="libkernelbitmaph创建"><a class="markdownIt-Anchor" href="#libkernelbitmaph创建"></a> lib/kernel/bitmap.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LIB_KERNEL_BITMAP_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LIB_KERNEL_BITMAP_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BITMAP_MASK 1</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bitmap</span> &#123;</span><br>   <span class="hljs-type">uint32_t</span> btmp_bytes_len;<br><span class="hljs-comment">/* 在遍历位图时,整体上以字节为单位,细节上是以位为单位,所以此处位图的指针必须是单字节 */</span><br>   <span class="hljs-type">uint8_t</span>* bits;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bitmap_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bitmap* btmp)</span>;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">bitmap_scan_test</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bitmap* btmp, <span class="hljs-type">uint32_t</span> bit_idx)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">bitmap_scan</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bitmap* btmp, <span class="hljs-type">uint32_t</span> cnt)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">bitmap_set</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bitmap* btmp, <span class="hljs-type">uint32_t</span> bit_idx, <span class="hljs-type">int8_t</span> value)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="libkernelbitmapc创建"><a class="markdownIt-Anchor" href="#libkernelbitmapc创建"></a> lib/kernel/bitmap.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><br><span class="hljs-comment">/* 将位图btmp初始化 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bitmap_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bitmap* btmp)</span> &#123;<br>   <span class="hljs-built_in">memset</span>(btmp-&gt;bits, <span class="hljs-number">0</span>, btmp-&gt;btmp_bytes_len);   <br>&#125;<br><br><span class="hljs-comment">/* 判断bit_idx位是否为1,若为1则返回true，否则返回false */</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">bitmap_scan_test</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bitmap* btmp, <span class="hljs-type">uint32_t</span> bit_idx)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> byte_idx = bit_idx / <span class="hljs-number">8</span>;    <span class="hljs-comment">// 向下取整用于索引数组下标</span><br>   <span class="hljs-type">uint32_t</span> bit_odd  = bit_idx % <span class="hljs-number">8</span>;    <span class="hljs-comment">// 取余用于索引数组内的位</span><br>   <span class="hljs-keyword">return</span> (btmp-&gt;bits[byte_idx] &amp; (BITMAP_MASK &lt;&lt; bit_odd));<br>&#125;<br><br><span class="hljs-comment">/* 在位图中申请连续cnt个位,返回其起始位下标 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">bitmap_scan</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bitmap* btmp, <span class="hljs-type">uint32_t</span> cnt)</span> &#123;<br>   <span class="hljs-type">uint32_t</span> idx_byte = <span class="hljs-number">0</span>; <span class="hljs-comment">// 用于记录空闲位所在的字节</span><br><span class="hljs-comment">/* 先逐字节比较,蛮力法 */</span><br>   <span class="hljs-keyword">while</span> (( <span class="hljs-number">0xff</span> == btmp-&gt;bits[idx_byte]) &amp;&amp; (idx_byte &lt; btmp-&gt;btmp_bytes_len)) &#123;<br><span class="hljs-comment">/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */</span><br>      idx_byte++;<br>   &#125;<br><br>   ASSERT(idx_byte &lt; btmp-&gt;btmp_bytes_len);<br>   <span class="hljs-keyword">if</span> (idx_byte == btmp-&gt;btmp_bytes_len) &#123;  <span class="hljs-comment">// 若该内存池找不到可用空间</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br><br> <span class="hljs-comment">/* 若在位图数组范围内的某字节内找到了空闲位，</span><br><span class="hljs-comment">  * 在该字节内逐位比对,返回空闲位的索引。*/</span><br>   <span class="hljs-type">int</span> idx_bit = <span class="hljs-number">0</span>;<br> <span class="hljs-comment">/* 和btmp-&gt;bits[idx_byte]这个字节逐位对比 */</span><br>   <span class="hljs-keyword">while</span> ((<span class="hljs-type">uint8_t</span>)(BITMAP_MASK &lt;&lt; idx_bit) &amp; btmp-&gt;bits[idx_byte]) &#123; <br> idx_bit++;<br>   &#125;<br> <br>   <span class="hljs-type">int</span> bit_idx_start = idx_byte * <span class="hljs-number">8</span> + idx_bit;    <span class="hljs-comment">// 空闲位在位图内的下标</span><br>   <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> bit_idx_start;<br>   &#125;<br><br>   <span class="hljs-type">uint32_t</span> bit_left = (btmp-&gt;btmp_bytes_len * <span class="hljs-number">8</span> - bit_idx_start - <span class="hljs-number">1</span>);   <span class="hljs-comment">// 记录还有多少位可以判断（原来无减一）</span><br>   <span class="hljs-type">uint32_t</span> next_bit = bit_idx_start + <span class="hljs-number">1</span>;<br>   <span class="hljs-type">uint32_t</span> count = <span class="hljs-number">1</span>;      <span class="hljs-comment">// 用于记录找到的空闲位的个数</span><br><br>   bit_idx_start = <span class="hljs-number">-1</span>;      <span class="hljs-comment">// 先将其置为-1,若找不到连续的位就直接返回</span><br>   <span class="hljs-keyword">while</span> (bit_left-- &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!(bitmap_scan_test(btmp, next_bit))) &#123; <span class="hljs-comment">// 若next_bit为0</span><br> count++;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br> count = <span class="hljs-number">0</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (count == cnt) &#123;    <span class="hljs-comment">// 若找到连续的cnt个空位</span><br> bit_idx_start = next_bit - cnt + <span class="hljs-number">1</span>;<br> <span class="hljs-keyword">break</span>;<br>      &#125;<br>      next_bit++;          <br>   &#125;<br>   <span class="hljs-keyword">return</span> bit_idx_start;<br>&#125;<br><br><span class="hljs-comment">/* 将位图btmp的bit_idx位设置为value */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bitmap_set</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bitmap* btmp, <span class="hljs-type">uint32_t</span> bit_idx, <span class="hljs-type">int8_t</span> value)</span> &#123;<br>   ASSERT((value == <span class="hljs-number">0</span>) || (value == <span class="hljs-number">1</span>));<br>   <span class="hljs-type">uint32_t</span> byte_idx = bit_idx / <span class="hljs-number">8</span>;    <span class="hljs-comment">// 向下取整用于索引数组下标</span><br>   <span class="hljs-type">uint32_t</span> bit_odd  = bit_idx % <span class="hljs-number">8</span>;    <span class="hljs-comment">// 取余用于索引数组内的位</span><br><br><span class="hljs-comment">/* 一般都会用个0x1这样的数对字节中的位操作,</span><br><span class="hljs-comment"> * 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/</span><br>   <span class="hljs-keyword">if</span> (value) &#123;      <span class="hljs-comment">// 如果value为1</span><br>      btmp-&gt;bits[byte_idx] |= (BITMAP_MASK &lt;&lt; bit_odd);<br>   &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-comment">// 若为0</span><br>      btmp-&gt;bits[byte_idx] &amp;= ~(BITMAP_MASK &lt;&lt; bit_odd);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内存管理系统"><a class="markdownIt-Anchor" href="#内存管理系统"></a> 内存管理系统</h2><p>通过分页实验已经很清楚，虚拟地址——实地址的映射规则依赖的是页表。对于所有进程和内核来说，都有自己独立的虚拟内存池，独立的页表。这就是为什么每个进程都有自己的独立的4GB，因为即使两个进程访问同一个虚拟地址，不同的页表会得到不同的物理地址映射。</p><h3 id="kernelmemoryh创建"><a class="markdownIt-Anchor" href="#kernelmemoryh创建"></a> kernel/memory.h创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __KERNEL_MEMORY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __KERNEL_MEMORY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><br><span class="hljs-comment">/* 内存池标记,用于判断用哪个内存池 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">pool_flags</span> &#123;</span><br>  PF_KERNEL = <span class="hljs-number">1</span>,    <span class="hljs-comment">// 内核内存池</span><br>  PF_USER = <span class="hljs-number">2</span>     <span class="hljs-comment">// 用户内存池</span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_P_1  1<span class="hljs-comment">// 页表项或页目录项存在属性位</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_P_0  0<span class="hljs-comment">// 页表项或页目录项存在属性位</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_RW_R  0<span class="hljs-comment">// R/W 属性位值, 读/执行</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_RW_W  2<span class="hljs-comment">// R/W 属性位值, 读/写/执行</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_US_S  0<span class="hljs-comment">// U/S 属性位值, 系统级</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_US_U  4<span class="hljs-comment">// U/S 属性位值, 用户级</span></span><br><br><span class="hljs-comment">/* 用于虚拟地址管理 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> &#123;</span><br><span class="hljs-comment">/* 虚拟地址用到的位图结构，用于记录哪些虚拟地址被占用了。以页为单位。*/</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bitmap</span> <span class="hljs-title">vaddr_bitmap</span>;</span><br><span class="hljs-comment">/* 管理的虚拟地址 */</span><br>  <span class="hljs-type">uint32_t</span> vaddr_start;<br>&#125;;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span> <span class="hljs-title">kernel_pool</span>, <span class="hljs-title">user_pool</span>;</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">mem_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_kernel_pages</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf, <span class="hljs-type">uint32_t</span> pg_cnt)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">malloc_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pte_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pde_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="kernelglobalh新增"><a class="markdownIt-Anchor" href="#kernelglobalh新增"></a> kernel/global.h新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NULL ((void*)0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> bool int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br></code></pre></td></tr></table></figure><h3 id="kernelmemoryc创建"><a class="markdownIt-Anchor" href="#kernelmemoryc创建"></a> kernel/memory.c创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bitmap.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PG_SIZE 4096</span><br><br><span class="hljs-comment">/***************  位图地址 ********************</span><br><span class="hljs-comment">* 因为0xc009f000是内核主线程栈顶，0xc009e000是内核主线程的pcb.</span><br><span class="hljs-comment">* 一个页框大小的位图可表示128M内存, 位图位置安排在地址0xc009a000,</span><br><span class="hljs-comment">* 这样本系统最大支持4个页框的位图,即512M内存 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MEM_BITMAP_BASE 0xc009a000</span><br><span class="hljs-comment">/*************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PDE_IDX(addr) ((addr &amp; 0xffc00000) &gt;&gt; 22)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTE_IDX(addr) ((addr &amp; 0x003ff000) &gt;&gt; 12)</span><br><br><span class="hljs-comment">/* 0xc0000000是内核从虚拟地址3G起. 0x100000意指跨过低端1M内存,使虚拟地址在逻辑上连续 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> K_HEAP_START 0xc0100000</span><br><br><span class="hljs-comment">/* 内存池结构,生成两个实例用于管理内核内存池和用户内存池 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span> &#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bitmap</span> <span class="hljs-title">pool_bitmap</span>;</span> <span class="hljs-comment">// 本内存池用到的位图结构,用于管理物理内存</span><br>  <span class="hljs-type">uint32_t</span> phy_addr_start; <span class="hljs-comment">// 本内存池所管理物理内存的起始地址</span><br>  <span class="hljs-type">uint32_t</span> pool_size; <span class="hljs-comment">// 本内存池字节容量</span><br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span> <span class="hljs-title">kernel_pool</span>, <span class="hljs-title">user_pool</span>;</span>      <span class="hljs-comment">// 生成内核内存池和用户内存池</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtual_addr</span> <span class="hljs-title">kernel_vaddr</span>;</span> <span class="hljs-comment">// 此结构是用来给内核分配虚拟地址</span><br><br><span class="hljs-comment">/* 在pf表示的虚拟内存池中申请pg_cnt个虚拟页,</span><br><span class="hljs-comment">* 成功则返回虚拟页的起始地址, 失败则返回NULL */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">vaddr_get</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf, <span class="hljs-type">uint32_t</span> pg_cnt)</span> &#123;<br>  <span class="hljs-type">int</span> vaddr_start = <span class="hljs-number">0</span>, bit_idx_start = <span class="hljs-number">-1</span>;<br>  <span class="hljs-type">uint32_t</span> cnt = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (pf == PF_KERNEL) &#123;     <span class="hljs-comment">// 内核内存池</span><br>     bit_idx_start  = bitmap_scan(&amp;kernel_vaddr.vaddr_bitmap, pg_cnt);<br>     <span class="hljs-keyword">if</span> (bit_idx_start == <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>     &#125;<br>     <span class="hljs-keyword">while</span>(cnt &lt; pg_cnt) &#123;<br>    bitmap_set(&amp;kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, <span class="hljs-number">1</span>);<br>     &#125;<br>     vaddr_start = kernel_vaddr.vaddr_start + bit_idx_start * PG_SIZE;<br>  &#125; <span class="hljs-keyword">else</span> &#123;     <span class="hljs-comment">// 用户内存池</span><br>     <span class="hljs-comment">//将来实现用户进程再补充</span><br>     &#125;<br>  <br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)vaddr_start;<br>&#125;<br><br><span class="hljs-comment">/* 得到虚拟地址vaddr对应的pte指针*/</span><br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pte_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span> &#123;<br>  <span class="hljs-comment">/* 先访问到页表自己 + \</span><br><span class="hljs-comment">   * 再用页目录项pde(页目录内页表的索引)做为pte的索引访问到页表 + \</span><br><span class="hljs-comment">   * 再用pte的索引做为页内偏移*/</span><br>  <span class="hljs-type">uint32_t</span>* pte = (<span class="hljs-type">uint32_t</span>*)(<span class="hljs-number">0xffc00000</span> + \<br>    ((vaddr &amp; <span class="hljs-number">0xffc00000</span>) &gt;&gt; <span class="hljs-number">10</span>) + \<br>    PTE_IDX(vaddr) * <span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">return</span> pte;<br>&#125;<br><br><span class="hljs-comment">/* 得到虚拟地址vaddr对应的pde的指针 */</span><br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">pde_ptr</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> vaddr)</span> &#123;<br>  <span class="hljs-comment">/* 0xfffff是用来访问到页表本身所在的地址 */</span><br>  <span class="hljs-type">uint32_t</span>* pde = (<span class="hljs-type">uint32_t</span>*)((<span class="hljs-number">0xfffff000</span>) + PDE_IDX(vaddr) * <span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">return</span> pde;<br>&#125;<br><br><span class="hljs-comment">/* 在m_pool指向的物理内存池中分配1个物理页,</span><br><span class="hljs-comment">* 成功则返回页框的物理地址,失败则返回NULL */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">palloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pool* m_pool)</span> &#123;<br>  <span class="hljs-comment">/* 扫描或设置位图要保证原子操作 */</span><br>  <span class="hljs-type">int</span> bit_idx = bitmap_scan(&amp;m_pool-&gt;pool_bitmap, <span class="hljs-number">1</span>);    <span class="hljs-comment">// 找一个物理页面</span><br>  <span class="hljs-keyword">if</span> (bit_idx == <span class="hljs-number">-1</span> ) &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>  &#125;<br>  bitmap_set(&amp;m_pool-&gt;pool_bitmap, bit_idx, <span class="hljs-number">1</span>);<span class="hljs-comment">// 将此位bit_idx置1</span><br>  <span class="hljs-type">uint32_t</span> page_phyaddr = ((bit_idx * PG_SIZE) + m_pool-&gt;phy_addr_start);<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)page_phyaddr;<br>&#125;<br><br><span class="hljs-comment">/* 页表中添加虚拟地址_vaddr与物理地址_page_phyaddr的映射 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">page_table_add</span><span class="hljs-params">(<span class="hljs-type">void</span>* _vaddr, <span class="hljs-type">void</span>* _page_phyaddr)</span> &#123;<br>  <span class="hljs-type">uint32_t</span> vaddr = (<span class="hljs-type">uint32_t</span>)_vaddr, page_phyaddr = (<span class="hljs-type">uint32_t</span>)_page_phyaddr;<br>  <span class="hljs-type">uint32_t</span>* pde = pde_ptr(vaddr);<br>  <span class="hljs-type">uint32_t</span>* pte = pte_ptr(vaddr);<br><br><span class="hljs-comment">/************************   注意   *************************</span><br><span class="hljs-comment">* 执行*pte,会访问到pde。所以确保pde创建完成后才能执行*pte,</span><br><span class="hljs-comment">* 否则会引发page_fault。因此在pde未创建时,</span><br><span class="hljs-comment">* *pte只能出现在下面最外层else语句块中的*pde后面。</span><br><span class="hljs-comment">* *********************************************************/</span><br>  <span class="hljs-comment">/* 先在页目录内判断目录项的P位，若为1,则表示该表已存在 */</span><br>  <span class="hljs-keyword">if</span> (*pde &amp; <span class="hljs-number">0x00000001</span>) &#123;<br>     ASSERT(!(*pte &amp; <span class="hljs-number">0x00000001</span>));<br><br>     <span class="hljs-keyword">if</span> (!(*pte &amp; <span class="hljs-number">0x00000001</span>)) &#123;   <span class="hljs-comment">// 只要是创建页表,pte就应该不存在,多判断一下放心</span><br>    *pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);    <span class="hljs-comment">// US=1,RW=1,P=1</span><br>     &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 调试模式下不会执行到此,上面的ASSERT会先执行.关闭调试时下面的PANIC会起作用</span><br>    PANIC(<span class="hljs-string">&quot;pte repeat&quot;</span>);<br>     &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;   <span class="hljs-comment">// 页目录项不存在,所以要先创建页目录项再创建页表项.</span><br>     <span class="hljs-comment">/* 页表中用到的页框一律从内核空间分配 */</span><br>     <span class="hljs-type">uint32_t</span> pde_phyaddr = (<span class="hljs-type">uint32_t</span>)palloc(&amp;kernel_pool);<br>     *pde = (pde_phyaddr | PG_US_U | PG_RW_W | PG_P_1);<br><br><span class="hljs-comment">/*******************   必须将页表所在的页清0   *********************</span><br><span class="hljs-comment">* 必须把分配到的物理页地址pde_phyaddr对应的物理内存清0,</span><br><span class="hljs-comment">* 避免里面的陈旧数据变成了页表中的页表项,从而让页表混乱.</span><br><span class="hljs-comment">* pte的高20位会映射到pde所指向的页表的物理起始地址.*/</span><br>     <span class="hljs-built_in">memset</span>((<span class="hljs-type">void</span>*)((<span class="hljs-type">int</span>)pte &amp; <span class="hljs-number">0xfffff000</span>), <span class="hljs-number">0</span>, PG_SIZE); <br><span class="hljs-comment">/************************************************************/</span><br>     ASSERT(!(*pte &amp; <span class="hljs-number">0x00000001</span>));<br>     *pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);      <span class="hljs-comment">// US=1,RW=1,P=1</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* 分配pg_cnt个页空间,成功则返回起始虚拟地址,失败时返回NULL */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc_page</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> pool_flags pf, <span class="hljs-type">uint32_t</span> pg_cnt)</span> &#123;<br>  ASSERT(pg_cnt &gt; <span class="hljs-number">0</span> &amp;&amp; pg_cnt &lt; <span class="hljs-number">3840</span>);<br><span class="hljs-comment">/***********   malloc_page的原理是三个动作的合成:   ***********</span><br><span class="hljs-comment">     1通过vaddr_get在虚拟内存池中申请虚拟地址</span><br><span class="hljs-comment">     2通过palloc在物理内存池中申请物理页</span><br><span class="hljs-comment">     3通过page_table_add将以上两步得到的虚拟地址和物理地址在页表中完成映射</span><br><span class="hljs-comment">***************************************************************/</span><br>  <span class="hljs-type">void</span>* vaddr_start = vaddr_get(pf, pg_cnt);<br>  <span class="hljs-keyword">if</span> (vaddr_start == <span class="hljs-literal">NULL</span>) &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>  &#125;<br>  <span class="hljs-type">uint32_t</span> vaddr = (<span class="hljs-type">uint32_t</span>)vaddr_start, cnt = pg_cnt;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pool</span>* <span class="hljs-title">mem_pool</span> =</span> pf &amp; PF_KERNEL ? &amp;kernel_pool : &amp;user_pool;<br><br><span class="hljs-comment">/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/</span><br>  <span class="hljs-keyword">while</span> (cnt-- &gt; <span class="hljs-number">0</span>) &#123;<br>     <span class="hljs-type">void</span>* page_phyaddr = palloc(mem_pool);<br><br><span class="hljs-comment">/* 失败时要将曾经已申请的虚拟地址和物理页全部回滚，</span><br><span class="hljs-comment">* 在将来完成内存回收时再补充 */</span><br>     <span class="hljs-keyword">if</span> (page_phyaddr == <span class="hljs-literal">NULL</span>) &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>     &#125;<br>     page_table_add((<span class="hljs-type">void</span>*)vaddr, page_phyaddr); <span class="hljs-comment">// 在页表中做映射 </span><br>     vaddr += PG_SIZE; <span class="hljs-comment">// 下一个虚拟页</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> vaddr_start;<br>&#125;<br><br><span class="hljs-comment">/* 从内核物理内存池中申请pg_cnt页内存,</span><br><span class="hljs-comment">* 成功则返回其虚拟地址,失败则返回NULL */</span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">get_kernel_pages</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pg_cnt)</span> &#123;<br>  <span class="hljs-type">void</span>* vaddr =  malloc_page(PF_KERNEL, pg_cnt);<br>  <span class="hljs-keyword">if</span> (vaddr != <span class="hljs-literal">NULL</span>) &#123;   <span class="hljs-comment">// 若分配的地址不为空,将页框清0后返回</span><br>     <span class="hljs-built_in">memset</span>(vaddr, <span class="hljs-number">0</span>, pg_cnt * PG_SIZE);<br>  &#125;<br>  <span class="hljs-keyword">return</span> vaddr;<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化内存池 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mem_pool_init</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> all_mem)</span> &#123;<br>  put_str(<span class="hljs-string">&quot;   mem_pool_init start\n&quot;</span>);<br>  <span class="hljs-type">uint32_t</span> page_table_size = PG_SIZE * <span class="hljs-number">256</span>;  <span class="hljs-comment">// 页表大小= 1页的页目录表+第0和第768个页目录项指向同一个页表+</span><br>                                                 <span class="hljs-comment">// 第769~1022个页目录项共指向254个页表,共256个页框</span><br>  <span class="hljs-type">uint32_t</span> used_mem = page_table_size + <span class="hljs-number">0x100000</span>;  <span class="hljs-comment">// 0x100000为低端1M内存</span><br>  <span class="hljs-type">uint32_t</span> free_mem = all_mem - used_mem;<br>  <span class="hljs-type">uint16_t</span> all_free_pages = free_mem / PG_SIZE;  <span class="hljs-comment">// 1页为4k,不管总内存是不是4k的倍数,</span><br>     <span class="hljs-comment">// 对于以页为单位的内存分配策略，不足1页的内存不用考虑了。</span><br>  <span class="hljs-type">uint16_t</span> kernel_free_pages = all_free_pages / <span class="hljs-number">2</span>;<br>  <span class="hljs-type">uint16_t</span> user_free_pages = all_free_pages - kernel_free_pages;<br><br><span class="hljs-comment">/* 为简化位图操作，余数不处理，坏处是这样做会丢内存。</span><br><span class="hljs-comment">好处是不用做内存的越界检查,因为位图表示的内存少于实际物理内存*/</span><br>  <span class="hljs-type">uint32_t</span> kbm_length = kernel_free_pages / <span class="hljs-number">8</span>;  <span class="hljs-comment">// Kernel BitMap的长度,位图中的一位表示一页,以字节为单位</span><br>  <span class="hljs-type">uint32_t</span> ubm_length = user_free_pages / <span class="hljs-number">8</span>;  <span class="hljs-comment">// User BitMap的长度.</span><br><br>  <span class="hljs-type">uint32_t</span> kp_start = used_mem;  <span class="hljs-comment">// Kernel Pool start,内核内存池的起始地址</span><br>  <span class="hljs-type">uint32_t</span> up_start = kp_start + kernel_free_pages * PG_SIZE;  <span class="hljs-comment">// User Pool start,用户内存池的起始地址</span><br><br>  kernel_pool.phy_addr_start = kp_start;<br>  user_pool.phy_addr_start   = up_start;<br><br>  kernel_pool.pool_size = kernel_free_pages * PG_SIZE;<br>  user_pool.pool_size = user_free_pages * PG_SIZE;<br><br>  kernel_pool.pool_bitmap.btmp_bytes_len = kbm_length;<br>  user_pool.pool_bitmap.btmp_bytes_len  = ubm_length;<br><br><span class="hljs-comment">/*********    内核内存池和用户内存池位图   ***********</span><br><span class="hljs-comment">*   位图是全局的数据，长度不固定。</span><br><span class="hljs-comment">*   全局或静态的数组需要在编译时知道其长度，</span><br><span class="hljs-comment">*   而我们需要根据总内存大小算出需要多少字节。</span><br><span class="hljs-comment">*   所以改为指定一块内存来生成位图.</span><br><span class="hljs-comment">*   ************************************************/</span><br><span class="hljs-comment">// 内核使用的最高地址是0xc009f000,这是主线程的栈地址.(内核的大小预计为70K左右)</span><br><span class="hljs-comment">// 32M内存占用的位图是2k.内核内存池的位图先定在MEM_BITMAP_BASE(0xc009a000)处.</span><br>  kernel_pool.pool_bitmap.bits = (<span class="hljs-type">void</span>*)MEM_BITMAP_BASE;<br>          <br><span class="hljs-comment">/* 用户内存池的位图紧跟在内核内存池位图之后 */</span><br>  user_pool.pool_bitmap.bits = (<span class="hljs-type">void</span>*)(MEM_BITMAP_BASE + kbm_length);<br>  <span class="hljs-comment">/******************** 输出内存池信息 **********************/</span><br>  put_str(<span class="hljs-string">&quot;      kernel_pool_bitmap_start:&quot;</span>);put_int((<span class="hljs-type">int</span>)kernel_pool.pool_bitmap.bits);<br>  put_str(<span class="hljs-string">&quot; kernel_pool_phy_addr_start:&quot;</span>);put_int(kernel_pool.phy_addr_start);<br>  put_str(<span class="hljs-string">&quot;\n&quot;</span>);<br>  put_str(<span class="hljs-string">&quot;      user_pool_bitmap_start:&quot;</span>);put_int((<span class="hljs-type">int</span>)user_pool.pool_bitmap.bits);<br>  put_str(<span class="hljs-string">&quot; user_pool_phy_addr_start:&quot;</span>);put_int(user_pool.phy_addr_start);<br>  put_str(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>  <span class="hljs-comment">/* 将位图置0*/</span><br>  bitmap_init(&amp;kernel_pool.pool_bitmap);<br>  bitmap_init(&amp;user_pool.pool_bitmap);<br><br>  <span class="hljs-comment">/* 下面初始化内核虚拟地址的位图,按实际物理内存大小生成数组。*/</span><br>  kernel_vaddr.vaddr_bitmap.btmp_bytes_len = kbm_length;      <span class="hljs-comment">// 用于维护内核堆的虚拟地址,所以要和内核内存池大小一致</span><br><br> <span class="hljs-comment">/* 位图的数组指向一块未使用的内存,目前定位在内核内存池和用户内存池之外*/</span><br>  kernel_vaddr.vaddr_bitmap.bits = (<span class="hljs-type">void</span>*)(MEM_BITMAP_BASE + kbm_length + ubm_length);<br><br>  kernel_vaddr.vaddr_start = K_HEAP_START;<br>  bitmap_init(&amp;kernel_vaddr.vaddr_bitmap);<br>  put_str(<span class="hljs-string">&quot;   mem_pool_init done\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 内存管理部分初始化入口 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">mem_init</span><span class="hljs-params">()</span> &#123;<br>  put_str(<span class="hljs-string">&quot;mem_init start\n&quot;</span>);<br>  <span class="hljs-type">uint32_t</span> mem_bytes_total = (*(<span class="hljs-type">uint32_t</span>*)(<span class="hljs-number">0xb00</span>));<br>  mem_pool_init(mem_bytes_total);  <span class="hljs-comment">// 初始化内存池</span><br>  put_str(<span class="hljs-string">&quot;mem_init done\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelmainc修改-2"><a class="markdownIt-Anchor" href="#kernelmainc修改-2"></a> kernel/main.c修改</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br>   <br>   <span class="hljs-type">void</span>* addr = get_kernel_pages(<span class="hljs-number">3</span>);<br>   put_str(<span class="hljs-string">&quot;\n get_kernel_page start vaddr is&quot;</span>);<br>   put_int((<span class="hljs-type">uint32_t</span>)addr);<br>   put_str(<span class="hljs-string">&quot;\n&quot;</span>);<br>   <br>   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernelinitc新增"><a class="markdownIt-Anchor" href="#kernelinitc新增"></a> kernel/init.c新增</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">mem_init();     <span class="hljs-comment">// 初始化内存管理系统</span><br></code></pre></td></tr></table></figure><h2 id="makefile"><a class="markdownIt-Anchor" href="#makefile"></a> makefile</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs shell">BUILD_DIR = ./build<br>ENTRY_POINT = 0xc0001500<br>AS = nasm<br>CC = gcc<br>LD = ld<br>LIB = -I lib/ -I lib/kernel/ -I lib/user/ -I kernel/ -I device/ <br>ASFLAGS = -f elf<br>CFLAGS = -Wall -m32 -fno-stack-protector $(LIB) -c -fno-builtin -W -Wstrict-prototypes -Wmissing-prototypes<br>LDFLAGS =  -m elf_i386 -Ttext $(ENTRY_POINT) -e main -Map $(BUILD_DIR)/kernel.map<br>OBJS = $(BUILD_DIR)/main.o $(BUILD_DIR)/init.o $(BUILD_DIR)/interrupt.o \<br>      $(BUILD_DIR)/timer.o $(BUILD_DIR)/kernel.o $(BUILD_DIR)/print.o \<br>      $(BUILD_DIR)/debug.o $(BUILD_DIR)/string.o $(BUILD_DIR)/memory.o \<br>      $(BUILD_DIR)/bitmap.o<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############     c代码编译     ###############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/main.o: kernel/main.c lib/kernel/print.h \</span><br><span class="language-bash">        lib/stdint.h kernel/init.h lib/string.h kernel/memory.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/init.o: kernel/init.c kernel/init.h lib/kernel/print.h \</span><br><span class="language-bash">        lib/stdint.h kernel/interrupt.h device/timer.h kernel/memory.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/interrupt.o: kernel/interrupt.c kernel/interrupt.h \</span><br><span class="language-bash">        lib/stdint.h kernel/global.h lib/kernel/io.h lib/kernel/print.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/timer.o: device/timer.c device/timer.h lib/stdint.h\</span><br><span class="language-bash">        lib/kernel/io.h lib/kernel/print.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/debug.o: kernel/debug.c kernel/debug.h \</span><br><span class="language-bash">        lib/kernel/print.h lib/stdint.h kernel/interrupt.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/string.o: lib/string.c lib/string.h \</span><br><span class="language-bash">kernel/debug.h kernel/global.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/memory.o: kernel/memory.c kernel/memory.h \</span><br><span class="language-bash">lib/stdint.h lib/kernel/bitmap.h kernel/debug.h lib/string.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/bitmap.o: lib/kernel/bitmap.c lib/kernel/bitmap.h \</span><br><span class="language-bash">lib/string.h kernel/interrupt.h lib/kernel/print.h kernel/debug.h</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(CC) $(CFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############    汇编代码编译    ###############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/kernel.o: kernel/kernel.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/print.o: lib/kernel/print.S</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(AS) $(ASFLAGS) $&lt; -o <span class="hljs-variable">$@</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############    链接所有目标文件    #############</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(BUILD_DIR)/kernel.bin: $(OBJS)</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(LD) $(LDFLAGS) $^ -o <span class="hljs-variable">$@</span></span><br><br>.PHONY : mk_dir hd clean all<br><br>mk_dir:<br>if [ ! -d $(BUILD_DIR) ]; then mkdir $(BUILD_DIR); fi<br><br>hd:<br>dd if=$(BUILD_DIR)/kernel.bin \<br>           of=/home/podest/bochs/hd60M.img \<br>           bs=512 count=200 seek=9 conv=notrunc<br><br>clean:<br>cd $(BUILD_DIR) &amp;&amp; rm -f  ./*<br><br>build: $(BUILD_DIR)/kernel.bin<br><br>all: mk_dir build hd<br></code></pre></td></tr></table></figure><p>makefile相当于一种脚本语言文件，必须遵循make定义的语法<br />而make相当于脚本解析器<br />make和makefile的本质是，make通过解析makefile文件，找出哪些文件有变化，根据依赖关系找出受变化影响的文件，然后将找出所有的文件执行事先在makefile定义好的命令规则。</p><h2 id="实验结果"><a class="markdownIt-Anchor" href="#实验结果"></a> 实验结果</h2><p><img src="/img/os/os8.1.png" alt="图为bochs运行界面" /></p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>继续前进，现在逐渐进入了操作系统真正有趣的地方了。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第一到七章流程整理</title>
    <link href="/2022/07/19/os(a)/"/>
    <url>/2022/07/19/os(a)/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>这一章节我将把从第一章到第七章的内容串联起来，缕清思路。</p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><h3 id="第一章"><a class="markdownIt-Anchor" href="#第一章"></a> 第一章</h3><p>略</p><h3 id="第二章"><a class="markdownIt-Anchor" href="#第二章"></a> 第二章</h3><p>在电脑未开机前，BIOS就被事先写入到内存的0xF0000~0xFFFFF中。此区域为ROM。MBR被加载到磁盘的0盘0道1扇区（CHS方式），CHS 方式中扇区的编号是从1开始的。</p><p>在计算机启动之后，cs：ip寄存器会被强制置为0xF000:0xFFF0，由于在实模式下的段基址要乘以16，也就是左移四位，所以0xF000:0xFFF0的等效地址是0xFFFF0，这就是BIOS的入口地址。</p><p>0xFFFF0处的指令为跳转指令jmp far f000:e05b，跳转到BIOS真正的地址，进行检测内存、显卡等外设信息，当检测通过，并初始化好硬件后，开始在内存中 0x000~0x3FF处建立数据结构，中断向量表 IVT 并填写中断例程。</p><p>BIOS 最后一项工作校验启动盘中位于0盘0道1扇区的内容。如果此扇区末尾的两个字节分别是魔数0x55和0xaa，就会把该扇区内容加载到内存地址 0x7c00处，然后执行跳转指令jmp 0: 0x7c00，这里正是MBR的起始地址。</p><h3 id="第三章"><a class="markdownIt-Anchor" href="#第三章"></a> 第三章</h3><p>这一章主要是改进MBR，第一步是使其能直接访问显存，从而在显示器上打印字段。</p><p>第二步是让MBR直接操作硬盘，将硬盘中0盘0道2扇区的内容写入内存，然后跳转执行loader。这一步略微复杂，MBR需要执行以下步骤：</p><blockquote><p>第1步将LBA地址、扇区数放入相应I/O端口，再将读命令0x20放入Command端口，硬盘控制器就会自动将硬盘的数据读入Data端口，再存入硬盘控制器的缓冲区。</p></blockquote><blockquote><p>第2步就是利用查询传输方式，这段代码一直循环，也就是一直占用cpu查询Status端口，直到规定好的硬盘数据全部读入缓冲区，Status第3位被置为1，程序才会继续执行第3步。</p></blockquote><blockquote><p>第3步就是将缓冲区数据以2个字节为单位循环先读入Data端口，再用in指令读入内存。</p></blockquote><h3 id="第四章"><a class="markdownIt-Anchor" href="#第四章"></a> 第四章</h3><p>到这里我们就要从实模式进入保护模式了，首先修改boot.inc和loader.S，在内存里写好3个段描述符(代码段、数据段、显存段）、赋值好GDTR寄存器、创建好表示3个选择子的字段后，进入保护模式。</p><h4 id="bootinc"><a class="markdownIt-Anchor" href="#bootinc"></a> boot.inc</h4><blockquote><p>根据高32位的段描述符，依次定义字段最后相加，合成了代码段、数据段、显存段三个段的段描述符的高32位的字段。方便loader.S引用这些字段来构建代码段、数据段、显存段描述符。</p></blockquote><h4 id="loaders"><a class="markdownIt-Anchor" href="#loaders"></a> loader.S</h4><blockquote><p>1、通过给出低4字节加上引用boot.inc定义好的高4字节字段来向内存写入无用的第0段和3个有用段的段描述符（代码段、数据段、显存段）。并将他们的内存地址依次标记为GDT_BASE、CODE_DESC、DATA_STACK_DESC、VIDEO_DESC。<br />2、GDT_BASE因此为GDT的内存起始地址，可以用来创建GDTR。根据上述标号可以计算出3个段描述符各自的索引，从而可以创建各个段的选择子。<br />3、内存里写好3个段描述符、赋值好GDTR寄存器、创建好表示3个选择子的字段后，在实模式下利用BIOS中断13号中断打印字符串“2 loader in real”，再执行“3步走”代码打开保护模式，然后用定义好的选择子字段初始化段寄存器，当进入保护模式后打印“P”。<br />4、数据段和代码段段描述符段基址均为0，段界限均为4GB，即平坦模式：段偏移寄存器32位访问范围4GB，不可能换段。ss和ds寄存器都为数据段选择子。<br />5、显存段段基址为0xb8000，用于访问显存，gs为显存段选择子。</p></blockquote><h3 id="第五章"><a class="markdownIt-Anchor" href="#第五章"></a> 第五章</h3><p>这一章内容较多，我们要实现内容容量检测的函数、启用分页、加载内核。</p><h4 id="内存检测"><a class="markdownIt-Anchor" href="#内存检测"></a> 内存检测</h4><p>使用BIOS中断0x15的3个子功能0xe820、0xe801、0x88，可以获得内存容量。</p><blockquote><p>1、0xe820 获得os可用内存的基址和内存长度（单位字节）所有ards结构的低32基址+低32为内存长度的最大值即为内存容量；<br />2、0xe801获得低15MB(单位1KB)+1MB +16MB（单位64KB）以上内存容量 AX * 1024字节+1MB+BX * 1024*64字节；<br />3、0xe88 获得1MB以上内存容量AX * 1024字节+1MB</p></blockquote><p>loader.S在进入保护模式前测出内存容量，保存于内存0xb00处。</p><h4 id="启用分页"><a class="markdownIt-Anchor" href="#启用分页"></a> 启用分页</h4><p>对于本书实验而言，分页属性如下，</p><blockquote><p>虚拟地址：32位=4GB<br />物理地址：32MB (但是分页机制下能访问的实地址只有低1MB）32MB是内存容量的检测结果。<br />一块物理页大小：4kB<br />一个页表大小：4kB<br />一个页表项大小：4B<br />一个页表有1024个页表项，所以一个页表可表示1024*4kB=4MB的虚拟内存。</p></blockquote><blockquote><p>一个页目录大小：4kB<br />一个页目录项大小：4B<br />一个页目录有1024个页目录项，所以该页目录可表示4MB*1024=4GB虚拟内存。</p></blockquote><p>根据物理页大小4B 页表项个数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>10</mn></msup></mrow><annotation encoding="application/x-tex">2^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>个 ，页目录项个数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>10</mn></msup></mrow><annotation encoding="application/x-tex">2^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>个，可以将虚拟地址分成：</p><table><thead><tr><th>10位</th><th>10位</th><th>12位</th></tr></thead><tbody><tr><td>页目录项索引</td><td>页表项索引</td><td>块内偏移量</td></tr></tbody></table><p>具体实现步骤如下：</p><blockquote><p>1.构造页目录及页表，完成从虚拟地址3GB~3GB+1MB到实地址0 ~1MB的映射以及虚拟地址0 ~ 1MB向物理地址0 ~ 1MB的映射。[注]本次实验虚拟地址3GB和虚拟地址0将会转化成相同的物理地址0。<br />2.开启保护模式，将页目录地址赋值给cr3寄存器，并开启保护模式的分页机制。<br />3.修改GDTR中的段基址，以及显存段段描述符中的段基址，确保代码 mov byte [gs:160],‘V’  中的[gs:160]在保护模式的分段机制和分页机制下，最后会拼出虚拟地址0xc00b800+160，显然此地址在3GB~3GB+1MB的虚拟地址之间。</p></blockquote><h4 id="加载内核"><a class="markdownIt-Anchor" href="#加载内核"></a> 加载内核</h4><p>gcc会自动将main.c转化成具有elf格式的kernel.bin。<br />将kernel.bin刻入磁盘第9扇区，修改loader.S将其从磁盘加载到内存0x70000，该地址就是elf头的首地址。<br />在loader.S新编一个函数kernel_init，读取elf头内的信息，再读取程序头表，根据elf规范将kernel.bin的所有段拷贝到内存中相应位置，我们这次的main.c只有一个段，段内是死循环。<br />loader.S最后一句代码是jmp到0xc0001500地址。该地址就是设计好的死循环函数的入口地址。<br />bochs模拟最后程序死循环，说明死循环段被成功加载到虚拟地址0xc0001500处。</p><h3 id="第六章"><a class="markdownIt-Anchor" href="#第六章"></a> 第六章</h3><p>通过c语言和汇编混合编程的方式实现打印函数，其中会使用到内联汇编的知识。具体实现没有什么问题，看看书就能理解了。</p><h3 id="第七章"><a class="markdownIt-Anchor" href="#第七章"></a> 第七章</h3><p>这一章的任务是实现中断，具体过程如下：<br />1.外设发出中断信号给8259A芯片。<br />2.8259A芯片处理信号，并向CPU发送中断向量号。<br />3.CPU根据中断向量号，在IDT表中找到对应的中断门描述符，从获取中断门描述符获取对应的中断处理程序所在代码段的选择子和偏移地址，开始执行中断处理程序。<br />4.中断处理程序执行结束，CPU返回原程序。<br />在最后一节要修改kernel.S来改进中断处理程序，并调快时钟。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第七章 实现中断处理 柳暗花明又一村</title>
    <link href="/2022/07/19/os(7)/"/>
    <url>/2022/07/19/os(7)/</url>
    
    <content type="html"><![CDATA[<h1 id="第七章-实现中断处理-柳暗花明又一村"><a class="markdownIt-Anchor" href="#第七章-实现中断处理-柳暗花明又一村"></a> 第七章 实现中断处理 柳暗花明又一村</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>落笔前已经完成了这一章节的内容，本章难度不大但要编写的代码比较多，中断处理是os的必需内容，所以还是简单介绍下。</p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>我把代码和头文件分别介绍一下：</p><h3 id="主体代码"><a class="markdownIt-Anchor" href="#主体代码"></a> 主体代码</h3><h4 id="kernelkernels"><a class="markdownIt-Anchor" href="#kernelkernels"></a> kernel/kernel.S</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><pre><code class="hljs x86asm">[<span class="hljs-meta">bits</span> <span class="hljs-number">32</span>]<br><span class="hljs-meta">%define</span> ERROR_CODE <span class="hljs-keyword">nop</span> <span class="hljs-comment">; 若在相关的异常中cpu已经自动压入了错误码,为保持栈中格式统一,这里不做操作.</span><br><span class="hljs-meta">%define</span> <span class="hljs-meta">ZERO</span> <span class="hljs-keyword">push</span> <span class="hljs-number">0</span> <span class="hljs-comment">; 若在相关的异常中cpu没有压入错误码,为了统一栈中格式,就手工压入一个0</span><br><br><span class="hljs-meta">extern</span> put_str<span class="hljs-comment">;</span><br><span class="hljs-meta">extern</span> idt_table<span class="hljs-comment">;</span><br><br><span class="hljs-meta">section</span> .data<br><span class="hljs-meta">global</span> intr_entry_table<br><span class="hljs-symbol">intr_entry_table:</span><br><br>%macro VECTOR <span class="hljs-number">2</span><br><span class="hljs-meta">section</span> .text<br>intr<span class="hljs-subst">%1</span>entry: <span class="hljs-comment">; 每个中断处理程序都要压入中断向量号,所以一个中断类型一个中断处理程序，自己知道自己的中断向量号是多少</span><br><br>   <span class="hljs-subst">%2</span> <span class="hljs-comment">; 中断若有错误码会压在eip后面 </span><br><span class="hljs-comment">; 以下是保存上下文环境</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">ds</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">es</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">fs</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">gs</span><br>   <span class="hljs-keyword">pushad</span> <span class="hljs-comment">; PUSHAD指令压入32位寄存器,其入栈顺序是: EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI</span><br><br>   <span class="hljs-comment">; 如果是从片上进入的中断,除了往从片上发送EOI外,还要往主片上发送EOI </span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0x20</span>                   <span class="hljs-comment">; 中断结束命令EOI</span><br>   <span class="hljs-keyword">out</span> <span class="hljs-number">0xa0</span>,<span class="hljs-built_in">al</span>                   <span class="hljs-comment">; 向从片发送</span><br>   <span class="hljs-keyword">out</span> <span class="hljs-number">0x20</span>,<span class="hljs-built_in">al</span>                   <span class="hljs-comment">; 向主片发送</span><br><br>   <span class="hljs-keyword">push</span> <span class="hljs-subst">%1</span> <span class="hljs-comment">; 不管idt_table中的目标程序是否需要参数,都一律压入中断向量号,调试时很方便</span><br>   <span class="hljs-keyword">call</span> [idt_table + <span class="hljs-subst">%1</span>*<span class="hljs-number">4</span>]       <span class="hljs-comment">; 调用idt_table中的C版本中断处理函数</span><br>   <span class="hljs-keyword">jmp</span> intr_exit<br><br><span class="hljs-meta">section</span> .data<br>   <span class="hljs-built_in">dd</span>    intr<span class="hljs-subst">%1</span>entry <span class="hljs-comment">; 存储各个中断入口程序的地址，形成intr_entry_table数组</span><br>%endmacro<br><br><span class="hljs-meta">section</span> .text<br><span class="hljs-meta">global</span> intr_exit<br><span class="hljs-symbol">intr_exit:</span>     <br><span class="hljs-comment">; 以下是恢复上下文环境</span><br>   <span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span>   <span class="hljs-comment">; 跳过中断号</span><br>   <span class="hljs-keyword">popad</span><br>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">gs</span><br>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">fs</span><br>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">es</span><br>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ds</span><br>   <span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span>   <span class="hljs-comment">; 跳过error_code</span><br>   <span class="hljs-keyword">iretd</span><br><br><br>VECTOR <span class="hljs-number">0x00</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x01</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x02</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x03</span>,<span class="hljs-meta">ZERO</span> <br>VECTOR <span class="hljs-number">0x04</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x05</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x06</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x07</span>,<span class="hljs-meta">ZERO</span> <br>VECTOR <span class="hljs-number">0x08</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x09</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x0a</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x0b</span>,ERROR_CODE <br>VECTOR <span class="hljs-number">0x0c</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x0d</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x0e</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x0f</span>,<span class="hljs-meta">ZERO</span> <br>VECTOR <span class="hljs-number">0x10</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x11</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x12</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x13</span>,<span class="hljs-meta">ZERO</span> <br>VECTOR <span class="hljs-number">0x14</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x15</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x16</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x17</span>,<span class="hljs-meta">ZERO</span> <br>VECTOR <span class="hljs-number">0x18</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x19</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x1a</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x1b</span>,ERROR_CODE <br>VECTOR <span class="hljs-number">0x1c</span>,<span class="hljs-meta">ZERO</span><br>VECTOR <span class="hljs-number">0x1d</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x1e</span>,ERROR_CODE<br>VECTOR <span class="hljs-number">0x1f</span>,<span class="hljs-meta">ZERO</span> <br>VECTOR <span class="hljs-number">0x20</span>,<span class="hljs-meta">ZERO</span><span class="hljs-comment">;时钟中断对应的入口</span><br></code></pre></td></tr></table></figure><p>定义了33个中断处理程序<br />数组intr_entry_table记录每个程序入口地址<br />虽然定义了33个中断处理程序，但是从0x14到0x1f这12个中断向量号本实验是不可能产生的。</p><h4 id="kernelinterruptc"><a class="markdownIt-Anchor" href="#kernelinterruptc"></a> kernel/interrupt.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;io.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIC_M_CTRL 0x20       <span class="hljs-comment">// 这里用的可编程中断控制器是8259A,主片的控制端口是0x20</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIC_M_DATA 0x21       <span class="hljs-comment">// 主片的数据端口是0x21</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIC_S_CTRL 0xa0       <span class="hljs-comment">// 从片的控制端口是0xa0</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIC_S_DATA 0xa1       <span class="hljs-comment">// 从片的数据端口是0xa1</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_CNT 0x21      <span class="hljs-comment">// 目前总共支持的中断数33</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EFLAGS_IF   0x00000200       <span class="hljs-comment">// eflags寄存器中的if位为1</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_EFLAGS(EFLAG_VAR) asm volatile(<span class="hljs-string">&quot;pushfl; popl %0&quot;</span> : <span class="hljs-string">&quot;=g&quot;</span> (EFLAG_VAR))</span><br><br><br><span class="hljs-comment">/*中断门描述符结构体*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gate_desc</span> &#123;</span><br>   <span class="hljs-type">uint16_t</span>    func_offset_low_word;<br>   <span class="hljs-type">uint16_t</span>    selector;<br>   <span class="hljs-type">uint8_t</span>     dcount;   <span class="hljs-comment">//此项为双字计数字段，是门描述符中的第4字节。此项固定值，不用考虑</span><br>   <span class="hljs-type">uint8_t</span>     attribute;<br>   <span class="hljs-type">uint16_t</span>    func_offset_high_word;<br>&#125;;<br><br><span class="hljs-comment">// 静态函数声明,非必须</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_idt_desc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> gate_desc* p_gdesc, <span class="hljs-type">uint8_t</span> attr, intr_handler function)</span>;<br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gate_desc</span> <span class="hljs-title">idt</span>[<span class="hljs-title">IDT_DESC_CNT</span>];</span>   <span class="hljs-comment">// idt是中断描述符表,本质上就是个中断门描述符数组</span><br><br><br><span class="hljs-type">char</span>* intr_name[IDT_DESC_CNT];     <span class="hljs-comment">// 用于保存异常的名字</span><br><br><br><span class="hljs-comment">/********    定义中断处理程序数组    ********</span><br><span class="hljs-comment"> * 在kernel.S中定义的intrXXentry只是中断处理程序的入口,</span><br><span class="hljs-comment"> * 最终调用的是ide_table中的处理程序*/</span><br>intr_handler idt_table[IDT_DESC_CNT];<br><br><span class="hljs-comment">/********************************************/</span><br><span class="hljs-keyword">extern</span> intr_handler intr_entry_table[IDT_DESC_CNT];    <span class="hljs-comment">// 声明引用定义在kernel.S中的中断处理函数入口数组</span><br><br><br><br><br><br><span class="hljs-comment">/* 初始化可编程中断控制器8259A */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">pic_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>   <span class="hljs-comment">/* 初始化主片 */</span><br>   outb (PIC_M_CTRL, <span class="hljs-number">0x11</span>);   <span class="hljs-comment">// ICW1: 边沿触发,级联8259, 需要ICW4.</span><br>   outb (PIC_M_DATA, <span class="hljs-number">0x20</span>);   <span class="hljs-comment">// ICW2: 起始中断向量号为0x20,也就是IR[0-7] 为 0x20 ~ 0x27.</span><br>   outb (PIC_M_DATA, <span class="hljs-number">0x04</span>);   <span class="hljs-comment">// ICW3: IR2接从片. </span><br>   outb (PIC_M_DATA, <span class="hljs-number">0x01</span>);   <span class="hljs-comment">// ICW4: 8086模式, 正常EOI</span><br><br>   <span class="hljs-comment">/* 初始化从片 */</span><br>   outb (PIC_S_CTRL, <span class="hljs-number">0x11</span>);    <span class="hljs-comment">// ICW1: 边沿触发,级联8259, 需要ICW4.</span><br>   outb (PIC_S_DATA, <span class="hljs-number">0x28</span>);    <span class="hljs-comment">// ICW2: 起始中断向量号为0x28,也就是IR[8-15] 为 0x28 ~ 0x2F.</span><br>   outb (PIC_S_DATA, <span class="hljs-number">0x02</span>);    <span class="hljs-comment">// ICW3: 设置从片连接到主片的IR2引脚</span><br>   outb (PIC_S_DATA, <span class="hljs-number">0x01</span>);    <span class="hljs-comment">// ICW4: 8086模式, 正常EOI</span><br>   <br>  <span class="hljs-comment">/* IRQ2用于级联从片,必须打开,否则无法响应从片上的中断</span><br><span class="hljs-comment">  主片上打开的中断有IRQ0的时钟,IRQ1的键盘和级联从片的IRQ2,其它全部关闭 */</span><br>   outb (PIC_M_DATA, <span class="hljs-number">0xfe</span>);  只打开时钟中断，其余均屏蔽<br><br><span class="hljs-comment">/* 打开从片上的IRQ14,此引脚接收硬盘控制器的中断 */</span><br>   outb (PIC_S_DATA, <span class="hljs-number">0xff</span>);<br><br>   put_str(<span class="hljs-string">&quot;   pic_init done\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/* 创建中断门描述符 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">make_idt_desc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> gate_desc* p_gdesc, <span class="hljs-type">uint8_t</span> attr, intr_handler function)</span> &#123; <br>   p_gdesc-&gt;func_offset_low_word = (<span class="hljs-type">uint32_t</span>)function &amp; <span class="hljs-number">0x0000FFFF</span>;<br>   p_gdesc-&gt;selector = SELECTOR_K_CODE;<br>   p_gdesc-&gt;dcount = <span class="hljs-number">0</span>;<br>   p_gdesc-&gt;attribute = attr;<br>   p_gdesc-&gt;func_offset_high_word = ((<span class="hljs-type">uint32_t</span>)function &amp; <span class="hljs-number">0xFFFF0000</span>) &gt;&gt; <span class="hljs-number">16</span>;<br>&#125;<br><br><span class="hljs-comment">/*初始化中断描述符表*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">idt_desc_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   <span class="hljs-type">int</span> i, lastindex = IDT_DESC_CNT - <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; IDT_DESC_CNT; i++) &#123;<br>      make_idt_desc(&amp;idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); <br>   &#125;<br><span class="hljs-comment">/* 单独处理系统调用,系统调用对应的中断门dpl为3,</span><br><span class="hljs-comment"> * 中断处理程序为单独的syscall_handler */</span><br>   put_str(<span class="hljs-string">&quot;   idt_desc_init done\n&quot;</span>);<br>&#125;<br><br><br><br><span class="hljs-comment">/* 通用的中断处理函数,一般用在异常出现时的处理 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">general_intr_handler</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> vec_nr)</span> &#123;<br>   <span class="hljs-keyword">if</span> (vec_nr == <span class="hljs-number">0x27</span> || vec_nr == <span class="hljs-number">0x2f</span>) &#123;<span class="hljs-comment">// 0x2f是从片8259A上的最后一个irq引脚，保留</span><br>      <span class="hljs-keyword">return</span>;<span class="hljs-comment">//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。</span><br>   &#125;<br>   put_str(<span class="hljs-string">&quot;int vector : 0x&quot;</span>);<br>   put_int(vec_nr);<br>   put_char(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 完成一般中断处理函数注册及异常名称注册 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">exception_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;    <span class="hljs-comment">// 完成一般中断处理函数注册及异常名称注册</span><br>   <span class="hljs-type">int</span> i;<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; IDT_DESC_CNT; i++) &#123;<br><br><span class="hljs-comment">/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,</span><br><span class="hljs-comment"> * 见kernel/kernel.S的call [idt_table + %1*4] */</span><br>      idt_table[i] = general_intr_handler;    <span class="hljs-comment">// 默认为general_intr_handler。</span><br>    <span class="hljs-comment">// 以后会由register_handler来注册具体处理函数。</span><br>      intr_name[i] = <span class="hljs-string">&quot;unknown&quot;</span>;    <span class="hljs-comment">// 先统一赋值为unknown </span><br>   &#125;<br>   intr_name[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;#DE Divide Error&quot;</span>;<br>   intr_name[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;#DB Debug Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;NMI Interrupt&quot;</span>;<br>   intr_name[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;#BP Breakpoint Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;#OF Overflow Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">5</span>] = <span class="hljs-string">&quot;#BR BOUND Range Exceeded Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;#UD Invalid Opcode Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">7</span>] = <span class="hljs-string">&quot;#NM Device Not Available Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">8</span>] = <span class="hljs-string">&quot;#DF Double Fault Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">9</span>] = <span class="hljs-string">&quot;Coprocessor Segment Overrun&quot;</span>;<br>   intr_name[<span class="hljs-number">10</span>] = <span class="hljs-string">&quot;#TS Invalid TSS Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">11</span>] = <span class="hljs-string">&quot;#NP Segment Not Present&quot;</span>;<br>   intr_name[<span class="hljs-number">12</span>] = <span class="hljs-string">&quot;#SS Stack Fault Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">13</span>] = <span class="hljs-string">&quot;#GP General Protection Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">14</span>] = <span class="hljs-string">&quot;#PF Page-Fault Exception&quot;</span>;<br>   <span class="hljs-comment">// intr_name[15] 第15项是intel保留项，未使用</span><br>   intr_name[<span class="hljs-number">16</span>] = <span class="hljs-string">&quot;#MF x87 FPU Floating-Point Error&quot;</span>;<br>   intr_name[<span class="hljs-number">17</span>] = <span class="hljs-string">&quot;#AC Alignment Check Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">18</span>] = <span class="hljs-string">&quot;#MC Machine-Check Exception&quot;</span>;<br>   intr_name[<span class="hljs-number">19</span>] = <span class="hljs-string">&quot;#XF SIMD Floating-Point Exception&quot;</span>;<br><br>&#125;<br><br><br><span class="hljs-comment">/*完成有关中断的所有初始化工作*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">idt_init</span><span class="hljs-params">()</span> &#123;<br>   put_str(<span class="hljs-string">&quot;idt_init start\n&quot;</span>);<br>   idt_desc_init();   <span class="hljs-comment">// 初始化中断描述符表</span><br>   exception_init();   <span class="hljs-comment">// 异常名初始化并注册通常的中断处理函数</span><br>   pic_init();   <span class="hljs-comment">// 初始化8259A</span><br><br>   <span class="hljs-comment">/* 加载idt */</span><br>   <span class="hljs-type">uint64_t</span> idt_operand = ((<span class="hljs-keyword">sizeof</span>(idt) - <span class="hljs-number">1</span>) | ((<span class="hljs-type">uint64_t</span>)(<span class="hljs-type">uint32_t</span>)idt &lt;&lt; <span class="hljs-number">16</span>));<br>   <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;lidt %0&quot;</span> : : <span class="hljs-string">&quot;m&quot;</span> (idt_operand))</span>;<br>   put_str(<span class="hljs-string">&quot;idt_init done\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>idt_desc_init():填写33个中断处理程序对应的中断门描述符<br />pic_init() ; 初始化8259A芯片<br />加载idt：即赋值IDTR</p><p>我们写的33个中断处理程序，前20个的中断向量号是异常，由cpu产生<br />第21个到第32个中断向量号需保留，所以名字赋值成unknown。所以两块8259A芯片产生的15个中断向量号从0x20到0x2f。其中IRQ7为并口1，IRQ15是保留，伪中断经常用这两个号，这两个接口无法通过IMR屏蔽寄存器来屏蔽，所以需要软件单独处理。伪中断是一种硬件中断，比如中断线路上的电气信号异常等。本次实验只打开了IRQ0，所以由8259A芯片产生的中断向量号只可能是0x20，0x27、0x2f。CPU还可能产生0~19号中断向量号（第15号除外）。上述本次实验可能产生中断向量号，都会进入中断处理程序，在中断处理程序调用general_intr_handler，打印自己的中断向量号，0x27、0x2f的伪中断除外。</p><h4 id="kernelinitc"><a class="markdownIt-Anchor" href="#kernelinitc"></a> kernel/init.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../device/timer.h&quot;</span></span><br><br><br><span class="hljs-comment">/*负责初始化所有模块 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_all</span><span class="hljs-params">()</span> &#123;<br>   put_str(<span class="hljs-string">&quot;init_all\n&quot;</span>);<br>   idt_init();     <span class="hljs-comment">// 初始化中断</span><br>timer_init();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="devicetimerc"><a class="markdownIt-Anchor" href="#devicetimerc"></a> device/timer.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;io.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;interrupt.h&quot;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IRQ0_FREQUENCY   100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INPUT_FREQUENCY   1193180</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COUNTER0_VALUE   INPUT_FREQUENCY / IRQ0_FREQUENCY</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONTRER0_PORT   0x40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COUNTER0_NO   0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COUNTER_MODE   2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> READ_WRITE_LATCH   3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIT_CONTROL_PORT   0x43</span><br><br><br><br><span class="hljs-comment">/* 把操作的计数器counter_no、读写锁属性rwl、计数器模式counter_mode写入模式控制寄存器并赋予初始值counter_value */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">frequency_set</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> counter_port, \</span><br><span class="hljs-params">  <span class="hljs-type">uint8_t</span> counter_no, \</span><br><span class="hljs-params">  <span class="hljs-type">uint8_t</span> rwl, \</span><br><span class="hljs-params">  <span class="hljs-type">uint8_t</span> counter_mode, \</span><br><span class="hljs-params">  <span class="hljs-type">uint16_t</span> counter_value)</span> &#123;<br><span class="hljs-comment">/* 往控制字寄存器端口0x43中写入控制字 */</span><br>   outb(PIT_CONTROL_PORT, (<span class="hljs-type">uint8_t</span>)(counter_no &lt;&lt; <span class="hljs-number">6</span> | rwl &lt;&lt; <span class="hljs-number">4</span> | counter_mode &lt;&lt; <span class="hljs-number">1</span>));<br><span class="hljs-comment">/* 先写入counter_value的低8位 */</span><br>   outb(counter_port, (<span class="hljs-type">uint8_t</span>)counter_value);<br><span class="hljs-comment">/* 再写入counter_value的高8位 */</span><br>   outb(counter_port, (<span class="hljs-type">uint8_t</span>)counter_value &gt;&gt; <span class="hljs-number">8</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化PIT8253 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">timer_init</span><span class="hljs-params">()</span> &#123;<br>   put_str(<span class="hljs-string">&quot;timer_init start\n&quot;</span>);<br>   <span class="hljs-comment">/* 设置8253的定时周期,也就是发中断的周期 */</span><br>   frequency_set(CONTRER0_PORT, COUNTER0_NO, READ_WRITE_LATCH, COUNTER_MODE, COUNTER0_VALUE);<br>   put_str(<span class="hljs-string">&quot;timer_init done\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="kernelmainc"><a class="markdownIt-Anchor" href="#kernelmainc"></a> kernel/main.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;init.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>   put_str(<span class="hljs-string">&quot;I am kernel\n&quot;</span>);<br>   init_all();<br><span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;sti&quot;</span>)</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="头文件"><a class="markdownIt-Anchor" href="#头文件"></a> 头文件</h3><h4 id="kernelinith"><a class="markdownIt-Anchor" href="#kernelinith"></a> kernel/init.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __KERNEL_INIT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __KERNEL_INIT_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_all</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h4 id="kernelinterrupth"><a class="markdownIt-Anchor" href="#kernelinterrupth"></a> kernel/interrupt.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __KERNEL_INTERRUPT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __KERNEL_INTERRUPT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span>* intr_handler;<br><span class="hljs-type">void</span> <span class="hljs-title function_">idt_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>intr_handler是用来修饰33个中断处理程序入口地址数组intr_entry_table[IDT_DESC_CNT]的，该数组位于某个数据段，成员均是地址。</p><p>void*是空指针类型，表地址。</p><h4 id="libkernelioh"><a class="markdownIt-Anchor" href="#libkernelioh"></a> lib/kernel/io.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/************** 机器模式   ***************</span><br><span class="hljs-comment"> b -- 输出寄存器QImode名称,即寄存器中的最低8位:[a-d]l。</span><br><span class="hljs-comment"> w -- 输出寄存器HImode名称,即寄存器中2个字节的部分,如[a-d]x。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> HImode</span><br><span class="hljs-comment">     “Half-Integer”模式，表示一个两字节的整数。 </span><br><span class="hljs-comment"> QImode</span><br><span class="hljs-comment">     “Quarter-Integer”模式，表示一个一字节的整数。 </span><br><span class="hljs-comment">*******************************************/</span> <br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LIB_IO_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LIB_IO_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><br><span class="hljs-comment">/* 向端口port写入一个字节*/</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">outb</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> port, <span class="hljs-type">uint8_t</span> data)</span> &#123;<br><span class="hljs-comment">/*********************************************************</span><br><span class="hljs-comment"> a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, </span><br><span class="hljs-comment"> %b0表示对应al,%w1表示对应dx */</span> <br>   <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">( <span class="hljs-string">&quot;outb %b0, %w1&quot;</span> : : <span class="hljs-string">&quot;a&quot;</span> (data), <span class="hljs-string">&quot;Nd&quot;</span> (port))</span>;    <br><span class="hljs-comment">/******************************************************/</span><br>&#125;<br><br><span class="hljs-comment">/* 将addr处起始的word_cnt个字写入端口port */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">outsw</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> port, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* addr, <span class="hljs-type">uint32_t</span> word_cnt)</span> &#123;<br><span class="hljs-comment">/*********************************************************</span><br><span class="hljs-comment">   +表示此限制即做输入又做输出.</span><br><span class="hljs-comment">   outsw是把ds:esi处的16位的内容写入port端口, 我们在设置段描述符时, </span><br><span class="hljs-comment">   已经将ds,es,ss段的选择子都设置为相同的值了,此时不用担心数据错乱。*/</span><br>   <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;cld; rep outsw&quot;</span> : <span class="hljs-string">&quot;+S&quot;</span> (addr), <span class="hljs-string">&quot;+c&quot;</span> (word_cnt) : <span class="hljs-string">&quot;d&quot;</span> (port))</span>;<br><span class="hljs-comment">/******************************************************/</span><br>&#125;<br><br><span class="hljs-comment">/* 将从端口port读入的一个字节返回 */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">inb</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> port)</span> &#123;<br>   <span class="hljs-type">uint8_t</span> data;<br>   <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;inb %w1, %b0&quot;</span> : <span class="hljs-string">&quot;=a&quot;</span> (data) : <span class="hljs-string">&quot;Nd&quot;</span> (port))</span>;<br>   <span class="hljs-keyword">return</span> data;<br>&#125;<br><br><span class="hljs-comment">/* 将从端口port读入的word_cnt个字写入addr */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">insw</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> port, <span class="hljs-type">void</span>* addr, <span class="hljs-type">uint32_t</span> word_cnt)</span> &#123;<br><span class="hljs-comment">/******************************************************</span><br><span class="hljs-comment">   insw是将从端口port处读入的16位内容写入es:edi指向的内存,</span><br><span class="hljs-comment">   我们在设置段描述符时, 已经将ds,es,ss段的选择子都设置为相同的值了,</span><br><span class="hljs-comment">   此时不用担心数据错乱。*/</span><br>   <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;cld; rep insw&quot;</span> : <span class="hljs-string">&quot;+D&quot;</span> (addr), <span class="hljs-string">&quot;+c&quot;</span> (word_cnt) : <span class="hljs-string">&quot;d&quot;</span> (port) : <span class="hljs-string">&quot;memory&quot;</span>)</span>;<br><span class="hljs-comment">/******************************************************/</span><br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>平时写函数都是把函数体写在.c的文件里，函数声明写在.h里，其他文件要调用就include .h的文件即可。但是这次却把这些函数写在了.h里。static作用域只是此文件，也就是只有此文件才可以调用。</p><p>对端口的读写或一段连续的内存对端口读写都可以调用汇编指令inb(AT&amp;A)/ins(intel), outsw等。<br />但是为了内核使用c语言在main函数完成8259A的设置，所以可以使用c函数封装内联汇编形式，这些函数都是static inline，意味着当调用此函数时不再是函数调用，而是就地展开，不再需要传递参数入栈，执行快，但程序体积更庞大。<br />之所以这样是因为对端口操作属于I/O操作，非常慢，一旦用户程序调用他们，可能会等很长时间，所以在函数调用方面就要尽可能快来追求更短的总时间。</p><h4 id="kernelglobalh"><a class="markdownIt-Anchor" href="#kernelglobalh"></a> kernel/global.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __KERNEL_GLOBAL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __KERNEL_GLOBAL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RPL0  0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RPL1  1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RPL2  2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RPL3  3</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TI_GDT 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TI_LDT 1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SELECTOR_K_CODE   ((1 &lt;&lt; 3) + (TI_GDT &lt;&lt; 2) + RPL0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SELECTOR_K_DATA   ((2 &lt;&lt; 3) + (TI_GDT &lt;&lt; 2) + RPL0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SELECTOR_K_STACK   SELECTOR_K_DATA </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SELECTOR_K_GS   ((3 &lt;&lt; 3) + (TI_GDT &lt;&lt; 2) + RPL0)</span><br><br><br><span class="hljs-comment">//--------------   IDT描述符属性  ------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_P 1 </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_DPL0   0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_DPL3   3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_32_TYPE     0xE   <span class="hljs-comment">// 32位的门</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_16_TYPE     0x6   <span class="hljs-comment">// 16位的门，不用，定义它只为和32位门区分</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_ATTR_DPL0  ((IDT_DESC_P &lt;&lt; 7) + (IDT_DESC_DPL0 &lt;&lt; 5) + IDT_DESC_32_TYPE)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_DESC_ATTR_DPL3  ((IDT_DESC_P &lt;&lt; 7) + (IDT_DESC_DPL3 &lt;&lt; 5) + IDT_DESC_32_TYPE)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h4 id="devicetimerh"><a class="markdownIt-Anchor" href="#devicetimerh"></a> device/timer.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __DEVICE_TIME_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __DEVICE_TIME_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">timer_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">mtime_sleep</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> m_seconds)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>不知不觉已经走过了将近一半的路程，回过头看实在艰辛，不过想想自己在这几天收获的东西真是很多。下一章节不准备向下进行了，我想把这半程的过程重新整理一下，并且把代码托管到github上。收拾一下行囊，再出发！</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第六章 完善内核 开启c和汇编混合编程</title>
    <link href="/2022/07/18/os(6)/"/>
    <url>/2022/07/18/os(6)/</url>
    
    <content type="html"><![CDATA[<h1 id="第六章-完善内核-开启c和汇编混合编程"><a class="markdownIt-Anchor" href="#第六章-完善内核-开启c和汇编混合编程"></a> 第六章 完善内核 开启c和汇编混合编程</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>不知不觉已经16日了，前几天出门旅游几天放松了下，回来继续学习。这章开始进入了C语言和汇编混合编程，用来丰富我们的内核。</p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>本章围绕在C语言和汇编混合编程这一块，有了前面几章的铺垫，书上概念理解起来不是很困难。但是在实际编程过程中如果按照书上代码照搬的话会有很多报错。其原因主要出现在gcc编译器的版本和64位系统无法编译。</p><p>下面贴上本章代码：<br />print.S:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></div></td><td class="code"><pre><code class="hljs x86asm">TI_GDT <span class="hljs-built_in">equ</span>  <span class="hljs-number">0</span><br>RPL0  <span class="hljs-built_in">equ</span>   <span class="hljs-number">0</span><br>SELECTOR_VIDEO <span class="hljs-built_in">equ</span> (<span class="hljs-number">0x0003</span>&lt;&lt;<span class="hljs-number">3</span>) + TI_GDT + RPL0<br><br><br>[<span class="hljs-meta">bits</span> <span class="hljs-number">32</span>]<br><span class="hljs-meta">section</span> .text<br><br><span class="hljs-comment">;------------------------   put_char   -----------------------------</span><br><span class="hljs-comment">;功能描述:把栈中的1个字符写入光标所在处</span><br><span class="hljs-comment">;-------------------------------------------------------------------   </span><br><span class="hljs-meta">global</span> put_char<br><span class="hljs-symbol">put_char:</span><br>   <span class="hljs-keyword">pushad</span>   <span class="hljs-comment">;备份32位寄存器环境</span><br>   <span class="hljs-comment">;需要保证gs中为正确的视频段选择子,为保险起见,每次打印时都为gs赋值</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, SELECTOR_VIDEO       <span class="hljs-comment">; 不能直接把立即数送入段寄存器</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">gs</span>, <span class="hljs-built_in">ax</span><br><br><span class="hljs-comment">;;;;;;;;;  获取当前光标位置 ;;;;;;;;;</span><br>   <span class="hljs-comment">;先获得高8位</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x03d4</span>  <span class="hljs-comment">;索引寄存器</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0x0e</span>   <span class="hljs-comment">;用于提供光标位置的高8位</span><br>   <span class="hljs-keyword">out</span> <span class="hljs-built_in">dx</span>, <span class="hljs-built_in">al</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x03d5</span>  <span class="hljs-comment">;通过读写数据端口0x3d5来获得或设置光标位置 </span><br>   <span class="hljs-keyword">in</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">dx</span>   <span class="hljs-comment">;得到了光标位置的高8位</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>, <span class="hljs-built_in">al</span><br><br>   <span class="hljs-comment">;再获取低8位</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x03d4</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0x0f</span><br>   <span class="hljs-keyword">out</span> <span class="hljs-built_in">dx</span>, <span class="hljs-built_in">al</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x03d5</span> <br>   <span class="hljs-keyword">in</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">dx</span><br><br>   <span class="hljs-comment">;将光标存入bx</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>, <span class="hljs-built_in">ax</span>  <br>   <span class="hljs-comment">;下面这行是在栈中获取待打印的字符</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">esp</span> + <span class="hljs-number">36</span>]      <span class="hljs-comment">;pushad压入4×8＝32字节,加上主调函数的返回地址4字节,故esp+36字节</span><br>   <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">cl</span>, <span class="hljs-number">0xd</span>  <span class="hljs-comment">;CR是0x0d,LF是0x0a</span><br>   <span class="hljs-keyword">jz</span> .is_carriage_return<br>   <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">cl</span>, <span class="hljs-number">0xa</span><br>   <span class="hljs-keyword">jz</span> .is_line_feed<br><br>   <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">cl</span>, <span class="hljs-number">0x8</span>  <span class="hljs-comment">;BS(backspace)的asc码是8</span><br>   <span class="hljs-keyword">jz</span> .is_backspace<br>   <span class="hljs-keyword">jmp</span> .put_other   <br><span class="hljs-comment">;;;;;;;;;;;;;;;;;;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"> .is_backspace:</span>      <br><span class="hljs-comment">;;;;;;;;;;;;       backspace的一点说明     ;;;;;;;;;;</span><br><span class="hljs-comment">; 当为backspace时,本质上只要将光标移向前一个显存位置即可.后面再输入的字符自然会覆盖此处的字符</span><br><span class="hljs-comment">; 但有可能在键入backspace后并不再键入新的字符,这时在光标已经向前移动到待删除的字符位置,但字符还在原处,</span><br><span class="hljs-comment">; 这就显得好怪异,所以此处添加了空格或空字符0</span><br>   <span class="hljs-keyword">dec</span> <span class="hljs-built_in">bx</span><br>   <span class="hljs-keyword">shl</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">1</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-built_in">bx</span>], <span class="hljs-number">0x20</span>  <span class="hljs-comment">;将待删除的字节补为0或空格皆可</span><br>   <span class="hljs-keyword">inc</span> <span class="hljs-built_in">bx</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-built_in">bx</span>], <span class="hljs-number">0x07</span><br>   <span class="hljs-keyword">shr</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">1</span><br>   <span class="hljs-keyword">jmp</span> .set_cursor<br><span class="hljs-comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"> .put_other:</span><br>   <span class="hljs-keyword">shl</span> <span class="hljs-built_in">bx</span>, <span class="hljs-number">1</span>  <span class="hljs-comment">; 光标位置是用2字节表示,将光标值乘2,表示对应显存中的偏移字节</span><br>   <span class="hljs-keyword">mov</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-built_in">bx</span>], <span class="hljs-built_in">cl</span>  <span class="hljs-comment">; ascii字符本身</span><br>   <span class="hljs-keyword">inc</span> <span class="hljs-built_in">bx</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-built_in">bx</span>],<span class="hljs-number">0x07</span>  <span class="hljs-comment">; 字符属性</span><br>   <span class="hljs-keyword">shr</span> <span class="hljs-built_in">bx</span>, <span class="hljs-number">1</span>  <span class="hljs-comment">; 恢复老的光标值</span><br>   <span class="hljs-keyword">inc</span> <span class="hljs-built_in">bx</span>  <span class="hljs-comment">; 下一个光标值</span><br>   <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">bx</span>, <span class="hljs-number">2000</span>   <br>   <span class="hljs-keyword">jl</span> .set_cursor  <span class="hljs-comment">; 若光标值小于2000,表示未写到显存的最后,则去设置新的光标值</span><br>  <span class="hljs-comment">; 若超出屏幕字符数大小(2000)则换行处理</span><br><span class="hljs-symbol"> .is_line_feed:</span>  <span class="hljs-comment">; 是换行符LF(\n)</span><br><span class="hljs-symbol"> .is_carriage_return:</span>  <span class="hljs-comment">; 是回车符CR(\r)</span><br>  <span class="hljs-comment">; 如果是CR(\r),只要把光标移到行首就行了。</span><br>   <span class="hljs-keyword">xor</span> <span class="hljs-built_in">dx</span>, <span class="hljs-built_in">dx</span>  <span class="hljs-comment">; dx是被除数的高16位,清0.</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, <span class="hljs-built_in">bx</span>  <span class="hljs-comment">; ax是被除数的低16位.</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>, <span class="hljs-number">80</span>  <span class="hljs-comment">; 由于是效仿linux，linux中\n便表示下一行的行首，所以本系统中，</span><br>   <span class="hljs-keyword">div</span> <span class="hljs-built_in">si</span>  <span class="hljs-comment">; 把\n和\r都处理为linux中\n的意思，也就是下一行的行首。</span><br>   <span class="hljs-keyword">sub</span> <span class="hljs-built_in">bx</span>, <span class="hljs-built_in">dx</span>  <span class="hljs-comment">; 光标值减去除80的余数便是取整</span><br>  <span class="hljs-comment">; 以上4行处理\r的代码</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"> .is_carriage_return_end:</span>                 <span class="hljs-comment">; 回车符CR处理结束</span><br>   <span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>, <span class="hljs-number">80</span><br>   <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">bx</span>, <span class="hljs-number">2000</span><br><span class="hljs-symbol"> .is_line_feed_end:</span>  <span class="hljs-comment">; 若是LF(\n),将光标移+80便可。  </span><br>   <span class="hljs-keyword">jl</span> .set_cursor<br><br><span class="hljs-comment">;屏幕行范围是0~24,滚屏的原理是将屏幕的1~24行搬运到0~23行,再将第24行用空格填充</span><br><span class="hljs-symbol"> .roll_screen:</span>  <span class="hljs-comment">; 若超出屏幕大小，开始滚屏</span><br>   <span class="hljs-keyword">cld</span>  <br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-number">960</span>  <span class="hljs-comment">; 一共有2000-80=1920个字符要搬运,共1920*2=3840字节.一次搬4字节,共3840/4=960次 </span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">esi</span>, <span class="hljs-number">0xc00b80a0</span>  <span class="hljs-comment">; 第1行行首</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">edi</span>, <span class="hljs-number">0xc00b8000</span>  <span class="hljs-comment">; 第0行行首</span><br>   <span class="hljs-keyword">rep</span> <span class="hljs-keyword">movsd</span>  <br><br><span class="hljs-comment">;;;;;;;将最后一行填充为空白</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>, <span class="hljs-number">3840</span>  <span class="hljs-comment">; 最后一行首字符的第一个字节偏移= 1920 * 2</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-number">80</span>  <span class="hljs-comment">;一行是80字符(160字节),每次清理1字符(2字节),一行需要移动80次</span><br><span class="hljs-symbol"> .cls:</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">word</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-built_in">ebx</span>], <span class="hljs-number">0x0720</span>  <span class="hljs-comment">;0x0720是黑底白字的空格键</span><br>   <span class="hljs-keyword">add</span> <span class="hljs-built_in">ebx</span>, <span class="hljs-number">2</span><br>   <span class="hljs-keyword">loop</span> .cls <br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">1920</span>  <span class="hljs-comment">;将光标值重置为1920,最后一行的首字符.</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"> .set_cursor:</span>   <br>  <span class="hljs-comment">;将光标设为bx值</span><br><span class="hljs-comment">;;;;;;; 1 先设置高8位 ;;;;;;;;</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x03d4</span>  <span class="hljs-comment">;索引寄存器</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0x0e</span>  <span class="hljs-comment">;用于提供光标位置的高8位</span><br>   <span class="hljs-keyword">out</span> <span class="hljs-built_in">dx</span>, <span class="hljs-built_in">al</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x03d5</span>  <span class="hljs-comment">;通过读写数据端口0x3d5来获得或设置光标位置 </span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">bh</span><br>   <span class="hljs-keyword">out</span> <span class="hljs-built_in">dx</span>, <span class="hljs-built_in">al</span><br><br><span class="hljs-comment">;;;;;;; 2 再设置低8位 ;;;;;;;;;</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x03d4</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0x0f</span><br>   <span class="hljs-keyword">out</span> <span class="hljs-built_in">dx</span>, <span class="hljs-built_in">al</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x03d5</span> <br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">bl</span><br>   <span class="hljs-keyword">out</span> <span class="hljs-built_in">dx</span>, <span class="hljs-built_in">al</span><br><span class="hljs-symbol"> .put_char_done:</span> <br>   <span class="hljs-keyword">popad</span><br>   <span class="hljs-keyword">ret</span><br></code></pre></td></tr></table></figure><p>main.c:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-id">#include</span> &quot;print<span class="hljs-selector-class">.h</span>&quot;<br>void <span class="hljs-selector-tag">main</span>(void)<br>&#123;<br><span class="hljs-built_in">put_char</span>(&#x27;K&#x27;);<br><span class="hljs-built_in">put_char</span>(&#x27;e&#x27;);<br><span class="hljs-built_in">put_char</span>(&#x27;r&#x27;);<br><span class="hljs-built_in">put_char</span>(&#x27;n&#x27;);<br><span class="hljs-built_in">put_char</span>(&#x27;e&#x27;);<br><span class="hljs-built_in">put_char</span>(&#x27;l&#x27;);<br><span class="hljs-built_in">put_char</span>(&#x27;\n&#x27;);<br><span class="hljs-built_in">put_char</span>(&#x27;<span class="hljs-number">1</span>&#x27;);<br><span class="hljs-built_in">put_char</span>(&#x27;<span class="hljs-number">2</span>&#x27;);<br><span class="hljs-built_in">put_char</span>(&#x27;\b&#x27;);<br><span class="hljs-built_in">put_char</span>(&#x27;<span class="hljs-number">3</span>&#x27;);<br><span class="hljs-built_in">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>stdint.h:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LIB_STDINT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LIB_STDINT_H</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">signed</span> <span class="hljs-type">char</span> <span class="hljs-type">int8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">signed</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">int16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">signed</span> <span class="hljs-type">int</span> <span class="hljs-type">int32_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">signed</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">int64_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">uint16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">uint64_t</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>print.h:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LIB_KERNEL_PRINT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LIB_KERNEL_PRINT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">put_char</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> char_asci)</span></span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>以上就是本章全部的代码，下面我再把编译链接的语句也贴上，直接复制到终端就行了：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle">nasm -o boot<span class="hljs-regexp">/mbr.bin boot/m</span>br.S<br>dd <span class="hljs-keyword">if</span>=<span class="hljs-regexp">/home/</span>podest<span class="hljs-regexp">/bochs/</span>boot<span class="hljs-regexp">/mbr.bin of=/</span>home<span class="hljs-regexp">/podest/</span>bochs/hd60M.img bs=<span class="hljs-number">512</span> <span class="hljs-keyword">count</span>=<span class="hljs-number">1</span> seek=<span class="hljs-number">0</span> conv=notrunc<br>nasm -o boot<span class="hljs-regexp">/loader.bin boot/</span>loader.S<br>dd <span class="hljs-keyword">if</span>=<span class="hljs-regexp">/home/</span>podest<span class="hljs-regexp">/bochs/</span>boot<span class="hljs-regexp">/loader.bin of=/</span>home<span class="hljs-regexp">/podest/</span>bochs/hd60M.img bs=<span class="hljs-number">512</span> <span class="hljs-keyword">count</span>=<span class="hljs-number">3</span> seek=<span class="hljs-number">2</span> conv=notrunc<br>nasm -f elf -o lib<span class="hljs-regexp">/kernel/</span><span class="hljs-keyword">print</span>.o lib<span class="hljs-regexp">/kernel/</span><span class="hljs-keyword">print</span>.S<br>gcc -m32 -I  lib<span class="hljs-regexp">/kernel/</span> -c -o kernel<span class="hljs-regexp">/main.o kernel/m</span>ain.c<br>ld -m elf_i386 -Ttext <span class="hljs-number">0</span>xc0001500 -e main -o kernel<span class="hljs-regexp">/kernel.bin kernel/m</span>ain.o  lib<span class="hljs-regexp">/kernel/</span><span class="hljs-keyword">print</span>.o<br>dd <span class="hljs-keyword">if</span>=<span class="hljs-regexp">/home/</span>podest<span class="hljs-regexp">/bochs/</span>kernel<span class="hljs-regexp">/kernel.bin of=/</span>home<span class="hljs-regexp">/podest/</span>bochs/hd60M.img bs=<span class="hljs-number">512</span> <span class="hljs-keyword">count</span>=<span class="hljs-number">200</span> seek=<span class="hljs-number">9</span> conv=notrunc<br>bin/bochs -f bochsrc.disk<br></code></pre></td></tr></table></figure><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>本来想着在17日晚上就把这一章结束的，但是17日bochs一直在崩溃退出，原因也是出在代码上面，又参考了别人的代码才勉强完成。在调试的过程中也深知自己对于汇编的掌握还需加强。也开始再重新回看之前几章的内容，这一过程相比第一次读更令我受益匪浅。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第五章 内存分页 向内核迈进</title>
    <link href="/2022/07/12/os(5)/"/>
    <url>/2022/07/12/os(5)/</url>
    
    <content type="html"><![CDATA[<h1 id="第五章-内存分页-向内核迈进"><a class="markdownIt-Anchor" href="#第五章-内存分页-向内核迈进"></a> 第五章 内存分页 向内核迈进</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>现在是10号早上8点，外面阴雨连绵，翻看目录想必这一章又是难上加难，继续战斗吧。<br />补：本章主要代码部分是loader和boot.inc的修改，书中描绘是按功能来的，过程中我就不再贴代码了，否则会显得太过冗长，我会将总代码放在文末。</p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>梳理一下本章节基本内容。首先描述了通过loader获取到整个物理内存容量的基本操作，后面会经常用到。主要是通过BIOS中断0x15的三个子功能实现，其中0xe820功能最强但也最为繁琐，0xe801次之，0x88最后。然后对loader进行一个修改就可以了，目前还用不到这项功能。</p><blockquote><p>虽然博客只写了这么几行，但是遗憾的是现在已经是11号晚上9点了。这两天一直在调试这一章的内容，但是按书上的代码运行却出现了许多错误，究其原因，问题来自于gcc的版本，如果高于gcc5就会出现各种问题，所以我尝试将gcc降级，难以接受的是我找遍了网络也没找到ubuntu22.04gcc降级的方法。一气之下我又重新下载了ubuntu16的虚拟机，又重新将之前的代码调试了一遍，真是劳心费神。</p></blockquote><p>其次，实现了内存分页机制，再次修改loader，同时为了匹配上loader的修改，也要对boot进行一个更新。最后，用C语言加载了一个简单的内核，并且在loader中创建一个接口跳转向内核。</p><h3 id="loaders"><a class="markdownIt-Anchor" href="#loaders"></a> loader.S</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br></pre></div></td><td class="code"><pre><code class="hljs mipsasm">   %include <span class="hljs-string">&quot;include/boot.inc&quot;</span><br>   section loader vstart=LOADER_BASE_ADDR<br>   LOADER_STACK_TOP equ LOADER_BASE_ADDR<br><span class="hljs-comment">;构建gdt及其内部的描述符</span><br><span class="hljs-symbol">   GDT_BASE:</span>   dd    <span class="hljs-number">0x00000000</span> <br>       dd    <span class="hljs-number">0x00000000</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">   CODE_DESC:</span>  dd    <span class="hljs-number">0x0000FFFF</span> <br>       dd    DESC_CODE_HIGH4<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">   DATA_STACK_DESC:</span>  dd    <span class="hljs-number">0x0000FFFF</span><br>     dd    DESC_DATA_HIGH4<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">   VIDEO_DESC:</span> dd    <span class="hljs-number">0x80000007</span>       <span class="hljs-comment">; limit=(0xbffff-0xb8000)/4k=0x7</span><br>       dd    DESC_VIDEO_HIGH4  <span class="hljs-comment">; 此时dpl为0</span><br><br>   GDT_SIZE   equ   $ - GDT_BASE<br>   GDT_LIMIT   equ   GDT_SIZE -<span class="hljs-number">1</span> <br>   times <span class="hljs-number">60</span> dq <span class="hljs-number">0</span> <span class="hljs-comment">; 此处预留60个描述符的空位(slot)</span><br>   SELECTOR_CODE equ (<span class="hljs-number">0x0001</span>&lt;&lt;<span class="hljs-number">3</span>) + TI_GDT + RPL0         <span class="hljs-comment">; 相当于(CODE_DESC - GDT_BASE)/8 + TI_GDT + RPL0</span><br>   SELECTOR_DATA equ (<span class="hljs-number">0x0002</span>&lt;&lt;<span class="hljs-number">3</span>) + TI_GDT + RPL0 <span class="hljs-comment">; 同上</span><br>   SELECTOR_VIDEO equ (<span class="hljs-number">0x0003</span>&lt;&lt;<span class="hljs-number">3</span>) + TI_GDT + RPL0 <span class="hljs-comment">; 同上 </span><br><br>   <span class="hljs-comment">; total_mem_bytes用于保存内存容量,以字节为单位,此位置比较好记。</span><br>   <span class="hljs-comment">; 当前偏移loader.bin文件头0x200字节,loader.bin的加载地址是0x900,</span><br>   <span class="hljs-comment">; 故total_mem_bytes内存中的地址是0xb00.将来在内核中咱们会引用此地址</span><br>   total_mem_bytes dd <span class="hljs-number">0</span> <br>   <span class="hljs-comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><br><br>   <span class="hljs-comment">;以下是定义gdt的指针，前2字节是gdt界限，后4字节是gdt起始地址</span><br>   gdt_ptr  dw  GDT_LIMIT <br>    dd  GDT_BASE<br><br>   <span class="hljs-comment">;人工对齐:total_mem_bytes4字节+gdt_ptr6字节+ards_buf244字节+ards_nr2,共256字节</span><br>   ards_buf times <span class="hljs-number">244</span> db <span class="hljs-number">0</span><br>   ards_nr dw <span class="hljs-number">0</span>      <span class="hljs-comment">;用于记录ards结构体数量</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">   loader_start:</span><br>   <br><span class="hljs-comment">;-------  int 15h eax = 0000E820h ,edx = 534D4150h (&#x27;SMAP&#x27;) 获取内存布局  -------</span><br><br>   <span class="hljs-keyword">xor </span>ebx, ebx      <span class="hljs-comment">;第一次调用时，ebx值要为0</span><br>   mov edx, <span class="hljs-number">0x534d4150</span>      <span class="hljs-comment">;edx只赋值一次，循环体中不会改变</span><br>   mov <span class="hljs-keyword">di, </span>ards_buf      <span class="hljs-comment">;ards结构缓冲区</span><br><span class="hljs-symbol">.e820_mem_get_loop:</span>      <span class="hljs-comment">;循环获取每个ARDS内存范围描述结构</span><br>   mov eax, <span class="hljs-number">0x0000e820</span>      <span class="hljs-comment">;执行int 0x15后,eax值变为0x534d4150,所以每次执行int前都要更新为子功能号。</span><br>   mov ecx, <span class="hljs-number">20</span>      <span class="hljs-comment">;ARDS地址范围描述符结构大小是20字节</span><br>   int <span class="hljs-number">0x15</span><br>   <span class="hljs-keyword">jc </span>.e820_failed_so_try_e801   <span class="hljs-comment">;若cf位为1则有错误发生，尝试0xe801子功能</span><br>   <span class="hljs-keyword">add </span><span class="hljs-keyword">di, </span>cx      <span class="hljs-comment">;使di增加20字节指向缓冲区中新的ARDS结构位置</span><br>   inc word [ards_nr]      <span class="hljs-comment">;记录ARDS数量</span><br>   cmp ebx, <span class="hljs-number">0</span>      <span class="hljs-comment">;若ebx为0且cf不为1,这说明ards全部返回，当前已是最后一个</span><br>   <span class="hljs-keyword">jnz </span>.e820_mem_get_loop<br><br><span class="hljs-comment">;在所有ards结构中，找出(base_add_low + length_low)的最大值，即内存的容量。</span><br>   mov cx, [ards_nr]      <span class="hljs-comment">;遍历每一个ARDS结构体,循环次数是ARDS的数量</span><br>   mov ebx, ards_buf <br>   <span class="hljs-keyword">xor </span>edx, edx      <span class="hljs-comment">;edx为最大的内存容量,在此先清0</span><br><span class="hljs-symbol">.find_max_mem_area:</span>      <span class="hljs-comment">;无须判断type是否为1,最大的内存块一定是可被使用</span><br>   mov eax, [ebx]      <span class="hljs-comment">;base_add_low</span><br>   <span class="hljs-keyword">add </span>eax, [ebx+<span class="hljs-number">8</span>]      <span class="hljs-comment">;length_low</span><br>   <span class="hljs-keyword">add </span>ebx, <span class="hljs-number">20</span>      <span class="hljs-comment">;指向缓冲区中下一个ARDS结构</span><br>   cmp edx, eax      <span class="hljs-comment">;冒泡排序，找出最大,edx寄存器始终是最大的内存容量</span><br>   <span class="hljs-keyword">jge </span>.next_ards<br>   mov edx, eax      <span class="hljs-comment">;edx为总内存大小</span><br><span class="hljs-symbol">.next_ards:</span><br>   loop .find_max_mem_area<br>   <span class="hljs-keyword">jmp </span>.mem_get_ok<br><br><span class="hljs-comment">;------  int 15h ax = E801h 获取内存大小,最大支持4G  ------</span><br><span class="hljs-comment">; 返回后, ax cx 值一样,以KB为单位,bx dx值一样,以64KB为单位</span><br><span class="hljs-comment">; 在ax和cx寄存器中为低16M,在bx和dx寄存器中为16MB到4G。</span><br><span class="hljs-symbol">.e820_failed_so_try_e801:</span><br>   mov ax,<span class="hljs-number">0xe801</span><br>   int <span class="hljs-number">0x15</span><br>   <span class="hljs-keyword">jc </span>.e801_failed_so_try88   <span class="hljs-comment">;若当前e801方法失败,就尝试0x88方法</span><br><br><span class="hljs-comment">;1 先算出低15M的内存,ax和cx中是以KB为单位的内存数量,将其转换为以byte为单位</span><br>   mov cx,<span class="hljs-number">0x400</span>     <span class="hljs-comment">;cx和ax值一样,cx用做乘数</span><br>   <span class="hljs-keyword">mul </span>cx <br>   <span class="hljs-keyword">shl </span>edx,<span class="hljs-number">16</span><br>   <span class="hljs-keyword">and </span>eax,<span class="hljs-number">0x0000FFFF</span><br>   <span class="hljs-keyword">or </span>edx,eax<br>   <span class="hljs-keyword">add </span>edx, <span class="hljs-number">0x100000</span> <span class="hljs-comment">;ax只是15MB,故要加1MB</span><br>   mov esi,edx     <span class="hljs-comment">;先把低15MB的内存容量存入esi寄存器备份</span><br><br><span class="hljs-comment">;2 再将16MB以上的内存转换为byte为单位,寄存器bx和dx中是以64KB为单位的内存数量</span><br>   <span class="hljs-keyword">xor </span>eax,eax<br>   mov ax,<span class="hljs-keyword">bx</span><br>   mov ecx, <span class="hljs-number">0x10000</span><span class="hljs-comment">;0x10000十进制为64KB</span><br>   <span class="hljs-keyword">mul </span>ecx<span class="hljs-comment">;32位乘法,默认的被乘数是eax,积为64位,高32位存入edx,低32位存入eax.</span><br>   <span class="hljs-keyword">add </span>esi,eax<span class="hljs-comment">;由于此方法只能测出4G以内的内存,故32位eax足够了,edx肯定为0,只加eax便可</span><br>   mov edx,esi<span class="hljs-comment">;edx为总内存大小</span><br>   <span class="hljs-keyword">jmp </span>.mem_get_ok<br><br><span class="hljs-comment">;-----------------  int 15h ah = 0x88 获取内存大小,只能获取64M之内  ----------</span><br><span class="hljs-symbol">.e801_failed_so_try88:</span> <br>   <span class="hljs-comment">;int 15后，ax存入的是以kb为单位的内存容量</span><br>   mov  ah, <span class="hljs-number">0x88</span><br>   int  <span class="hljs-number">0x15</span><br>   <span class="hljs-keyword">jc </span>.error_hlt<br>   <span class="hljs-keyword">and </span>eax,<span class="hljs-number">0x0000FFFF</span><br>      <br>   <span class="hljs-comment">;16位乘法，被乘数是ax,积为32位.积的高16位在dx中，积的低16位在ax中</span><br>   mov cx, <span class="hljs-number">0x400</span>     <span class="hljs-comment">;0x400等于1024,将ax中的内存容量换为以byte为单位</span><br>   <span class="hljs-keyword">mul </span>cx<br>   <span class="hljs-keyword">shl </span>edx, <span class="hljs-number">16</span>     <span class="hljs-comment">;把dx移到高16位</span><br>   <span class="hljs-keyword">or </span>edx, eax     <span class="hljs-comment">;把积的低16位组合到edx,为32位的积</span><br>   <span class="hljs-keyword">add </span>edx,<span class="hljs-number">0x100000</span>  <span class="hljs-comment">;0x88子功能只会返回1MB以上的内存,故实际内存大小要加上1MB</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">.mem_get_ok:</span><br>   mov [total_mem_bytes], edx <span class="hljs-comment">;将内存换为byte单位后存入total_mem_bytes处。</span><br><br><br><span class="hljs-comment">;-----------------   准备进入保护模式   -------------------</span><br><span class="hljs-comment">;1 打开A20</span><br><span class="hljs-comment">;2 加载gdt</span><br><span class="hljs-comment">;3 将cr0的pe位置1</span><br><br>   <span class="hljs-comment">;-----------------  打开A20  ----------------</span><br>   in al,<span class="hljs-number">0x92</span><br>   <span class="hljs-keyword">or </span>al,<span class="hljs-number">0000</span>_<span class="hljs-symbol">0010B</span><br>   out <span class="hljs-number">0x92</span>,al<br><br>   <span class="hljs-comment">;-----------------  加载GDT  ----------------</span><br>   lgdt [gdt_ptr]<br><br>   <span class="hljs-comment">;-----------------  cr0第0位置1  ----------------</span><br>   mov eax, cr0<br>   <span class="hljs-keyword">or </span>eax, <span class="hljs-number">0x00000001</span><br>   mov cr0, eax<br><br>   <span class="hljs-keyword">jmp </span>dword SELECTOR_CODE:p_mode_start     <span class="hljs-comment">; 刷新流水线，避免分支预测的影响,这种cpu优化策略，最怕jmp跳转，</span><br>     <span class="hljs-comment">; 这将导致之前做的预测失效，从而起到了刷新的作用。</span><br><span class="hljs-symbol">.error_hlt:</span>      <span class="hljs-comment">;出错则挂起</span><br>   hlt<br><br>[<span class="hljs-keyword">bits </span><span class="hljs-number">32</span>]<br><span class="hljs-symbol">p_mode_start:</span><br>   mov ax, SELECTOR_DATA<br>   mov ds, ax<br>   mov es, ax<br>   mov ss, ax<br>   mov esp,LOADER_STACK_TOP<br>   mov ax, SELECTOR_VIDEO<br>   mov gs, ax<br><br><span class="hljs-comment">; -------------------------   加载kernel  ----------------------</span><br>   mov eax, KERNEL_START_SECTOR        <span class="hljs-comment">; kernel.bin所在的扇区号</span><br>   mov ebx, KERNEL_BIN_BASE_ADDR       <span class="hljs-comment">; 从磁盘读出后，写入到ebx指定的地址</span><br>   mov ecx, <span class="hljs-number">200</span>       <span class="hljs-comment">; 读入的扇区数</span><br><br>   call rd_disk_m_32<br><br>   <span class="hljs-comment">; 创建页目录及页表并初始化页内存位图</span><br>   call setup_page<br><br>   <span class="hljs-comment">;要将描述符表地址及偏移量写入内存gdt_ptr,一会用新地址重新加载</span><br>   sgdt [gdt_ptr]      <span class="hljs-comment">; 存储到原来gdt所有的位置</span><br><br>   <span class="hljs-comment">;将gdt描述符中视频段描述符中的段基址+0xc0000000</span><br>   mov ebx, [gdt_ptr + <span class="hljs-number">2</span>]  <br>   <span class="hljs-keyword">or </span>dword [ebx + <span class="hljs-number">0x18</span> + <span class="hljs-number">4</span>], <span class="hljs-number">0xc0000000</span>      <span class="hljs-comment">;视频段是第3个段描述符,每个描述符是8字节,故0x18。</span><br>      <span class="hljs-comment">;段描述符的高4字节的最高位是段基址的31~24位</span><br><br>   <span class="hljs-comment">;将gdt的基址加上0xc0000000使其成为内核所在的高地址</span><br>   <span class="hljs-keyword">add </span>dword [gdt_ptr + <span class="hljs-number">2</span>], <span class="hljs-number">0xc0000000</span><br><br>   <span class="hljs-keyword">add </span>esp, <span class="hljs-number">0xc0000000</span>        <span class="hljs-comment">; 将栈指针同样映射到内核地址</span><br><br>   <span class="hljs-comment">; 把页目录地址赋给cr3</span><br>   mov eax, PAGE_DIR_TABLE_POS<br>   mov cr3, eax<br><br>   <span class="hljs-comment">; 打开cr0的pg位(第31位)</span><br>   mov eax, cr0<br>   <span class="hljs-keyword">or </span>eax, <span class="hljs-number">0x80000000</span><br>   mov cr0, eax<br><br>   <span class="hljs-comment">;在开启分页后,用gdt新的地址重新加载</span><br>   lgdt [gdt_ptr]             <span class="hljs-comment">; 重新加载</span><br><br><span class="hljs-comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;  此时不刷新流水线也没问题  ;;;;;;;;;;;;;;;;;;;;;;;;</span><br><span class="hljs-comment">;由于一直处在32位下,原则上不需要强制刷新,经过实际测试没有以下这两句也没问题.</span><br><span class="hljs-comment">;但以防万一，还是加上啦，免得将来出来莫句奇妙的问题.</span><br>   <span class="hljs-keyword">jmp </span>SELECTOR_CODE:enter_kernel  <span class="hljs-comment">;强制刷新流水线,更新gdt</span><br><span class="hljs-symbol">enter_kernel:</span>    <br><span class="hljs-comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><br>   call kernel_init<br>   mov esp, <span class="hljs-number">0xc009f000</span><br>   <span class="hljs-keyword">jmp </span>KERNEL_ENTRY_POINT                 <span class="hljs-comment">; 用地址0x1500访问测试，结果ok</span><br><br><br><span class="hljs-comment">;-----------------   将kernel.bin中的segment拷贝到编译的地址   -----------</span><br><span class="hljs-symbol">kernel_init:</span><br>   <span class="hljs-keyword">xor </span>eax, eax<br>   <span class="hljs-keyword">xor </span>ebx, ebx<span class="hljs-comment">;ebx记录程序头表地址</span><br>   <span class="hljs-keyword">xor </span>ecx, ecx<span class="hljs-comment">;cx记录程序头表中的program header数量</span><br>   <span class="hljs-keyword">xor </span>edx, edx<span class="hljs-comment">;dx 记录program header尺寸,即e_phentsize</span><br><br>   mov dx, [KERNEL_BIN_BASE_ADDR + <span class="hljs-number">42</span>]  <span class="hljs-comment">; 偏移文件42字节处的属性是e_phentsize,表示program header大小</span><br>   mov ebx, [KERNEL_BIN_BASE_ADDR + <span class="hljs-number">28</span>]   <span class="hljs-comment">; 偏移文件开始部分28字节的地方是e_phoff,表示第1 个program header在文件中的偏移量</span><br>  <span class="hljs-comment">; 其实该值是0x34,不过还是谨慎一点，这里来读取实际值</span><br>   <span class="hljs-keyword">add </span>ebx, KERNEL_BIN_BASE_ADDR<br>   mov cx, [KERNEL_BIN_BASE_ADDR + <span class="hljs-number">44</span>]    <span class="hljs-comment">; 偏移文件开始部分44字节的地方是e_phnum,表示有几个program header</span><br><span class="hljs-symbol">.each_segment:</span><br>   cmp <span class="hljs-keyword">byte </span>[ebx + <span class="hljs-number">0</span>], PT_NULL  <span class="hljs-comment">; 若p_type等于 PT_NULL,说明此program header未使用。</span><br>   <span class="hljs-keyword">je </span>.PTNULL<br><br>   <span class="hljs-comment">;为函数memcpy压入参数,参数是从右往左依然压入.函数原型类似于 memcpy(dst,src,size)</span><br>   push dword [ebx + <span class="hljs-number">16</span>]  <span class="hljs-comment">; program header中偏移16字节的地方是p_filesz,压入函数memcpy的第三个参数:size</span><br>   mov eax, [ebx + <span class="hljs-number">4</span>]  <span class="hljs-comment">; 距程序头偏移量为4字节的位置是p_offset</span><br>   <span class="hljs-keyword">add </span>eax, KERNEL_BIN_BASE_ADDR  <span class="hljs-comment">; 加上kernel.bin被加载到的物理地址,eax为该段的物理地址</span><br>   push eax  <span class="hljs-comment">; 压入函数memcpy的第二个参数:源地址</span><br>   push dword [ebx + <span class="hljs-number">8</span>]  <span class="hljs-comment">; 压入函数memcpy的第一个参数:目的地址,偏移程序头8字节的位置是p_vaddr，这就是目的地址</span><br>   call mem_cpy  <span class="hljs-comment">; 调用mem_cpy完成段复制</span><br>   <span class="hljs-keyword">add </span>esp,<span class="hljs-number">12</span>  <span class="hljs-comment">; 清理栈中压入的三个参数</span><br><span class="hljs-symbol">.PTNULL:</span><br>   <span class="hljs-keyword">add </span>ebx, edx  <span class="hljs-comment">; edx为program header大小,即e_phentsize,在此ebx指向下一个program header </span><br>   loop .each_segment<br>   ret<br><br><span class="hljs-comment">;----------  逐字节拷贝 mem_cpy(dst,src,size) ------------</span><br><span class="hljs-comment">;输入:栈中三个参数(dst,src,size)</span><br><span class="hljs-comment">;输出:无</span><br><span class="hljs-comment">;---------------------------------------------------------</span><br><span class="hljs-symbol">mem_cpy:</span>      <br>   cld<br>   push ebp<br>   mov ebp, esp<br>   push ecx   <span class="hljs-comment">; rep指令用到了ecx，但ecx对于外层段的循环还有用，故先入栈备份</span><br>   mov edi, [ebp + <span class="hljs-number">8</span>]   <span class="hljs-comment">; dst</span><br>   mov esi, [ebp + <span class="hljs-number">12</span>]   <span class="hljs-comment">; src</span><br>   mov ecx, [ebp + <span class="hljs-number">16</span>]   <span class="hljs-comment">; size</span><br>   rep movsb   <span class="hljs-comment">; 逐字节拷贝</span><br><br>   <span class="hljs-comment">;恢复环境</span><br>   pop ecx<br>   pop ebp<br>   ret<br><br><br><span class="hljs-comment">;-------------   创建页目录及页表   ---------------</span><br><span class="hljs-symbol">setup_page:</span><br><span class="hljs-comment">;先把页目录占用的空间逐字节清0</span><br>   mov ecx, <span class="hljs-number">4096</span><br>   mov esi, <span class="hljs-number">0</span><br><span class="hljs-symbol">.clear_page_dir:</span><br>   mov <span class="hljs-keyword">byte </span>[PAGE_DIR_TABLE_POS + esi], <span class="hljs-number">0</span><br>   inc esi<br>   loop .clear_page_dir<br><br><span class="hljs-comment">;开始创建页目录项(PDE)</span><br><span class="hljs-symbol">.create_pde:</span>     <span class="hljs-comment">; 创建Page Directory Entry</span><br>   mov eax, PAGE_DIR_TABLE_POS<br>   <span class="hljs-keyword">add </span>eax, <span class="hljs-number">0x1000</span>      <span class="hljs-comment">; 此时eax为第一个页表的位置及属性</span><br>   mov ebx, eax     <span class="hljs-comment">; 此处为ebx赋值，是为.create_pte做准备，ebx为基址。</span><br><br><span class="hljs-comment">;   下面将页目录项0和0xc00都存为第一个页表的地址，</span><br><span class="hljs-comment">;   一个页表可表示4MB内存,这样0xc03fffff以下的地址和0x003fffff以下的地址都指向相同的页表，</span><br><span class="hljs-comment">;   这是为将地址映射为内核地址做准备</span><br>   <span class="hljs-keyword">or </span>eax, PG_US_U <span class="hljs-title">| PG_RW_W |</span> PG_P     <span class="hljs-comment">; 页目录项的属性RW和P位为1,US为1,表示用户属性,所有特权级别都可以访问.</span><br>   mov [PAGE_DIR_TABLE_POS + <span class="hljs-number">0x0</span>], eax       <span class="hljs-comment">; 第1个目录项,在页目录表中的第1个目录项写入第一个页表的位置(0x101000)及属性(3)</span><br>   mov [PAGE_DIR_TABLE_POS + <span class="hljs-number">0xc00</span>], eax     <span class="hljs-comment">; 一个页表项占用4字节,0xc00表示第768个页表占用的目录项,0xc00以上的目录项用于内核空间,</span><br>     <span class="hljs-comment">; 也就是页表的0xc0000000~0xffffffff共计1G属于内核,0x0~0xbfffffff共计3G属于用户进程.</span><br>   <span class="hljs-keyword">sub </span>eax, <span class="hljs-number">0x1000</span><br>   mov [PAGE_DIR_TABLE_POS + <span class="hljs-number">4092</span>], eax     <span class="hljs-comment">; 使最后一个目录项指向页目录表自己的地址</span><br><br><span class="hljs-comment">;下面创建页表项(PTE)</span><br>   mov ecx, <span class="hljs-number">256</span>     <span class="hljs-comment">; 1M低端内存 / 每页大小4k = 256</span><br>   mov esi, <span class="hljs-number">0</span><br>   mov edx, PG_US_U <span class="hljs-title">| PG_RW_W |</span> PG_P     <span class="hljs-comment">; 属性为7,US=1,RW=1,P=1</span><br><span class="hljs-symbol">.create_pte:</span>     <span class="hljs-comment">; 创建Page Table Entry</span><br>   mov [ebx+esi*<span class="hljs-number">4</span>],edx     <span class="hljs-comment">; 此时的ebx已经在上面通过eax赋值为0x101000,也就是第一个页表的地址 </span><br>   <span class="hljs-keyword">add </span>edx,<span class="hljs-number">4096</span><br>   inc esi<br>   loop .create_pte<br><br><span class="hljs-comment">;创建内核其它页表的PDE</span><br>   mov eax, PAGE_DIR_TABLE_POS<br>   <span class="hljs-keyword">add </span>eax, <span class="hljs-number">0x2000</span>      <span class="hljs-comment">; 此时eax为第二个页表的位置</span><br>   <span class="hljs-keyword">or </span>eax, PG_US_U <span class="hljs-title">| PG_RW_W |</span> PG_P  <span class="hljs-comment">; 页目录项的属性RW和P位为1,US为0</span><br>   mov ebx, PAGE_DIR_TABLE_POS<br>   mov ecx, <span class="hljs-number">254</span>     <span class="hljs-comment">; 范围为第769~1022的所有目录项数量</span><br>   mov esi, <span class="hljs-number">769</span><br><span class="hljs-symbol">.create_kernel_pde:</span><br>   mov [ebx+esi*<span class="hljs-number">4</span>], eax<br>   inc esi<br>   <span class="hljs-keyword">add </span>eax, <span class="hljs-number">0x1000</span><br>   loop .create_kernel_pde<br>   ret<br><br><br><span class="hljs-comment">;-------------------------------------------------------------------------------</span><br>   <span class="hljs-comment">;功能:读取硬盘n个扇区</span><br><span class="hljs-symbol">rd_disk_m_32:</span>   <br><span class="hljs-comment">;-------------------------------------------------------------------------------</span><br> <span class="hljs-comment">; eax=LBA扇区号</span><br> <span class="hljs-comment">; ebx=将数据写入的内存地址</span><br> <span class="hljs-comment">; ecx=读入的扇区数</span><br>      mov esi,eax   <span class="hljs-comment">; 备份eax</span><br>      mov <span class="hljs-keyword">di,cx</span>   <span class="hljs-comment">; 备份扇区数到di</span><br><span class="hljs-comment">;读写硬盘:</span><br><span class="hljs-comment">;第1步：设置要读取的扇区数</span><br>      mov dx,<span class="hljs-number">0x1f2</span><br>      mov al,cl<br>      out dx,al            <span class="hljs-comment">;读取的扇区数</span><br><br>      mov eax,esi   <span class="hljs-comment">;恢复ax</span><br><br><span class="hljs-comment">;第2步：将LBA地址存入0x1f3 ~ 0x1f6</span><br><br>      <span class="hljs-comment">;LBA地址7~0位写入端口0x1f3</span><br>      mov dx,<span class="hljs-number">0x1f3</span>                       <br>      out dx,al                          <br><br>      <span class="hljs-comment">;LBA地址15~8位写入端口0x1f4</span><br>      mov cl,<span class="hljs-number">8</span><br>      <span class="hljs-keyword">shr </span>eax,cl<br>      mov dx,<span class="hljs-number">0x1f4</span><br>      out dx,al<br><br>      <span class="hljs-comment">;LBA地址23~16位写入端口0x1f5</span><br>      <span class="hljs-keyword">shr </span>eax,cl<br>      mov dx,<span class="hljs-number">0x1f5</span><br>      out dx,al<br><br>      <span class="hljs-keyword">shr </span>eax,cl<br>      <span class="hljs-keyword">and </span>al,<span class="hljs-number">0x0f</span>   <span class="hljs-comment">;lba第24~27位</span><br>      <span class="hljs-keyword">or </span>al,<span class="hljs-number">0xe0</span>   <span class="hljs-comment">; 设置7～4位为1110,表示lba模式</span><br>      mov dx,<span class="hljs-number">0x1f6</span><br>      out dx,al<br><br><span class="hljs-comment">;第3步：向0x1f7端口写入读命令，0x20 </span><br>      mov dx,<span class="hljs-number">0x1f7</span><br>      mov al,<span class="hljs-number">0x20</span>                        <br>      out dx,al<br><br><span class="hljs-comment">;;;;;;; 至此,硬盘控制器便从指定的lba地址(eax)处,读出连续的cx个扇区,下面检查硬盘状态,不忙就能把这cx个扇区的数据读出来</span><br><br><span class="hljs-comment">;第4步：检测硬盘状态</span><br><span class="hljs-symbol">  .not_ready:</span>   <span class="hljs-comment">;测试0x1f7端口(status寄存器)的的BSY位</span><br>      <span class="hljs-comment">;同一端口,写时表示写入命令字,读时表示读入硬盘状态</span><br>      <span class="hljs-keyword">nop</span><br><span class="hljs-keyword"></span>      in al,dx<br>      <span class="hljs-keyword">and </span>al,<span class="hljs-number">0x88</span>   <span class="hljs-comment">;第4位为1表示硬盘控制器已准备好数据传输,第7位为1表示硬盘忙</span><br>      cmp al,<span class="hljs-number">0x08</span><br>      <span class="hljs-keyword">jnz </span>.not_ready   <span class="hljs-comment">;若未准备好,继续等。</span><br><br><span class="hljs-comment">;第5步：从0x1f0端口读数据</span><br>      mov ax, <span class="hljs-keyword">di</span>   <span class="hljs-comment">;以下从硬盘端口读数据用insw指令更快捷,不过尽可能多的演示命令使用,</span><br>   <span class="hljs-comment">;在此先用这种方法,在后面内容会用到insw和outsw等</span><br><br>      mov dx, <span class="hljs-number">256</span>   <span class="hljs-comment">;di为要读取的扇区数,一个扇区有512字节,每次读入一个字,共需di*512/2次,所以di*256</span><br>      <span class="hljs-keyword">mul </span>dx<br>      mov cx, ax   <br>      mov dx, <span class="hljs-number">0x1f0</span><br><span class="hljs-symbol">  .go_on_read:</span><br>      in ax,dx<br>      mov [ebx], ax<br>      <span class="hljs-keyword">add </span>ebx, <span class="hljs-number">2</span><br>  <span class="hljs-comment">; 由于在实模式下偏移地址为16位,所以用bx只会访问到0~FFFFh的偏移。</span><br>  <span class="hljs-comment">; loader的栈指针为0x900,bx为指向的数据输出缓冲区,且为16位，</span><br>  <span class="hljs-comment">; 超过0xffff后,bx部分会从0开始,所以当要读取的扇区数过大,待写入的地址超过bx的范围时，</span><br>  <span class="hljs-comment">; 从硬盘上读出的数据会把0x0000~0xffff的覆盖，</span><br>  <span class="hljs-comment">; 造成栈被破坏,所以ret返回时,返回地址被破坏了,已经不是之前正确的地址,</span><br>  <span class="hljs-comment">; 故程序出会错,不知道会跑到哪里去。</span><br>  <span class="hljs-comment">; 所以改为ebx代替bx指向缓冲区,这样生成的机器码前面会有0x66和0x67来反转。</span><br>  <span class="hljs-comment">; 0X66用于反转默认的操作数大小! 0X67用于反转默认的寻址方式.</span><br>  <span class="hljs-comment">; cpu处于16位模式时,会理所当然的认为操作数和寻址都是16位,处于32位模式时,</span><br>  <span class="hljs-comment">; 也会认为要执行的指令是32位.</span><br>  <span class="hljs-comment">; 当我们在其中任意模式下用了另外模式的寻址方式或操作数大小(姑且认为16位模式用16位字节操作数，</span><br>  <span class="hljs-comment">; 32位模式下用32字节的操作数)时,编译器会在指令前帮我们加上0x66或0x67，</span><br>  <span class="hljs-comment">; 临时改变当前cpu模式到另外的模式下.</span><br>  <span class="hljs-comment">; 假设当前运行在16位模式,遇到0X66时,操作数大小变为32位.</span><br>  <span class="hljs-comment">; 假设当前运行在32位模式,遇到0X66时,操作数大小变为16位.</span><br>  <span class="hljs-comment">; 假设当前运行在16位模式,遇到0X67时,寻址方式变为32位寻址</span><br>  <span class="hljs-comment">; 假设当前运行在32位模式,遇到0X67时,寻址方式变为16位寻址.</span><br><br>      loop .go_on_read<br>      ret<br><br></code></pre></td></tr></table></figure><h3 id="boot"><a class="markdownIt-Anchor" href="#boot"></a> boot：</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">;一一一一一一loader和 kernel<br><br>LOADER_BASE_ADDR equ <span class="hljs-number">0x900</span> <br>LOADER_START_SECTOR equ  <span class="hljs-number">0x2</span> <br> <br>;一一一一一一－ gdt 描述符属性 一一一一一一 <br>DESC_G_4K equ <span class="hljs-number">1000</span>_0000_0000_0000_0000_0000b   ;G位为第<span class="hljs-number">23</span>位,置<span class="hljs-number">1</span>代表段界限为单位<span class="hljs-number">4</span>k<br>DESC_D_32 equ <span class="hljs-number">1</span>_00_0000_0000_0000_0000_0000b ;D/B 宇段,第<span class="hljs-number">22</span>位<br>;对代码段来说是D位,置<span class="hljs-number">1</span>表示指令中的有效地址及<br>;操作数是<span class="hljs-number">32</span>位，指令有效地址用EIP寄存器。<br><br>DESC_L equ <span class="hljs-number">0</span>_0000_0000_0000_0000_0000_0000b ; <span class="hljs-number">64</span>位代码标记,我们在<span class="hljs-number">32</span>位CPU下编程，<br>;标记为<span class="hljs-number">0</span>便可<br>DESC_AVL equ <span class="hljs-number">0</span>_0000_0000_0000_0000_0000b ;CPU不用此位，暂置为<br>DESC_LIMIT_CODE2 equ <span class="hljs-number">1111</span>_0000_0000_0000_0000b  ;段界限<span class="hljs-number">16</span>~<span class="hljs-number">19</span>位<br>;全设为<span class="hljs-number">1</span>，它在下面代码中会与段界限的<span class="hljs-number">0</span>~<span class="hljs-number">15</span>位拼成<span class="hljs-number">0xFFFF</span>，<br>;<span class="hljs-number">0xFFFF</span>*<span class="hljs-number">4</span>k等于<span class="hljs-number">4</span>G，段基址设为<span class="hljs-number">0</span>，采用平坦模型<br><br>DESC_LIMIT_DATA2 equ DESC_LIMIT_CODE2 ;<br>DESC_LIMIT_VIDEO2 equ <span class="hljs-number">0000</span>_0000_0000_0000_0000b ;<br>DESC_P equ <span class="hljs-number">1</span>_000_0000_0000_0000b   ;第<span class="hljs-number">15</span>位，表示段存在<br>DESC_DPL_0 equ <span class="hljs-number">00</span>_0_0000_0000_0000b ;DPL在<span class="hljs-number">13</span>~<span class="hljs-number">14</span>位 <span class="hljs-number">0</span>为最高特权级<br>DESC_DPL_1 equ <span class="hljs-number">01</span>_0_0000_0000_0000b <br>DESC_DPL_2 equ <span class="hljs-number">10</span>_0_0000_0000_0000b <br>DESC_DPL_3 equ <span class="hljs-number">11</span>_0_0000_0000_0000b <br>DESC_S_CODE equ <span class="hljs-number">1</span>_0000_0000_0000b ; S为<span class="hljs-number">0</span>时表示系统段， S为<span class="hljs-number">1</span>时表示非系统段。<br>DESC_S_DATA equ DESC_S_CODE <br>DESC_S_sys equ <span class="hljs-number">0</span>_0000_0000_0000b <br>DESC_TYPE_CODE equ <span class="hljs-number">1000</span>_0000_0000b ;x=<span class="hljs-number">1</span>，c=<span class="hljs-number">0</span>, r=<span class="hljs-number">0</span>,a=<span class="hljs-number">0</span> ，即代码段是可执行的，非一致<br>;性，不可读，己访问位a清<span class="hljs-number">0</span> 配合S使用<br>DESC_TYPE_DATA equ <span class="hljs-number">0010</span>_0000_0000b ;<br>;x=<span class="hljs-number">0</span>,e=<span class="hljs-number">0</span>,w=<span class="hljs-number">1</span>,a=<span class="hljs-number">0</span> 数据段是不可执行的，向上扩展的，可写，己访问位a清<span class="hljs-number">0</span>。<br><br>DESC_CODE_HIGH4 equ (<span class="hljs-number">0x00</span> &lt;&lt; <span class="hljs-number">24</span>) + DESC_G_4K + DESC_D_32 + \<br>DESC_L + DESC_AVL + DESC_LIMIT_CODE2 + \<br>DESC_P + DESC_DPL_0 + DESC_S_CODE +\<br>DESC_TYPE_CODE + <span class="hljs-number">0x00</span> <br><br>DESC_DATA_HIGH4 equ (<span class="hljs-number">0x00</span> &lt;&lt; <span class="hljs-number">24</span>) + DESC_G_4K + DESC_D_32 +\<br>DESC_L + DESC_AVL + DESC_LIMIT_DATA2 + \<br>DESC_P + DESC_DPL_0 + DESC_S_DATA + \<br>DESC_TYPE_DATA + <span class="hljs-number">0x00</span><br><br>DESC_VIDEO_HIGH4 equ (<span class="hljs-number">0x00</span> &lt;&lt; <span class="hljs-number">24</span>) + DESC_G_4K + DESC_D_32 +\<br>DESC_L + DESC_AVL + DESC_LIMIT_CODE2 + DESC_P + \<br>DESC_DPL_0 + DESC_S_DATA + DESC_TYPE_DATA + <span class="hljs-number">0x0B</span>   ;注意书上这里写的是<span class="hljs-number">0x00</span>，写错了<br>;显存起始地址应该是<span class="hljs-number">0xB8000</span><br><br> <br>;一一一一一一 选择子属性一一一一一一一<br>RPL0 equ <span class="hljs-number">00</span>b <br>RPL1 equ <span class="hljs-number">01</span>b <br>RPL2 equ <span class="hljs-number">10</span>b <br>RPL3 equ <span class="hljs-number">11</span>b <br>TI_GDT equ <span class="hljs-number">000</span>b <br>TI_LDT equ <span class="hljs-number">100</span>b<br><br>;<span class="hljs-comment">-------------   页表配置   ----------------</span><br>PAGE_DIR_TABLE_POS equ <span class="hljs-number">0x100000</span><br>;<span class="hljs-comment">----------------   页表相关属性    --------------</span><br>PG_P  equ   <span class="hljs-number">1</span>b<br>PG_RW_R equ  <span class="hljs-number">00</span>b <br>PG_RW_W equ  <span class="hljs-number">10</span>b <br>PG_US_S equ  <span class="hljs-number">000</span>b <br>PG_US_U equ  <span class="hljs-number">100</span>b <br><br><br>KERNEL_BIN_BASE_ADDR equ <span class="hljs-number">0x70000</span><br>KERNEL_START_SECTOR equ <span class="hljs-number">0x9</span><br>KERNEL_ENTRY_POINT equ <span class="hljs-number">0xc0001500</span><br>;<span class="hljs-comment">-------------  program type 定义   --------------</span><br>PT_NULL equ <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="mainc"><a class="markdownIt-Anchor" href="#mainc"></a> main.c</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//main.c</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>写到这里的时候已经是12日傍晚了，又花费了一天与loader进行搏斗，幸好最终拿到了胜利，否则再拖可能就把我胸口的火焰拖没了。这一章节内容实在繁多，期间经过了无数个调试失败，一度想要放弃，感谢老天爷在我每每将近放弃的时候让我调试成功！歇几天休息一下，调整好状态再大踏步进入第六章的学习。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第四章 进入保护模式，理论的抽象轰炸</title>
    <link href="/2022/07/09/os(4)/"/>
    <url>/2022/07/09/os(4)/</url>
    
    <content type="html"><![CDATA[<h1 id="第四章-进入保护模式理论的抽象轰炸"><a class="markdownIt-Anchor" href="#第四章-进入保护模式理论的抽象轰炸"></a> 第四章 进入保护模式，理论的抽象轰炸</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>今天已经来到了9日，因为昨日状态不是很好，没有在往下进行，而是把前今天的内容做成博客发表上来，也是给自己一个复习的机会。今天争取拿下第四章！</p><h2 id="进入正文"><a class="markdownIt-Anchor" href="#进入正文"></a> 进入正文</h2><p>咱们还是先简单翻过前面的理论知识，记住里面的一些名词和简单概念，然后直接来到实战部分。前面说了，不要忘记主线任务，咱们之前已经完成了loader的基本实现，但是这一切都建立在实模式之下，我们需要进入保护模式。</p><h3 id="mbrs"><a class="markdownIt-Anchor" href="#mbrs"></a> mbr.S</h3><p>首先是修改了MBR，</p><figure class="highlight x86asm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>, <span class="hljs-number">1</span><span class="hljs-comment">; 待读入内存的扇区数</span><br><span class="hljs-keyword">call</span> rd_disk_m_16<span class="hljs-comment">;</span><br><br>修改后代码<br><span class="hljs-comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>, <span class="hljs-number">4</span><span class="hljs-comment">; 改成待读入4个扇区， loader.bin 超过了 512 字节</span><br><span class="hljs-keyword">call</span> rd_disk_m_16<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="bootinc"><a class="markdownIt-Anchor" href="#bootinc"></a> boot.inc</h3><p>然后对boot.inc进行一个补充，配置好loader以便后面在loader中进入保护模式。这里贴上boot.inc的代码。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;一一一一一一loader和 kernel</span><br><br>LOADER_BASE_ADDR <span class="hljs-built_in">equ</span> <span class="hljs-number">0x900</span> <br>LOADER_START_SECTOR <span class="hljs-built_in">equ</span>  <span class="hljs-number">0x2</span> <br> <br><span class="hljs-comment">;一一一一一一－ gdt 描述符属性 一一一一一一 </span><br>DESC_G_4K <span class="hljs-built_in">equ</span> <span class="hljs-number">1000_0000_0000_0000_0000_0000b</span>   <span class="hljs-comment">;G位为第23位,置1代</span><br><span class="hljs-comment">;表</span><br><span class="hljs-comment">;段界限为单位4k</span><br>DESC_D_32 <span class="hljs-built_in">equ</span> <span class="hljs-number">1_00_0000_0000_0000_0000_0000b</span> <span class="hljs-comment">;D/B 宇段,第22位</span><br><span class="hljs-comment">;对代码段来说是D位,置1表示指令中的有效地址及</span><br><span class="hljs-comment">;操作数是32位，指令有效地址用EIP寄存器。</span><br><br>DESC_L <span class="hljs-built_in">equ</span> <span class="hljs-number">0_0000_0000_0000_0000_0000_0000b</span> <span class="hljs-comment">; 64位代码标记,我们在32位CPU下编程，</span><br><span class="hljs-comment">;标记为0便可</span><br>DESC_AVL <span class="hljs-built_in">equ</span> <span class="hljs-number">0_0000_0000_0000_0000_0000b</span> <span class="hljs-comment">;CPU不用此位，暂置为</span><br>DESC_LIMIT_CODE2 <span class="hljs-built_in">equ</span> <span class="hljs-number">1111_0000_0000_0000_0000b</span>  <span class="hljs-comment">;段界限16~19位</span><br><span class="hljs-comment">;全设为1，它在下面代码中会与段界限的0~15位拼成0xFFFF，</span><br><span class="hljs-comment">;0xFFFF*4k等于4G，段基址设为0，采用平坦模型</span><br><br>DESC_LIMIT_DATA2 <span class="hljs-built_in">equ</span> DESC_LIMIT_CODE2 <span class="hljs-comment">;</span><br>DESC_LIMIT_VIDEO2 <span class="hljs-built_in">equ</span> <span class="hljs-number">0000_0000_0000_0000_0000b</span> <span class="hljs-comment">;</span><br>DESC_P <span class="hljs-built_in">equ</span> <span class="hljs-number">1_000_0000_0000_0000b</span>   <span class="hljs-comment">;第15位，表示段存在</span><br>DESC_DPL_0 <span class="hljs-built_in">equ</span> <span class="hljs-number">00_0_0000_0000_0000b</span> <span class="hljs-comment">;DPL在13~14位 0为最高特权级</span><br>DESC_DPL_1 <span class="hljs-built_in">equ</span> <span class="hljs-number">01_0_0000_0000_0000b</span> <br>DESC_DPL_2 <span class="hljs-built_in">equ</span> <span class="hljs-number">10_0_0000_0000_0000b</span> <br>DESC_DPL_3 <span class="hljs-built_in">equ</span> <span class="hljs-number">11_0_0000_0000_0000b</span> <br>DESC_S_CODE <span class="hljs-built_in">equ</span> <span class="hljs-number">1_0000_0000_0000b</span> <span class="hljs-comment">; S为0时表示系统段， S为1时表示非系统段。</span><br>DESC_S_DATA <span class="hljs-built_in">equ</span> DESC_S_CODE <br>DESC_S_sys <span class="hljs-built_in">equ</span> <span class="hljs-number">0_0000_0000_0000b</span> <br>DESC_TYPE_CODE <span class="hljs-built_in">equ</span> <span class="hljs-number">1000_0000_0000b</span> <span class="hljs-comment">;x=1，c=0, r=0,a=0 ，即代码段是可执行的，非一致</span><br><span class="hljs-comment">;性，不可读，己访问位a清0 配合S使用</span><br>DESC_TYPE_DATA <span class="hljs-built_in">equ</span> <span class="hljs-number">0010_0000_0000b</span> <span class="hljs-comment">;</span><br><span class="hljs-comment">;x=0,e=0,w=1,a=0 数据段是不可执行的，向上扩展的，可写，己访问位a清0。</span><br><br>DESC_CODE_HIGH4 <span class="hljs-built_in">equ</span> (<span class="hljs-number">0x00</span> &lt;&lt; <span class="hljs-number">24</span>) + DESC_G_4K + DESC_D_32 + \<br>DESC_L + DESC_AVL + DESC_LIMIT_CODE2 + \<br>DESC_P + DESC_DPL_0 + DESC_S_CODE +\<br>DESC_TYPE_CODE + <span class="hljs-number">0x00</span> <br><br>DESC_DATA_HIGH4 <span class="hljs-built_in">equ</span> (<span class="hljs-number">0x00</span> &lt;&lt; <span class="hljs-number">24</span>) + DESC_G_4K + DESC_D_32 +\<br>DESC_L + DESC_AVL + DESC_LIMIT_DATA2 + \<br>DESC_P + DESC_DPL_0 + DESC_S_DATA + \<br>DESC_TYPE_DATA + <span class="hljs-number">0x00</span><br><br>DESC_VIDEO_HIGH4 <span class="hljs-built_in">equ</span> (<span class="hljs-number">0x00</span> &lt;&lt; <span class="hljs-number">24</span>) + DESC_G_4K + DESC_D_32 +\<br>DESC_L + DESC_AVL + DESC_LIMIT_CODE2 + DESC_P + \<br>DESC_DPL_0 + DESC_S_DATA + DESC_TYPE_DATA + <span class="hljs-number">0x0B</span>   <span class="hljs-comment">;注意书上这里写的是0x00，写错了</span><br><span class="hljs-comment">;显存起始地址应该是0xB8000</span><br><br> <br><span class="hljs-comment">;一一一一一一 选择子属性一一一一一一一</span><br>RPL0 <span class="hljs-built_in">equ</span> <span class="hljs-number">00b</span> <br>RPL1 <span class="hljs-built_in">equ</span> <span class="hljs-number">01b</span> <br>RPL2 <span class="hljs-built_in">equ</span> <span class="hljs-number">10b</span> <br>RPL3 <span class="hljs-built_in">equ</span> <span class="hljs-number">11b</span> <br>TI_GDT <span class="hljs-built_in">equ</span> <span class="hljs-number">000b</span> <br>TI_LDT <span class="hljs-built_in">equ</span> <span class="hljs-number">100b</span><br></code></pre></td></tr></table></figure><p>注释比较详细了，注意这里都是以宏的形式编写的，说白了就是给nasm编译器看的，我觉得这里只需了解其背后隐含的理论就好，不必过于纠结代码形式。</p><h3 id="loaders"><a class="markdownIt-Anchor" href="#loaders"></a> loader.S</h3><p>然后就要上正菜了，改一下loader。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;------------------------</span><br><span class="hljs-meta">%include</span> <span class="hljs-string">&quot;boot.inc&quot;</span> <br><span class="hljs-meta">section</span> loader vstart=LOADER_BASE_ADDR <br>LOADER_STACK_TOP <span class="hljs-built_in">equ</span> LOADER_BASE_ADDR  <span class="hljs-comment">;相同内存地址，地址之下便是栈</span><br><span class="hljs-keyword">jmp</span> loader_start <br><br><span class="hljs-comment">;构建 gdt 及其内部的描述符</span><br><span class="hljs-symbol">GDT_BASE:</span> <span class="hljs-built_in">dd</span> <span class="hljs-number">0x00000000</span>       <span class="hljs-comment">;第0个段描述符不可用</span><br><span class="hljs-built_in">dd</span> <span class="hljs-number">0x00000000</span>  <br><span class="hljs-symbol"></span><br><span class="hljs-symbol">CODE_DESC:</span> <span class="hljs-built_in">dd</span> <span class="hljs-number">0x0000FFFF</span>   <span class="hljs-comment">;代码段描述符</span><br> <span class="hljs-built_in">dd</span> DESC_CODE_HIGH4 <br><span class="hljs-symbol"> </span><br><span class="hljs-symbol">DATA_STACK_DESC:</span> <span class="hljs-built_in">dd</span> <span class="hljs-number">0x0000FFFF</span> <span class="hljs-comment">;栈段描述符 栈段和数据段共用一个描述符 均向上扩展</span><br> <span class="hljs-built_in">dd</span> DESC_DATA_HIGH4  <br><span class="hljs-symbol"> </span><br><span class="hljs-symbol">VIDEO_DESC:</span> <span class="hljs-built_in">dd</span> <span class="hljs-number">0x80000007</span>   <span class="hljs-comment">; limit=(0xbffff-0xb8000)/4k=0x7  故段界限为7</span><br><span class="hljs-built_in">dd</span>  DESC_VIDEO_HIGH4  <span class="hljs-comment">;此时dpl为0</span><br> <br>GDT_SIZE <span class="hljs-built_in">equ</span> $ - GDT_BASE <span class="hljs-comment">; 先是通过地址差来获得 GDT的大小，进而用 GDT大小减1得到了段界限</span><br>GDT_LIMIT <span class="hljs-built_in">equ</span> GDT_SIZE - <span class="hljs-number">1</span>   <span class="hljs-comment">;用于构建GDTR的段界限</span><br><span class="hljs-built_in">times</span> <span class="hljs-number">60</span> <span class="hljs-built_in">dq</span> <span class="hljs-number">0</span> <span class="hljs-comment">;此处预留 60 个描述符的空位</span><br><br><span class="hljs-comment">;以下是构建代码段、数据段、显存段选择子</span><br>SELECTOR_CODE <span class="hljs-built_in">equ</span> (<span class="hljs-number">0x0001</span> &lt;&lt; <span class="hljs-number">3</span>) + TI_GDT + RPL0 <br><span class="hljs-comment">;相当于[(CODE_DESC - GDT_BASE) /8 ]&lt;&lt;3+ TI_GDT + RPL0 </span><br><span class="hljs-comment">;内存地址的编号是一个存储单元8比特，这里CODE_DESC - GDT_BASE应该等于8</span><br><span class="hljs-comment">;书里的备注应该写掉了&quot;&lt;&lt;3&quot;</span><br>SELECTOR_DATA <span class="hljs-built_in">equ</span> (<span class="hljs-number">0x0002</span>&lt;&lt; <span class="hljs-number">3</span>) + TI_GDT + RPL0 <br>SELECTOR_VIDEO <span class="hljs-built_in">equ</span> (<span class="hljs-number">0x0003</span> &lt;&lt; <span class="hljs-number">3</span>) + TI_GDT + RPL0 <br><br><span class="hljs-comment">;以下是 gdt 的指针即GDTR，前2字节是gdt界限，后4字节是gdt起始地址 后面代码使用lgdt指令时会用上</span><br>gdt_ptr <span class="hljs-built_in">dw</span> GDT_LIMIT <br><span class="hljs-built_in">dd</span> GDT_BASE <br><br> loadermsg <span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;2 loader in real.&#x27;</span> <br><span class="hljs-symbol"></span><br><span class="hljs-symbol"> loader_start:</span> <br> <br><span class="hljs-comment">;------------------------------------------------------------</span><br><span class="hljs-comment">; INT 0x10 功能号： 0x13 功能描述：打印字符串</span><br><span class="hljs-comment">;------------------------------------------------------------</span><br><span class="hljs-comment">;输入：</span><br><span class="hljs-comment">;AH 子功能号＝13H</span><br><span class="hljs-comment">;BH ＝页码</span><br><span class="hljs-comment">;BL ＝属性（若 AL=OOH OlH)</span><br><span class="hljs-comment">;CX ＝字符串长度</span><br><span class="hljs-comment">; (DH DL ）＝坐标｛行、列）</span><br><span class="hljs-comment">;ES:BP＝字符串地址</span><br><span class="hljs-comment">;AL＝显示输出方式</span><br><span class="hljs-comment">; 一一字符串中只含显示字符，其显示属性在 BL</span><br><span class="hljs-comment">;显示后，光标位置不变</span><br><span class="hljs-comment">; 一一字符串中只含显示字符，其显示属性在 BL</span><br><span class="hljs-comment">;显示后，光标位置改变</span><br><span class="hljs-comment">; 一一字符事中含显示字符和显示属性。显示后，光标位置不变</span><br><span class="hljs-comment">; 一一字符串中含显示字符和显示属性。显示后，光标位置改变</span><br><span class="hljs-comment">;无返回值</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">sp</span>, LOADER_BASE_ADDR <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bp</span>, loadermsg <span class="hljs-comment">; ES:BP ＝字符串地址</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>, <span class="hljs-number">17</span> <span class="hljs-comment">; cx ＝字符串长度</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, <span class="hljs-number">0x1301</span> <span class="hljs-comment">; AH = 13, AL = 01h </span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>, <span class="hljs-number">0x001f</span> <span class="hljs-comment">;页号为0(BH = 0）蓝底粉红字（ BL = 1fh) </span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x1800</span>  <span class="hljs-comment">;  dh=0x18 十进制为24,代表行数；dl=0x00 表示列数。使用显存的文本模式下，一共25行，所以2 loader in real 会出现在屏幕最后一行</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">0x10</span> <span class="hljs-comment">; 10h号中断 由于AH=0x13，所以该BIOS中断后会执行打印字符串的中断处理程序。</span><br> <br><span class="hljs-comment">; 一一一一一一一一一一 准备进入保护模式 一一一一一一一一一一一一一一－</span><br><span class="hljs-comment">;1 打开 A20</span><br><span class="hljs-comment">;2 加载 gdt</span><br><span class="hljs-comment">;3 将cr0 的 pe 位置1 </span><br><br><span class="hljs-comment">;一一一一一一一－打开 A20 一一一一一</span><br><span class="hljs-keyword">in</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0x92</span><br><span class="hljs-keyword">or</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0000_0010B</span> <br><span class="hljs-keyword">out</span> <span class="hljs-number">0x92</span>,<span class="hljs-built_in">al</span> <br> <br><span class="hljs-comment">;一一一一一一一一加载 GDT (也就是设置好gdtr，gdtr记录着gdt的起始地址)一一一一一一一－</span><br><span class="hljs-keyword">lgdt</span> [gdt_ptr ] <br><br><span class="hljs-comment">;一一一一一一一一 cr0位置1 一一一一一一一－</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">cr0</span> <br><span class="hljs-keyword">or</span> <span class="hljs-built_in">eax</span>, <span class="hljs-number">0x00000001</span> <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cr0</span>, <span class="hljs-built_in">eax</span> <br><br><span class="hljs-keyword">jmp</span> <span class="hljs-built_in">dword</span> SELECTOR_CODE:p_mode_start  <span class="hljs-comment">;刷新流水线</span><br><br>[<span class="hljs-meta">bits</span> <span class="hljs-number">32</span>] <br><span class="hljs-symbol">p_mode_start:</span> <br><span class="hljs-comment">;;;;用选择子初始化段寄存器</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, SELECTOR_DATA <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>, <span class="hljs-built_in">ax</span> <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>, <span class="hljs-built_in">ax</span> <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ss</span>, <span class="hljs-built_in">ax</span> <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">esp</span>, LOADER_STACK_TOP <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, SELECTOR_VIDEO <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">gs</span>, <span class="hljs-built_in">ax</span> <br><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0xA0</span>], <span class="hljs-string">&#x27;P&#x27;</span> <br> <br><span class="hljs-keyword">jmp</span> $<br></code></pre></td></tr></table></figure><p>然后编译运行，输入info gdt发现gdt顺利加载成功了。</p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>这一章真是遇到了很大的阻力，需要静下心来一行行地啃汇编代码，同时还需要不断学习理论知识，现在已经是9日的21点了，虽然代码过了一遍但还是有许多模棱两可的地方，随着后面章节的进行还是需要回看。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第三章 让MBR直接操作硬盘，硬件深似海</title>
    <link href="/2022/07/08/os(3)/"/>
    <url>/2022/07/08/os(3)/</url>
    
    <content type="html"><![CDATA[<h1 id="第三章-让mbr直接操作硬盘硬件深似海"><a class="markdownIt-Anchor" href="#第三章-让mbr直接操作硬盘硬件深似海"></a> 第三章 让MBR直接操作硬盘，硬件深似海</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>7月7日，这一章的概念实在繁多，加上自己也没有汇编的基础，只能硬着头皮攻，加上晚上有学生会主席的竞选，心烦意乱，不过为了完成日更的目标，还是要尽力去做。面对压力时也不要被负能量击溃，我也始终保持着寻找乐趣的心态去学习、阅读。</p><h2 id="进入正题"><a class="markdownIt-Anchor" href="#进入正题"></a> 进入正题</h2><p>本章一上来讲述了许多晦涩难懂的概念，涉及到了一些汇编的知识，也讲述了一些NASM编译器的使用方法。我在初读这些知识的时候实在无心仔细研究，但是在进行到后面章节的时候发现这些前缀知识是必不可少的。我建议读者在初读的时候如果实在烦躁，可以适当跳过一些内容，等到后面进行编程的时候遇到不会的点再回过头来看，切忌在理论知识的重压下失去信心从而放弃。</p><p>然后咱们还是继续主线任务，上一章节我们完成了一个简单MBR编写，并且成功运行在了bochs上，但是需要注意的是这时我们的输出是建立在软件的基础上的，我们最终要实现在显卡上执行任务，首先从修改mbr.S的输出打印部分开始。这里源码我在这里粘出来吧。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">; mbr.S</span><br><br><span class="hljs-comment">; 主引导程序</span><br><span class="hljs-comment">; --------------------------------------------------</span><br><br><span class="hljs-meta">SECTION</span> MBR vstart=<span class="hljs-number">0x7c00</span> <span class="hljs-comment">; 把起始地址编译为 0x7c00</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, <span class="hljs-built_in">cs</span>     <span class="hljs-comment">; cs 代码段寄存器</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>, <span class="hljs-built_in">ax</span>     <span class="hljs-comment">; dx 数据段寄存器</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>, <span class="hljs-built_in">ax</span>     <span class="hljs-comment">; es 附加段寄存器</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ss</span>, <span class="hljs-built_in">ax</span>     <span class="hljs-comment">; ss 堆栈段寄存器</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">fs</span>, <span class="hljs-built_in">ax</span>     <span class="hljs-comment">; fs 80386 后添加的寄存器，无全称</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">sp</span>, <span class="hljs-number">0x7c00</span> <span class="hljs-comment">; sp 堆栈指针寄存器</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, <span class="hljs-number">0xb800</span> <span class="hljs-comment">;</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">gs</span>,<span class="hljs-built_in">ax</span><span class="hljs-comment">;</span><br><br><span class="hljs-comment">; 清屏</span><br><span class="hljs-comment">; --------------------------------------------------</span><br><span class="hljs-comment">; INT 0x10    功能号: 0x06    功能描述：上卷窗口</span><br><span class="hljs-comment">; --------------------------------------------------</span><br><span class="hljs-comment">; 输入：</span><br><span class="hljs-comment">; AH 功能号 = 0x06</span><br><span class="hljs-comment">; AL = 上卷的行数(如果为0，表示全部)</span><br><span class="hljs-comment">; BH = 上卷行属性</span><br><span class="hljs-comment">; (CL, CH) = 窗口左上角的 (X, Y) 位置</span><br><span class="hljs-comment">; (DL, DH) = 窗口右下角的 (X, Y) 位置</span><br><span class="hljs-comment">; 无返回值:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, <span class="hljs-number">0x600</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>, <span class="hljs-number">0x700</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x184f</span> <span class="hljs-comment">; 右下角: (80, 25)</span><br>                   <span class="hljs-comment">; VGA 文本模式种，一行只能容纳 80 个字符，共 25 行</span><br>                   <span class="hljs-comment">; 下标从 0 开始，所以 0x18=24, 0x4f=79</span><br>        <br>    <span class="hljs-keyword">int</span> <span class="hljs-number">0x10</span>       <span class="hljs-comment">; int 0x10</span><br><span class="hljs-comment">;;;;;;;;输出背景色绿色，前景色红色，并且跳动的字符串;;;;;;;;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x00</span>], <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x01</span>], <span class="hljs-number">0xA4</span><span class="hljs-comment">;</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x02</span>], <span class="hljs-string">&#x27; &#x27;</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x03</span>], <span class="hljs-number">0xA4</span><span class="hljs-comment">;</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x04</span>], <span class="hljs-string">&#x27;M&#x27;</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x05</span>], <span class="hljs-number">0xA4</span><span class="hljs-comment">;</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x06</span>], <span class="hljs-string">&#x27;B&#x27;</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x07</span>], <span class="hljs-number">0xA4</span><span class="hljs-comment">;</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x08</span>], <span class="hljs-string">&#x27;R&#x27;</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x09</span>], <span class="hljs-number">0xA4</span><span class="hljs-comment">;</span><br><span class="hljs-comment">;;;;;;;;;;;;;;;;;;;;;;打印字符串结束;;;;;;;;;;;;;;;;</span><br><span class="hljs-keyword">jmp</span> $<span class="hljs-comment">;     程序悬停在此</span><br><br><span class="hljs-built_in">times</span> <span class="hljs-number">510</span>-($-$$)   <span class="hljs-built_in">db</span> <span class="hljs-number">0</span><br><span class="hljs-built_in">db</span> <span class="hljs-number">0x55</span>,<span class="hljs-number">0xaa</span><br></code></pre></td></tr></table></figure><p>后面介绍了bochs的调试方法，等后面遇到不懂得知识时回看也不迟。当然，512字节的MBR是没法满足为内核准备好环境的功能的，所以我们需要另一个更大的程序完成这项任务，它就是loader，加载器。所以MBR需要把loader从硬盘加载到内存中，在第二章中有提到两块可用区域，加载到那里面就ok了，我跟作者一样，也把loader加载到0x900这里。</p><p>在读取硬盘扇区这一部分。建议先好好阅读一下本节的前置章节，硬盘部分，再看代码就不会再有吃力的地方了。至此，mbr.S的任务也就结束了，接下来我们写一个简单的loader来进行一个结果实现，验证一下思路是否正确就ok了。还是贴出代码：</p><h3 id="mbrs"><a class="markdownIt-Anchor" href="#mbrs"></a> mbr.S</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">; mbr.S</span><br><br><span class="hljs-comment">; 主引导程序</span><br><span class="hljs-comment">; --------------------------------------------------</span><br><span class="hljs-meta">%include</span> <span class="hljs-string">&quot;boot.inc&quot;</span><span class="hljs-comment">;</span><br><span class="hljs-comment">;LOADER_BASE_ADDR equ 0x900  将loader加载到内存0x900</span><br><span class="hljs-comment">;LOADER_START_SECTOR equ 0x2  loader位于磁盘第2块扇区</span><br><br><span class="hljs-meta">SECTION</span> MBR vstart=<span class="hljs-number">0x7c00</span> <span class="hljs-comment">; 把起始地址编译为 0x7c00</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, <span class="hljs-built_in">cs</span>     <span class="hljs-comment">; cs 代码段寄存器</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>, <span class="hljs-built_in">ax</span>     <span class="hljs-comment">; dx 数据段寄存器</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>, <span class="hljs-built_in">ax</span>     <span class="hljs-comment">; es 附加段寄存器</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ss</span>, <span class="hljs-built_in">ax</span>     <span class="hljs-comment">; ss 堆栈段寄存器</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">fs</span>, <span class="hljs-built_in">ax</span>     <span class="hljs-comment">; fs 80386 后添加的寄存器，无全称</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">sp</span>, <span class="hljs-number">0x7c00</span> <span class="hljs-comment">; sp 堆栈指针寄存器</span><br>     <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, <span class="hljs-number">0xb800</span><span class="hljs-comment">;</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">gs</span>, <span class="hljs-built_in">ax</span><span class="hljs-comment">;</span><br><br><span class="hljs-comment">; 清屏</span><br><span class="hljs-comment">; --------------------------------------------------</span><br><span class="hljs-comment">; INT 0x10    功能号: 0x06    功能描述：上卷窗口</span><br><span class="hljs-comment">; --------------------------------------------------</span><br><span class="hljs-comment">; 输入：</span><br><span class="hljs-comment">; AH 功能号 = 0x06</span><br><span class="hljs-comment">; AL = 上卷的行数(如果为0，表示全部)</span><br><span class="hljs-comment">; BH = 上卷行属性</span><br><span class="hljs-comment">; (CL, CH) = 窗口左上角的 (X, Y) 位置</span><br><span class="hljs-comment">; (DL, DH) = 窗口右下角的 (X, Y) 位置</span><br><span class="hljs-comment">; 无返回值:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, <span class="hljs-number">0x600</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>, <span class="hljs-number">0x700</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x184f</span> <span class="hljs-comment">; 右下角: (80, 25)</span><br>                   <span class="hljs-comment">; VGA 文本模式种，一行只能容纳 80 个字符，共 25 行</span><br>                   <span class="hljs-comment">; 下标从 0 开始，所以 0x18=24, 0x4f=79</span><br>        <br>    <span class="hljs-keyword">int</span> <span class="hljs-number">0x10</span>       <span class="hljs-comment">; int 0x10</span><br><br><br><span class="hljs-comment">;;;;;下面代码是新增功能;;;;;;;;;;;;;;;;;;;;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, LOADER_START_SECTOR<span class="hljs-comment">; 磁盘中loader的LBA地址</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>, LOADER_BASE_ADDR<span class="hljs-comment">;      loader加入内存的起始地址</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>, <span class="hljs-number">1</span><span class="hljs-comment">; 待读入内存的扇区数</span><br><span class="hljs-keyword">call</span> rd_disk_m_16<span class="hljs-comment">;</span><br><br><span class="hljs-keyword">jmp</span> LOADER_BASE_ADDR<span class="hljs-comment">;</span><br><span class="hljs-comment">;--------------------------------------------------------------</span><br><span class="hljs-comment">;功能：读取硬盘n个扇区</span><br><span class="hljs-symbol">rd_disk_m_16:</span><br><span class="hljs-comment">;----------------------------------------------------------</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">esi</span>, <span class="hljs-built_in">eax</span><span class="hljs-comment">;   备份eax  al在in/out指令会被使用</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>, <span class="hljs-built_in">cx</span><span class="hljs-comment">;    备份cx cl会在接下来代码中频繁使用</span><br><span class="hljs-comment">;读写硬盘:</span><br><span class="hljs-comment">;第一步：设置要读取的扇区数 1</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x1f2</span><span class="hljs-comment">; 配置的硬盘是ata0-master 是Primary通道  主盘</span><br>       <span class="hljs-comment">;sector count寄存器是0x1f2端口</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">cl</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">out</span> <span class="hljs-built_in">dx</span>, <span class="hljs-built_in">al</span><span class="hljs-comment">; 从内存把扇区数1输出到端口号0x1f2; </span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">esi</span><span class="hljs-comment">; 恢复eax</span><br><br><span class="hljs-comment">;第二步 将LBA地址存入0x1f3~0x1f6</span><br><span class="hljs-comment">;LBA地址7~0位写入端口0x1f3</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x1f3</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">out</span> <span class="hljs-built_in">dx</span>, <span class="hljs-built_in">al</span><span class="hljs-comment">;</span><br><br><span class="hljs-comment">;LBA地址15~8位写入端口0x1f4</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>, <span class="hljs-number">8</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">shr</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">cl</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x1f4</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">out</span> <span class="hljs-built_in">dx</span>, <span class="hljs-built_in">al</span><span class="hljs-comment">;</span><br><br><span class="hljs-comment">;LBA地址23~16位写入端口0x1f5</span><br><span class="hljs-keyword">shr</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">cl</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x1f5</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">out</span> <span class="hljs-built_in">dx</span>, <span class="hljs-built_in">al</span><span class="hljs-comment">;</span><br><br><span class="hljs-comment">;LBA地址24~27位写入端口0x1f6</span><br><span class="hljs-keyword">shr</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">cl</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">and</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0x0f</span><span class="hljs-comment">;  与运算al中低四位为LBA地址24~27位</span><br><span class="hljs-keyword">or</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0xe0</span><span class="hljs-comment">; 或运算拼出0x1f6的高四位1110 第6位为1表示LBA</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x1f6</span><span class="hljs-comment">; </span><br><span class="hljs-keyword">out</span> <span class="hljs-built_in">dx</span>, <span class="hljs-built_in">al</span><span class="hljs-comment">;</span><br><br><span class="hljs-comment">;第三步 向0x1f7端口写入读命令,0x20  </span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x1f7</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0x20</span><span class="hljs-comment">;</span><br>    <span class="hljs-keyword">out</span> <span class="hljs-built_in">dx</span>, <span class="hljs-built_in">al</span><span class="hljs-comment">;  命令 写入端口0x1f7后，硬盘立即开始工作，将数据放入硬</span><br><span class="hljs-comment">;盘控制器的缓冲区</span><br><br><span class="hljs-comment">;第四步 检测硬盘状态,判断loader是否已经读入0x1f0端口中</span><br><span class="hljs-symbol">  .not_ready:</span><br><span class="hljs-keyword">nop</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">in</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">dx</span><span class="hljs-comment">; 将端口0x1f7的status写入al;</span><br><span class="hljs-keyword">and</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0x88</span><span class="hljs-comment">; 获得status的第3位和第7位;</span><br><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0x08</span><span class="hljs-comment">; 与第3位相减作比较 会影响ZF CF PF</span><br>  <span class="hljs-keyword">jnz</span> .not_ready<span class="hljs-comment">;   ZF不等于0就跳,相当于循环等缓冲区中的数据准备好为止</span><br><br><span class="hljs-comment">;第5步 将0x1f0端口的数据搬向内存</span><br>  <span class="hljs-comment">;5.1 计算搬运次数</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, <span class="hljs-built_in">di</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">256</span><span class="hljs-comment">;0x1f0端口是16比特</span><br><span class="hljs-keyword">mul</span> <span class="hljs-built_in">dx</span><span class="hljs-comment">;    di*512字节/2字节=搬运次数  16位乘法乘积32位</span><br><span class="hljs-comment">;高16位在dx,低16位在ax;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>, <span class="hljs-built_in">ax</span><span class="hljs-comment">;   dx=1 乘积高16位是0,故把低16位移入cx</span><br>  <span class="hljs-comment">;5.2 循环搬运至内存         </span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>, <span class="hljs-number">0x1f0</span><span class="hljs-comment">;</span><br><span class="hljs-symbol">  .go_on_read:</span>     <span class="hljs-comment">;我们的loader只有一个扇区512字节</span><br>    <span class="hljs-keyword">in</span> <span class="hljs-built_in">ax</span>, <span class="hljs-built_in">dx</span><span class="hljs-comment">;;bx的寻址范围位64KB 65536字节</span><br><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">bx</span>], <span class="hljs-built_in">ax</span><span class="hljs-comment">;该循环不能加载大于64KB的程序于内存</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>, <span class="hljs-number">2</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">loop</span> .go_on_read<span class="hljs-comment">; cx不等于0 就回到循环处继续搬</span><br><span class="hljs-keyword">ret</span>    <span class="hljs-comment">;搬运完loader 回到LOADER_BASE_ADDR;</span><br><br>  <br>  <span class="hljs-built_in">times</span> <span class="hljs-number">510</span>-($-$$) <span class="hljs-built_in">db</span> <span class="hljs-number">0</span> <span class="hljs-comment">; 填充文件末尾的魔数 0xaa55 和当前位置之间的空间</span><br>                          <span class="hljs-comment">; 保证编译后生成的文件大小为 512 字节（硬盘一个扇区的大小）</span><br>    <span class="hljs-built_in">db</span> <span class="hljs-number">0x55</span>, <span class="hljs-number">0xaa</span><br></code></pre></td></tr></table></figure><h3 id="loaders"><a class="markdownIt-Anchor" href="#loaders"></a> loader.S</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">%include</span> <span class="hljs-string">&quot;boot.inc&quot;</span><br><span class="hljs-meta">section</span> loader vstart=LOADER_BASE_ADDR<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x00</span>], <span class="hljs-string">&#x27;2&#x27;</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x01</span>], <span class="hljs-number">0xA4</span><span class="hljs-comment">;</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x02</span>], <span class="hljs-string">&#x27; &#x27;</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x03</span>], <span class="hljs-number">0xA4</span><span class="hljs-comment">;</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x04</span>], <span class="hljs-string">&#x27;L&#x27;</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x05</span>], <span class="hljs-number">0xA4</span><span class="hljs-comment">;</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x06</span>], <span class="hljs-string">&#x27;O&#x27;</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x07</span>], <span class="hljs-number">0xA4</span><span class="hljs-comment">;</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x08</span>], <span class="hljs-string">&#x27;A&#x27;</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x09</span>], <span class="hljs-number">0xA4</span><span class="hljs-comment">;</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x0a</span>], <span class="hljs-string">&#x27;D&#x27;</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x0b</span>], <span class="hljs-number">0xA4</span><span class="hljs-comment">;</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x0c</span>], <span class="hljs-string">&#x27;E&#x27;</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x0d</span>], <span class="hljs-number">0xA4</span><span class="hljs-comment">;</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x0e</span>], <span class="hljs-string">&#x27;R&#x27;</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> [<span class="hljs-built_in">gs</span>:<span class="hljs-number">0x0f</span>], <span class="hljs-number">0xA4</span><span class="hljs-comment">;</span><br><br><span class="hljs-keyword">jmp</span> $<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="bootinc"><a class="markdownIt-Anchor" href="#bootinc"></a> boot.inc</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-comment">;----------------------loader AND kernel-----------------------------</span><br>LOADER_BASE_ADDR equ <span class="hljs-number">0</span>x900  <span class="hljs-comment">;loader.s加载到内存地址0x900</span><br>LOADER_START_SECTOR equ <span class="hljs-number">0</span>x2  <span class="hljs-comment">;loader.s刻入硬盘0盘0道2扇区（LBA）</span><br></code></pre></td></tr></table></figure><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>建议读者在阅读的时候不要偏离主线，作者花费了大量的篇幅去补充理论知识，但我们还是要记得自己的主线任务是os的实现，所以要秉持着理论服侍实践的想法去阅读。我虽阅读时间还很短，但能感觉到自己是真的学到并运用了一些知识，后面就要进入保护模式了，但我的夏令营集训也开始了，希望flag能完成.</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第二章 编写MBR，开始进入系统的世界</title>
    <link href="/2022/07/08/os(2)/"/>
    <url>/2022/07/08/os(2)/</url>
    
    <content type="html"><![CDATA[<h1 id="第二章-编写mbr开始进入系统的世界"><a class="markdownIt-Anchor" href="#第二章-编写mbr开始进入系统的世界"></a> 第二章 编写MBR，开始进入系统的世界</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>今天是7月6日，这一章涉及了汇编语言，阅读开始变得吃力，加上书中排版密密麻麻的文字，很容易心生退意，相信在开发的过程中一定会有些许乐趣等待挖掘，借此博客督促自己加强学习。</p><h2 id="lets-go-bios"><a class="markdownIt-Anchor" href="#lets-go-bios"></a> Let`s go! BIOS！</h2><p>首先说明了计算机启动后第一个运行的程序是我们常见的BIOS，然后为了说明BIOS加载的一系列问题，作者列出了实模式下内存布局的一张表用以说明CPU提交地址后会进行一个地址映射，分配给对应的物理设备。</p><p>然后就是BIOS的启动，在接电的瞬间，CPU中的cs:ip寄存器会被初始化为0xF000:0xFFF0（关于寄存器的一些概念涉及到汇编语言，这里不再赘述，我也是边读边学的），这段地址正好对应BIOS的入口地址。需要注意的是，这块地址只起到一个指引的作用，计算机执行它时需要跳转到BIOS的真正地址。</p><p>在BIOS里的最后一项工作时校验启动盘0盘0道1扇区（第一个扇区）的内容，如果该扇区末尾的两个字节分别是魔数0x55和0xaa，BIOS便会跳转到物理地址0x7c00，执行MBR（主引导记录）。</p><blockquote><p>我还想了下魔数是什么，一开始以为是计算机固定写死的某些程序，搜了一下才知道它是像魔法一样神奇的数。。。</p></blockquote><h2 id="mbr"><a class="markdownIt-Anchor" href="#mbr"></a> MBR</h2><p>MBR的大小是512字节，因为x86平台是小端字节序，所以为了保证最后两个字节（即510字节和511字节）为0x55和0xaa，其内容应为0xaa55。然后提到了NASM的两个关键字$和$$，它们用来表示当前行和本section的地址，起到标号的作用。</p><p>终于来到了MBR的编程，这一程序目前实现了一个在屏幕上打印字符串“1 MBR”的功能，其背景色为黑色，前景色为绿色。在打印字符串之前，还包含了不少代码，其功能不再解释。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">; mbr.S</span><br><br><span class="hljs-comment">; 主引导程序</span><br><span class="hljs-comment">; --------------------------------------------------</span><br><br>SECTION MBR vstart=<span class="hljs-number">0x7c00</span> <span class="hljs-comment">; 把起始地址编译为 0x7c00</span><br>    mov ax, cs     <span class="hljs-comment">; cs 代码段寄存器</span><br>    mov ds, ax     <span class="hljs-comment">; dx 数据段寄存器</span><br>    mov es, ax     <span class="hljs-comment">; es 附加段寄存器</span><br>    mov ss, ax     <span class="hljs-comment">; ss 堆栈段寄存器</span><br>    mov fs, ax     <span class="hljs-comment">; fs 80386 后添加的寄存器，无全称</span><br>    mov <span class="hljs-built_in">sp</span>, <span class="hljs-number">0x7c00</span> <span class="hljs-comment">; sp 堆栈指针寄存器</span><br><br><span class="hljs-comment">; 清屏</span><br><span class="hljs-comment">; --------------------------------------------------</span><br><span class="hljs-comment">; INT 0x10    功能号: 0x06    功能描述：上卷窗口</span><br><span class="hljs-comment">; --------------------------------------------------</span><br><span class="hljs-comment">; 输入：</span><br><span class="hljs-comment">; AH 功能号 = 0x06</span><br><span class="hljs-comment">; AL = 上卷的行数(如果为0，表示全部)</span><br><span class="hljs-comment">; BH = 上卷行属性</span><br><span class="hljs-comment">; (CL, CH) = 窗口左上角的 (X, Y) 位置</span><br><span class="hljs-comment">; (DL, DH) = 窗口右下角的 (X, Y) 位置</span><br><span class="hljs-comment">; 无返回值:</span><br>    mov ax, <span class="hljs-number">0x600</span><br>    mov <span class="hljs-keyword">bx, </span><span class="hljs-number">0x700</span><br>    mov cx, <span class="hljs-number">0</span><br>    mov dx, <span class="hljs-number">0x184f</span> <span class="hljs-comment">; 右下角: (80, 25)</span><br>                   <span class="hljs-comment">; VGA 文本模式种，一行只能容纳 80 个字符，共 25 行</span><br>                   <span class="hljs-comment">; 下标从 0 开始，所以 0x18=24, 0x4f=79</span><br>        <br>    int <span class="hljs-number">0x10</span>       <span class="hljs-comment">; int 0x10</span><br><br><span class="hljs-comment">;;;;;;;;;;;;;下面这三行代码获取光标位置;;;;;;;;;;;;;;;;</span><br><br><span class="hljs-comment">; .get_cursor 获取当前光标位置，在光标处打印字符</span><br>    mov ah, <span class="hljs-number">3</span>      <span class="hljs-comment">; 3 号子功能</span><br>    mov <span class="hljs-keyword">bh, </span><span class="hljs-number">0</span>      <span class="hljs-comment">; 待获取光标的页号</span><br><br>    int <span class="hljs-number">0x10</span>       <span class="hljs-comment">; 输出：</span><br>                   <span class="hljs-comment">; ch = 光标开始行，cl = 光标结束行</span><br>                   <span class="hljs-comment">; dh = 光标所在行号，dl = 光标所在列号</span><br><br><span class="hljs-comment">; 打印字符串</span><br>    mov ax, message<br>    mov <span class="hljs-keyword">bp, </span>ax     <span class="hljs-comment">; es:bp 为串首地址</span><br>    <br>    mov cx, <span class="hljs-number">5</span>      <span class="hljs-comment">; cx 为串长度，不包括结束符 &#x27;\0&#x27;</span><br>    mov ax, <span class="hljs-number">0x1301</span> <span class="hljs-comment">; 13 号子功能</span><br>                   <span class="hljs-comment">; ah = 13</span><br>                   <span class="hljs-comment">; al = 01: 写字符方式，显式字符串，光标跟随移动</span><br>    mov <span class="hljs-keyword">bx, </span><span class="hljs-number">0x2</span>    <span class="hljs-comment">; bh = 0，要显示的页号</span><br>                   <span class="hljs-comment">; bl = 02，字符属性，黑底绿字</span><br>    <br>    int <span class="hljs-number">0x10</span><br><span class="hljs-comment">;;;;;;;;;;;;;;;;;;;;;;打印字符串结束;;;;;;;;;;;;;;;;</span><br><span class="hljs-keyword">jmp </span>$<span class="hljs-comment">;     程序悬停在此</span><br><br>message db <span class="hljs-string">&quot;1 MBR&quot;</span><br>times <span class="hljs-number">510</span>-($-$$)   db <span class="hljs-number">0</span><br>db <span class="hljs-number">0x55</span>,<span class="hljs-number">0xaa</span><br><br></code></pre></td></tr></table></figure><p>之后我们利用dd命令（用于磁盘操作的命令）将mbr.bin输出到第一章我们创建的虚拟硬盘hd60M.img，记得按照作者提示，将块大小指定为512字节，只操作1块。</p><p>运行bochs，界面是我们预想的输出一串字符串，大功告成！</p><h2 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h2><p>这一章总体内容并不是很多，主要集中在一些概念的描述，如果没有一定的知识储备读起来会很生涩，但是到了实际操作的时候就会发现基础必不可少。总体来说有一种学到的知识马上就能用到的感觉，比之前读ostep时总感觉有一层纱布隔着的感觉有很大不同，接下来还是争取做到每天一更。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第一章 部署工作环境，千里之行，始于足下</title>
    <link href="/2022/07/08/os(1)/"/>
    <url>/2022/07/08/os(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章-部署工作环境千里之行始于足下"><a class="markdownIt-Anchor" href="#第一章-部署工作环境千里之行始于足下"></a> 第一章 部署工作环境，千里之行，始于足下</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>在读ostep的时候就已经萌生了自己写一个os的想法，在网上搜了一下，发现不少人都推荐读一下《操作系统真象还原》这本书，说是跟着这本书可以写一个简单的操作系统，正合我心。今天是7月5日，也是我翻开这本书的第一天，特记录一下此过程。给自己立一个flag，希望在进入8月之前能完整实现，马上又要进行数学建模国赛的集训，所以压力还是非常大，希望能顶住。</p><p>还有一点需要说明的是，本专栏不会详细记录制作系统的具体过程，书中和其他人写的博客都记载的非常清楚了，这里只做一个每章的总结，方便复习时回顾。</p><h2 id="进入正题吧"><a class="markdownIt-Anchor" href="#进入正题吧"></a> 进入正题吧</h2><p>首先介绍一下在制作os过程中要使用的<strong>编译器</strong>：<br />一个是我们已经非常熟悉的GCC，用来编译C代码，不用再详细说明了；<br />另一个是汇编语言的编译器NASM，汇编语言是我之前没有系统学习过的，但是既然涉及到底层实现，那么汇编一定是必不可少的，所以我在学习的过程中还会再配套学习它，选用的教材是王爽的《汇编语言》，突然觉得压力陡增。</p><p>然后是实验环境的搭建，因为我的主系统是Windows10，所以先在主系统上创建一个虚拟机用来模拟linux系统，这里用的不是书上写的virtualBox，而是目前比较主流的vmware workstation，然后装的ubuntu系统，这里有个小插叙值得分享一下，放在引用里了。</p><blockquote><p>因为之前做ostep的homework和csapp的lab时候就已经接触过linux系统了，当时装的也是比较大众的ubuntu系统，然后读这本书的时候因为怕自己水平不够，所以装的是和作者一样的cent os，但是装完后发现运行过程中出现了不少问题，比如无法联网、安装软件等等，发觉还是ubuntu系统好用一些，加上网上对于cent os教程也比较稀有，所以又装回了ubuntu，这就花费了我大半天的时间。。。</p></blockquote><p>为了实现自主创建操作系统，又在linux里面再装一个虚拟机Bochs，这是一个“PC兼容机模拟器和调试工具”，它貌似是用软件来模拟仿真出计算机的常用外设。</p><p>再下载完Bochs之后还要对它进行configure、make、make install三部曲，又是半天。。。<br />configure设置了一些参数，有bochs的安装目录、打开它的调试器、打开反汇编、启用io接口调试器等等，这些也是后面我们需要的功能。</p><p>最后再对安装好的bochs进行配置，这一步需要我们自己创建一个配置文件，我按照书中所写将其命名为bochsrc.disk。这个配置文件设置了一些内容，这里粘一下代码，注释已经给的很详细了。</p><figure class="highlight routeros"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 第一步，首先设置Bochs在运行过程中能够使用的内存，单位为MB。</span><br>megs: 512<br><br><span class="hljs-comment"># 第二步，设置对应真实机器的BIOS和VGA BIOS。</span><br>romimage: <span class="hljs-attribute">file</span>=/home/podest/bochs/share/bochs/BIOS-bochs-latest<br>vgaromimage: <span class="hljs-attribute">file</span>=/home/podest/bochs/share/bochs/VGABIOS-lgpl-latest<br><br><span class="hljs-comment"># 第三步，设置Bochs所使用的磁盘，软盘的关键字为floppy。</span><br><span class="hljs-comment"># 若只有一个软盘，则使用floppya即可，若有多个，则为floppya，floppyb……</span><br><span class="hljs-comment">#floppya: 1_44=a.img, status=inserted</span><br><br><span class="hljs-comment"># 第四步，选择启动盘符。</span><br><span class="hljs-comment">#boot: floppy#默认从软盘启动</span><br>boot: disk#改为从硬盘启动，代码直接写在硬盘上，不会再有读取软盘的操作<br><br><span class="hljs-comment"># 第五步，设置日志文件的输出。</span><br>log: bochs.out<br><br><span class="hljs-comment"># 第六步，开启或关闭某些功能。</span><br><span class="hljs-comment"># 关闭鼠标，打开键盘。</span><br>mouse:<span class="hljs-attribute">enabled</span>=0<br>keyboard:<span class="hljs-attribute">keymap</span>=/home/podest/bochs/share/bochs/keymaps/x11-pc-us.map<br><br><span class="hljs-comment"># 硬盘设置</span><br>ata0: <span class="hljs-attribute">enabled</span>=1, <span class="hljs-attribute">ioaddr1</span>=0x1f0, <span class="hljs-attribute">ioaddr2</span>=0x3f0, <span class="hljs-attribute">irq</span>=14<br>ata0-master: <span class="hljs-attribute">type</span>=disk, <span class="hljs-attribute">path</span>=<span class="hljs-string">&quot;hd60M.img&quot;</span>, <span class="hljs-attribute">mode</span>=flat,cylinders=121,heads=16,spt=63<br><br><span class="hljs-comment"># 增加的bochs对gdb的支持，这样gdb便可以从远程连接到此机器的1234端口调试了</span><br><span class="hljs-comment"># gdbstub: enabled=1, port=1234, text_base=0, data_base=0, bss_base=0</span><br></code></pre></td></tr></table></figure><p>到这里bochs的配置就完成了，以后运行它就可以直接执行命令bin/bochs即可，在读取配置文件的时候输入bochsrc.disc即可。目前我们运行的时候会弹出一个窗口提示bochs启动时找不到启动盘，所以我们就需要进行下一步，创建一个虚拟硬盘。按照书中操作即可，最终创建了一个名称为hd60M.img的虚拟硬盘。这次运行bochs依然弹出窗口，这一次提示该硬盘不是启动盘。</p><p>到这里这一章就戛然而止了，作者给留了一个小悬念。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>真象还原</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ostep homework(8)</title>
    <link href="/2022/06/25/Ostep(8)/"/>
    <url>/2022/06/25/Ostep(8)/</url>
    
    <content type="html"><![CDATA[<h1 id="第8章-调度多级反馈队列-homework详解"><a class="markdownIt-Anchor" href="#第8章-调度多级反馈队列-homework详解"></a> 第8章 <em>调度：多级反馈队列</em>  homework详解</h1><h2 id="实验环境"><a class="markdownIt-Anchor" href="#实验环境"></a> 实验环境</h2><p>笔者采用的是<strong>Ubuntu22.04</strong>的虚拟机。<br />本次作业需要用到<strong>cpu-sched-mlfq</strong>文件，按照<strong>readme</strong>提示操作即可。</p><h2 id="实验内容"><a class="markdownIt-Anchor" href="#实验内容"></a> 实验内容</h2><h3 id="1"><a class="markdownIt-Anchor" href="#1"></a> 1</h3><figure class="highlight tap"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs tap">$ python3 mlfq.py -n<span class="hljs-number"> 2 </span>-j<span class="hljs-number"> 2 </span>-m<span class="hljs-number"> 10 </span>-M<span class="hljs-number"> 0 </span>-c  <br>……  <br>Job List:  <br>  Job  0: startTime  <span class="hljs-number"> 0 </span>- runTime  <span class="hljs-number"> 8 </span>- ioFreq  <span class="hljs-number"> 0 </span> <br>  Job  1: startTime  <span class="hljs-number"> 0 </span>- runTime  <span class="hljs-number"> 4 </span>- ioFreq  <span class="hljs-number"> 0 </span> <br><br><br>Execution Trace:  <br><br>[ time<span class="hljs-number"> 0 </span>] JOB BEGINS by JOB<span class="hljs-number"> 0 </span> <br>[ time<span class="hljs-number"> 0 </span>] JOB BEGINS by JOB<span class="hljs-number"> 1 </span> <br>[ time<span class="hljs-number"> 0 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 1 </span>[ TICKS<span class="hljs-number"> 9 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 7 </span>(of 8) ]  <br>……  <br>[ time<span class="hljs-number"> 7 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 1 </span>[ TICKS<span class="hljs-number"> 2 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 0 </span>(of 8) ]  <br>[ time<span class="hljs-number"> 8 </span>] FINISHED JOB<span class="hljs-number"> 0 </span> <br>[ time<span class="hljs-number"> 8 </span>] Run JOB<span class="hljs-number"> 1 </span>at PRIORITY<span class="hljs-number"> 1 </span>[ TICKS<span class="hljs-number"> 9 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 3 </span>(of 4) ]  <br>……  <br>[ time<span class="hljs-number"> 11 </span>] Run JOB<span class="hljs-number"> 1 </span>at PRIORITY<span class="hljs-number"> 1 </span>[ TICKS<span class="hljs-number"> 6 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 0 </span>(of 4) ]  <br>[ time<span class="hljs-number"> 12 </span>] FINISHED JOB<span class="hljs-number"> 1 </span> <br><br>Final statistics:  <br>  Job  0: startTime  <span class="hljs-number"> 0 </span>- response  <span class="hljs-number"> 0 </span>- turnaround  <span class="hljs-number"> 8 </span> <br>  Job  1: startTime  <span class="hljs-number"> 0 </span>- response  <span class="hljs-number"> 8 </span>- turnaround <span class="hljs-number"> 12 </span> <br><br>  Avg  1: startTime n/a - response 4.00 - turnaround 10.00  <br></code></pre></td></tr></table></figure><p>给出限制条件：队列数为2，工作数为2，工作最大长度为10，I/O最大长度为0。</p><h3 id="2"><a class="markdownIt-Anchor" href="#2"></a> 2</h3><p><strong>实例1</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ python3 mlfq.py -l 0,200,0 -q<span class="hljs-number"> 10 </span>-n<span class="hljs-number"> 3 </span>-c  <br>……  <br><br>Job List:  <br>  Job  0: startTime  <span class="hljs-number"> 0 </span>- runTime<span class="hljs-number"> 200 </span>- ioFreq  <span class="hljs-number"> 0 </span> <br><br><br>Execution Trace:  <br><br>[ time<span class="hljs-number"> 0 </span>] JOB BEGINS by JOB<span class="hljs-number"> 0 </span> <br>[ time<span class="hljs-number"> 0 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 2 </span>[ TICKS<span class="hljs-number"> 9 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 199 </span>(of 200) ]  <br>……  <br>[ time<span class="hljs-number"> 9 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 2 </span>[ TICKS<span class="hljs-number"> 0 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 190 </span>(of 200) ]  <br>[ time<span class="hljs-number"> 10 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 1 </span>[ TICKS<span class="hljs-number"> 9 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 189 </span>(of 200) ]  <br>……  <br>[ time<span class="hljs-number"> 19 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 1 </span>[ TICKS<span class="hljs-number"> 0 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 180 </span>(of 200) ]  <br>[ time<span class="hljs-number"> 20 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 0 </span>[ TICKS<span class="hljs-number"> 9 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 179 </span>(of 200) ]  <br>……  <br>[ time<span class="hljs-number"> 199 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 0 </span>[ TICKS<span class="hljs-number"> 0 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 0 </span>(of 200) ]  <br>[ time<span class="hljs-number"> 200 </span>] FINISHED JOB<span class="hljs-number"> 0 </span> <br><br>Final statistics:  <br>  Job  0: startTime  <span class="hljs-number"> 0 </span>- response  <span class="hljs-number"> 0 </span>- turnaround<span class="hljs-number"> 200 </span> <br><br>  Avg  0: startTime n/a - response 0.00 - turnaround 200.00  <br></code></pre></td></tr></table></figure><p>单个长工作，其运行时间为200ms，3个队列，时间片长度为10ms。</p><p><strong>实例2</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ python3 mlfq.py -l 0,180,0:100,20,0 -q<span class="hljs-number"> 10 </span>-n<span class="hljs-number"> 3 </span>-c  <br>……  <br><br>Job List:  <br>  Job  0: startTime  <span class="hljs-number"> 0 </span>- runTime<span class="hljs-number"> 180 </span>- ioFreq  <span class="hljs-number"> 0 </span> <br>  Job  1: startTime<span class="hljs-number"> 100 </span>- runTime <span class="hljs-number"> 20 </span>- ioFreq  <span class="hljs-number"> 0 </span> <br><br><br>Execution Trace:  <br><br>[ time<span class="hljs-number"> 0 </span>] JOB BEGINS by JOB<span class="hljs-number"> 0 </span> <br>[ time<span class="hljs-number"> 0 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 2 </span>[ TICKS<span class="hljs-number"> 9 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 179 </span>(of 180) ]  <br>……  <br>[ time<span class="hljs-number"> 9 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 2 </span>[ TICKS<span class="hljs-number"> 0 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 170 </span>(of 180) ]  <br>[ time<span class="hljs-number"> 10 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 1 </span>[ TICKS<span class="hljs-number"> 9 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 169 </span>(of 180) ]  <br>……  <br>[ time<span class="hljs-number"> 19 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 1 </span>[ TICKS<span class="hljs-number"> 0 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 160 </span>(of 180) ]  <br>[ time<span class="hljs-number"> 20 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 0 </span>[ TICKS<span class="hljs-number"> 9 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 159 </span>(of 180) ]  <br>……  <br>[ time<span class="hljs-number"> 99 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 0 </span>[ TICKS<span class="hljs-number"> 0 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 80 </span>(of 180) ]  <br>[ time<span class="hljs-number"> 100 </span>] JOB BEGINS by JOB<span class="hljs-number"> 1 </span> <br>[ time<span class="hljs-number"> 100 </span>] Run JOB<span class="hljs-number"> 1 </span>at PRIORITY<span class="hljs-number"> 2 </span>[ TICKS<span class="hljs-number"> 9 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 19 </span>(of 20) ]  <br>……  <br>[ time<span class="hljs-number"> 109 </span>] Run JOB<span class="hljs-number"> 1 </span>at PRIORITY<span class="hljs-number"> 2 </span>[ TICKS<span class="hljs-number"> 0 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 10 </span>(of 20) ]  <br>[ time<span class="hljs-number"> 110 </span>] Run JOB<span class="hljs-number"> 1 </span>at PRIORITY<span class="hljs-number"> 1 </span>[ TICKS<span class="hljs-number"> 9 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 9 </span>(of 20) ]  <br>……  <br>[ time<span class="hljs-number"> 119 </span>] Run JOB<span class="hljs-number"> 1 </span>at PRIORITY<span class="hljs-number"> 1 </span>[ TICKS<span class="hljs-number"> 0 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 0 </span>(of 20) ]  <br>[ time<span class="hljs-number"> 120 </span>] FINISHED JOB<span class="hljs-number"> 1 </span> <br>[ time<span class="hljs-number"> 120 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 0 </span>[ TICKS<span class="hljs-number"> 9 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 79 </span>(of 180) ]  <br>……  <br>[ time<span class="hljs-number"> 199 </span>] Run JOB<span class="hljs-number"> 0 </span>at PRIORITY<span class="hljs-number"> 0 </span>[ TICKS<span class="hljs-number"> 0 </span>ALLOT<span class="hljs-number"> 1 </span>TIME<span class="hljs-number"> 0 </span>(of 180) ]  <br>[ time<span class="hljs-number"> 200 </span>] FINISHED JOB<span class="hljs-number"> 0 </span> <br><br>Final statistics:  <br>  Job  0: startTime  <span class="hljs-number"> 0 </span>- response  <span class="hljs-number"> 0 </span>- turnaround<span class="hljs-number"> 200 </span> <br>  Job  1: startTime<span class="hljs-number"> 100 </span>- response  <span class="hljs-number"> 0 </span>- turnaround <span class="hljs-number"> 20 </span> <br><br>  Avg  1: startTime n/a - response 0.00 - turnaround 110.00  <br></code></pre></td></tr></table></figure><p>长工作运行期间进入了一个短工作，由于短工作优先级高，故优先执行短工作。书上写长工作从最低优先队列开始运行，这里是从最高优先队列运行的，不过不影响结果。<br /><strong>实例3</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ python3 mlfq<span class="hljs-selector-class">.py</span>  -l <span class="hljs-number">0</span>,<span class="hljs-number">40</span>,<span class="hljs-number">2</span>:<span class="hljs-number">0</span>,<span class="hljs-number">200</span>,<span class="hljs-number">0</span> -<span class="hljs-selector-tag">q</span> <span class="hljs-number">10</span> -n <span class="hljs-number">3</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-number">5</span> -c  <br></code></pre></td></tr></table></figure><h1 id="第8章-调度多级反馈队列-homework详解-2"><a class="markdownIt-Anchor" href="#第8章-调度多级反馈队列-homework详解-2"></a> 第8章 <em>调度：多级反馈队列</em> homework详解</h1><h2 id="实验环境-2"><a class="markdownIt-Anchor" href="#实验环境-2"></a> 实验环境</h2><p>笔者采用的是<strong>Ubuntu22.04</strong>的虚拟机。<br />本次作业需要用到<strong>cpu-sched-mlfq</strong>文件，按照<strong>readme</strong>提示操作即可。</p><h2 id="实验内容-2"><a class="markdownIt-Anchor" href="#实验内容-2"></a> 实验内容</h2><h3 id="1-2"><a class="markdownIt-Anchor" href="#1-2"></a> 1</h3><div class="code-wrapper"><pre><code class="hljs">$ python3 mlfq.py -n 2 -j 2 -m 10 -M 0 -c……Job List:  Job  0: startTime   0 - runTime   8 - ioFreq   0  Job  1: startTime   0 - runTime   4 - ioFreq   0Execution Trace:[ time 0 ] JOB BEGINS by JOB 0[ time 0 ] JOB BEGINS by JOB 1[ time 0 ] Run JOB 0 at PRIORITY 1 [ TICKS 9 ALLOT 1 TIME 7 (of 8) ]……[ time 7 ] Run JOB 0 at PRIORITY 1 [ TICKS 2 ALLOT 1 TIME 0 (of 8) ][ time 8 ] FINISHED JOB 0[ time 8 ] Run JOB 1 at PRIORITY 1 [ TICKS 9 ALLOT 1 TIME 3 (of 4) ]……[ time 11 ] Run JOB 1 at PRIORITY 1 [ TICKS 6 ALLOT 1 TIME 0 (of 4) ][ time 12 ] FINISHED JOB 1Final statistics:  Job  0: startTime   0 - response   0 - turnaround   8  Job  1: startTime   0 - response   8 - turnaround  12  Avg  1: startTime n/a - response 4.00 - turnaround 10.00</code></pre></div><p>给出限制条件：队列数为2，工作数为2，工作最大长度为10，I/O最大长度为0。</p><h3 id="2-2"><a class="markdownIt-Anchor" href="#2-2"></a> 2</h3><p><strong>实例1</strong></p><div class="code-wrapper"><pre><code class="hljs">$ python3 mlfq.py -l 0,200,0 -q 10 -n 3 -c……Job List:  Job  0: startTime   0 - runTime 200 - ioFreq   0Execution Trace:[ time 0 ] JOB BEGINS by JOB 0[ time 0 ] Run JOB 0 at PRIORITY 2 [ TICKS 9 ALLOT 1 TIME 199 (of 200) ]……[ time 9 ] Run JOB 0 at PRIORITY 2 [ TICKS 0 ALLOT 1 TIME 190 (of 200) ][ time 10 ] Run JOB 0 at PRIORITY 1 [ TICKS 9 ALLOT 1 TIME 189 (of 200) ]……[ time 19 ] Run JOB 0 at PRIORITY 1 [ TICKS 0 ALLOT 1 TIME 180 (of 200) ][ time 20 ] Run JOB 0 at PRIORITY 0 [ TICKS 9 ALLOT 1 TIME 179 (of 200) ]……[ time 199 ] Run JOB 0 at PRIORITY 0 [ TICKS 0 ALLOT 1 TIME 0 (of 200) ][ time 200 ] FINISHED JOB 0Final statistics:  Job  0: startTime   0 - response   0 - turnaround 200  Avg  0: startTime n/a - response 0.00 - turnaround 200.00</code></pre></div><p>单个长工作，其运行时间为200ms，3个队列，时间片长度为10ms。</p><p><strong>实例2</strong></p><div class="code-wrapper"><pre><code class="hljs">$ python3 mlfq.py -l 0,180,0:100,20,0 -q 10 -n 3 -c……Job List:  Job  0: startTime   0 - runTime 180 - ioFreq   0  Job  1: startTime 100 - runTime  20 - ioFreq   0Execution Trace:[ time 0 ] JOB BEGINS by JOB 0[ time 0 ] Run JOB 0 at PRIORITY 2 [ TICKS 9 ALLOT 1 TIME 179 (of 180) ]……[ time 9 ] Run JOB 0 at PRIORITY 2 [ TICKS 0 ALLOT 1 TIME 170 (of 180) ][ time 10 ] Run JOB 0 at PRIORITY 1 [ TICKS 9 ALLOT 1 TIME 169 (of 180) ]……[ time 19 ] Run JOB 0 at PRIORITY 1 [ TICKS 0 ALLOT 1 TIME 160 (of 180) ][ time 20 ] Run JOB 0 at PRIORITY 0 [ TICKS 9 ALLOT 1 TIME 159 (of 180) ]……[ time 99 ] Run JOB 0 at PRIORITY 0 [ TICKS 0 ALLOT 1 TIME 80 (of 180) ][ time 100 ] JOB BEGINS by JOB 1[ time 100 ] Run JOB 1 at PRIORITY 2 [ TICKS 9 ALLOT 1 TIME 19 (of 20) ]……[ time 109 ] Run JOB 1 at PRIORITY 2 [ TICKS 0 ALLOT 1 TIME 10 (of 20) ][ time 110 ] Run JOB 1 at PRIORITY 1 [ TICKS 9 ALLOT 1 TIME 9 (of 20) ]……[ time 119 ] Run JOB 1 at PRIORITY 1 [ TICKS 0 ALLOT 1 TIME 0 (of 20) ][ time 120 ] FINISHED JOB 1[ time 120 ] Run JOB 0 at PRIORITY 0 [ TICKS 9 ALLOT 1 TIME 79 (of 180) ]……[ time 199 ] Run JOB 0 at PRIORITY 0 [ TICKS 0 ALLOT 1 TIME 0 (of 180) ][ time 200 ] FINISHED JOB 0Final statistics:  Job  0: startTime   0 - response   0 - turnaround 200  Job  1: startTime 100 - response   0 - turnaround  20  Avg  1: startTime n/a - response 0.00 - turnaround 110.00</code></pre></div><p>长工作运行期间进入了一个短工作，由于短工作优先级高，故优先执行短工作。书上写长工作从最低优先队列开始运行，这里是从最高优先队列运行的，不过不影响结果。<br /><strong>实例3</strong></p><div class="code-wrapper"><pre><code class="hljs">$ python3 mlfq.py  -l 0,40,2:0,200,0 -q 10 -n 3 -i 5 -c</code></pre></div><p>Markdown 2475 字数 113 行数 当前行 112, 当前列 0 文章已保存11:18:23</p><p>HTML 2414 字数 85 段落</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>ostep</category>
      
      <category>homework详解</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ostep homework(7)</title>
    <link href="/2022/05/24/Ostep(7)/"/>
    <url>/2022/05/24/Ostep(7)/</url>
    
    <content type="html"><![CDATA[<h1 id="第7章-进程调度介绍-homework详解"><a class="markdownIt-Anchor" href="#第7章-进程调度介绍-homework详解"></a> 第7章 <em>进程调度：介绍</em>  homework详解</h1><h2 id="实验环境"><a class="markdownIt-Anchor" href="#实验环境"></a> 实验环境</h2><p>笔者采用的是<strong>Ubuntu22.04</strong>的虚拟机。<br />本次作业需要先通过所学知识手动解题，再按教程运行程序<strong><a href="http://scheduler.py">scheduler.py</a></strong>即可。<br />需要用到<strong>cpu-sched</strong>文件，先阅读<strong>readme</strong>文件。</p><h2 id="实验内容"><a class="markdownIt-Anchor" href="#实验内容"></a> 实验内容</h2><h3 id="1"><a class="markdownIt-Anchor" href="#1"></a> 1</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><pre><code class="hljs livecodeserver">$ ./scheduler.py -p SJF -l <span class="hljs-number">200</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span> -c<br>ARG policy SJF<br>ARG jlist <span class="hljs-number">200</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span><br><br>Here is <span class="hljs-keyword">the</span> job list, <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> run <span class="hljs-built_in">time</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">each</span> job: <br>  Job <span class="hljs-number">0</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">200.0</span> )<br>  Job <span class="hljs-number">1</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">200.0</span> )<br>  Job <span class="hljs-number">2</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">200.0</span> )<br><br><br>** Solutions **<br><br>Execution trace:<br>  [ <span class="hljs-built_in">time</span>   <span class="hljs-number">0</span> ] Run job <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> <span class="hljs-number">200.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">200.00</span> )<br>  [ <span class="hljs-built_in">time</span> <span class="hljs-number">200</span> ] Run job <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">200.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">400.00</span> )<br>  [ <span class="hljs-built_in">time</span> <span class="hljs-number">400</span> ] Run job <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> <span class="hljs-number">200.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">600.00</span> )<br><br>Final statistics:<br>  Job   <span class="hljs-number">0</span> <span class="hljs-comment">-- Response: 0.00  Turnaround 200.00  Wait 0.00</span><br>  Job   <span class="hljs-number">1</span> <span class="hljs-comment">-- Response: 200.00  Turnaround 400.00  Wait 200.00</span><br>  Job   <span class="hljs-number">2</span> <span class="hljs-comment">-- Response: 400.00  Turnaround 600.00  Wait 400.00</span><br><br>  Average <span class="hljs-comment">-- Response: 200.00  Turnaround 400.00  Wait 200.00</span><br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$ ./scheduler.py -p FIFO -l <span class="hljs-number">200</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span> -c<br>ARG policy FIFO<br>ARG jlist <span class="hljs-number">200</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span><br><br>Here is <span class="hljs-keyword">the</span> job list, <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> run <span class="hljs-built_in">time</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">each</span> job: <br>  Job <span class="hljs-number">0</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">200.0</span> )<br>  Job <span class="hljs-number">1</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">200.0</span> )<br>  Job <span class="hljs-number">2</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">200.0</span> )<br><br><br>** Solutions **<br><br>Execution trace:<br>  [ <span class="hljs-built_in">time</span>   <span class="hljs-number">0</span> ] Run job <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> <span class="hljs-number">200.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">200.00</span> )<br>  [ <span class="hljs-built_in">time</span> <span class="hljs-number">200</span> ] Run job <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">200.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">400.00</span> )<br>  [ <span class="hljs-built_in">time</span> <span class="hljs-number">400</span> ] Run job <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> <span class="hljs-number">200.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">600.00</span> )<br><br>Final statistics:<br>  Job   <span class="hljs-number">0</span> <span class="hljs-comment">-- Response: 0.00  Turnaround 200.00  Wait 0.00</span><br>  Job   <span class="hljs-number">1</span> <span class="hljs-comment">-- Response: 200.00  Turnaround 400.00  Wait 200.00</span><br>  Job   <span class="hljs-number">2</span> <span class="hljs-comment">-- Response: 400.00  Turnaround 600.00  Wait 400.00</span><br><br>  Average <span class="hljs-comment">-- Response: 200.00  Turnaround 400.00  Wait 200.00</span><br></code></pre></td></tr></table></figure><p>这两个代码块分别是SJF和FIFO调度，因为三个任务长度相等且同时到达，所以它们的响应时间和周转时间相同。</p><h3 id="2"><a class="markdownIt-Anchor" href="#2"></a> 2</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$ ./scheduler.py -p SJF -l <span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span> -c<br>ARG policy SJF<br>ARG jlist <span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span><br><br>Here is <span class="hljs-keyword">the</span> job list, <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> run <span class="hljs-built_in">time</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">each</span> job: <br>  Job <span class="hljs-number">0</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">100.0</span> )<br>  Job <span class="hljs-number">1</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">200.0</span> )<br>  Job <span class="hljs-number">2</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">300.0</span> )<br><br><br>** Solutions **<br><br>Execution trace:<br>  [ <span class="hljs-built_in">time</span>   <span class="hljs-number">0</span> ] Run job <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> <span class="hljs-number">100.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">100.00</span> )<br>  [ <span class="hljs-built_in">time</span> <span class="hljs-number">100</span> ] Run job <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">200.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">300.00</span> )<br>  [ <span class="hljs-built_in">time</span> <span class="hljs-number">300</span> ] Run job <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> <span class="hljs-number">300.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">600.00</span> )<br><br>Final statistics:<br>  Job   <span class="hljs-number">0</span> <span class="hljs-comment">-- Response: 0.00  Turnaround 100.00  Wait 0.00</span><br>  Job   <span class="hljs-number">1</span> <span class="hljs-comment">-- Response: 100.00  Turnaround 300.00  Wait 100.00</span><br>  Job   <span class="hljs-number">2</span> <span class="hljs-comment">-- Response: 300.00  Turnaround 600.00  Wait 300.00</span><br><br>  Average <span class="hljs-comment">-- Response: 133.33  Turnaround 333.33  Wait 133.33</span><br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$ ./scheduler.py -p FIFO -l <span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span> -c<br>ARG policy FIFO<br>ARG jlist <span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span><br><br>Here is <span class="hljs-keyword">the</span> job list, <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> run <span class="hljs-built_in">time</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">each</span> job: <br>  Job <span class="hljs-number">0</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">100.0</span> )<br>  Job <span class="hljs-number">1</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">200.0</span> )<br>  Job <span class="hljs-number">2</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">300.0</span> )<br><br><br>** Solutions **<br><br>Execution trace:<br>  [ <span class="hljs-built_in">time</span>   <span class="hljs-number">0</span> ] Run job <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> <span class="hljs-number">100.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">100.00</span> )<br>  [ <span class="hljs-built_in">time</span> <span class="hljs-number">100</span> ] Run job <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">200.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">300.00</span> )<br>  [ <span class="hljs-built_in">time</span> <span class="hljs-number">300</span> ] Run job <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> <span class="hljs-number">300.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">600.00</span> )<br><br>Final statistics:<br>  Job   <span class="hljs-number">0</span> <span class="hljs-comment">-- Response: 0.00  Turnaround 100.00  Wait 0.00</span><br>  Job   <span class="hljs-number">1</span> <span class="hljs-comment">-- Response: 100.00  Turnaround 300.00  Wait 100.00</span><br>  Job   <span class="hljs-number">2</span> <span class="hljs-comment">-- Response: 300.00  Turnaround 600.00  Wait 300.00</span><br><br>  Average <span class="hljs-comment">-- Response: 133.33  Turnaround 333.33  Wait 133.33</span><br></code></pre></td></tr></table></figure><p>因为是按照100，200，300的顺序插入任务的，所以二者调度模式是相同的，如果将100，200，300的顺序交换，结果会产生差异。例如，</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$ ./scheduler.py -p FIFO -l <span class="hljs-number">200</span>,<span class="hljs-number">100</span>,<span class="hljs-number">300</span> -c<br>ARG policy FIFO<br>ARG jlist <span class="hljs-number">200</span>,<span class="hljs-number">100</span>,<span class="hljs-number">300</span><br><br>Here is <span class="hljs-keyword">the</span> job list, <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> run <span class="hljs-built_in">time</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">each</span> job: <br>  Job <span class="hljs-number">0</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">200.0</span> )<br>  Job <span class="hljs-number">1</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">100.0</span> )<br>  Job <span class="hljs-number">2</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">300.0</span> )<br><br><br>** Solutions **<br><br>Execution trace:<br>  [ <span class="hljs-built_in">time</span>   <span class="hljs-number">0</span> ] Run job <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> <span class="hljs-number">200.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">200.00</span> )<br>  [ <span class="hljs-built_in">time</span> <span class="hljs-number">200</span> ] Run job <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">100.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">300.00</span> )<br>  [ <span class="hljs-built_in">time</span> <span class="hljs-number">300</span> ] Run job <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> <span class="hljs-number">300.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">600.00</span> )<br><br>Final statistics:<br>  Job   <span class="hljs-number">0</span> <span class="hljs-comment">-- Response: 0.00  Turnaround 200.00  Wait 0.00</span><br>  Job   <span class="hljs-number">1</span> <span class="hljs-comment">-- Response: 200.00  Turnaround 300.00  Wait 200.00</span><br>  Job   <span class="hljs-number">2</span> <span class="hljs-comment">-- Response: 300.00  Turnaround 600.00  Wait 300.00</span><br><br>  Average <span class="hljs-comment">-- Response: 166.67  Turnaround 366.67  Wait 166.67</span><br></code></pre></td></tr></table></figure><p>响应时间和周转时间都发生了变化。</p><h3 id="3"><a class="markdownIt-Anchor" href="#3"></a> 3</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$ ./scheduler.py -p RR -l <span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span> -c<br>ARG policy RR<br>ARG jlist <span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span><br><br>Here is <span class="hljs-keyword">the</span> job list, <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> run <span class="hljs-built_in">time</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">each</span> job: <br>  Job <span class="hljs-number">0</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">100.0</span> )<br>  Job <span class="hljs-number">1</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">200.0</span> )<br>  Job <span class="hljs-number">2</span> ( <span class="hljs-built_in">length</span> = <span class="hljs-number">300.0</span> )<br><br><br>** Solutions **<br><br>Execution trace:<br>  [ <span class="hljs-built_in">time</span>   <span class="hljs-number">0</span> ] Run job   <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1.00</span> <span class="hljs-built_in">secs</span><br>  [ <span class="hljs-built_in">time</span>   <span class="hljs-number">1</span> ] Run job   <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1.00</span> <span class="hljs-built_in">secs</span><br>  [ <span class="hljs-built_in">time</span>   <span class="hljs-number">2</span> ] Run job   <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1.00</span> <span class="hljs-built_in">secs</span><br>  [ <span class="hljs-built_in">time</span>   <span class="hljs-number">3</span> ] Run job   <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1.00</span> <span class="hljs-built_in">secs</span><br>  [ <span class="hljs-built_in">time</span>   <span class="hljs-number">4</span> ] Run job   <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1.00</span> <span class="hljs-built_in">secs</span><br>  ……<br>  [ <span class="hljs-built_in">time</span> <span class="hljs-number">598</span> ] Run job   <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1.00</span> <span class="hljs-built_in">secs</span><br>  [ <span class="hljs-built_in">time</span> <span class="hljs-number">599</span> ] Run job   <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1.00</span> <span class="hljs-built_in">secs</span> ( DONE <span class="hljs-keyword">at</span> <span class="hljs-number">600.00</span> )<br><br>Final statistics:<br>  Job   <span class="hljs-number">0</span> <span class="hljs-comment">-- Response: 0.00  Turnaround 298.00  Wait 198.00</span><br>  Job   <span class="hljs-number">1</span> <span class="hljs-comment">-- Response: 1.00  Turnaround 499.00  Wait 299.00</span><br>  Job   <span class="hljs-number">2</span> <span class="hljs-comment">-- Response: 2.00  Turnaround 600.00  Wait 300.00</span><br><br>  Average <span class="hljs-comment">-- Response: 1.00  Turnaround 465.67  Wait 265.67</span><br></code></pre></td></tr></table></figure><p>采用RR调度程序交换三者顺序也不会有影响了，牺牲了周转时间和等待时间换取了极快的响应时间。</p><h3 id="4"><a class="markdownIt-Anchor" href="#4"></a> 4</h3><p>当工作负载为长度自小到大升序排列时，二者产生的效果是一样的，其周转时间和等待时间一致。</p><h3 id="5"><a class="markdownIt-Anchor" href="#5"></a> 5</h3><p>当量子长度大于最大工作负载长度时，二者等效。</p><h3 id="6"><a class="markdownIt-Anchor" href="#6"></a> 6</h3><p>容易得出结论，工作负载长度增加，其必然会使响应时间增加。</p><h3 id="7"><a class="markdownIt-Anchor" href="#7"></a> 7</h3><p>量子长度增加，响应时间会随之增加。<br />当给定N个任务时，假设量子长度为m</p><ol><li><p>当每个任务长度都大于m时，其响应时间为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mi>i</mi><mo>×</mo><mi>m</mi></mrow><mi>N</mi></mfrac><mo>=</mo><mfrac><mrow><mi>m</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">{\sum_{i=1}^N i\times m\over N}={m(N+1)\over2} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.356941em;vertical-align:-0.686em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.670941em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6897100000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></span></p></li><li><p>当每个任务长度都小于m时，其响应时间为总任务长度除以N。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>ostep</category>
      
      <category>homework详解</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ostep homework(5)</title>
    <link href="/2022/05/20/Ostep(5)/"/>
    <url>/2022/05/20/Ostep(5)/</url>
    
    <content type="html"><![CDATA[<h1 id="第5章-插叙进程api-homework详解"><a class="markdownIt-Anchor" href="#第5章-插叙进程api-homework详解"></a> 第5章 <em>插叙：进程API</em>  homework详解</h1><h2 id="实验环境"><a class="markdownIt-Anchor" href="#实验环境"></a> 实验环境</h2><p>笔者采用的是Ubuntu22.04的虚拟机。<br />本次作业原则上只需自己编码，不需要依靠实验材料，不过作者也提供了两个py程序可供参考，文件名为cpu-api。</p><h2 id="实验内容"><a class="markdownIt-Anchor" href="#实验内容"></a> 实验内容</h2><h3 id="1"><a class="markdownIt-Anchor" href="#1"></a> 1</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d (pid:%d)\n&quot;</span>, x, (<span class="hljs-type">int</span>) getpid());<br>    <span class="hljs-type">int</span> rc = fork();<br>    <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// fork失败</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork failed\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rc == <span class="hljs-number">0</span>) <span class="hljs-comment">// child</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d (pid:%d)\n&quot;</span>, x, (<span class="hljs-type">int</span>) getpid());<br>        x = <span class="hljs-number">1000</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// parent</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d (pid:%d)\n&quot;</span>, x, (<span class="hljs-type">int</span>) getpid());<br>        x = <span class="hljs-number">500</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 运行结果：</span><br><span class="hljs-comment">// 100 (pid:19563)</span><br><span class="hljs-comment">// 100 (pid:19563)</span><br><span class="hljs-comment">// 500</span><br><span class="hljs-comment">// 100 (pid:19564)</span><br><span class="hljs-comment">// 1000</span><br></code></pre></td></tr></table></figure><p>由此可见，在fork子进程之后修改主进程变量不会影响到子进程，要把它们理解成两个独立的进程，当然子进程的变量值全部继承于fork子进程之前的主进程。</p><h3 id="2"><a class="markdownIt-Anchor" href="#2"></a> 2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;temp.txt&quot;</span>, O_CREAT|O_WRONLY|O_TRUNC, S_IRWXU);<br>    <span class="hljs-type">int</span> rc = fork();<br>    <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>) <br>    &#123;<br>        close(fd);<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125; <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rc == <span class="hljs-number">0</span>) <span class="hljs-comment">// 子进程写入</span><br>    &#123;<br>        <span class="hljs-type">char</span> *s = <span class="hljs-string">&quot;child write something!\n&quot;</span>;<br>        write(fd, s, <span class="hljs-built_in">strlen</span>(s));<br>    &#125; <br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// 主进程写入</span><br>    &#123;<br>        <span class="hljs-type">char</span> *s = <span class="hljs-string">&quot;parent write something\n&quot;</span>;<br>        write(fd, s, <span class="hljs-built_in">strlen</span>(s));<br>        wait(<span class="hljs-literal">NULL</span>);<br>        close(fd);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 运行结果</span><br><span class="hljs-comment">// child write something!</span><br><span class="hljs-comment">// parent write something!</span><br></code></pre></td></tr></table></figure><p>两个进程都能对打开的文件进行修改。</p><h3 id="3"><a class="markdownIt-Anchor" href="#3"></a> 3</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> rc = vfork();<br>    <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// fork失败</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork failed\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rc == <span class="hljs-number">0</span>) <span class="hljs-comment">// child</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello\n&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// parent</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;goodbye\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 运行结果</span><br><span class="hljs-comment">// hello</span><br><span class="hljs-comment">// goodbye</span><br></code></pre></td></tr></table></figure><p>使用vfork创建子进程，可以优先执行子进程。</p><h3 id="4"><a class="markdownIt-Anchor" href="#4"></a> 4</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">6</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> * s = <span class="hljs-string">&quot;/bin/ls&quot;</span>;<br>    <span class="hljs-type">char</span> * ss = <span class="hljs-string">&quot;ls&quot;</span>;<br>    <span class="hljs-type">char</span> * s2 = <span class="hljs-string">&quot;/&quot;</span>;<br>    <span class="hljs-type">char</span> * sv[] = &#123; ss, s2, <span class="hljs-literal">NULL</span> &#125;;<br>    <span class="hljs-keyword">for</span>(flag = <span class="hljs-number">0</span>; flag &lt; MAX; ++flag) <br>    &#123;<br>        <span class="hljs-type">int</span> rc = fork();<br>        <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// fork失败</span><br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork failed&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rc == <span class="hljs-number">0</span>) <span class="hljs-comment">// 子进程</span><br>        &#123;<br>            <span class="hljs-keyword">switch</span>(flag) <br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    execl(s, ss, s2, <span class="hljs-literal">NULL</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    execle(s, ss, s2, <span class="hljs-literal">NULL</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    execlp(s, s, s2, <span class="hljs-literal">NULL</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    execv(s, sv);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    execvp(ss, sv);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                    execvpe(ss, sv);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>: <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125; <br>        <span class="hljs-keyword">else</span> <br>            wait(<span class="hljs-literal">NULL</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 运行结果</span><br><span class="hljs-comment">// bin    dev   lib    libx32    mnt   root  snap      sys  var</span><br><span class="hljs-comment">// boot   etc   lib32  lost+found    opt   run   srv       tmp</span><br><span class="hljs-comment">// cdrom  home  lib64  media    proc  sbin  swapfile  usr</span><br><span class="hljs-comment">// bin    dev   lib    libx32    mnt   root  snap      sys  var</span><br><span class="hljs-comment">// boot   etc   lib32  lost+found    opt   run   srv       tmp</span><br><span class="hljs-comment">// cdrom  home  lib64  media    proc  sbin  swapfile  usr</span><br><span class="hljs-comment">// bin    dev   lib    libx32    mnt   root  snap      sys  var</span><br><span class="hljs-comment">// boot   etc   lib32  lost+found    opt   run   srv       tmp</span><br><span class="hljs-comment">// cdrom  home  lib64  media    proc  sbin  swapfile  usr</span><br><span class="hljs-comment">// bin    dev   lib    libx32    mnt   root  snap      sys  var</span><br><span class="hljs-comment">// boot   etc   lib32  lost+found    opt   run   srv       tmp</span><br><span class="hljs-comment">// cdrom  home  lib64  media    proc  sbin  swapfile  usr</span><br><span class="hljs-comment">// bin    dev   lib    libx32    mnt   root  snap      sys  var</span><br><span class="hljs-comment">// boot   etc   lib32  lost+found    opt   run   srv       tmp</span><br><span class="hljs-comment">// cdrom  home  lib64  media    proc  sbin  swapfile  usr</span><br><span class="hljs-comment">// bin    dev   lib    libx32    mnt   root  snap      sys  var</span><br><span class="hljs-comment">// boot   etc   lib32  lost+found    opt   run   srv       tmp</span><br><span class="hljs-comment">// cdrom  home  lib64  media    proc  sbin  swapfile  usr</span><br></code></pre></td></tr></table></figure><p>依次调用了6个函数，可见都能实现最终效果。</p><h3 id="5"><a class="markdownIt-Anchor" href="#5"></a> 5</h3><p>第一个程序，在父进程中使用wait</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> rc = fork();<br>    <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork failed\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rc == <span class="hljs-number">0</span>) <span class="hljs-comment">// child</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am child!(pid: %d)\n&quot;</span>, (<span class="hljs-type">int</span>)getpid());<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// parent</span><br>    &#123;<br>        <span class="hljs-type">int</span> wc = wait(<span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am parent!(wc: %d  pid: %d)\n&quot;</span>, wc, (<span class="hljs-type">int</span>)getpid());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 运行结果</span><br><span class="hljs-comment">// I am child!(pid: 27378)</span><br><span class="hljs-comment">// I am parent!(wc: 27378  pid: 27377)</span><br></code></pre></td></tr></table></figure><p>可以看到wait的返回值恰好是子进程的pid</p><p>第二个程序，在子进程中使用wait</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> rc = fork();<br>    <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork failed\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rc == <span class="hljs-number">0</span>) <span class="hljs-comment">// child</span><br>    &#123;<br>        <span class="hljs-type">int</span> wc = wait(<span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am child!(wc:  %d  pid: %d)\n&quot;</span>, wc, (<span class="hljs-type">int</span>)getpid());<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// parent</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am parent!(pid: %d)\n&quot;</span>, (<span class="hljs-type">int</span>)getpid());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 运行结果</span><br><span class="hljs-comment">// I am parent!(pid: 28697)</span><br><span class="hljs-comment">// I am child!(wc:  -1  pid: 28698)</span><br></code></pre></td></tr></table></figure><p>可以看到运行结果依然是先运行主进程，再运行子进程，值得注意的是，wait返回值为-1。</p><h3 id="6"><a class="markdownIt-Anchor" href="#6"></a> 6</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> rc = fork();<br>    <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork failed\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rc == <span class="hljs-number">0</span>) <span class="hljs-comment">// child</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am child!(pid: %d)\n&quot;</span>, (<span class="hljs-type">int</span>)getpid());<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// parent</span><br>    &#123;<br>        <span class="hljs-type">int</span> wc = waitpid(<span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am parent!(wc: %d  pid: %d)\n&quot;</span>, wc, (<span class="hljs-type">int</span>)getpid());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 运行结果</span><br><span class="hljs-comment">// I am child!(pid: 27378)</span><br><span class="hljs-comment">// I am parent!(wc: 27378  pid: 27377)</span><br></code></pre></td></tr></table></figure><p>waitpid相比于wait的区别在于：<br />1 waitpid使我们可以等待指定的进程<br />2 waitpid提供了一个无阻塞的wait<br />3 waitpid支持工作控制</p><h3 id="7"><a class="markdownIt-Anchor" href="#7"></a> 7</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> rc = fork();<br>    <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>) <br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125; <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rc == <span class="hljs-number">0</span>) <br>    &#123;<br>        close(STDOUT_FILENO);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;output child\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;output parent\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;    <br><span class="hljs-comment">// 运行结果</span><br><span class="hljs-comment">// output parent</span><br></code></pre></td></tr></table></figure><p>子进程不会影响到主进程。</p><h3 id="8"><a class="markdownIt-Anchor" href="#8"></a> 8</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> <br>&#123;<br>    <span class="hljs-type">int</span> pi[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> p = pipe(pi);<br>    <span class="hljs-keyword">if</span>(p &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// pipe failed</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;pipe failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> rc[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">256</span>];<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; ++i) <br>    &#123;<br>        rc[i] = fork();<br>        <span class="hljs-keyword">if</span> (rc[i] &lt; <span class="hljs-number">0</span>) <br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork failed&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rc[i] == <span class="hljs-number">0</span>) <br>        &#123;<br>            <span class="hljs-keyword">switch</span>(i) <br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    dup2(pi[<span class="hljs-number">1</span>], STDOUT_FILENO);<br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;child input&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    dup2(pi[<span class="hljs-number">0</span>], STDIN_FILENO);<br>                    gets(buf);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child0 out (%s) in the child1\n&quot;</span>, buf);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    waitpid(rc[<span class="hljs-number">0</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>    waitpid(rc[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 运行结果</span><br><span class="hljs-comment">// child0 out (child input) in the child1</span><br></code></pre></td></tr></table></figure><p>pipe创建一个管道，将两个进程连接到一起。<br />int wc = wait(NULL);<br />printf(“I am parent!(wc: %d  pid: %d)\n”, wc, (int)getpid());<br />}<br />return 0;<br />}<br />// 运行结果<br />// I am child!(pid: 27378)<br />// I am parent!(wc: 27378  pid: 27377)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp">可以看到wait的返回值恰好是子进程的pid<br><br>第二个程序，在子进程中使用wait<br><br>```c<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> rc = fork();<br>    <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;fork failed\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rc == <span class="hljs-number">0</span>) <span class="hljs-comment">// child</span><br>    &#123;<br>        <span class="hljs-type">int</span> wc = <span class="hljs-built_in">wait</span>(<span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am child!(wc:  %d  pid: %d)\n&quot;</span>, wc, (<span class="hljs-type">int</span>)<span class="hljs-built_in">getpid</span>());<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// parent</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am parent!(pid: %d)\n&quot;</span>, (<span class="hljs-type">int</span>)<span class="hljs-built_in">getpid</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 运行结果</span><br><span class="hljs-comment">// I am parent!(pid: 28697)</span><br><span class="hljs-comment">// I am child!(wc:  -1  pid: 28698)</span><br></code></pre></td></tr></table></figure><p>可以看到运行结果依然是先运行主进程，再运行子进程，值得注意的是，wait返回值为-1。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>ostep</category>
      
      <category>homework详解</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ostep homework(4)</title>
    <link href="/2022/05/19/Ostep(4)/"/>
    <url>/2022/05/19/Ostep(4)/</url>
    
    <content type="html"><![CDATA[<h1 id="第4章-抽象进程-homework详解"><a class="markdownIt-Anchor" href="#第4章-抽象进程-homework详解"></a> 第4章 <em>抽象：进程</em>  homework详解</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>开个新坑，csapp读到汇编看不下去了，故转战操作系统。<br />题目在书中有提到，这里不再重复赘述（懒）。<br />实验材料从官网下载就好，贴个<a href="https://pages.cs.wisc.edu/~remzi/OSTEP/">传送门</a>。<br />建议在实验开始之前仔细阅读 readme 文件。</p><h2 id="实验环境"><a class="markdownIt-Anchor" href="#实验环境"></a> 实验环境</h2><p>笔者采用的是Ubuntu22.04的虚拟机。<br />本次作业用到 cpu-intro 文件</p><h2 id="实验内容"><a class="markdownIt-Anchor" href="#实验内容"></a> 实验内容</h2><h3 id="1"><a class="markdownIt-Anchor" href="#1"></a> 1</h3><figure class="highlight tap"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs tap">$ ./process-run.py -l 5:100,5:100 -c -p<br>Time        PID:<span class="hljs-number"> 0 </span>       PID:<span class="hljs-number"> 1 </span>          CPU           IOs<br> <span class="hljs-number"> 1 </span>       RUN:cpu         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 2 </span>       RUN:cpu         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 3 </span>       RUN:cpu         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 4 </span>       RUN:cpu         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 5 </span>       RUN:cpu         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 6 </span>          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 7 </span>          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 8 </span>          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 9 </span>          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>         <br><span class="hljs-number"> 10 </span>          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>         <br><br>Stats: Total Time 10<br>Stats: CPU Busy<span class="hljs-number"> 10 </span>(100.00%)<br>Stats: IO Busy <span class="hljs-number"> 0 </span>(0.00%)<br></code></pre></td></tr></table></figure><p>运行完第一个进程紧接着运行第二个进程，cpu利用率100%。</p><h3 id="2"><a class="markdownIt-Anchor" href="#2"></a> 2</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ ./process-run.py -l 4:100,1:0 -c -p<br>Time        PID:<span class="hljs-number"> 0 </span>       PID:<span class="hljs-number"> 1 </span>          CPU           IOs<br> <span class="hljs-number"> 1 </span>       RUN:cpu         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 2 </span>       RUN:cpu         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 3 </span>       RUN:cpu         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 4 </span>       RUN:cpu         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 5 </span>          DONE        RUN:io            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 6 </span>          DONE       WAITING                           1<br> <span class="hljs-number"> 7 </span>          DONE       WAITING                           1<br> <span class="hljs-number"> 8 </span>          DONE       WAITING                           1<br> <span class="hljs-number"> 9 </span>          DONE       WAITING                           1<br><span class="hljs-number"> 10 </span>          DONE       WAITING                           1<br> 11*          DONE   RUN:io_done            <span class="hljs-number"> 1 </span>         <br><br>Stats: Total Time 11<br>Stats: CPU Busy<span class="hljs-number"> 6 </span>(54.55%)<br>Stats: IO Busy <span class="hljs-number"> 5 </span>(45.45%)<br></code></pre></td></tr></table></figure><p>这里先运行第一个进程时会阻塞第二个进程运行，所以要依此进行。</p><h3 id="3"><a class="markdownIt-Anchor" href="#3"></a> 3</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ ./process-run.py -l 1:0,4:100 -c -p<br>Time        PID:<span class="hljs-number"> 0 </span>       PID:<span class="hljs-number"> 1 </span>          CPU           IOs<br> <span class="hljs-number"> 1 </span>        RUN:io         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 2 </span>       WAITING       RUN:cpu            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 3 </span>       WAITING       RUN:cpu            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 4 </span>       WAITING       RUN:cpu            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 5 </span>       WAITING       RUN:cpu            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 6 </span>       WAITING          DONE                           1<br>  7*   RUN:io_done          DONE            <span class="hljs-number"> 1 </span>         <br><br>Stats: Total Time 7<br>Stats: CPU Busy<span class="hljs-number"> 6 </span>(85.71%)<br>Stats: IO Busy <span class="hljs-number"> 5 </span>(71.43%)<br></code></pre></td></tr></table></figure><p>容易发现交换顺序是会对运行时间和效率产生影响的，运行io时可以同时运行cpu。</p><h3 id="4"><a class="markdownIt-Anchor" href="#4"></a> 4</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ ./process-run.py -l 1:0,4:100 -c -S SWITCH_ON_END -p<br>Time        PID:<span class="hljs-number"> 0 </span>       PID:<span class="hljs-number"> 1 </span>          CPU           IOs<br> <span class="hljs-number"> 1 </span>        RUN:io         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 2 </span>       WAITING         READY                           1<br> <span class="hljs-number"> 3 </span>       WAITING         READY                           1<br> <span class="hljs-number"> 4 </span>       WAITING         READY                           1<br> <span class="hljs-number"> 5 </span>       WAITING         READY                           1<br> <span class="hljs-number"> 6 </span>       WAITING         READY                           1<br>  7*   RUN:io_done         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 8 </span>          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 9 </span>          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>         <br><span class="hljs-number"> 10 </span>          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>         <br><span class="hljs-number"> 11 </span>          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>         <br><br>Stats: Total Time 11<br>Stats: CPU Busy<span class="hljs-number"> 6 </span>(54.55%)<br>Stats: IO Busy <span class="hljs-number"> 5 </span>(45.45%)<br></code></pre></td></tr></table></figure><p>如果限制了当进行io操作时，系统不允许切换到另一个进程，则产生的效果和不交换顺序时相同。</p><h3 id="5"><a class="markdownIt-Anchor" href="#5"></a> 5</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ ./process-run.py -l 1:0,4:100 -c -S SWITCH_ON_IO -p<br>Time        PID:<span class="hljs-number"> 0 </span>       PID:<span class="hljs-number"> 1 </span>          CPU           IOs<br> <span class="hljs-number"> 1 </span>        RUN:io         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 2 </span>       WAITING       RUN:cpu            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 3 </span>       WAITING       RUN:cpu            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 4 </span>       WAITING       RUN:cpu            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 5 </span>       WAITING       RUN:cpu            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 6 </span>       WAITING          DONE                           1<br>  7*   RUN:io_done          DONE            <span class="hljs-number"> 1 </span>         <br><br>Stats: Total Time 7<br>Stats: CPU Busy<span class="hljs-number"> 6 </span>(85.71%)<br>Stats: IO Busy <span class="hljs-number"> 5 </span>(71.43%)<br></code></pre></td></tr></table></figure><p>和3一致，不做解释。</p><h3 id="6"><a class="markdownIt-Anchor" href="#6"></a> 6</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ ./process-run.py -l 3:0,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_LATER -c -p<br>Time        PID:<span class="hljs-number"> 0 </span>       PID:<span class="hljs-number"> 1 </span>       PID:<span class="hljs-number"> 2 </span>          CPU           IOs<br> <span class="hljs-number"> 1 </span>        RUN:io         READY         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 2 </span>       WAITING       RUN:cpu         READY            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 3 </span>       WAITING       RUN:cpu         READY            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 4 </span>       WAITING       RUN:cpu         READY            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 5 </span>       WAITING       RUN:cpu         READY            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 6 </span>       WAITING       RUN:cpu         READY            <span class="hljs-number"> 1 </span>            1<br>  7*         READY          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 8 </span>         READY          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 9 </span>         READY          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>         <br><span class="hljs-number"> 10 </span>         READY          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>         <br><span class="hljs-number"> 11 </span>         READY          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>         <br><span class="hljs-number"> 12 </span>   RUN:io_done          DONE          DONE            <span class="hljs-number"> 1 </span>         <br><span class="hljs-number"> 13 </span>        RUN:io          DONE          DONE            <span class="hljs-number"> 1 </span>         <br><span class="hljs-number"> 14 </span>       WAITING          DONE          DONE                           1<br><span class="hljs-number"> 15 </span>       WAITING          DONE          DONE                           1<br><span class="hljs-number"> 16 </span>       WAITING          DONE          DONE                           1<br><span class="hljs-number"> 17 </span>       WAITING          DONE          DONE                           1<br><span class="hljs-number"> 18 </span>       WAITING          DONE          DONE                           1<br> 19*   RUN:io_done          DONE          DONE            <span class="hljs-number"> 1 </span>         <br><span class="hljs-number"> 20 </span>        RUN:io          DONE          DONE            <span class="hljs-number"> 1 </span>         <br><span class="hljs-number"> 21 </span>       WAITING          DONE          DONE                           1<br><span class="hljs-number"> 22 </span>       WAITING          DONE          DONE                           1<br><span class="hljs-number"> 23 </span>       WAITING          DONE          DONE                           1<br><span class="hljs-number"> 24 </span>       WAITING          DONE          DONE                           1<br><span class="hljs-number"> 25 </span>       WAITING          DONE          DONE                           1<br> 26*   RUN:io_done          DONE          DONE            <span class="hljs-number"> 1 </span>         <br><br>Stats: Total Time 26<br>Stats: CPU Busy<span class="hljs-number"> 16 </span>(61.54%)<br>Stats: IO Busy <span class="hljs-number"> 15 </span>(57.69%)<br></code></pre></td></tr></table></figure><p>在运行完第一个io操作后没有及时继续运行该进程，导致该进程后续进行io操作时浪费了时间。</p><h3 id="7"><a class="markdownIt-Anchor" href="#7"></a> 7</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ ./process-run.py -l 3:0,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_IMMEDIATE -c -p<br>Time        PID:<span class="hljs-number"> 0 </span>       PID:<span class="hljs-number"> 1 </span>       PID:<span class="hljs-number"> 2 </span>          CPU           IOs<br> <span class="hljs-number"> 1 </span>        RUN:io         READY         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 2 </span>       WAITING       RUN:cpu         READY            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 3 </span>       WAITING       RUN:cpu         READY            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 4 </span>       WAITING       RUN:cpu         READY            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 5 </span>       WAITING       RUN:cpu         READY            <span class="hljs-number"> 1 </span>            1<br> <span class="hljs-number"> 6 </span>       WAITING       RUN:cpu         READY            <span class="hljs-number"> 1 </span>            1<br>  7*   RUN:io_done          DONE         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 8 </span>        RUN:io          DONE         READY            <span class="hljs-number"> 1 </span>         <br> <span class="hljs-number"> 9 </span>       WAITING          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>            1<br><span class="hljs-number"> 10 </span>       WAITING          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>            1<br><span class="hljs-number"> 11 </span>       WAITING          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>            1<br><span class="hljs-number"> 12 </span>       WAITING          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>            1<br><span class="hljs-number"> 13 </span>       WAITING          DONE       RUN:cpu            <span class="hljs-number"> 1 </span>            1<br> 14*   RUN:io_done          DONE          DONE            <span class="hljs-number"> 1 </span>         <br><span class="hljs-number"> 15 </span>        RUN:io          DONE          DONE            <span class="hljs-number"> 1 </span>         <br><span class="hljs-number"> 16 </span>       WAITING          DONE          DONE                           1<br><span class="hljs-number"> 17 </span>       WAITING          DONE          DONE                           1<br><span class="hljs-number"> 18 </span>       WAITING          DONE          DONE                           1<br><span class="hljs-number"> 19 </span>       WAITING          DONE          DONE                           1<br><span class="hljs-number"> 20 </span>       WAITING          DONE          DONE                           1<br> 21*   RUN:io_done          DONE          DONE            <span class="hljs-number"> 1 </span>         <br><br>Stats: Total Time 21<br>Stats: CPU Busy<span class="hljs-number"> 16 </span>(76.19%)<br>Stats: IO Busy <span class="hljs-number"> 15 </span>(71.43%)<br></code></pre></td></tr></table></figure><p>本题在6的基础上做了改善，立即运行进程，对运行时间做了优化。</p><h3 id="8"><a class="markdownIt-Anchor" href="#8"></a> 8</h3><p>第8题是一道开放性问题，为了让读者能够理解进程运行的奥秘，请读者自行实践。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>ostep</category>
      
      <category>homework详解</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1 Datalab详解</title>
    <link href="/2022/05/11/csapp1/"/>
    <url>/2022/05/11/csapp1/</url>
    
    <content type="html"><![CDATA[<h1 id="datalab详解"><a class="markdownIt-Anchor" href="#datalab详解"></a> Datalab详解</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>最近在读大名鼎鼎的cs:app，很懵懂，开一个专栏记录解答下本课程自带的lab。</p><h2 id="实验环境"><a class="markdownIt-Anchor" href="#实验环境"></a> 实验环境</h2><p>笔者使用Ubuntu22.04的虚拟机，用vscode做主要编程软件。<br />lab相关文件可以从课程页面下载，这里放置课程链接：<a href="http://csapp.cs.cmu.edu/3e/labs.html">csapp lab</a><br />再贴一个链接，里面包含有中文版的详细描述，简洁明了：<a href="https://hansimov.gitbook.io/csapp/">csapp中文版电子书及lab</a><br />关于实验环境的配置这里不再赘述。</p><h2 id="实验内容"><a class="markdownIt-Anchor" href="#实验内容"></a> 实验内容</h2><p>首先贴上一张表格，里面是这个lab需要实现的13个函数</p><table><thead><tr><th>函数名</th><th>描述</th><th>难度级别</th><th>最大操作符数</th></tr></thead><tbody><tr><td>bitXor(x,y)</td><td>x 异或 y</td><td>1</td><td>14</td></tr><tr><td>tmin()</td><td>最小的整数补码</td><td>1</td><td>4</td></tr><tr><td>isTmax(x)</td><td>x 为最大的整数补码时为真</td><td>1</td><td>10</td></tr><tr><td>allOddBits(x)</td><td>x 的奇数位都为 1 时为真</td><td>2</td><td>12</td></tr><tr><td>negate(x)</td><td>使用 ~ 操作符返回 -x</td><td>2</td><td>5</td></tr><tr><td>isAsciDigit(x)</td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mi>x</mi><mn>30</mn><mo>⩽</mo><mi>x</mi><mo>⩽</mo><mn>0</mn><mi>x</mi><mn>39</mn></mrow><annotation encoding="application/x-tex">0x30⩽x⩽0x39</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78111em;vertical-align:-0.13667em;"></span><span class="mord">0</span><span class="mord mathdefault">x</span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord mathdefault">x</span><span class="mord">3</span><span class="mord">9</span></span></span></span> 时为真</td><td>3</td><td>15</td></tr><tr><td>conditional</td><td>等同于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">?</mo><mi>y</mi><mo>:</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x ? y : z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mclose">?</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></td><td>3</td><td>16</td></tr><tr><td>isLessOrEqual(x, y)</td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>⩽</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x⩽y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 时为真，否则为假</td><td>3</td><td>24</td></tr><tr><td>logicalNeg(x))</td><td>不用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mclose">!</span></span></span></span> 运算符计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">!</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">!x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mclose">!</span><span class="mord mathdefault">x</span></span></span></span></td><td>4</td><td>12</td></tr><tr><td>howManyBits(x)</td><td>用补码表示 x 的最小位数</td><td>4</td><td>90</td></tr><tr><td>floatScale2(uf)</td><td>对于浮点参数 f，返回 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>×</mo><mi>f</mi></mrow><annotation encoding="application/x-tex">2 \times f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 的位级等价数</td><td>4</td><td>30</td></tr><tr><td>floatFloat2Int(uf)</td><td>对于浮点参数 f，返回 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mi>n</mi><mi>t</mi><mo stretchy="false">)</mo><mi>f</mi></mrow><annotation encoding="application/x-tex">(int) f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 的位级等价数</td><td>4</td><td>30</td></tr><tr><td>floatPower2(x)</td><td>对于整数 x，返回 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2.</mn><msup><mn>0</mn><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">2.0^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></td><td>4</td><td>30</td></tr></tbody></table><h3 id="1-bitxorint-x-int-y"><a class="markdownIt-Anchor" href="#1-bitxorint-x-int-y"></a> 1 bitXor(int x, int y)</h3><p><strong>要求:</strong> x^y using only ~ and &amp;</p><p><strong>运算符:</strong>  ~ &amp;</p><p><strong>解析:</strong><br />考察对几个位运算符的理解程度。</p><p><strong>代码:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">bitXor</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>  <span class="hljs-keyword">return</span> ~(~x&amp;~y)&amp;~(x&amp;y);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-tminvoid"><a class="markdownIt-Anchor" href="#2-tminvoid"></a> 2 tmin(void)</h3><p><strong>要求:</strong> return minimum two’s complement integer</p><p><strong>运算符:</strong> !  ~  &amp;  ^  |  +  &lt;&lt;  &gt;&gt;</p><p><strong>解析:</strong><br />由于int类型为4字节，其对应最小的整数补码为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><munder><munder><mrow><mn>0</mn><mo>…</mo><mn>0</mn></mrow><mo stretchy="true">⏟</mo></munder><mn>31</mn></munder></mrow><annotation encoding="application/x-tex">1\underbrace{0\ldots0}_{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.943548em;vertical-align:-1.299108em;"></span><span class="mord">1</span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6444400000000001em;"><span style="top:-1.700892em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0000000000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.64444em;"><span class="svg-align" style="top:-2.352em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.648em;"><span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.299108em;"><span></span></span></span></span></span></span></span></span>，直接输出了。</p><p><strong>代码:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">tmin</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-istmaxint-x"><a class="markdownIt-Anchor" href="#3-istmaxint-x"></a> 3 isTmax(int x)</h3><p><strong>要求:</strong> returns 1 if x is the maximum, two’s complement number</p><p><strong>运算符:</strong> ! ~ &amp; ^ | +</p><p><strong>解析:</strong><br />当 x 为最大整数时，补码表示为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>01</mn><mo>…</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">01\ldots1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span></span></span></span>，即符号位为 0，其余位为 1，可得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mn>1</mn><mo>=</mo><mtext> </mtext><mi>x</mi></mrow><annotation encoding="application/x-tex">x + 1 = ~x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mord mathdefault">x</span></span></span></span>。然而当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x = -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> 时，前述等式也成立，因此需要排除掉这种情况。</p><p><strong>代码:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">isTmax</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-keyword">return</span> ! ((~x ^ (x+<span class="hljs-number">1</span>)) | !(x+<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-alloddbitsint-x"><a class="markdownIt-Anchor" href="#4-alloddbitsint-x"></a> 4 allOddBits(int x)</h3><p><strong>要求:</strong> return 1 if all odd-numbered bits in word set to 1</p><p><strong>运算符:</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>解析:</strong><br />构造出一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi><mo>=</mo><munder><munder><mrow><mn>1010</mn><mo>…</mo><mn>10</mn></mrow><mo stretchy="true">⏟</mo></munder><mn>32</mn></munder></mrow><annotation encoding="application/x-tex">mask = \underbrace{1010\ldots10}_{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.943548em;vertical-align:-1.299108em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6444400000000001em;"><span style="top:-1.700892em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.0000000000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.64444em;"><span class="svg-align" style="top:-2.352em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.648em;"><span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.299108em;"><span></span></span></span></span></span></span></span></span>，再让 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi></mrow><annotation encoding="application/x-tex">mask</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 进行 &amp; 操作，将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的偶数位全部置0，再进行一次异或操作，不要忘记取反。</p><p><strong>代码:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">allOddBits</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-type">int</span> mask = <span class="hljs-number">0xAA</span> + (<span class="hljs-number">0xAA</span> &lt;&lt; <span class="hljs-number">8</span>);<br>  mask = mask + (mask &lt;&lt; <span class="hljs-number">16</span>);<br>  <span class="hljs-keyword">return</span> !((mask &amp; x) ^ mask);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-negateint-x"><a class="markdownIt-Anchor" href="#5-negateint-x"></a> 5 negate(int x)</h3><p><strong>要求:</strong> return -x</p><p><strong>运算符:</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>解析:</strong><br />用补码表示，负数比整数取值范围多1</p><p><strong>代码:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">negate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-keyword">return</span> ~x + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-isasciidigitint-x"><a class="markdownIt-Anchor" href="#6-isasciidigitint-x"></a> 6 isAsciiDigit(int x)</h3><p><strong>要求:</strong> return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters ‘0’ to ‘9’)</p><p><strong>运算符:</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>解析:</strong><br />问题可以转化为满足下面式子时返回1，否则返回0：$$(x - 0x30 &gt;= 0) &amp;&amp; (0x39 - x) &gt;=0$$与首位为1的二进制数进行&amp;操作，可以判断出二进制数是否为负，借此方法容易解决。</p><p><strong>代码:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">isAsciiDigit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-type">int</span> TMIN = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">31</span>;<br>  <span class="hljs-keyword">return</span> !((x + ~<span class="hljs-number">0x30</span> + <span class="hljs-number">1</span>) &amp; TMIN) &amp; !((<span class="hljs-number">0x39</span> + ~x + <span class="hljs-number">1</span>) &amp; TMIN);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-conditionalint-x-int-y-int-z"><a class="markdownIt-Anchor" href="#7-conditionalint-x-int-y-int-z"></a> 7 conditional(int x, int y, int z)</h3><p><strong>要求:</strong> same as x ? y : z</p><p><strong>运算符:</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>解析:</strong><br />! 运算将 x 映射到 [0, 1] 区间，使用函数 f(x)=!x+(−1) 取出 y，则 ∼f(x) 取出 z。<br />当 x≠0时，f(x)=−1，其位模式全为 1，因此 f(x)&amp;y=y。<br />当 x=0 时，f(x)=0，其位模式全为 0，因此 f(x)&amp;y=0。</p><p><strong>代码:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">conditional</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> &#123;<br>  x = !x + ~<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> (y &amp; x) | (z &amp; ~x);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-islessorequalint-x-int-y"><a class="markdownIt-Anchor" href="#8-islessorequalint-x-int-y"></a> 8 isLessOrEqual(int x, int y)</h3><p><strong>要求:</strong> if x &lt;= y  then return 1, else return 0</p><p><strong>运算符:</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>解析:</strong><br />将问题转换为下列公式：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>y</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn><mi mathvariant="normal">&amp;</mi><mi mathvariant="normal">&amp;</mi><mi>x</mi><mo>&lt;</mo><mn>0</mn><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>x</mi><mo>∗</mo><mi>y</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo><mi mathvariant="normal">&amp;</mi><mi mathvariant="normal">&amp;</mi><mo stretchy="false">(</mo><mi>y</mi><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mi>x</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(y &gt;=0 \&amp;\&amp; x &lt;0) || ((x * y &gt;= 0) \&amp;\&amp; (y + (-x) &gt;= 0)) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mord">&amp;</span><span class="mord">&amp;</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mord">∣</span><span class="mord">∣</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mord">&amp;</span><span class="mord">&amp;</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p>具体见代码注释。</p><p><strong>代码:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">isLessOrEqual</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>  <span class="hljs-type">int</span> signX = (x &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">1</span>; <span class="hljs-comment">// 判断x是否为负</span><br>  <span class="hljs-type">int</span> signY = (y &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">1</span>; <span class="hljs-comment">// 判断y是否为负</span><br>  <span class="hljs-type">int</span> signXSubY = ((y + ~x + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">1</span>; <span class="hljs-comment">// 判断y+(-x)是否为负</span><br>  <span class="hljs-keyword">return</span> (signX &amp; ~signY) | (!(signX ^ signY) &amp; !signXSubY);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-logicalnegint-x"><a class="markdownIt-Anchor" href="#9-logicalnegint-x"></a> 9 logicalNeg(int x)</h3><p><strong>要求:</strong> implement the ! operator, using all of the legal operators except !</p><p><strong>运算符:</strong> ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>解析:</strong><br />当 x≠0 时，x|(−x) 的符号位必然为 1</p><p><strong>代码:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">logicalNeg</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-keyword">return</span> ~(x|(~x+<span class="hljs-number">1</span>))&gt;&gt;<span class="hljs-number">31</span>&amp;<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-howmanybitsint-x"><a class="markdownIt-Anchor" href="#10-howmanybitsint-x"></a> 10 howManyBits(int x)</h3><p><strong>要求:</strong> return the minimum number of bits required to represent x in two’s complement</p><p><strong>运算符:</strong> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>解析:</strong><br />当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x≥0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，位数取决于 1 的最高位数；当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，位数则取决于 0 的最高位数（根据补码表示的定义，符号位起连续的 1 可合并起来用一个位表示）。</p><p>首先考虑将负数取反，将问题统一成计算 1 的最高位，利用算术右移即可完成， 即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>x</mi><mo>⊕</mo><mo stretchy="false">(</mo><mi>x</mi><mo>&gt;</mo><mo>&gt;</mo><mn>31</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x=x⊕(x&gt;&gt;31)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p><p>然后使用二分法计算 1 的最高位：判断高 16 位是否大于 0，若大于 0 说明高 16 位中存在 1，否则 1 在低 16 位中。使用 conditional 函数更新 x（取出高 16 位或低 16 位）。迭代判断 8 位、4 位等等。</p><p><strong>代码:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">howManyBits</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-type">int</span> bit;<br>  <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>  x = x ^ (x &gt;&gt; <span class="hljs-number">31</span>); <span class="hljs-comment">// 将负数取反</span><br><br>  bit = !!(x &gt;&gt; <span class="hljs-number">16</span>) &lt;&lt; <span class="hljs-number">4</span>;<br>  res = res + bit;<br>  x = x &gt;&gt; bit;<br><br>  bit = !!(x &gt;&gt; <span class="hljs-number">8</span>) &lt;&lt; <span class="hljs-number">3</span>;<br>  res = res + bit;<br>  x = x &gt;&gt; bit;<br><br>  bit = !!(x &gt;&gt; <span class="hljs-number">4</span>) &lt;&lt; <span class="hljs-number">2</span>;<br>  res = res + bit;<br>  x = x &gt;&gt; bit;<br><br>  bit = !!(x &gt;&gt; <span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-number">1</span>;<br>  res = res + bit;<br>  x = x &gt;&gt; bit;<br><br>  bit = !!(x &gt;&gt; <span class="hljs-number">1</span>);<br>  res = res + bit;<br>  x = x &gt;&gt; bit;<br><br>  <span class="hljs-keyword">return</span> x + res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-floatscale2unsigned-uf"><a class="markdownIt-Anchor" href="#11-floatscale2unsigned-uf"></a> 11 floatScale2(unsigned uf)</h3><p><strong>要求:</strong> Return bit-level equivalent of expression <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>×</mo><mi>f</mi></mrow><annotation encoding="application/x-tex">2 \times f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> for floating point argument f. Both the argument and result are passed as unsigned int’s, but they are to be interpreted as the bit-level representation of single-precision floating point values. When argument is NaN, return argument.</p><p><strong>运算符:</strong> Any integer/unsigned operations incl.  ||, &amp;&amp;. also if, while</p><p><strong>解析:</strong></p><p><strong>代码:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><br></code></pre></td></tr></table></figure><h3 id="12-floatfloat2intunsigned-uf"><a class="markdownIt-Anchor" href="#12-floatfloat2intunsigned-uf"></a> 12 floatFloat2Int(unsigned uf)</h3><p><strong>要求:</strong> Return bit-level equivalent of expression (int) f for floating point argument f.</p><p><strong>运算符:</strong> Any integer/unsigned operations incl.  ||, &amp;&amp;. also if, while</p><p><strong>解析:</strong></p><p><strong>代码:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><br></code></pre></td></tr></table></figure><h3 id="13-floatpower2int-x"><a class="markdownIt-Anchor" href="#13-floatpower2int-x"></a> 13 floatPower2(int x)</h3><p><strong>要求:</strong> Return bit-level equivalent of the expression <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2.</mn><msup><mn>0</mn><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">2.0^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span> (2.0 raised to the power x) for any 32-bit integer x.</p><p><strong>运算符:</strong> Any integer/unsigned operations incl.  ||, &amp;&amp;. also if, while</p><p><strong>解析:</strong></p><p><strong>代码:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机系统</category>
      
      <category>csapp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>背包九讲</title>
    <link href="/2022/05/04/Suanfa2/"/>
    <url>/2022/05/04/Suanfa2/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>随缘更新</p><h2 id="1-01背包问题"><a class="markdownIt-Anchor" href="#1-01背包问题"></a> 1、01背包问题</h2><h3 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h3><p>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 件物品和一个容量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span> 的背包。放入第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>件物品花费的费用是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">c[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> ，得到的价值是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">w[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> ，求将哪些物品装入背包可使价值总和最大。</p><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。<br />用子问题定义状态：即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 表示前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 件物品恰放入一个容量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> 的背包可以获得的最大价值（这里原文中使用了“恰”，但实际并不需要正好装满，在初始化可以区分开这两种情况，下文有提及）。则其<strong>状态转移方程</strong>便是：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mi mathvariant="normal">−</mi><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo>+</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f[i][j]=max(f[i−1][j] , f[i−1][j−c[i]] + w[i])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord">−</span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p>“将前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 件物品放入容量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> 的背包中”这个<strong>子问题</strong>，若只考虑第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 件物品的策略（放或不放），那么就可以转化为一个只牵扯前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi mathvariant="normal">−</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">i−1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mord">−</span><span class="mord">1</span></span></span></span> 件物品的问题。</p><p>如果<strong>不放</strong>第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 件物品，那么问题就转化为“ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi mathvariant="normal">−</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">i−1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mord">−</span><span class="mord">1</span></span></span></span> 件物品放入容量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> 的背包中”，最大价值为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i−1][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> ；如果<strong>放</strong>第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 件物品，那么问题就转化为“前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi mathvariant="normal">−</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">i−1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mord">−</span><span class="mord">1</span></span></span></span> 件物品放入剩下的容量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi><mi mathvariant="normal">−</mi><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">j−c[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord">−</span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 的背包中”，此时能获得的最大价值就是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mi mathvariant="normal">−</mi><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i−1][j−c[i]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord">−</span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span> 再加上通过放入第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 件物品获得的价值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">w[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>。</p><h3 id="优化"><a class="markdownIt-Anchor" href="#优化"></a> 优化</h3><p>后续再更</p><h2 id="2-完全背包问题"><a class="markdownIt-Anchor" href="#2-完全背包问题"></a> 2、完全背包问题</h2><h3 id="题目-2"><a class="markdownIt-Anchor" href="#题目-2"></a> 题目</h3><p>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 种物品和一个容量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span> 的背包，每种物品都有<strong>无限</strong>件可用。第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 种物品的费用是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">c[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>  ，价值是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">w[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3><p>本题相比于01背包增加了每件物品有无限件这一条件。也就是从每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 件、取 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 件、取 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 件 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋯</mo></mrow><annotation encoding="application/x-tex">\cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.31em;vertical-align:0em;"></span><span class="minner">⋯</span></span></span></span> 等很多种。如果仍然按照解01背包时的思路，令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 表示前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 种物品恰放入一个容量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span> 的背包的最大权值。仍然可以按照每种物品不同的策略写出<strong>状态转移方程</strong>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mi mathvariant="normal">−</mi><mi>k</mi><mo>×</mo><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo>+</mo><mi>k</mi><mo>×</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>∣</mo><mn>0</mn><mo>≤</mo><mi>k</mi><mo>×</mo><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>≤</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">f[i][j]=max(f[i−1][j−k \times c[i]]+k \times w[i])∣0≤k \times c[i]≤j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span></span></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>03：运输层</title>
    <link href="/2022/04/03/Cn3/"/>
    <url>/2022/04/03/Cn3/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><h1 id="一-概述和运输层服务"><a class="markdownIt-Anchor" href="#一-概述和运输层服务"></a> 一、概述和运输层服务</h1><p>运输层协议为运行在不同主机上的应用进程之间提供了<strong>逻辑通信</strong>（logic communication）功能。<br /><img src="/img/cn/cn3.1.png" alt="逻辑通信" /><br /><img src="/img/cn/cn3.2.png" alt="概览" /></p><h2 id="11-运输层和网络层的关系"><a class="markdownIt-Anchor" href="#11-运输层和网络层的关系"></a> 1.1 运输层和网络层的关系</h2><p>网络层提供了主机之间的逻辑通信，而运输层为运行在不同主机上的进程之间提供了逻辑通信。<br /><img src="/img/cn/cn3.3.png" alt="运输层和网络层的逻辑通信" /></p><h2 id="12-因特网运输层概述"><a class="markdownIt-Anchor" href="#12-因特网运输层概述"></a> 1.2 因特网运输层概述</h2><p>因特网网络层协议有一个名字叫<strong>IP</strong>，即国际协议。IP尽最大努力交付报文段，但不做任何确保，因此它是<strong>不可靠服务</strong>。每台主机至少有一个IP地址。</p><p>UDP和TCP最基本的责任是，将两个端系统间IP的交付服务扩展为运行在端系统上的两个进程之间的交付服务，这种服务被称为运输层的<strong>多路运输</strong>与<strong>多路分解</strong>。其次，UDP和TCP还可以通过在其报文段首部中包括差错检查字段而提供<strong>完整性检查</strong>。UDP仅能提供这两种服务，TCP还有附加服务（可靠数据传输、拥塞控制等）。</p><h1 id="二-多路复用与多路分解"><a class="markdownIt-Anchor" href="#二-多路复用与多路分解"></a> 二、多路复用与多路分解</h1><blockquote><p><strong>多路分解</strong>：将运输层报文段中的数据交付到正确的套接字。<br /><strong>多路复用</strong>：在源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息（用于多路分解）从而生成报文段，然后将报文段传递给网络层。</p></blockquote><p>每个报文段使用<strong>源端口号字段</strong>（sourse port number field）和<strong>目的端口号字段</strong>（destination port number field）来指示该报文段所要交付到的套接字。端口号是一个16比特的数，其大小在0-65535之间。0-1023范围的端口号称为<strong>周知端口号</strong>（well-known port number），它们保留给注入HTTP和FTP之类的周知应用层协议。<br /><img src="/img/cn/cn3.4.png" alt="运输层报文段中的源与目的端口字段" /></p><h2 id="21-无连接的多路复用与多路分解"><a class="markdownIt-Anchor" href="#21-无连接的多路复用与多路分解"></a> 2.1 无连接的多路复用与多路分解</h2><p>在运输层，无连接的网络传输是通过UDP来实现的。<strong>UDP报文中只有源端口号和目的端口号</strong>，一个UDP套接字是由一个含有目的IP地址和目的端口号的<strong>二元组</strong>来全面标识的。</p><p>例如主机A产生了一个UDP报文段，报文段中就会包括源端口号（11111）、目的端口号（22222）、程序数据（还有两个其他的值，在这里我们不关心）。然后，运输层将生成的报文段交给网络层。网络层将其放到一个IP数据报中，并提供尽力而为的交付，将其发送到主机B中。如果该报文到达主机B，主机B运输层就会检查该报文的端口号，并将该报文段传递给套接字的端口号为接收到的报文段的目的端口号（22222）的套接字。从而实现了进程间的网络通信。而源端口号的作用是为了让主机B能向主机A发送信息的，也就是说，当主机B在接收到主机A的数据后，要向主机A发送一个回应时，主机B发送的报文段的目的端口号就是11111.</p><h2 id="22-面向连接的多路复用与多路分解"><a class="markdownIt-Anchor" href="#22-面向连接的多路复用与多路分解"></a> 2.2 面向连接的多路复用与多路分解</h2><p>在运输层中面向连接的网络传输多使用TCP，而TCP套接字和UDP套接字之间有一个细微的差别，就是，TCP套接字是由一个<strong>四元组</strong>（源IP地址、源端口号，目的IP地址，目的端口号）来标识的。这样，当一个TCP报文段从网络到达一台主机时，主机会使用全部4个值来将报文段定向，即多路分解到相应的套接字。</p><p>与UDP不同的是，两个具有不同源IP或源端口号的到达的TCP报文段将被重定向到两个不同的套接字。</p><p>尽管如此，而TCP的多路利用和多路分解的工作原理与无连接的UDP的多路复用和多路分解的原理还是大致一样的。</p><h2 id="23-web服务器与tcp"><a class="markdownIt-Anchor" href="#23-web服务器与tcp"></a> 2.3 Web服务器与TCP</h2><ul><li>连接套接字与进程之间并非总是有着一一对应的关系 。</li><li>当今的高性能 Web服务器通常只使用一个进程，但是为每个新的客户连接创建一个具有新连接套接字的新线程。（线程可被看作是一个轻量级的子进程。）</li><li>如果客户与服务器使用持续 HTTP ，则在整条连接持续期间，客户与服务器之间经由同一个服务器套接字交换 HTTP 报文 。然而，如果客户与服务器使用非持续连接，则对每一对请求/响应都创建一个新的 TCP连接并在随后关闭，因此对每一对请求/响应创建一个新的套接字并在随后关闭 。 这种套接字的频繁创建与关闭会严重地影响一个繁忙的Web服务器的性能(虽然有许多操作系统技巧可用来减轻这个问题的影响) 。</li></ul><h1 id="三-无连接运输udp"><a class="markdownIt-Anchor" href="#三-无连接运输udp"></a> 三、无连接运输：UDP</h1><p>UDP只提供复用和分解，它有如下优点：</p><ul><li><strong>关于何时、发送什么数据的应用层控制更为精细</strong>：这是因为一旦应用程序将数据交给UDP，UDP就会打包将其发送给网络层，不会受到传输层的调节，这在一些实时应用中比较实用；当然，应用程序还可以通过UDP+自主开发一些功能的模式来扩展UDP。</li><li><strong>无需建立连接</strong>：所以就不会引入额外的时延。这也可能是DNS使用UDP而不是TCP的主要原因，如果使用TCP的话，DNS服务将会慢很多；HTTP使用TCP的主要原因是对TCP的可靠性的依赖超过对速度的要求；</li><li><strong>无需维护连接状态</strong>：TCP为了实现可靠数据传输和拥塞控制需要在端系统中维护一些参数，这些参数包括：接收和发送的缓存、拥塞控制参数、确认号和序号；这些参数信息都是必须的；而UDP因为不建立连接，所以自然也就不需要维护这些状态，这就减少了时空开销；</li><li><strong>分组首部更小</strong>：TCP有20字节的首部开销，而UDP只有8字节；</li></ul><h2 id="31-udp报文段结构"><a class="markdownIt-Anchor" href="#31-udp报文段结构"></a> 3.1 UDP报文段结构</h2><p><img src="/img/cn/cn3.5.png" alt="UDP报文段结构" /></p><h2 id="32-udp检验和"><a class="markdownIt-Anchor" href="#32-udp检验和"></a> 3.2 UDP检验和</h2><p>UDP检验和的需要计算UDP头部（计算的时候校验和部分的16位需要置0）加数据部分，还需要加上UDP伪头部。计算步骤如下：</p><ol><li>将UDP伪头部、UDP头部和数据部分全部用16进制数表示。</li><li>将第一个16进制数与第二个16进制数相加，得到一个32位的数，如果32位数的高16位大于0，需要将高16位与低16位再相加，得到一个32位的数，直到高16位为0，得到这一次相加的结果。</li><li>将上一步得到的16位数与第三个数16进制的数相加，重复第二步，直到累加完所有的16进制数，并且得到的结果为16进制数。</li><li>将累加最后得到的16进制数取反，得到校验和。</li></ol><h1 id="四-可靠数据传输原理"><a class="markdownIt-Anchor" href="#四-可靠数据传输原理"></a> 四、可靠数据传输原理</h1><p><img src="/img/cn/cn3.6.png" alt="提供的服务" /><br /><img src="/img/cn/cn3.7.png" alt="服务实现" /></p><h2 id="41-构造可靠数据传输协议"><a class="markdownIt-Anchor" href="#41-构造可靠数据传输协议"></a> 4.1 构造可靠数据传输协议</h2><h3 id="411-rdt-10"><a class="markdownIt-Anchor" href="#411-rdt-10"></a> 4.1.1 rdt 1.0</h3><p>rdt1.0是基于<strong>理想情况</strong>下的协议，假设所有信道都是可靠的，没有比特位的翻转，没有数据包的丢失与超时，所以rdt1.0的传输功能就是发送方发送数据，接收方接受数据。<br /><img src="/img/cn/cn3.8.png" alt="用于完全可靠信道的协议" /></p><h3 id="412-rdt-20"><a class="markdownIt-Anchor" href="#412-rdt-20"></a> 4.1.2 rdt 2.0</h3><p>rdt2.0在rdt1.0的基础上解决了比特位差错的问题，这里的比特位差错发生在运输层下面的不可信信道中数据包中的1可能会变0，0可能会变成1。</p><p>rdt2.0增加了3种新机制：</p><ul><li>差错检测</li><li>接收者反馈接受信息（ACK,NAK）</li><li>重传</li></ul><p>在运输层对应用层的数据进行打包处理时，新增checksum（校验和），从而接收端可以对其数据包进行检验，如果正确，返回ACK，发送者继续发送下一个数据包；如果不正确，返回NAK，发送者重传数据。</p><p><img src="/img/cn/cn3.9.png" alt="" /><br /><img src="/img/cn/cn3.10.png" alt="" /></p><p>但是rdt2.0有着一个致命的缺点，只考虑了发送方到接收方的数据传输，如果反馈信息ACK、NAK传输时发生比特位翻转会出现什么情况？如果ACK发生翻转，那么发送方会再次重复的发送相同的数据包；如果NAK发生翻转，那么发送方会认为数据传输情况很好，但是接收方却已经收到了一个错误的数据包。</p><h3 id="413-rdt-21"><a class="markdownIt-Anchor" href="#413-rdt-21"></a> 4.1.3 rdt 2.1</h3><p>在rdt2.0的基础之上，发送方在打包数据包时添加了0或者1编号，同样ACK,NAK字段上也添加了0、1字段，表示0、1号字段的确认或者否定。发送方就有了2种状态发送0号数据包，1号数据包，接收方也有了2种状态等待0号数据包和等待1号数据包。</p><blockquote><p>现在假设情景发送方向接收方发送0号数据包，如果接收方接收到0号数据包，返回ACK，但是ACK出现翻转，接收方处于等待1号数据状态，发送方重复发送0号数据，接收方会拒绝0号数据，避免重复。如果接收方接收到0号数据包出现错误，返回NAK，但是NAK出现翻转，接收方处于等待0号数据状态，发送方继续发送1号数据，接收方会拒绝1号数据，避免错序。</p></blockquote><h3 id="414-rdt-22"><a class="markdownIt-Anchor" href="#414-rdt-22"></a> 4.1.4 rdt 2.2</h3><p>dt2.2是在rdt2.1上的基础之上做了小小的改善，摒弃了NAK，只需采用ACK。我们在ACK的信息上加上了期望的顺序号。</p><blockquote><p>现在假设情景发送方向接收方发送0号数据包，如果接收方接收到0号数据包，返回（ACK，1），发送方接着发送1号数据包。如果接收方接收到0号数据包出现错误，返回（ACK，0），发送方重传0号数据包。</p></blockquote><p>rdt2.2之前的版本都重在处理数据包的<strong>比特位翻转</strong>情况，却没有考虑到数据包在传输过程中出现的<strong>数据包丢失</strong>问题，这样数据包丢失会使得网络处于拥塞状态。</p><h3 id="415-rdt-30"><a class="markdownIt-Anchor" href="#415-rdt-30"></a> 4.1.5 rdt 3.0</h3><p>rdt3.0在rdt2.2的基础之上处理了<strong>数据包丢失</strong>的情况，增加了<strong>计时器</strong>的机制，如果在RTT时间段内，发送方没有接收到反馈信息，那么发送方默认数据包已经丢失了，会自动重传。<br /><img src="/img/cn/cn3.11.png" alt="" /><br /><img src="/img/cn/cn3.12.png" alt="" /></p><h2 id="42-流水线可靠数据传输协议"><a class="markdownIt-Anchor" href="#42-流水线可靠数据传输协议"></a> 4.2 流水线可靠数据传输协议</h2><p>rdt 3.0性能不够，它的利用率很低：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>s</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>r</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>L</mi><mi mathvariant="normal">/</mi><mi>R</mi></mrow><mrow><mi>R</mi><mi>T</mi><mi>T</mi><mo>+</mo><mi>L</mi><mi mathvariant="normal">/</mi><mi>R</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">U_{sender}=\frac{L/R}{RTT+L/R} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">L</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>流水线可靠数据传输协议</strong> ：不使用停等方式，允许发送方发送多个分组而无需确认等待，这样会大大提升发送方信道的利用率。</p><p><img src="/img/cn/cn3.13.png" alt="流水线可靠数据传输协议" /></p><ul><li><strong>必须增加序号范围</strong>，每个分组（不包含重传的）必须有唯一的序号<br />我们知道<strong>一个分组的序号存储在分组首部的固定长度字段</strong>中，序号字段长度为kbit,则该序号范围是[0,2^k-1].</li><li>发送方和接收方也需要能够<strong>缓存多个分组</strong><br />发送方：至少能够缓存那些已被发送但未被确认的分组</li><li>所需序号范围和缓存大小取决于协议是<strong>如何处理丢失、损坏及时延过大的分组</strong>，这里这类分组有两种方法：<strong>回退N步</strong>协议和<strong>选择重传</strong>协议</li></ul><h2 id="43-回退n步gbn或滑动窗口"><a class="markdownIt-Anchor" href="#43-回退n步gbn或滑动窗口"></a> 4.3 回退N步（GBN或滑动窗口）</h2><p>在GBN协议中，允许发送方发送多个分组而不需等待确认，但它也受限于在流水线中未确认的分组数不能超过某个最大允许数N。</p><p><img src="/img/cn/cn3.14.png" alt="GBN中发送方看到的序号" /></p><p>通过基于ACK、无NAK的GBN协议的FSM图来了解GBN的原理：</p><p><img src="/img/cn/cn3.15.png" alt="GBN发送方的扩展FSM描述" /><br /><img src="/img/cn/cn3.16.png" alt="GBN接收方的扩展FSM描述" /></p><h2 id="44-选择重传sr协议"><a class="markdownIt-Anchor" href="#44-选择重传sr协议"></a> 4.4 选择重传（SR协议）</h2><p>GBN协议虽然实现了<strong>流水线式传输</strong>数据，提高了发送方信道的利用率,但是GBN有一个很大的缺陷就是一旦超时，会有许多<strong>不必要重传的分组</strong>被重新传送。尤其是当窗口长度N很大时，随着差错率的提升，信道中会充斥着不必要重传的分组。</p><p>SR协议原理：</p><ul><li><strong>发送方</strong>：<br />为每一个分组设置一个定时器，这样可以在某一个分组超时时对其单独进行重传。</li><li><strong>接收方</strong>：<br />SR接收方将确认一个正确接收的分组而不管其是否按序。在未出现分组丢失之前，正确接收到的分组都会被交付给上层。一旦出现分组丢失，失序的分组将被接收方<strong>缓存</strong>起来，直到所有丢失分组（即序号更小的分组）皆被接收为止，这时将缓存中的分组一起交付给上层。</li></ul><h1 id="五-面向连接的运输tcp"><a class="markdownIt-Anchor" href="#五-面向连接的运输tcp"></a> 五、面向连接的运输：TCP</h1><h2 id="51-tcp连接"><a class="markdownIt-Anchor" href="#51-tcp连接"></a> 5.1 TCP连接</h2><h3 id="511-tcp连接的特点"><a class="markdownIt-Anchor" href="#511-tcp连接的特点"></a> 5.1.1 TCP连接的特点</h3><ul><li><strong>面向连接</strong>：在一个应用进程可以开始向另一个应用进程发送数据之前，两个进程必须相互“握手”。</li><li><strong>全双工服务</strong>：如果一台主机上的进程A与另一台主机上的进程B存在一条TCP连接，那么应用层数据就可在进程B流向进程A的同时，也从进程A流向进程B。</li><li><strong>点对点</strong>：在单个发送方与单个接收方之间的连接。</li></ul><h3 id="512-三次握手"><a class="markdownIt-Anchor" href="#512-三次握手"></a> 5.1.2 三次握手</h3><p>TCP是面向连接的，所以每次传输数据之前，必须要建立TCP连接，在TCP建立连接时主要解决三个层面问题：</p><ul><li>使连接的每一方都能确认对方的存在</li><li>协商连接中参数，比如各方窗口值，时间戳等</li><li>各方对运输资源如缓存大小、连接表等进行分配</li></ul><p><a href="/img/cn/cn3.17.png">三次握手</a><br />默认情况下客户端client和服务端sever的TCP进程都处于<strong>CLOSED（关闭）状态</strong>。<br />服务端TCP服务进程先建立传输控制块TCB，然后服务端进入<strong>LISTEN状态</strong>，等待客户端连接请求。</p><ul><li><strong>第一次握手</strong>：客户端TCP进程也先建立传输控制块TCB，然后向服务端发送连接请求报文段，此时SYN=1,随机选定一个初始序号seq=x,，此报文不能携带数据，但是要消耗掉一个序号，发送完毕后，客户端进入SYN-SENT（同步已发送）状态</li><li><strong>第二次握手</strong>：服务端收到客户端请求连接报文段后，若同意建立连接，则发送确认报文，确认报文中SYN=1、ACK=1,确认号ack=x+1,同时随机选定一个自己序号seq=y,确认报文段同样不能携带数据，但是也要消耗掉一个序号，发送完毕后服务端进入SYN-RCVD（同步收到）状态</li><li><strong>第三次握手</strong>：客户端收到确认报文后，检查ACK=1，ack=x+1是否正确，若正确，则向服务端发送确认报文，确认报文中ACK=1,ack=y+1,seq=x+1,发送后进入ESTAB-LISHED状态，服务端收到确认报文后，也进入ESTAB-LISHED状态，此时双方TCP连接正式建立。</li></ul><p>上面的连接建立过程就是<strong>TCP三次握手</strong>。</p><h2 id="52-tcp报文段结构"><a class="markdownIt-Anchor" href="#52-tcp报文段结构"></a> 5.2 TCP报文段结构</h2>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
      <category>自顶向下方法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常用算法模板</title>
    <link href="/2022/03/31/Suanfa1/"/>
    <url>/2022/03/31/Suanfa1/</url>
    
    <content type="html"><![CDATA[<h1 id="dfs"><a class="markdownIt-Anchor" href="#dfs"></a> DFS</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp">DFS:<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">该DFS 框架以2D 坐标范围为例，来体现DFS 算法的实现思想。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">100</span>;<br><span class="hljs-type">bool</span> vst[maxn][maxn]; <span class="hljs-comment">// 访问标记</span><br><span class="hljs-type">int</span> map[maxn][maxn]; <span class="hljs-comment">// 坐标范围</span><br><span class="hljs-type">int</span> dir[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 方向向量，(x,y)周围的四个方向</span><br> <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CheckEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> <span class="hljs-comment">// 边界条件和约束条件的判断</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!vst[x][y] &amp;&amp; ...) <span class="hljs-comment">// 满足条件</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 与约束条件冲突</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>vst[x][y]=<span class="hljs-number">1</span>; <span class="hljs-comment">// 标记该节点被访问过</span><br><span class="hljs-keyword">if</span>(map[x][y]==G) <span class="hljs-comment">// 出现目标态G</span><br>&#123;<br>...... <span class="hljs-comment">// 做相应处理</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">CheckEdge</span>(x+dir[i][<span class="hljs-number">0</span>],y+dir[i][<span class="hljs-number">1</span>])) <span class="hljs-comment">// 按照规则生成下一个节点</span><br><span class="hljs-built_in">dfs</span>(x+dir[i][<span class="hljs-number">0</span>],y+dir[i][<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">return</span>; <span class="hljs-comment">// 没有下层搜索节点，回溯</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>......<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="bfs"><a class="markdownIt-Anchor" href="#bfs"></a> BFS</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">100</span>;<br><span class="hljs-type">bool</span> vst[maxn][maxn]; <span class="hljs-comment">// 访问标记</span><br><span class="hljs-type">int</span> dir[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 方向向量</span><br> <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">State</span> <span class="hljs-comment">// BFS 队列中的状态数据结构</span><br>&#123;<br><span class="hljs-type">int</span> x,y; <span class="hljs-comment">// 坐标位置</span><br><span class="hljs-type">int</span> Step_Counter; <span class="hljs-comment">// 搜索步数统计器</span><br>&#125;;<br> <br>State a[maxn];<br> <br><span class="hljs-built_in">boolCheckState</span>(State s) <span class="hljs-comment">// 约束条件检验</span><br>&#123;<br><span class="hljs-keyword">if</span>(!vst[s.x][s.y] &amp;&amp; ...) <span class="hljs-comment">// 满足条件</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-comment">// 约束条件冲突</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(State st)</span></span><br><span class="hljs-function"></span>&#123;<br>queue &lt;State&gt; q; <span class="hljs-comment">// BFS 队列</span><br>State now,next; <span class="hljs-comment">// 定义2 个状态，当前和下一个</span><br>st.Step_Counter=<span class="hljs-number">0</span>; <span class="hljs-comment">// 计数器清零</span><br>q.<span class="hljs-built_in">push</span>(st); <span class="hljs-comment">// 入队</span><br>vst[st.x][st.y]=<span class="hljs-number">1</span>; <span class="hljs-comment">// 访问标记</span><br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>&#123;<br>now=q.<span class="hljs-built_in">front</span>(); <span class="hljs-comment">// 取队首元素进行扩展</span><br><span class="hljs-keyword">if</span>(now==G) <span class="hljs-comment">// 出现目标态，此时为Step_Counter 的最小值，可以退出即可</span><br>&#123;<br>...... <span class="hljs-comment">// 做相关处理</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>&#123;<br>next.x=now.x+dir[i][<span class="hljs-number">0</span>]; <span class="hljs-comment">// 按照规则生成下一个状态</span><br>next.y=now.y+dir[i][<span class="hljs-number">1</span>];<br>next.Step_Counter=now.Step_Counter+<span class="hljs-number">1</span>; <span class="hljs-comment">// 计数器加1</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">CheckState</span>(next)) <span class="hljs-comment">// 如果状态满足约束条件则入队</span><br>&#123;<br>q.<span class="hljs-built_in">push</span>(next);<br>vst[next.x][next.y]=<span class="hljs-number">1</span>; <span class="hljs-comment">//访问标记</span><br>&#125;<br>&#125;<br>q.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">// 队首元素出队</span><br>&#125;<br> <span class="hljs-keyword">return</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>......<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>02：应用层</title>
    <link href="/2022/03/28/Cn2/"/>
    <url>/2022/03/28/Cn2/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><blockquote><p><em><strong>纸上得来终觉浅，绝知此事要躬行。</strong></em></p></blockquote><h1 id="一-应用层协议原理"><a class="markdownIt-Anchor" href="#一-应用层协议原理"></a> 一、应用层协议原理</h1><p>研发网络应用程序的<strong>核心</strong>是写出能够运行在不同的端系统和通过网络彼此通信的程序。因此研发新应用时需要编写将在<strong>多台端系统</strong>上运行的软件。</p><h2 id="11-网络应用程序体系结构"><a class="markdownIt-Anchor" href="#11-网络应用程序体系结构"></a> 1.1 网络应用程序体系结构</h2><p><strong>应用程序体系结构</strong>（application architecture）明显不同于网络体系结构。网络体系结构是固定的，而应用程序体系结构由应用程序研发者设计。<br />应用程序体系结构目前有两种主流体系结构：<strong>客户-服务器体系结构</strong>或<strong>对等（P2P）体系结构</strong>。</p><h3 id="111-客户-服务器体系结构"><a class="markdownIt-Anchor" href="#111-客户-服务器体系结构"></a> 1.1.1 客户-服务器体系结构</h3><p>在客户-服务器体系结构中，有一个总是打开的主机称为<strong>服务器</strong>，它服务于来自许多其他称为<strong>客户</strong>的主机的请求。客户相互之间<strong>不直接通信</strong>。另一方面，该服务器具有固定的、周知的地址，该地址称为<strong>IP地址</strong>。</p><p><img src="/img/cn/cn2.1.png" alt="客户-服务器体系结构" /></p><p>在一个客户-服务器应用中，常常会出现一台单独的服务器主机跟不上它所有客户请求的情况。为此，配备大量主机的<strong>数据中心</strong>常被用于创建强大的虚拟服务器。如谷歌在全球拥有30~50个数据中心。一个数据中心能够有数十万台服务器，它们必须要供电和维护。</p><h3 id="112-p2p体系结构"><a class="markdownIt-Anchor" href="#112-p2p体系结构"></a> 1.1.2 P2P体系结构</h3><p>在一个P2P体系结构中，对位于数据中心的专用服务器有最小的（或者没有）依赖。应用程序在间断连接的主机对之间使用直接通信，这些主机对被称为<strong>对等方</strong>。因为这些对等方通信不必通过专门的服务器，该体系结构被称为对等方到对等方的。<br /><img src="/img/cn/cn2.2.png" alt="P2P体系结构" /></p><p>P2P最引人入胜的特性之一时自扩展性（self-scalability）。例如，在一个P2P共享文件中，尽管每个对等方都由于请求文件产生工作量，但每个对等方通过向其他对等方分发文件也为系统增加服务能力。P2P体系结构也是成本有效的，因为它们通常不需要庞大的服务器基础设施和服务器带宽。</p><p>未来P2P应用面临三个主要挑战：<br />1 ISP友好。<br />2 安全性。<br />3 激励。</p><p>需要提及的是，某些应用具有<strong>混合</strong>的体系结构，它结合了客户-服务器和P2P的元素。例如，对于许多即时通信应用而言，服务器被用于跟踪用户的IP地址，但用户到用户的报文在用户主机之间（无需通过中间服务器）直接发送。</p><h2 id="12-进程通信"><a class="markdownIt-Anchor" href="#12-进程通信"></a> 1.2 进程通信</h2><p>在构建网络应用程序前，还需要对运行在多个端系统上的程序是如何互相通信有所了解。进行通信的实际上是<strong>进程</strong>（process）而不是程序。一个进程可以被认为是运行在端系统中的一个程序。</p><p>当进程运行在<strong>相同</strong>的端系统上时，它们使用进程间通信机制相互通信。进程间通信的规则由端系统上的操作系统确定。</p><p>在两个<strong>不同</strong>端系统上的进程，通过跨越计算机网络交换<strong>报文</strong>（message）而相互通信。<strong>发送进程</strong>生成并向网络中发送报文；<strong>接收进程</strong>接收这些报文并可能通过将报文发送回去进行响应。</p><h3 id="121-客户和服务器进程"><a class="markdownIt-Anchor" href="#121-客户和服务器进程"></a> 1.2.1 客户和服务器进程</h3><p>网络应用程序由成对的进程组成，这些进程通过网络相互发送报文。对每对通信进程，我i们通常将这两个进程之一标识为客户（client），而另一个进程标识为服务器（server）。</p><blockquote><p>在给定的一对进程之间的通信会话场景中，发起通信（即在该会话开始时发起与其他进程的联系）的进程被标识为<strong>客户</strong>，在绘画开始时等待联系的进程是<strong>服务器</strong>。</p></blockquote><h3 id="122-进程与计算机网络之间的接口"><a class="markdownIt-Anchor" href="#122-进程与计算机网络之间的接口"></a> 1.2.2 进程与计算机网络之间的接口</h3><p>从一个进程向另一个进程发送的报文必须通过下面的网络。进程通过一个称为<strong>套接字</strong>（socket）的软件接口向网络发送报文和从网络接收报文。</p><p>类比说明，进程类比为房子，套接字类比为门。一个进程向另一个房子发送报文就要将报文从门送出去，到另一个房子时再从门进去。</p><p><strong>套接字</strong>是同一台主机内应用层与运输层之间的接口。由于该套接字是建立网络应用程序的可编程接口，因此套接字也称为应用程序和网络之间的<strong>应用程序编程接口</strong>（API）。应用程序开发者可以控制套接字在应用端的一切，但是对套接字在运输层端几乎没有控制权（仅限于①选择运输层协议；②也许能设定几个参数，如最大缓存和最大报文长度等）。<br /><img src="/img/cn/cn2.3.png" alt="应用程序、套接字和下面的运输层协议" /></p><h3 id="123-进程寻址"><a class="markdownIt-Anchor" href="#123-进程寻址"></a> 1.2.3 进程寻址</h3><p>在一台主机上运行的进程为了向在另一台主机上运行的进程发送分组，接收进程需要有一个<strong>地址</strong>。为了标识该接收进程，需要定义两种信息：<br />——主机的地址；<br />——定义在目的主机中的接收进程的标识符。</p><p>在因特网中，主机由其IP地址标识。除此之外，发送进程还必须指定运行在接收主机上的接收进程（接收套接字）。目的地<strong>端口号</strong>（port number）用于这里，已经给流行的应用分配了特定的端口号。</p><h2 id="13-可供应用程序使用的运输服务"><a class="markdownIt-Anchor" href="#13-可供应用程序使用的运输服务"></a> 1.3 可供应用程序使用的运输服务</h2><p>在发送端的应用程序将报文推进给该套接字，在该套接字的另一侧，<strong>运输层协议</strong>负责使该报文进入接收进程的套接字。</p><p>包括因特网在内的很多网络提供了<strong>不止一种</strong>运输层协议。当开发一个应用时，必须要<strong>选择一种</strong>最能为你的应用需求提供恰当服务的协议。一个运输层协议能够为应用程序提供的服务可大体由四个方面进行分类：<strong>可靠数据传输</strong>、<strong>吞吐量</strong>、<strong>定时</strong>和<strong>安全性</strong>。</p><h3 id="131-可靠数据传输"><a class="markdownIt-Anchor" href="#131-可靠数据传输"></a> 1.3.1 可靠数据传输</h3><p>如果一个协议提供了确保数据交付的服务，就认为提供了<strong>可靠数据传输</strong>（reliable data transfer）。当一个运输协议提供这种服务时，发送进程只要将其数据传递进套接字，就可以完全相信该数据能无差错地到达接收进程。</p><p>当一个运输层协议不提供可靠数据传输时，由发送进程发送地某些数据可能不能够到达接收进程。这可能被<strong>容忍丢失的应用</strong>（loss-tolerant application）所接受，如一些多媒体应用。</p><h3 id="132-吞吐量"><a class="markdownIt-Anchor" href="#132-吞吐量"></a> 1.3.2 吞吐量</h3><p>在沿着一条网络路径上的两个进程之间的通信会话场景中，<strong>可用吞吐量</strong>就是发送进程能够向接收进程交付比特的速率。因为其他会话将共享沿着该网络路径的带宽，并且因为这些会话将会到达和离开，该可用吞吐量将随时间波动。由此衍生出一种服务，即运输层协议能够以某种特定的速率提供<strong>确保</strong>的可用吞吐量。使用这种服务，应用程序能够请求r比特/秒的确保吞吐量，并且该运输协议能够确保可用吞吐量总是为至少r比特/秒。</p><p>具有吞吐量要求的应用程序被称为<strong>带宽敏感的应用</strong>（bandwidth-sensitive application），例如许多多媒体应用。<strong>弹性应用</strong>（elastic application）能够根据情况或多或少地利用可供使用的吞吐量，例如电子邮件、文件传输等。</p><h3 id="133-定时"><a class="markdownIt-Anchor" href="#133-定时"></a> 1.3.3 定时</h3><p>运输层协议也能够提供<strong>定时保证</strong>。如同具有吞吐量保证那样，定时保证能够以多种形式实现，咯如，发送方注入进套接字中的每个比特到达接收方的套接字不迟于100ms。</p><p>这种服务对<strong>交互式实时应用程序</strong>有很大吸引力。对于非实时的应用，较低的时延总比较高的时延好，但对端到端的时延没有严格的约束。</p><h3 id="134-安全性"><a class="markdownIt-Anchor" href="#134-安全性"></a> 1.3.4 安全性</h3><p>运输层协议能够为应用程序提供一种或多种<strong>安全性服务</strong>。这种服务将在发送和接收进程之间提供机密性，以防该数据以某种方式在这两个进程之间被观察到。<br />例如，在<strong>发送主机</strong>中，运输协议能够<strong>加密</strong>由发送进程传输的所有数据；<br />在<strong>接受主机</strong>中，运输层协议能够在将数据交付给接收进程之前<strong>解密</strong>这些数据。</p><p>此外，运输协议还能提供除了机密性以外的其他安全性服务，包括数据完整性和端点鉴别。</p><h2 id="14-因特网提供的运输服务"><a class="markdownIt-Anchor" href="#14-因特网提供的运输服务"></a> 1.4 因特网提供的运输服务</h2><p>因特网（更一般的是TCP/IP网络）为应用程序提供两个运输层协议，即<strong>UDP</strong>和<strong>TCP</strong>。软件开发者为因特网创建新的应用时，首先要选择<strong>UDP</strong>或者<strong>TCP</strong>。每个协议为调用它们的应用程序提供了不同的服务集合。</p><h3 id="141-tcp服务"><a class="markdownIt-Anchor" href="#141-tcp服务"></a> 1.4.1 TCP服务</h3><p>TCP服务模型包括面向连接服务和可靠数据传输服务。</p><p>1 <strong>面向连接的服务</strong><br />在应用层数据报文开始流动之前，TCP让客户和服务器互相交换运输层控制信息。这个所谓的<strong>握手</strong>过程提示客户和服务器，使它们为大量分组的到来做好准备。</p><p>在握手阶段后。一个<strong>TCP连接</strong>（TCP connection）就在两个进程的套接字之间建立了。这条连接是全双工的，即连接双方的进程可以在此连接上同时进行报文收发。</p><p>当应用程序结束报文发送时，必须拆除该连接。</p><p>2 <strong>可靠的数据传送服务</strong><br />通信进程能够依靠TCP，<strong>无差错、按适当顺序</strong>交付所有发送的数据。当应用程序的一端将字节流传进套接字时，它能够依靠TCP将相同的字节流交付给接收方的套接字，而<strong>没有字节的冗余和丢失</strong>。</p><p>除此之外，TCP协议还具有<strong>拥塞控制机制</strong>。当发送方和接收方之间的网络出现拥塞时，它会抑制发送进程（客户或服务器）。这种服务不一定能为通信进程带来直接好处，但能为因特网带来整体好处。TCP拥塞控制也试图限制每个TCP连接，使它们达到公平共享网络带宽的目的。</p><h3 id="142-udp服务"><a class="markdownIt-Anchor" href="#142-udp服务"></a> 1.4.2 UDP服务</h3><p>UDP是一种不提供不必要服务的轻量级运输协议，它仅提供最小服务。UDP是无线连接的，因此在两个进程通信前没有握手过程。UDP服务提供一种不可靠数据传送服务，并且没有拥塞控制机制。</p><h3 id="143-因特网运输协议所不提供的服务"><a class="markdownIt-Anchor" href="#143-因特网运输协议所不提供的服务"></a> 1.4.3 因特网运输协议所不提供的服务</h3><p>TCP提供了可靠的端到端数据传送，在应用层也可以很容易地用SSL来加强以提供安全服务。今天的因特网通常能够为时间敏感应用提供满意的服务，但它不能提供任何定时或带宽保证。</p><h2 id="15-应用层协议"><a class="markdownIt-Anchor" href="#15-应用层协议"></a> 1.5 应用层协议</h2><p><strong>应用层协议</strong>（application-layer protrol）定义了运行在不同端系统上的应用程序进程如何相互传递报文。</p><blockquote><p>特别是应用层协议定义了：<br />1 交换的报文<strong>类型</strong>，例如请求报文和响应报文<br />2 各种报文类型的<strong>语法</strong>，如报文中的各个字段及这些字段是如何描述的。<br />3 字段的<strong>语义</strong>，即这些字段中包含的信息的含义。<br />4 一个进程何时以及如何发送报文，对报文进行相应的<strong>规则</strong>。</p></blockquote><p>有些应用层协议是由RFC文档定义的，因此它们位于<strong>公共域</strong>中，例如HTTP。还有很多应用层协议是<strong>专用</strong>的，有意不为公共域使用。</p><p>应用层协议是网络应用的<strong>一部分</strong>。</p><h1 id="二-web和http"><a class="markdownIt-Anchor" href="#二-web和http"></a> 二、Web和HTTP</h1><p>在20世纪90年代初期，一个主要的新型应用即<strong>万维网</strong>（World Wide Web）登上舞台，它极大地改变了人们与工作环境内外交流的方式。对大多数用户而言，Web最具吸引力的是它的<strong>按需操作</strong>，即用户能看到想看的内容。</p><h2 id="21-http概况"><a class="markdownIt-Anchor" href="#21-http概况"></a> 2.1 HTTP概况</h2><p>Web的应用层协议是<strong>超文本运输协议</strong>（HTTP),它是Web的核心。HTTP由两个程序实现：一个客户和一个服务器程序。客户程序和服务器程序运行在不同的端系统中，通过交换HTTP报文进行会话。HTTP定义了这些报文的结构以及客户和服务器进行报文交换的方式。</p><p><strong>Web页面</strong>（也叫文档）是由<strong>对象</strong>组成的。一个<strong>对象</strong>（object）只是一个文件，诸如一个HTML文件、一个JPEG图形、一个Java小程序或一个视频片段这样的文件，且它们可通过一个URL地址寻址。每个URL地址由两部分组成：存放对象的服务器主机名和对象的路径名。</p><blockquote><p>例如，URL地址http://www.someSchool.edu/someDepartment/picture.gif中www.someSchool.edu就是主机名，/someDepartment/picture.gif就是路径名。</p></blockquote><p>Web<strong>浏览器</strong>实现了HTTP的客户端，所以被称为浏览器或客户；<br />Web<strong>服务器</strong>实现了HTTP的服务器端，它用于存储Web对象，每个对象由URL寻址。</p><p>HTTP定义了Web客户向Web服务器请求Web页面的方式，以及服务器向客户传送Web页面的方式。当用户请求一个Web页面时，浏览器向服务器发出对该页面中所包含对象的HTTP请求报文，服务器接收到请求并用包含这些对象的HTTP响应报文进行响应。<br /><img src="/img/cn/cn2.4.png" alt="HTTP的请求-响应行为" /></p><p>HTTP使用<strong>TCP</strong>作为它的支撑运输协议。HTTP客户首先发起一个与服务器的TCP连接。一旦连接建立，该浏览器和服务器进程就可以通过套接字接口访问TCP。一旦客户向它的套接字接口发送了一个请求报文，该报文就脱离了客户控制并进入TCP的控制。</p><p>HTTP是一个<strong>无状态协议</strong>（stateless protrol），即不保存关于客户的任何信息。Web是一个<strong>客户-服务器体系结构</strong>。</p><h2 id="22-非持续连接和持续连接"><a class="markdownIt-Anchor" href="#22-非持续连接和持续连接"></a> 2.2 非持续连接和持续连接</h2><p>在许多因特网应用程序中，客户发出一系列请求并且服务器对每个请求进行响应。<strong>非持续连接</strong>是指每个请求/响应经一个单独的TCP发送，<strong>持续连接</strong>指所有的请求/响应经相同的TCP发送。</p><p>以<strong>HTTP</strong>举例研究持续连接和非持续连接的<strong>优缺点</strong>。</p><h3 id="221-采用非持续连接的http"><a class="markdownIt-Anchor" href="#221-采用非持续连接的http"></a> 2.2.1 采用非持续连接的HTTP</h3><p>在<strong>非持续连接</strong>的情况下，从服务器向客户传送一个Web页面的<strong>步骤</strong>，假设该页面含有一个HTML基本页面和10个JPEG图形，并且这11个对象位于同一台服务器上。该HTML文件的URL为：</p><blockquote><p><a href="http://www.someSchool.edu/someDepartment/home.index">http://www.someSchool.edu/someDepartment/home.index</a></p></blockquote><ol><li>HTTP<strong>客户进程</strong>在端口号80发起一个到服务器www.someSchool.edu的TCP连接，该端口号是HTTP的默认端口。</li><li>HTTP<strong>客户</strong>经它的<strong>套接字</strong>向该服务器发送一个HTTP请求报文。请求报文中包含了<strong>路径名</strong>/someDepartment/home.index</li><li>HTTP<strong>服务器进程</strong>经它的<strong>套接字</strong>向该服务器发送一个HTTP请求报文。从其<strong>存储器</strong>（RAM或磁盘）<a href="http://xn--www-u68dv7oy4rf8uyi1byx2a.someSchool.edu/someDepartment/home.index%EF%BC%8C%E5%9C%A8%E4%B8%80%E4%B8%AAHTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E4%B8%AD">中检索出对象www.someSchool.edu/someDepartment/home.index，在一个HTTP响应报文中</a><strong>封装</strong>对象，并通过其套接字向客户发送<strong>响应</strong>报文。</li><li>HTTP<strong>服务器进程</strong>通知TCP断开该TCP连接。</li><li>HTTP<strong>客户</strong>接收响应报文，TCP连接关闭。该报文指出封装的对象是一个HTML文件，客户从响应报文中提取出该文件，检查该HTML文件，得到对10个JPEG图形的<strong>引用</strong>。</li><li>对每个引用的JPEG图形对象<strong>重复</strong>前4个步骤。</li></ol><p>其中每个TCP连接在服务器发送一个对象后关闭，即该连接并不为其他的对象而持续下来。每个TCP连接只传输一个请求报文和一个响应报文，因此在本例中要产生11个TCP连接。</p><p>其中这10个JPEG图形对象是使用10个串行的TCP连接，还是某些JPEG对象使用了一些并行的TCP连接，这可以由用户通过配置浏览器进行控制。</p><p><strong>往返时间</strong>（RTT）是指一个短分组从客户到服务器然后再返回客户所花费的时间。RTT包括分组传播时延、分组在中间路由器和交换机上的排队时延以及分组处理时延。</p><p>当浏览器和Web服务器之间发起一个TCP连接时，会涉及一次”<strong>三次握手</strong>“过程：</p><ol><li>客户向服务器发送一个小TCP报文段</li><li>服务器用一个小TCP报文段做出确认和响应</li><li>客户向服务器返回确认</li></ol><p>三次握手中前两个部分占用了一个RTT。完成前两个部分后，客户结合三次握手的第三部分向该TCP连接发送一个HTTP请求报文，一旦该请求报文到达服务器，服务器就在该TCP连接上发送HTML文件。该HTTP请求/响应占用了一个RTT。因此，总的响应时间就是<strong>两个RTT加上服务器传输HTML文件的时间</strong>。<br /><img src="/img/cn/cn2.5.png" alt="三次握手过程" /></p><h3 id="222-采用持续连接的http"><a class="markdownIt-Anchor" href="#222-采用持续连接的http"></a> 2.2.2 采用持续连接的HTTP</h3><p>非持续连接有两个缺点：</p><ol><li><p>必须为每一个请求的对象建立和维护一个全新的TCP连接。对于每个连接，客户和服务器都要分配TCP的缓冲区和保持TCP变量。</p></li><li><p>每一个对象要经受两倍RTT的交付时延。</p><p>在采用持续连接时，服务器在发送响应后保持该TCP连接打开。在相同的客户与服务器之间的后续请求和响应报文能够通过相同的连接进行传送。一般来说，如果一条连接经过一定时间间隔（一个可配置的超时间隔）仍未被使用，HTTP服务器就关闭该连接。</p></li></ol><h2 id="23-http报文格式"><a class="markdownIt-Anchor" href="#23-http报文格式"></a> 2.3 HTTP报文格式</h2><p>HTTP规范包含了对HTTP报文格式的定义。HTTP报文有两种：请求报文和响应报文。</p><h3 id="231-http请求报文"><a class="markdownIt-Anchor" href="#231-http请求报文"></a> 2.3.1 HTTP请求报文</h3><blockquote><p>下面提供一个<strong>典型</strong>的HTTP请求报文：<br />GET /somedir/page.html HTTP/1.1<br />Host: <a href="http://www.someschool.edu">www.someschool.edu</a><br />Connection: close<br />User-agent: Mozilla/5.0<br />Accept-language: fr</p></blockquote><p>HTTP请求报文的第一行叫做<strong>请求行</strong>（request line），其后继的行叫做<strong>首部行</strong>（header line）。</p><p>1 <strong>请求行</strong><br />有3个字段：<strong>方法字段</strong>、<strong>URL字段</strong>和<strong>HTTP版本字段</strong>。方法字段可以取几种不同的值，包括GET、POST、HEAD、PUT和DELETE，绝大部分采用GET方法。</p><p>2 <strong>首部行</strong><br /><strong>Host: <a href="http://www.someschool.edu">www.someschool.edu</a></strong>，指明了对象所在的主机。<br /><strong>Connection: close</strong>，浏览器告诉服务器不使用持续连接。<br /><strong>User-agent</strong>，用来指明用户代理，即向服务器发送请求的浏览器的类型。<br /><strong>Accept-language</strong>，表示用户想得到该对象的法语版本（如果服务器中有），否则发送默认版本。</p><p>在首部行后有一个“<strong>实体体</strong>”（entire body）。使用GET方法时实体体为空，在使用<strong>POST方法</strong>时使用。例如当用户在搜索引擎搜索关键词时，实体体包含的就是用户在表单字段的输入值。</p><p><img src="/img/cn/cn2.6.png" alt="一个HTTP请求报文的通用格式" /></p><p>用表单生成的请求报文不是必须使用<strong>POST方法</strong>，HTML表单经常使用GET方法，并在所请求的URL中包括输入的数据。<a href="http://xn--www-uc0ep96b.somesite.com/animalsearch?monkeys&amp;bananas%E3%80%82">例如www.somesite.com/animalsearch?monkeys&amp;bananas。</a></p><p><strong>HEAD方法</strong>类似于GET方法，当服务器收到使用HEAD方法的请求时，将会用一个HTTP报文进行响应，但不返回对象。应用程序开发者经常使用HEAD方法进行调试跟踪。</p><p><strong>PUT方法</strong>常与Web发行工具联合使用，它允许用户上传对象到指定的Web服务器上指定的路径（目录）。同时，它也被那些需要向Web服务器上传对象的应用程序使用。</p><p><strong>DELETE方法</strong>允许用户或者应用程序删除Web服务器上的对象。</p><h3 id="232-http响应报文"><a class="markdownIt-Anchor" href="#232-http响应报文"></a> 2.3.2 HTTP响应报文</h3><blockquote><p>下面提供一条典型的HTTP响应报文，它是对上面请求报文的响应<br />HTTP:/1.1 200 OK<br />Connection: close<br />Data: Tue, 09 Aug 2011 15:44:04 GMT<br />Server: Apache/2.2.3 (CentOS)<br />Last-Modified: Tue, 09 Aug 2011 15:11:03 GMT<br />Content-Length: 6821<br />Content-Type: text/html<br />(空行）<br />(data data data data…)</p></blockquote><p>1 <strong>状态行</strong>（第1行）<br />状态行有3个字段：<strong>协议版本字段</strong>、<strong>状态码</strong>和<strong>相应状态信息</strong>。这里指示服务器正在使用HTTP/1.1，并且一切正常。</p><p>2 <strong>首部行</strong>（2~7行）<br /><strong>Connection: close</strong> 告诉客户发送完报文后将关闭该TCP连接；<br /><strong>Date</strong> 指示服务器产生并发送该响应报文的日期和时间；<br /><strong>Server</strong> 指示该报文是由一台Apache Web服务器产生的，类似于请求报文中的User-agent；<br /><strong>Last-Modified</strong> 指示了对象创建或者最后修改的日期和时间，它对对象缓存（既可能在本地客户也可能在网络缓存服务器上）非常重要；<br /><strong>Content-Length</strong> 指示了被发送对象中的字节数；<br /><strong>Content-Type</strong> 指示了实体体中的对象是HTML文本。</p><p>3 <strong>实体体</strong>：报文的主要部分（data data data…）。</p><p><img src="/img/cn/cn2.7.png" alt="一个HTTP响应报文的通用格式" /></p><h2 id="24-用户与服务器的交互cookie"><a class="markdownIt-Anchor" href="#24-用户与服务器的交互cookie"></a> 2.4 用户与服务器的交互：cookie</h2><p>cookie在[RFC 6265]中定义，它允许站点对用户进行跟踪。</p><p>cookie技术有4个组件：</p><ol><li>在HTTP响应报文中的一个cookie首部行；</li><li>在HTTP请求报文中的一个cookie首部行；</li><li>在用户端系统中保留有一个cookie文件，由用户的浏览器进行管理；</li><li>位于Web站点的一个后端数据库。</li></ol><p><img src="/img/cn/cn2.8.png" alt="cookie跟踪用户状态" /></p><p>cookie可以用于<strong>标识</strong>一个用户。用户首次访问一个站点时，可能需要提供一个用户标识。在后继会话中，浏览器向服务器传递一个cookie首部，从而向该服务器标识了用户。因此cookie可以在无状态的HTTP之上建立一个用户<strong>会话层</strong>。</p><h2 id="25-web缓存"><a class="markdownIt-Anchor" href="#25-web缓存"></a> 2.5 Web缓存</h2><p><strong>Web缓存器</strong>（Web cache）也叫<strong>代理服务器</strong>（proxy server），它是能够代表初始Web服务器来满足HTTP请求的网络实体。Web缓存器有自己的磁盘<strong>存储空间</strong>，并在存储空间中保存最近请求过的对象的<strong>副本</strong>。</p><p>假设浏览器正在请求一个对象，将会发生如下情况：</p><ol><li>浏览器<strong>建立</strong>一个到Web缓存器的TCP连接，并向Web缓存器中的对象发送一个HTTP请求。</li><li>Web缓存器进行<strong>检查</strong>，看看本地是否存储了该对象副本。如果有，Web缓存器就向客户浏览器用HTTP响应报文返回该对象。</li><li>如果Web缓存器中没有该对象，它就打开一个与该对象的<strong>初始服务器</strong>的TCP连接。Web缓存器则在这个缓存器到服务器的TCP连接上发送一个对该对象的HTTP请求。在收到该请求后，初始服务器向该Web缓存器发送具有该对象的HTTP响应。</li><li>当Web缓存器接收到该对象时，它在本地存储空间存储一份<strong>副本</strong>，并向客户的浏览器用HTTP<strong>响应报文</strong>发送该副本（通过已有的TCP连接）。</li></ol><p>所以Web缓存器是<strong>服务器</strong>同时又是<strong>客户</strong>。它通常由<strong>ISP</strong>购买并安装。</p><p>部署Web缓存器的<strong>原因</strong>：</p><ul><li>它可以大大减少对客户请求的响应时间。</li><li>它能够大大减少一个机构的接入链路到因特网的通信量。</li><li>它从整体上大大减低因特网上的Web流量，从而改善了所有应用的性能。</li></ul><p>通过使用<strong>内容分发网络</strong>（CDN），Web缓存器正在因特网中发挥着越来越重要的作用。CDN公司在因特网上安装了许多地理上分散的缓存器，因而使大量流量实现了本地化。</p><h2 id="26-条件get方法"><a class="markdownIt-Anchor" href="#26-条件get方法"></a> 2.6 条件GET方法</h2><p>为了解决存放在缓存器中的对象副本可能已经<strong>陈旧</strong>的问题，HTTP协议有一种机制，允许缓存器证实它的对象是最新的。它就是<strong>条件GET方法</strong>。</p><p>如果</p><ul><li>请求报文使用GET方法</li><li>请求报文中包含一个&quot;if-Modified-Since:&quot;首部行</li></ul><p>那么，这个HTTP请求报文就是一个条件GET请求报文。</p><h1 id="三-文件传输协议ftp"><a class="markdownIt-Anchor" href="#三-文件传输协议ftp"></a> 三、文件传输协议：FTP</h1><h2 id="31-ftp传输的过程"><a class="markdownIt-Anchor" href="#31-ftp传输的过程"></a> 3.1 FTP传输的过程</h2><p>在一个典型的FTP会话中，用户坐在一台主机前面，向一台远程主机传输文件。为使用户能访问它的远程账户，用户必须提供一个<strong>用户标识和口令</strong>。用户通过一个<strong>FTP用户代理</strong>与<strong>FTP</strong>交互。</p><p>具体步骤如下：</p><ol><li>用户首先提供远程主机的<strong>主机名</strong>，使本地主机的FTP客户进程建立一个到远程主机FTP服务器进程的<strong>TCP连接</strong>。</li><li>用户接着提供<strong>用户标识和口令</strong>，作为FTP命令的一部分在该TCP连接上传送。</li><li>一旦该服务器向该用户<strong>授权</strong>，用户可以将存放在本地文件系统中的一个或多个文件复制到远程文件系统（反之亦然）。</li></ol><h2 id="32-http和ftp的对比"><a class="markdownIt-Anchor" href="#32-http和ftp的对比"></a> 3.2 HTTP和FTP的对比</h2><h3 id="321-共同点"><a class="markdownIt-Anchor" href="#321-共同点"></a> 3.2.1 共同点</h3><ul><li>都是文件传输协议</li><li>都运行在TCP上</li></ul><h3 id="322-不同点"><a class="markdownIt-Anchor" href="#322-不同点"></a> 3.2.2 不同点</h3><ul><li>FTP使用了两个并行的TCP连接来传输文件，一个是<strong>控制连接</strong>（control connection），一个是<strong>数据连接</strong>（data connection）。<strong>控制连接</strong>用于在主机之间传输控制信息，如用户标识、口令、文件命令等。<strong>数据连接</strong>用于实际发送一个文件。我们称FTP是<strong>带外连接</strong>（独立的控制连接）的。HTTP是在传输文件的同一个TCP连接中发送请求和响应首部行的。因此，HTTP是<strong>带内连接</strong>的。</li><li>FTP服务器必须在整个会话期间保留用户的<strong>状态</strong>（state）。服务器必须把特定的用户账户与控制连接联系起来，大大限制了FTP同时维持的会话总数。HTTP是<strong>无状态</strong>的，它不必对任何用户状态进行跟踪。</li></ul><p>对FTP而言，<strong>控制连接</strong>贯穿了整个用户会话期间，但是对会话中的每一次文件传输都需要建立一个新的<strong>数据连接</strong>（即数据连接是非持续的）。</p><h2 id="33-ftp命令和回答"><a class="markdownIt-Anchor" href="#33-ftp命令和回答"></a> 3.3 FTP命令和回答</h2><p>详见 RFC959</p><h1 id="四-因特网中的电子邮件"><a class="markdownIt-Anchor" href="#四-因特网中的电子邮件"></a> 四、因特网中的电子邮件</h1><h2 id="41-因特网电子邮件系统和它的关键组件"><a class="markdownIt-Anchor" href="#41-因特网电子邮件系统和它的关键组件"></a> 4.1 因特网电子邮件系统和它的关键组件</h2><p>因特网电子邮件系统有3个主要组成部分：<strong>用户代理</strong>（user agent）、<strong>邮件服务器</strong>（mail server）和<strong>简单邮件传输协议</strong>（SMTP）。</p><p>1 <strong>用户代理</strong>允许用户阅读、回复、转发、保存和撰写报文。当发送方完成邮件撰写时，<strong>邮件代理</strong>向其<strong>邮件服务器</strong>发送邮件，此时邮件放在<strong>邮件服务器</strong>的外出报文队列中。</p><p>2 <strong>邮件服务器</strong>形成了电子邮件体系结构的核心。每个接收方在其中的某个<strong>邮件服务器</strong>上有一个<strong>邮箱</strong>（mailbox），<strong>邮箱</strong>管理和维护着发送给用户的报文。当用户要在他的<strong>邮箱</strong>中读取该报文时，包含他邮箱的<strong>邮件服务器</strong>要鉴别用户。</p><p>如果发送方的服务器不能将邮件交付给接收方的服务器，发送方的邮件服务器在一个<strong>报文队列</strong>（message queue）中保持该报文并在以后尝试再次发送。通常每30分钟进行一次尝试，如果几天后仍不能成功，服务器就删除该报文并以电子邮件的形式通知发送方。</p><p>3 <strong>SMTP</strong>是因特网电子邮件中主要的应用层协议。它使用TCP可靠数据传输服务，从发送方的邮件服务器向接收方的邮件服务器发送邮件。SMTF也有两个部分：运行在发送方邮件服务器的<strong>客户端</strong>和接收方邮件服务器的<strong>服务器端</strong>。</p><h2 id="42-smtp"><a class="markdownIt-Anchor" href="#42-smtp"></a> 4.2 SMTP</h2><p>SMTP是因特网电子邮件应用的核心，用于从发送方的邮件服务器发送报文到接收方的邮件服务器。</p><p>假设Alice想给Bob发送一封简单的ASCII报文：</p><ol><li>Alice调用她的<strong>邮件代理</strong>程序并提供Bob的邮件地址，撰写报文，然后指示<strong>用户代理</strong>发送该报文。</li><li>Alice的<strong>用户代理</strong>把报文发给他的<strong>邮件服务器</strong>，在那里该报文被放在<strong>报文队列</strong>中。</li><li>运行在Alice的<strong>邮件服务器</strong>上的<strong>SMTP客户端</strong>发现了<strong>报文队列</strong>中的这个报文，它就创建一个到运行在Bob的邮件服务器上的<strong>SMTP服务器</strong>的<strong>TCP连接</strong>。</li><li>在经过一些初始SMTF握手后，SMTP客户通过该<strong>TCP连接</strong>发送Alice的报文。</li><li>在Bob的<strong>邮件服务器</strong>上，SMTP的服务器端接收该报文。Bob的<strong>邮件服务器</strong>将该报文放入Bob的<strong>邮箱</strong>中。</li><li>在Bob方便的时候，他调用<strong>用户代理</strong>阅读该报文。</li></ol><p>SMTP一般不使用中间服务器发送邮件。而且它用的是持续连接，通过同一个TCP连接发送所有报文。</p><h2 id="43-http和smtp的对比"><a class="markdownIt-Anchor" href="#43-http和smtp的对比"></a> 4.3 HTTP和SMTP的对比</h2><h3 id="431-共同点"><a class="markdownIt-Anchor" href="#431-共同点"></a> 4.3.1 共同点</h3><ul><li>都用于从一台主机向另一台主机传送文件。</li><li>进行文件发送时，二者都使用<strong>持续连接</strong>。</li></ul><h3 id="432-不同点"><a class="markdownIt-Anchor" href="#432-不同点"></a> 4.3.2 不同点</h3><p><strong>一、</strong></p><ul><li>HTTP主要是一个<strong>拉协议</strong>（pull protocol），即在方便的时候，用户使用HTTP从服务器拉取这些信息。TCP由想接收文件的机器发起的。</li><li>SMTP基本是一个<strong>推协议</strong>（push protocol），即发送邮件服务器把文件推向接收邮件服务器。TCP由要发送该文件的机器发起。</li></ul><p><strong>二、</strong></p><ul><li>SMTP要求每个报文使用<strong>7比特ASCII码</strong>格式。如果文件包含非7比特ASCII字符，则必须要按照7比特ASCII码进行编码。</li><li>HTTP没有格式限制。</li></ul><p><strong>三、</strong></p><ul><li>在处理一个既包含文本又包含图形（或其他）的文档时，HTTP把每个对象<strong>封装</strong>到响应报文中。</li><li>SMTP把所有报文对象放在一个报文之中。</li></ul><h2 id="44-邮件报文格式和mime"><a class="markdownIt-Anchor" href="#44-邮件报文格式和mime"></a> 4.4 邮件报文格式和MIME</h2><p>当发送电子邮件时，一个包含<strong>环境信息</strong>的首部位于报文体前面。这些<strong>环境信息</strong>包括在一系列<strong>首部行</strong>中，这些行由RFC 5322定义。注意这里的首部行不同于SMTP命令，SMTP命令是握手协议的一部分。</p><blockquote><p>一个典型的报文首部如下：<br />From: <a href="mailto:alice@crepes.fr">alice@crepes.fr</a><br />To: <a href="mailto:bob@hamburger.edu">bob@hamburger.edu</a><br />Subject: Searching for the meaning of life</p></blockquote><h2 id="45-邮件访问协议"><a class="markdownIt-Anchor" href="#45-邮件访问协议"></a> 4.5 邮件访问协议</h2><p>目前用户是通过在用户端系统上运行的客户程序来阅读电子邮件。用户通常在本地PC上运行一个<strong>用户代理程序</strong>，它访问存储在总是保持开机的<strong>共享邮件服务器</strong>（由用户的ISP维护）上的邮箱。</p><p>为了接收方能够通过<strong>用户代理</strong>获得<strong>某ISP</strong>上的<strong>邮件服务器</strong>上的邮件，目前有一些流行的邮件访问协议，包括<strong>第三版的邮局协议</strong>（POP3）、<strong>因特网邮件访问协议</strong>（IMAP）和<strong>HTTP</strong>。</p><p><img src="/img/cn/cn2.9.png" alt="电子邮件协议及其通信实体" /></p><h3 id="451-pop3"><a class="markdownIt-Anchor" href="#451-pop3"></a> 4.5.1 POP3</h3><p>POP3是一个<strong>极为简单、功能相当有限</strong>的邮件访问协议，由RFC1939定义。随着建立TCP连接，POP3按照三个阶段进行工作：</p><ol><li><strong>特许</strong>（authorization）<br />用户代理发送（以明文形式）用户名和口令以鉴别用户。</li><li><strong>事务处理</strong><br />用户代理取回报文，还能对报文做删除标记，取消报文删除标记，以及获取邮件的统计信息。</li><li><strong>更新</strong><br />出现在客户发出quit命令之后，结束该POP3会话。同时，该邮件服务器删除哪些被标记为删除的报文。</li></ol><h3 id="452-imap"><a class="markdownIt-Anchor" href="#452-imap"></a> 4.5.2 IMAP</h3><p>略</p><h3 id="453基于web的电子邮件"><a class="markdownIt-Anchor" href="#453基于web的电子邮件"></a> 4.5.3基于Web的电子邮件</h3><p>略</p><h1 id="五-dns因特网的目录服务"><a class="markdownIt-Anchor" href="#五-dns因特网的目录服务"></a> 五、DNS：因特网的目录服务</h1><p>因特网上的主机可以使用多种方式进行标识，其中的一种标识方法是<strong>主机名</strong>（hostname）。然而，主机名几乎没有提供关于主机在因特网中位置的信息，而且以不定长的字母数字组成，路由器难以处理。由于这些原因，主机也使用<strong>IP地址</strong>（IP address）进行标识。</p><blockquote><p>一个IP地址由四个字节组成，并有着严格的层次结构，如121.7.106.83，其中的每个字节都被句点分隔开，表示了0~255的十进制数字。当从左至右扫描它时，会得到越来越具体的关于主机位于因特网何处的信息。</p></blockquote><h2 id="51-dns提供的服务"><a class="markdownIt-Anchor" href="#51-dns提供的服务"></a> 5.1 DNS提供的服务</h2><p><strong>域名系统</strong>（DNS）的主要任务是进行主机名到IP地址转换的<strong>目录服务</strong>。</p><blockquote><p>DNS是：<br />①一个由分层的DNS服务器（DNS server）实现的分布式数据库<br />②一个使得主机能够查询分布式数据库的应用层协议。</p></blockquote><p>DNS通常是由其他应用层协议所使用的（不直接面向用户），包括HTTP、SMTP和FTP，将用户提供的主机名解析为IP地址。例如，当用户要将一个HTTP请求报文发送到Web服务器时，必须要获得该网页的IP地址：</p><ul><li>同一台用户主机上运行着DNS应用的客户端。</li><li>浏览器从URL抽取出主机名，并将主机名传给DNS应用的客户端。</li><li>DNS客户向DNS服务器发送一个包含主机名的请求。</li><li>DNS客户最终会收到一份回答报文，其中含有对应于该主机名的IP地址。</li><li>一旦浏览器接收到该IP地址，它能够向位于该IP地址80端口的HTTP服务器进程发起一个TCP连接。</li></ul><p>DNS将会为因特网应用带来大量<strong>时延</strong>。目前想获得的IP地址通常就<strong>缓存</strong>在“附近的”DNS服务器中，这有助于减少DNS的网络流量和平均时延。</p><p>除了上述的主机名到IP地址的转换，DNS还提供了一些重要的服务：</p><ul><li>主机别名</li><li>邮件服务器别名</li><li>负债分配</li><li>……</li></ul><p>DNS由RFC定义，它是一个复杂的系统，这里不再详述。</p><h2 id="52-dns工作机理概述"><a class="markdownIt-Anchor" href="#52-dns工作机理概述"></a> 5.2 DNS工作机理概述</h2><p>从用户之际上调用应用程序的角度看，DNS是一个提供简单、直接的转换服务的黑盒子，事实上它的构造非常复杂。<strong>DNS由分布于全球的大量DNS服务器以及定义了DNS服务器与查询主机通信方式的应用层协议组成</strong>。</p><p>采用单一DNS服务器（集中式设计）会有如下问题：</p><ul><li><strong>单点故障</strong>（a single point of failure）</li><li><strong>通信容量</strong>（traffic volume）</li><li><strong>远距离的集中式数据库</strong>（distant centralized database）</li><li><strong>维护</strong>（maintenance）</li></ul><p>因此，DNS采用了分布式的设计方案。</p><h3 id="521-分布式-层次数据库"><a class="markdownIt-Anchor" href="#521-分布式-层次数据库"></a> 5.2.1 分布式、层次数据库</h3><p>DNS使用了大量DNS服务器，它们以<strong>层次</strong>方式组织，并且分布在全世界范围内。<strong>没有一台DNS服务器拥有因特网上所有主机的映射，该映射分布在所有的DNS服务器上</strong>。</p><p>大致说来，有三种类型的DNS服务器：</p><ul><li><strong>根DNS服务器</strong><br />在因特网上有<strong>13</strong>个根DNS服务器（标号从A到M），大部分位于北美洲。为了提高安全性和可靠性，每台“服务器”实际上是一个<strong>服务器网络</strong>。</li><li><strong>顶级域（TLD）DNS服务器</strong><br />这些服务器负责<strong>顶级域名</strong>，如com、org、net、edu等以及所有<strong>国家的顶级域名</strong>。</li><li><strong>权威DNS服务器</strong><br />在因特网上具有<strong>公共可访问主机</strong>（如Web服务器和邮件服务器）的组织（机构）必须提供公共可访问的<strong>DNS记录</strong>，这些记录将这些主机的名字映射为IP地址。这个组织（机构）能够选择实现<strong>自己的</strong>权威DNS服务器收藏这些DNS记录，也可以选择将这些记录存储在<strong>第三方的</strong>权威DNS服务器中。</li></ul><p><img src="/img/cn/cn2.10.png" alt="DNS服务器的部分层次结构" /></p><p>除了在层次结构中的三种DNS服务器，还有一类，叫做<strong>本地DNS服务器</strong>，它起到一个<strong>代理</strong>的作用。对于某居民区ISP，本地DNS服务器通常与主机相隔很近。</p><p><img src="/img/cn/cn2.11.png" alt="各种DNS服务器的交互" /></p><p>主机、服务器之间的查询有两种形式：</p><ul><li><strong>递归查询</strong>。在该模式下DNS 服务器接收到客户机请求，必须使用一个<strong>准确的查询结果</strong>回复客户机。如果DNS 服务器本地没有存储查询DNS 信息，那么该服务器会询问其他服务器，并将返回的查询结果提交给客户机。客户机和服务器之间的查询是递归查询。<br /><strong>递归查询告诉客户机IP地址</strong></li><li><strong>迭代查询</strong>。DNS 服务器会向客户机提供其他能够解析查询请求的<strong>DNS 服务器地址</strong>，当客户机发送查询请求时，DNS 服务器并不直接回复查询结果，而是告诉客户机另一台DNS 服务器地址，客户机再向这台DNS 服务器提交请求，依次循环直到返回查询的结果为止。<br /><strong>服务器之间的查询是迭代查询</strong></li></ul><h3 id="522-dns缓存"><a class="markdownIt-Anchor" href="#522-dns缓存"></a> 5.2.2 DNS缓存</h3><p>为了改善时延性能并减少在因特网上到处传输的DNS报文数量，DNS广泛使用了<strong>缓存</strong>技术。在一个请求链中，当某DNS服务器接收一个DNS回答时，它能将该回答中的信息缓存在本地存储器中。由于主机和和主机名与IP地址的映射不是永久的，DNS服务器在一段时间后（通常设置为两天）将丢弃缓存的信息。</p><h2 id="53-dns记录和报文"><a class="markdownIt-Anchor" href="#53-dns记录和报文"></a> 5.3 DNS记录和报文</h2><p>共同实现DNS分布式数据库的所有DNS服务器存储了<strong>资源记录</strong>（RR），RR提供了主机名到IP地址的映射。每个DNS回答报文包含了<strong>一条或多条</strong>RR。</p><p>RR是一个包含了下列字段的4元组：<br />（Name，Value，Type，TTL）</p><p>关于RR的详细内容以后再补。</p><h3 id="531-dns报文"><a class="markdownIt-Anchor" href="#531-dns报文"></a> 5.3.1 DNS报文</h3><p>DNS报文中各字段的语义如下：</p><p><img src="/img/cn/cn2.12.png" alt="DNS报文格式" /></p><ul><li>前12个字节是<strong>首部区域</strong>。<br /><strong>1</strong> <strong>标识符</strong>是一个<em>16比特的数</em>。用于标识该查询，它会被复制到回答报文中，以便让客户用它来匹配发送的请求和接收到的回答。<br /><strong>2</strong> <strong>标志字段</strong>中含有<em>若干标志</em>。<br />1比特的“<em>查询/回答</em>”标志位指出报文是查询报文（0）还是回答报文（1）；<br />当某DNS服务器是所请求名字的权威DNS服务器时，1比特的“<em>权威的</em>”标志位被置入；<br />如果客户在该DNS服务器没有某记录时希望它执行递归查询，将设置1比特的“<em>希望递归</em>”标志位；<br />如果该DNS服务器支持递归查询，在它的回答报文中会显示1比特的“递归可用”标志位。<br /><strong>3</strong> 除此之外，首部区域还有4个<strong>有关数量的字段</strong>，它们分别指出了4类数据区域出现的数量。<ul><li><strong>问题区域</strong>包含着正在进行的查询信息。该区域包括：<br /><strong>1 名字字段</strong>，指出正在被查询的主机名字。<br /><strong>2 类型字段</strong>，指出有关该名字的正被询问的问题类型。</li><li><strong>回答区域</strong>包含了对最初请求的名字的<strong>资源记录</strong>。</li><li><strong>权威区域</strong>包含了其他权威服务器的记录。</li><li><strong>附加区域</strong>包含了其他有帮助的记录。</li></ul></li></ul><h3 id="532-在dns数据库中插入记录"><a class="markdownIt-Anchor" href="#532-在dns数据库中插入记录"></a> 5.3.2 在DNS数据库中插入记录</h3><p>如果你想注册域名，需要向注册登记机构（register）提供基本和辅助权威DNS服务器的名字和IP地址。对这两个权威DNS服务器，该注册登记机构确保将一个类型NS和一个类型A的记录输入TLD com服务器。</p><blockquote><p>例如，输入如下信息：<br />(<a href="http://networkutopia.com">networkutopia.com</a>, <a href="http://dnsl.networkutopia.com">dnsl.networkutopia.com</a>, NS)<br />(<a href="http://dnsl.networkutopia.com">dnsl.networkutopia.com</a>,  212.212.212.1, A)</p></blockquote><p>除此之外，你还需要确保用于Web服务器的类型A资源记录和用于邮件服务器的类型MX资源记录被输入到你的权威DNS服务器中。</p><h1 id="六-p2p应用"><a class="markdownIt-Anchor" href="#六-p2p应用"></a> 六、P2P应用</h1><p>P2P体系结构不同于客户-服务器体系结构，成对间歇地主机（称为对等方）彼此直接通信。有两种特别适合于P2P设计的应用。</p><ul><li>文件分发，其中应用程序从单个源向大量的对等方分发一个文件。</li><li>分布在大型对等方社区中的数据库。</li></ul><h2 id="61-p2p文件分发"><a class="markdownIt-Anchor" href="#61-p2p文件分发"></a> 6.1 P2P文件分发</h2><h3 id="611-p2p体系结构的扩展"><a class="markdownIt-Anchor" href="#611-p2p体系结构的扩展"></a> 6.1.1 P2P体系结构的扩展</h3><blockquote><p>假设，<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="bold-italic">u</mi><mi mathvariant="bold-italic">s</mi></msub></mrow><annotation encoding="application/x-tex">\bm{u_s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.59444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.161108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord boldsymbol mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></span>表示服务器接入链路的上载速率；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="bold-italic">u</mi><mi mathvariant="bold-italic">i</mi></msub></mrow><annotation encoding="application/x-tex">\bm{u_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.59444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33528199999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord boldsymbol mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></span>表示第i个对等方接入链路的上载速率；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="bold-italic">d</mi><mi mathvariant="bold-italic">i</mi></msub></mrow><annotation encoding="application/x-tex">\bm{d_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33528199999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord boldsymbol mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></span>表示第i个对等方接入链路的上载速率；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold-italic">F</mi></mrow><annotation encoding="application/x-tex">\bm{F}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.15972em;">F</span></span></span></span></span></span>表示被分发的文件长度（以比特计）；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold-italic">N</mi></mrow><annotation encoding="application/x-tex">\bm{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.11424em;">N</span></span></span></span></span></span>表示要获得的该文件副本的对等方的数量；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold-italic">D</mi></mrow><annotation encoding="application/x-tex">\bm{D}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03194em;">D</span></span></span></span></span></span>是所有N个对等方得到该文件的副本所需要的时间。</p></blockquote><p>对于客户-服务器体系结构，</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo>≥</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">{</mo><mfrac><mrow><mi>N</mi><mi>F</mi></mrow><msub><mi>u</mi><mi>s</mi></msub></mfrac><mo separator="true">,</mo><mfrac><mi>F</mi><msub><mi>d</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mfrac><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">D \ge max \{  \frac {NF}{u_s},  \frac {F}{d_{min}}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.19633em;vertical-align:-0.8360000000000001em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">{</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">}</span></span></span></span></span></p><p>对于P2P体系结构，</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo>≥</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">{</mo><mfrac><mi>F</mi><msub><mi>u</mi><mi>s</mi></msub></mfrac><mo separator="true">,</mo><mfrac><mi>F</mi><msub><mi>d</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mfrac><mo separator="true">,</mo><mfrac><mrow><mi>N</mi><mi>F</mi></mrow><mrow><msub><mi>u</mi><mi>s</mi></msub><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>u</mi><mi>i</mi></msub></mrow></mfrac><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">D \ge max \{  \frac {F}{u_s}, \frac {F}{d_{min}}, \frac {NF}{u_s+\sum_{i=1}^N u_i}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.5312710000000003em;vertical-align:-1.170941em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">{</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.128769em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.170941em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">}</span></span></span></span></span></p><p>二者分发时间对比如下图，</p><p><img src="/img/cn/cn2.13.png" alt="P2P和客户-服务器体系结构的分发时间" /></p><h3 id="612-bittorrent"><a class="markdownIt-Anchor" href="#612-bittorrent"></a> 6.1.2 BitTorrent</h3><p>BitTorrent是一种用于文件分发的流行<strong>P2P协议</strong>。在BitTorrent中，参与一个特定文件分发的所有对等方的集合被称为一个<strong>洪流</strong>（torrent）。在一个洪流中的对等方彼此下载等长度的<strong>文件块</strong>（chunk），一般块长度为256KB。当一个对等方首次加入一个洪流时，它没有块。随着时间流逝，它累积了越来越多的块，当它<strong>下载</strong>块时，也为其他对等方<strong>上载</strong>了多个块。<strong>任何对等方可能在任何时候仅具有块的子集就离开洪流，并可以重新加入洪流。</strong></p><p>每个洪流有一个基础设施结点，称为<strong>追踪器</strong>（tracker）。当一个对等方加入该洪流中时，它向追踪器注册自己，并周期性地通知追踪器它仍然在该洪流中。以这种方式，追踪器跟踪正参与在洪流中的对等方。</p><p>当一个新的对等方A加入该洪流时，追踪器随机地从参与对等方的集合中选择对等方的一个子集，并将这些对等方的IP地址发给A。A会尝试与它们<strong>创建并行的TCP连接</strong>，所有成功与A创建连接的对等方称为**“邻近对等方**”。随着时间流逝，它们中有些可能离开，而其余的对等方可能加入，因此，<strong>一个对等方的邻近对等方将随时间波动。</strong><br /><img src="/img/cn/cn2.14.png" alt="BitTorrent分发文件" /></p><p>在任何给定的时间，每个对等方将具有来自该文件的块子集，并且不同对等方具有不同的子集。A周期性地询问  每个邻近对等方具有的块列表，之后A可以对它还没有的块发出请求（TCP）。</p><p>A将做出两个重要决定：-请求哪些块？-为哪些邻近对等方发送块？</p><ul><li>在决定请求哪些块的过程中，A会使用一种称为最<strong>稀缺优先</strong>的技术。思路是，针对它没有的块在它的邻居中决定最稀缺的块，并首先请求最稀缺的块。这样，最稀缺的块得到更为迅速地分发，其目标是均衡每个块在洪流中地副本数量。</li><li>为了决定响应哪个请求，A根据当前能够以最高速率向它提供数据的邻居给出优先权。</li></ul><h2 id="62-分布式散列表"><a class="markdownIt-Anchor" href="#62-分布式散列表"></a> 6.2 分布式散列表</h2><p>在P2P系统中，每个P2P对等方将保持（键，值）对仅占总体的一个小子集，并且允许任何一个对等方用一个特别的键来查询该分布式数据库。分布式数据库则将定位拥有该相应（键，值）对的对等方，然后向查询的对等方返回该（键，值）对。任何对等方也将允许在数据库中插入新键-值对。这样一种分布式数据库被称为<strong>分布式散列表</strong>（DHT）。</p><p>详细内容以后需要再补</p><h1 id="七-tcp套接字编程"><a class="markdownIt-Anchor" href="#七-tcp套接字编程"></a> 七、TCP套接字编程</h1><h2 id="71-udp套接字编程"><a class="markdownIt-Anchor" href="#71-udp套接字编程"></a> 7.1 UDP套接字编程</h2><p><img src="/img/cn/cn2.15.png" alt="UDP 客户 / 服务器程序使用的套接字函数" /></p><p>以下代码演示客户如何使用UDP套接字向服务器发送消息：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## UDPClient.py</span><br><span class="hljs-comment"># socket模块形成了在Python中所有网络通信的基础</span><br><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># 提供服务器的IP地址或主机名</span><br>serverName = <span class="hljs-string">&#x27;hostname&#x27;</span><br><span class="hljs-comment"># 置入端口号</span><br>serverPort = <span class="hljs-number">12000</span><br><span class="hljs-comment"># 创建客户的套接字，第一个参数指示了地址簇，第二个参数指示它是一个UDP套接字</span><br>clientSocket = socket(AF_INET, SOCK_DGRAM)<br><span class="hljs-comment"># 提示用户输入报文</span><br>message = raw_input(<span class="hljs-string">&#x27;Input lowercase sentence:&#x27;</span>)<br><span class="hljs-comment"># 经一个UDP套接字发送报文</span><br>clientSocket.sendto(message,(serverName, serverPort))<br><span class="hljs-comment"># 将服务器传回的报文置入到变量中</span><br>modifiedMessage, serverAddress = clientSocket, recvfrom(<span class="hljs-number">2048</span>)<br><span class="hljs-comment"># 打印输出报文</span><br><span class="hljs-built_in">print</span> modifiedMessage<br><span class="hljs-comment"># 关闭套接字，关闭进程</span><br>clientSocket.close()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## UDPServer.py</span><br><span class="hljs-comment"># socket模块形成了在Python中所有网络通信的基础</span><br><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># 置入端口号</span><br>serverPort = <span class="hljs-number">12000</span><br><span class="hljs-comment"># 创建服务器的套接字，第一个参数指示了地址簇，第二个参数指示它是一个UDP套接字</span><br>serverSocket = socket(AF_INET, SOCK_DGRAM)<br><span class="hljs-comment"># 将端口号与套接字绑定在一起</span><br>serverSocket.bind((<span class="hljs-string">&quot;, serverPort))</span><br><span class="hljs-string">print &quot;</span>The server <span class="hljs-keyword">is</span> ready to receive<span class="hljs-string">&quot;</span><br><span class="hljs-string"># 该循环允许UDPServer无限期地接收并处理来自客户的分组</span><br><span class="hljs-string">while true:</span><br><span class="hljs-string"># 将分组数据和客户地址置入</span><br><span class="hljs-string">message, clientAddress = serverSocket.recvfrom(2048)</span><br><span class="hljs-string"># 将数据小写转换为大写</span><br><span class="hljs-string">modifiedMessage = message.upper()</span><br><span class="hljs-string"># 将所得分组发送给服务器的套接字</span><br><span class="hljs-string">serverSocket.sendto(modifiedMessage, clientAddress)</span><br></code></pre></td></tr></table></figure><h2 id="72-tcp套接字编程"><a class="markdownIt-Anchor" href="#72-tcp套接字编程"></a> 7.2 TCP套接字编程</h2><p>TCP是一个面向连接的协议。在客户和服务器能够开始互相发送数据之前，它们先要握手和创建一个TCP连接（客户套接字和服务器套接字）。</p><p><img src="/img/cn/cn2.16.png" alt="TCP 客户 / 服务器程序使用的套接字函数" /></p><p>以下代码演示客户如何使用TCP套接字向服务器发送消息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br>serverName = <span class="hljs-string">&#x27;servername&#x27;</span><br>serverPort = <span class="hljs-number">12000</span><br><span class="hljs-comment"># 创建客户的套接字，第一个参数指示了地址簇，第二个参数指示它是一个TCP套接字</span><br>clientSocket = socket(AF_INET, SOCK_STREAM)<br><span class="hljs-comment"># 执行三次握手，并创建起一条TCP连接</span><br>clientSocket.connect((serverName, serverPort))<br><span class="hljs-comment"># 提示用户输入报文</span><br>sentence = raw_input(<span class="hljs-string">&#x27;Input lowercase sentence&#x27;</span>)<br><span class="hljs-comment"># 通过套接字进入TCP连接发送报文</span><br>clientSocket.send(sentence)<br><span class="hljs-comment"># 将服务器传回的报文置入到变量中</span><br>modifiedSentence = clientSocket.recv(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;From Server:&#x27;</span>, modifiedSentence<br>clientSocket.close()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## TCPServer.py</span><br><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br>serverPort = <span class="hljs-number">12000</span><br><span class="hljs-comment"># 创建服务器的套接字，第一个参数指示了地址簇，第二个参数指示它是一个UDP套接字</span><br>serverSocket = socket(AF_INET, SOCK_DGRAM)<br><span class="hljs-comment"># 将端口号与套接字绑定在一起</span><br>serverSocket.bind((<span class="hljs-string">&quot;, serverPort))</span><br><span class="hljs-string"># 等待并聆听某个客户敲门，参数定义了请求连接的最大数（至少为1）</span><br><span class="hljs-string">serverSocket.listen(1)</span><br><span class="hljs-string">print &quot;</span>The server <span class="hljs-keyword">is</span> ready to receive<span class="hljs-string">&quot;</span><br><span class="hljs-string"># 该循环允许TCPServer无限期地接收并处理来自客户的分组</span><br><span class="hljs-string">while true:</span><br><span class="hljs-string"># 创建一个新套接字，由这个特定用户专用</span><br><span class="hljs-string">connectionSocket, addr = serverSocket.accept()</span><br><span class="hljs-string"># 将分组数据和客户地址置入</span><br><span class="hljs-string">sentence = connectionSocket.recv(1024)</span><br><span class="hljs-string"># 将数据小写转换为大写</span><br><span class="hljs-string">capitalizedSentence = sentence.upper()</span><br><span class="hljs-string"># 将所得分组发送给服务器的套接字</span><br><span class="hljs-string">connectionSocket.send(capitalizedSentence)</span><br><span class="hljs-string">connectionSocket.close()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
      <category>自顶向下方法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++基础语法</title>
    <link href="/2022/03/23/Cpp2/"/>
    <url>/2022/03/23/Cpp2/</url>
    
    <content type="html"><![CDATA[<h1 id="c基础语法"><a class="markdownIt-Anchor" href="#c基础语法"></a> C++基础语法</h1><h2 id="1-输入输出"><a class="markdownIt-Anchor" href="#1-输入输出"></a> 1、输入输出</h2><h3 id="11-使用cout进行输出"><a class="markdownIt-Anchor" href="#11-使用cout进行输出"></a> 1.1 使用cout进行输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; <span class="hljs-string">&quot;Come up and C++ me some time.&quot;</span>；<br></code></pre></td></tr></table></figure><p>双括号引起的部分是要打印的字符串，&lt;&lt;符号表示该语句把整个字符串发送给cout，它将一个字符串插入到了输出流中。<br />cout在头文件iostream中定义。</p><h3 id="12-控制符endl"><a class="markdownIt-Anchor" href="#12-控制符endl"></a> 1.2 控制符endl</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>endl表示重起一行，在输出流中插入endl将导致光标移到下一行开头。<br />endl在头文件iostream中定义。</p><h3 id="13-换行符"><a class="markdownIt-Anchor" href="#13-换行符"></a> 1.3 换行符</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; <span class="hljs-string">&quot;Pluto is a dwarf planet.\n&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;Pluto is a dwarf planet.&quot;</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>endl确保程序继续运行前刷新输出（将其立即显示在屏幕上），使用\n在某些系统中可能在输入信息后才能出现提示。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python的一些常用函数</title>
    <link href="/2022/03/23/python1/"/>
    <url>/2022/03/23/python1/</url>
    
    <content type="html"><![CDATA[<h1 id="python的一些常用函数"><a class="markdownIt-Anchor" href="#python的一些常用函数"></a> python的一些常用函数</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>因为最近在准备蓝桥杯python组的比赛，特罗列总结出python的一些常用函数。后续随着使用也会陆续整理。</p><h2 id="内置函数"><a class="markdownIt-Anchor" href="#内置函数"></a> 内置函数</h2><h3 id="1-数学函数"><a class="markdownIt-Anchor" href="#1-数学函数"></a> 1 数学函数</h3><p>1.1 abs()：取绝对值</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">abs</span>(-<span class="hljs-number">10</span>))  <span class="hljs-comment">##10</span><br></code></pre></td></tr></table></figure><p>1.2 divmod()：同时取商和余数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">divmod</span>(<span class="hljs-number">7</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment">##(3, 1)</span><br></code></pre></td></tr></table></figure><p>1.3 sum()：求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])  <span class="hljs-comment">##6</span><br></code></pre></td></tr></table></figure><p>1.4 round()：四舍五入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">5.1</span>))  <span class="hljs-comment">##5</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">5.5</span>))  <span class="hljs-comment">##6</span><br></code></pre></td></tr></table></figure><p>1.5 pow(m, n)：计算m的n次方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment">##8</span><br></code></pre></td></tr></table></figure><p>1.6 min()/max()：最小(大)值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(<span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>))  <span class="hljs-comment">##2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(<span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>))  <span class="hljs-comment">##9</span><br></code></pre></td></tr></table></figure><h3 id="2-数据转换函数"><a class="markdownIt-Anchor" href="#2-数据转换函数"></a> 2 数据转换函数</h3><p>2.1 hex()：十进制转换成十六进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">100</span>))  <span class="hljs-comment">##0x64</span><br></code></pre></td></tr></table></figure><p>2.2 oct()：十进制转换成八进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">oct</span>(<span class="hljs-number">100</span>))  <span class="hljs-comment">##0o144</span><br></code></pre></td></tr></table></figure><p>2.3 bin()：十进制转换成二进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-number">100</span>))  <span class="hljs-comment">##0b1100100</span><br></code></pre></td></tr></table></figure><p>2.4 bool()：将指定参数类型转换成布尔类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">1</span>))  <span class="hljs-comment">##True</span><br></code></pre></td></tr></table></figure><p>2.5 ord()：获取单个字符的ASCII数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;A&quot;</span>))  <span class="hljs-comment">##65</span><br></code></pre></td></tr></table></figure><p>2.6 float()：转换成浮点数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(<span class="hljs-number">10</span>))  <span class="hljs-comment">##10.0</span><br></code></pre></td></tr></table></figure><p>2.7 chr() ：转换一个整数并返回所对应的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">65</span>))  <span class="hljs-comment">##A</span><br></code></pre></td></tr></table></figure><p>2.8 list()： 将可迭代对象转换为列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)))  <span class="hljs-comment">##[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></code></pre></td></tr></table></figure><p>2.9 upper()/lower()：大小写转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;hELLO world!&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (<span class="hljs-built_in">str</span>.upper())<br>HELLO WORLD!<br></code></pre></td></tr></table></figure><h3 id="3-对象创建函数"><a class="markdownIt-Anchor" href="#3-对象创建函数"></a> 3 对象创建函数</h3><h3 id="4-迭代器操作函数"><a class="markdownIt-Anchor" href="#4-迭代器操作函数"></a> 4 迭代器操作函数</h3><h2 id="基本常用函数"><a class="markdownIt-Anchor" href="#基本常用函数"></a> 基本常用函数</h2><h2 id="文件操作"><a class="markdownIt-Anchor" href="#文件操作"></a> 文件操作</h2><h3 id="1-最基本的文件操作"><a class="markdownIt-Anchor" href="#1-最基本的文件操作"></a> 1 最基本的文件操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;E:\hello.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>res = []<br>s = fp.readlines()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>    res.append(i.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)) <span class="hljs-comment">#使用strip()去掉换行符，如果不去的话会把‘\n’也读进来</span><br>fp.close() <span class="hljs-comment">#记得要关闭连接，养成良好习惯</span><br><br><span class="hljs-built_in">print</span>(res[:])<br></code></pre></td></tr></table></figure><h3 id="2-字符串操作"><a class="markdownIt-Anchor" href="#2-字符串操作"></a> 2 字符串操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">fp =  <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;E:\hello.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>res = [s.strip(<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> fp.readlines()]<br>fp.close()<br><span class="hljs-built_in">print</span>(res[:])<br></code></pre></td></tr></table></figure><h2 id="模块"><a class="markdownIt-Anchor" href="#模块"></a> 模块</h2><h3 id="1-datetime模块"><a class="markdownIt-Anchor" href="#1-datetime模块"></a> 1 datetime模块</h3><p>1.1 日期对象——date类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetimee<br><br>d = datetime.date(<span class="hljs-number">2019</span>,<span class="hljs-number">1</span>,<span class="hljs-number">11</span>)<span class="hljs-comment"># 年，月，日</span><br><span class="hljs-built_in">print</span>(d)  <span class="hljs-comment">## 2019-01-11</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br>a1 = datetime.date(<span class="hljs-number">2019</span>,<span class="hljs-number">8</span>,<span class="hljs-number">26</span>)<br><span class="hljs-built_in">print</span>(a1.isocalendar())<br><span class="hljs-built_in">print</span>(a1.isoformat())<br><span class="hljs-built_in">print</span>(a1.isoweekday())<br><span class="hljs-built_in">print</span>(a1.weekday())<br><span class="hljs-built_in">print</span>(a1.replace(<span class="hljs-number">2018</span>,<span class="hljs-number">4</span>,<span class="hljs-number">30</span>))<br><span class="hljs-comment">#(2019, 35, 1)</span><br><span class="hljs-comment">#2019-08-26</span><br><span class="hljs-comment">#1</span><br><span class="hljs-comment">#0</span><br><span class="hljs-comment">#2018-04-30</span><br></code></pre></td></tr></table></figure><p>1.2 时间对象——time类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><br>t = datetime.time(<span class="hljs-number">20</span>, <span class="hljs-number">36</span>, <span class="hljs-number">15</span>, <span class="hljs-number">1</span>)<span class="hljs-comment"># 时，分，秒，毫秒</span><br><span class="hljs-built_in">print</span>(t)  <span class="hljs-comment">## 20：36：15.000001</span><br></code></pre></td></tr></table></figure><p>1.3 日期时间对象——datetime类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br>now = datetime.now()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前日期时间是：&#x27;</span>,now)  <span class="hljs-comment">## 2022-03-27 13:45:53.536404</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前日期是：&#x27;</span>,now.date())  <span class="hljs-comment">## 2022-03-27</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前时间是：&#x27;</span>,now.time())  <span class="hljs-comment">## 13:45:53.536404</span><br>```e<br>日期时间转化为时间戳<br>```python<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-built_in">print</span>(datetime.now().timestamp())  <span class="hljs-comment">##1627700208.446621</span><br></code></pre></td></tr></table></figure><p>时间戳转化为日期时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-built_in">print</span>(datetime.fromtimestamp(<span class="hljs-number">1627700208.446621</span>))  <span class="hljs-comment">## 2022-03-27 13:45:53.536404</span><br></code></pre></td></tr></table></figure><p>日期时间对象转字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-built_in">print</span>(datetime.now().strftime(<span class="hljs-string">&quot;%Y+%m+%d&quot;</span>))  <span class="hljs-comment">## 2022+03+27</span><br></code></pre></td></tr></table></figure><p>字符串转日期时间对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br>a = datetime.strptime(<span class="hljs-string">&#x27;2022-5-22  15:23:38&#x27;</span>, <span class="hljs-string">&#x27;%Y-%m-%d  %H:%M:%S&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))  <span class="hljs-comment">## &lt;class &#x27;datatime.datatime&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment">## 2022-5-22  15:23:38</span><br></code></pre></td></tr></table></figure><p>1.4 时间间隔对象——timedelta类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><br>now = datetime.datetime.now()<br>a = datetime.timedelta(hours=<span class="hljs-number">8</span>,minutes=<span class="hljs-number">20</span>,seconds=<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))  <span class="hljs-comment">## &lt;class &#x27;datatime.timedelta&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(now - a)  <span class="hljs-comment">## 2021-07-31 02:58:29.424161</span><br><span class="hljs-built_in">print</span>(now + a)  <span class="hljs-comment">## 2021-07-31 19:38:49.424161</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++的一些特点</title>
    <link href="/2022/03/22/Cpp1/"/>
    <url>/2022/03/22/Cpp1/</url>
    
    <content type="html"><![CDATA[<h1 id="c的一些特点"><a class="markdownIt-Anchor" href="#c的一些特点"></a> C++的一些特点</h1><h2 id="1-main函数"><a class="markdownIt-Anchor" href="#1-main函数"></a> 1 main()函数</h2><p><strong>1.1</strong> 主函数必须是int main()或int main(void)<br /><em>原因</em>：运行cpp程序时，通常从main()函数开始执行。因此，如果没有main()，程序将不完整，编译器将指出未定义main()函数。</p><p><strong>1.2</strong> main()最后可以不返回0<br /><em>原因</em>：ANSI/ISO C++标准为，如果编译器到达main()函数末尾时没有遇到返回语句，则认为main()函数以return 0结尾。</p><h2 id="2-注释"><a class="markdownIt-Anchor" href="#2-注释"></a> 2 注释</h2><p><strong>2.1</strong> 注释以“//”打头，到行尾结束<br /><strong>2.2</strong> 注释可以位于单独一行，也可和代码位于同一行</p><h2 id="3-预处理器和头文件名"><a class="markdownIt-Anchor" href="#3-预处理器和头文件名"></a> 3 预处理器和头文件名</h2><p><strong>3.1</strong> 如果程序要使用某些工具，要在前几行标明#include…<br /><em>原因</em>：C++和C一样，使用一个预处理器，在主编译之前对源文件进行处理，例如在源代码被编译之前，替换或添加文本。</p><p><strong>3.2</strong> 头文件名没有扩展名</p><h2 id="4-名称空间"><a class="markdownIt-Anchor" href="#4-名称空间"></a> 4 名称空间</h2><p><strong>4.1</strong> using namespace std;<br />原因：有助于组织程序，在调用同名函数时可以指定哪个名称空间的函数,如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp">Microflop::<span class="hljs-built_in">wanda</span>(<span class="hljs-string">&quot;go dancing?&quot;</span>);<br>Piscine::<span class="hljs-built_in">wanda</span>(<span class="hljs-string">&quot;a fish named Desire&quot;</span>);<br></code></pre></td></tr></table></figure><p>如果省略了这条语句，那么就要使用如下语句编码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::cout &lt;&lt; <span class="hljs-string">&quot;Come up and C++ me some time.&quot;</span>;<br>std::cout &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>更好的办法是，只是通过using声明使所需名称可用，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::endl;<br><span class="hljs-keyword">using</span> std::cin;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>01：计算机网络和因特网</title>
    <link href="/2022/03/21/Cn1/"/>
    <url>/2022/03/21/Cn1/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><blockquote><p><em><strong>纸上得来终觉浅，绝知此事要躬行。</strong></em></p></blockquote><div class="code-wrapper"><pre><code class="hljs">在本专栏中，我们将使用*公共因特网*（一种特定的计算机网络）作为讨论计算机网络机器协议的主要载体。</code></pre></div><h1 id="一-因特网网络的网络"><a class="markdownIt-Anchor" href="#一-因特网网络的网络"></a> 一、因特网：网络的网络</h1><blockquote><p>何为因特网？可以有两种解释：<br />——构成因特网的基本硬件和软件组件<br />——为分布式应用提供服务的联网基础设施</p></blockquote><p>下面我们分别以这两方面作为切入点，剖析因特网</p><h2 id="11-具体构成描述"><a class="markdownIt-Anchor" href="#11-具体构成描述"></a> 1.1 具体构成描述</h2><h3 id="111-端系统-通信链路-分组交换机-分组简介"><a class="markdownIt-Anchor" href="#111-端系统-通信链路-分组交换机-分组简介"></a> 1.1.1 端系统、通信链路、分组交换机、分组简介</h3><p>用因特网术语来说，所有与它相联系的设备统称为<strong>主机</strong>（host）或<strong>端系统</strong>（end system）。</p><blockquote><p>端系统通过<strong>通信链路</strong>（communication link）和<strong>分组交换机</strong>（packet switch）连接到一起。</p></blockquote><p><em>通信链路</em>。它们由不同类型的物理媒体（同轴电缆、铜线、光纤和无线电频谱）组成。不同的链路有不同的传输速率（以bit/s或bps度量）。当一台端系统要向另一台端系统发送数据时，发送端系统将数据分段，并为每段加上首部字节。由此形成的信息包我们将其称为<strong>分组</strong>（packet）。这些分组通过网络发送到目的端系统，在那里被装配成初始数据。</p><p><em>分组交换机</em>。分组交换机从它的一条入通信链路接收到达的分组，并从它的一条出通信链路转发该分组。在当今的因特网中，两种最著名的类型是<strong>路由器</strong>（router）和<strong>链路层交换机</strong>（link-layer switch）。</p><blockquote><p><strong>路由器</strong>通常用于网络核心中<br /><strong>链路层交换机</strong>通常用于接入网中</p></blockquote><p>从发送端系统到接收端系统，一个分组所经历的一系列通信链路和分组交换机称为通过该网络的<strong>路径</strong>（route或path）。</p><p>用于传送分组的分组交换网络在许多方面类似于承载运输车辆的运输网络，该网络包括了高速公路、公路和立交桥。当工厂需要将大量货物搬运至远方的仓库时，工厂就要将货物分开装上卡车车队，通过高速公路、公路和立交桥将货物搬运至仓库。在这一过程中，各个环节扮演的角色如下表所示：</p><table><thead><tr><th>角色</th><th>环节</th></tr></thead><tbody><tr><td>分组</td><td>卡车</td></tr><tr><td>通信链路</td><td>高速公路、公路</td></tr><tr><td>分组交换机</td><td>立交桥</td></tr><tr><td>端系统</td><td>工厂、仓库</td></tr></tbody></table><h3 id="112-isp简介"><a class="markdownIt-Anchor" href="#112-isp简介"></a> 1.1.2 ISP简介</h3><p>端系统通过<strong>因特网服务提供商</strong>（ISP）接入因特网。每个ISP是一个由多个分组交换机和多段通信链路组成的网络。各ISP为端系统提供各种不同类型的网络接入（线缆调制解调器或如DSL的住宅宽带接入、高速局域网接入、无线接入和56kbps拨号调制解调器接入）。</p><p>因特网将端系统彼此互联，因此ISP也必须互联。</p><blockquote><p><strong>低层ISP</strong>通过国家、国际的高层ISP（Level 3 Communications、AT&amp;T、Sprint和NTT）互联；<br /><strong>高层ISP</strong>是由通过高速光纤链路互联的高速路由器组成的</p></blockquote><h3 id="113-协议简介"><a class="markdownIt-Anchor" href="#113-协议简介"></a> 1.1.3 协议简介</h3><p>端系统、分组交换机和其他因特网部件都要运行一系列协议（protocol），这些协议控制因特网中信息的接收和发送。<strong>传输控制协议</strong>（TCP）和<strong>网络协议</strong>（IP）是因特网中两个最为重要的协议。IP协议定义了在路由器和端系统之间发送和接收的分组格式。因特网的主要协议统称为TCP/IP。</p><p>鉴于因特网协议的重要性，每个人就各个协议及其作用取得一致认识很重要，这样人们就能创造协同工作的系统和产品。自然而然，我们引入了因特网<strong>标准</strong>（Internet standard），它由因特网工程任务组（IETF）研发。IETF的标准文档称为<strong>请求评论</strong>（RFC），它们定义了TCP、IP、HTTP（用于Web）和SMTP（用于电子邮件）等协议。当然，其他组织也在制定用于网络组件的标准。</p><h2 id="12-服务描述"><a class="markdownIt-Anchor" href="#12-服务描述"></a> 1.2 服务描述</h2><blockquote><p>何为因特网？可以有两种解释：<br />——构成因特网的基本硬件和软件组件<br />——为分布式应用提供服务的联网基础设施</p></blockquote><p>上文以前者作为切入点，现在我们从<em>应用程序提供服务的基础设施</em>的角度来描述因特网。</p><p>我们平时接触到的大部分应用程序，例如电子邮件、Web冲浪、即时讯息等等，它们称为<strong>分布式应用程序</strong>（distributed application），因为它们涉及多台相互交换数据的端系统。</p><p>与因特网相连的端系统提供了一个<strong>应用程序编程接口</strong>（API）。API规定了运行在一个端系统上的软件请求因特网基础设施向运行在另一个端系统上的特定目的地软件交付数据的方式。</p><p>举个例子，Alice要向Bob寄一封信，Alice不能写完信后就将信丢出窗外，邮政服务要求Alice将信放入 信封并贴上邮票，还要投进邮箱中。对应到因特网中，就有如下类比：</p><table><thead><tr><th>角色</th><th>环节</th></tr></thead><tbody><tr><td>软件A</td><td>Alice</td></tr><tr><td>软件B</td><td>Bob</td></tr><tr><td>API</td><td>邮政服务规定</td></tr></tbody></table><h2 id="13-什么是协议"><a class="markdownIt-Anchor" href="#13-什么是协议"></a> 1.3 什么是协议</h2><h3 id="131-人类活动类比"><a class="markdownIt-Anchor" href="#131-人类活动类比"></a> 1.3.1 人类活动类比</h3><blockquote><p>我们用一张图生动形象的表达协议的含义</p></blockquote><p><a href="https://img-blog.csdnimg.cn/86635908c0e14a5aa3909b7848af7ccb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbTBfNTI3NTUwNTk=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center">图为人类协议和计算机网络协议</a></p><p>如果人们使用不同的协议（例如，一个人讲礼貌而另一个人不讲礼貌），该协议就不能互动，因而不能完成有用的工作。在网络中这个道理同样成立。即为了完成一项工作，要求两个（或多个）通信实体运行相同协议。</p><h3 id="132-网络协议"><a class="markdownIt-Anchor" href="#132-网络协议"></a> 1.3.2 网络协议</h3><blockquote><p>在因特网中，凡是涉及两个或多个远程通信实体的所有活动都受<strong>协议</strong>的制约。</p></blockquote><p>例如，在两台物理上连接的计算机中，硬件实现的协议控制了在两块网络接口卡间的“线上”的比特流；在端系统中，拥塞控制协议控制了在发送方和接收方之间传输的分组发送的速率。</p><p>从上述的人类活动和网络的例子中可见，报文的交换以及发送和接收这些报文时所采取的动作是定义一个协议的关键元素：</p><blockquote><p>一个<strong>协议</strong>定义了在两个或多个通信实体之间交换的<strong>报文格式和次序</strong>，以及报文发送和（或）接收一条报文或其他事件所采取的<strong>动作</strong>。</p></blockquote><h1 id="二-网络边缘"><a class="markdownIt-Anchor" href="#二-网络边缘"></a> 二、网络边缘</h1><p>我们通常把与因特网相连的计算机和其他设备称为端系统，因为它们位于<strong>互联网的边缘</strong>，故而被称为端系统。端系统也称为<strong>主机</strong>，因为它们容纳（即运行）应用程序，如Web浏览器程序、Web服务器程序、电子邮件阅读程序或电子邮件服务器程序等。端系统有时又被进一步划分为两类：<strong>客户</strong>（client）和<strong>服务器</strong>（server）。</p><blockquote><p><strong>客户</strong>相当于是桌面PC、移动PC和智能手机等，<br /><strong>服务器</strong>相当于是更为强大的机器，用于存储和发布Web页面、流视频、中继电子邮件等。</p></blockquote><h2 id="21-接入网"><a class="markdownIt-Anchor" href="#21-接入网"></a> 2.1 接入网</h2><blockquote><p><strong>接入网</strong>是指将端系统连接到其<strong>边缘路由器</strong>的<strong>物理链路</strong></p></blockquote><p>边缘路由器是端系统到任何其他远程端系统的路径上的<strong>第一台路由器</strong>。</p><p><a href="https://img-blog.csdnimg.cn/0adfe3517b9f4caaad181ea94136954e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbTBfNTI3NTUwNTk=,size_20,color_FFFFFF,t_70,g_se,x_16">图为端系统交互的大致组成部分</a></p><h3 id="211-家庭接入dsl-电缆-ftth-拨号和卫星"><a class="markdownIt-Anchor" href="#211-家庭接入dsl-电缆-ftth-拨号和卫星"></a> 2.1.1 家庭接入：DSL、电缆、FTTH、拨号和卫星</h3><p>以前，宽带住宅接入有两种类型：<strong>数字用户线</strong>（DSL）和<strong>电缆</strong>。</p><p><a href="https://img-blog.csdnimg.cn/c9e80d89bf684f809beca1e20b49e770.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbTBfNTI3NTUwNTk=,size_20,color_FFFFFF,t_70,g_se,x_16">图为DSL因特网接入</a></p><p>除了DSL电话接入，还有利用有线电视公司现有有线电视基础设施的电缆因特网接入，这里不再赘述，读者可自行查阅。目前主流的上网方式是<strong>光纤到户</strong>（FTTH），即从本地中心局直接到家庭提供一条光纤路径。</p><p><img src="/img/cn/cn1.4.png" alt="图为FTTH因特网接入" /></p><h3 id="212-企业和家庭接入以太网和wifi"><a class="markdownIt-Anchor" href="#212-企业和家庭接入以太网和wifi"></a> 2.1.2 企业（和家庭）接入：以太网和WIFI</h3><p>在公司和大学校园以及在越来越多的家庭环境中，通常是用局域网（LAN）将端用户连接到边缘路由器，以太网是目前最为流行的接入技术。使用以太网接入，用户通常以100Mbps速率接入以太网交换机，而服务器可能具有1Gbps甚至10Gbps的接入速率。</p><p><img src="/img/cn/cn1.5.png" alt="图为以太网因特网接入" /></p><p>在无线LAN环境中，无线用户从/到一个接入点发送/接收分组，该接入点与企业网连接，该企业网再与有线因特网相连。基于IEEE 802.11的技术的无线LAN称为WiFi。</p><h2 id="22-物理媒体"><a class="markdownIt-Anchor" href="#22-物理媒体"></a> 2.2 物理媒体</h2><p>物理媒体划分为两类：<strong>导引型媒体</strong>（guided media）和<strong>非导引型媒体</strong>（unguided meidia）。</p><blockquote><p>导引型媒体，电波沿着固体媒体前行，如光缆、双绞铜线或同轴电缆。<br />非导引型媒体，电波在空气或外层空间中传播，如无线局域网或数字卫星频道。</p></blockquote><p>具体物理媒体介绍暂且不更，有兴趣者可自行查阅。</p><h1 id="三-网络核心"><a class="markdownIt-Anchor" href="#三-网络核心"></a> 三、网络核心</h1><p><strong>网络核心</strong>指互联因特网端系统的分组交换机和链路构成的网状网络。</p><h2 id="31-分组交换"><a class="markdownIt-Anchor" href="#31-分组交换"></a> 3.1 分组交换</h2><p>源端系统向目的端系统发送报文，源将长报文划分为一个个<strong>分组</strong>，每个分组都通过<strong>通信链路</strong>和<strong>分组交换机</strong>传送，分组以等于该链路<strong>最大传输速率</strong>的速度传输通过通信链路。因此，如果某源端系统或分组交换机经过一条链路发送一个L比特的分组，链路的传输速率为R比特/秒，则传输该分组的时间为L/R秒。</p><h3 id="311-存储转发运输"><a class="markdownIt-Anchor" href="#311-存储转发运输"></a> 3.1.1 存储转发运输</h3><blockquote><p><strong>存储转发运输</strong>，是指在交换机能够开始向输出链路传输该分组的第一个比特之前，必须接收到整个分组。</p></blockquote><p>多数分组交换机在链路的输入端使用<strong>存储转发运输</strong>（store-and-forward transmission）机制。</p><p>为了深刻理解存储转发运输，特举例说明（这里忽略传播时延），</p><blockquote><p>发送一个分组：<br />源在时刻0开始传输；<br />在时刻L/R，路由器接收到整个分组；<br />在时刻2L/R，路由器传输了整个分组，并已被目的地接收。<br />总时延为2L/R。</p></blockquote><blockquote><p>发送三个分组：<br />源在时刻0开始传输；<br />在时刻L/R，路由器开始转发第一个分组，源开始发送第二个分组；<br />在时刻2L/R，目的地收到第一个分组，路由器收到第二个分组；<br />在时刻3L/R，目的地收到前两个分组，路由器收到第三个分组；<br />在时刻4L/R，目的地接收全部分组。<br />总时延为4L/R。</p></blockquote><p>综上所诉，我们可以考虑N条速率均为R的链路组成的路径（所以，源和目的地之间有N-1台路由器），d（端时延）=N*L/R</p><h3 id="312-排队时延和分组丢失"><a class="markdownIt-Anchor" href="#312-排队时延和分组丢失"></a> 3.1.2 排队时延和分组丢失</h3><p>每个分组交换机有多条链路与之相连，对于每条相连的链路，该分组交换机具有一个<strong>输出缓存</strong>（output buffer）（也称为<strong>输出队列</strong>output queue），它用于存储路由器准备发往那条链路的分组。</p><p>如果到达的分组需要传输到的那条链路正在传输其他分组，到达的分组就要在输出缓存中等待，由此引起的时延叫做<strong>排队时延</strong>（queue delay）。这些时延是变化的，变化的程度取决于网络中的拥塞程度，如果分组到达时缓存空间已经满了，就会发生**分组丢失（丢包）（packet lost）**的情况，到达的分组或在排队的分组将被丢弃。</p><h3 id="313-转发表和路由选择协议"><a class="markdownIt-Anchor" href="#313-转发表和路由选择协议"></a> 3.1.3 转发表和路由选择协议</h3><p>在因特网中，每个端系统具有一个称为<strong>IP地址</strong>的地址。当源主机向目的端系统发送一个分组时，源在该分组的首部包含了目的地的IP地址。当一个分组到达路由器时，路由器检查该分组的目的地IP地址的<strong>一部分</strong>，再朝着目的地方向发送分组到达相邻的路由器，循环往复。每台路由器具有一个<strong>转发表</strong>（forwarding table），用于将目的地的一部分映射成为输出链路。</p><p>因特网具有一些特殊的<strong>路由选择协议</strong>（routing protocol），用于自动设置转发表。例如，一个路由选择协议可以决定每台路由器到每个目的地的最短路径，并使用这些最短路径结果来配置路由器中的转发表。</p><h2 id="32-电路交换"><a class="markdownIt-Anchor" href="#32-电路交换"></a> 3.2 电路交换</h2><blockquote><p>通过网络链路和交换机移动数据有两种基本方法：<strong>分组交换</strong>（packet switching）和<strong>电路交换</strong>（circuit switching）。</p></blockquote><p><strong>电路交换</strong>网络，预留了端系统间通信沿路径所需的资源（缓存，链路传输速率）；  例如需要顾客预定的餐馆。<br /><strong>分组交换</strong>网络，不预留。例如不需要预定但是要等号的餐馆。</p><p>举例说明电路交换网络。在一个网络中，用4条链路互联了4台电路交换机。每条链路有4条电路，因此每条链路能够支持4条并行连接。当两台主机要通信时，该网络在两台主机之间创建一条专用的端到端连接（end-to-end connection），该连接在连接期间获得该链路带宽的1/4部分。</p><h3 id="321-电路交换网中的复用"><a class="markdownIt-Anchor" href="#321-电路交换网中的复用"></a> 3.2.1 电路交换网中的复用</h3><blockquote><p>链路中的电路是通过<strong>频分复用</strong>（FDM）或<strong>时分复用</strong>（TDM）来实现的。</p></blockquote><p>对于FDM，链路的频谱由跨越链路创建的所有连接所共享，在连接期间链路为每条连接专用一个频段。在电话网络中，这个频段通常具有4kHZ的宽度，该频段的宽度叫做<strong>带宽</strong>（bandwidth）。</p><p>对于TDM，时间被划分为固定区间的<strong>帧</strong>，每帧被划分为固定数量的<strong>时隙</strong>。当网络跨越一条链路创建一条连接时，网络在每个帧中为该连接指定一个时隙。这些时隙专门由该连接单独使用，一个时隙（在每个帧内）可用于传输该连接的数据。一条电路的传输速率等于帧速率乘以一个时隙中的比特数量。</p><p>电路交换因为在<strong>静默期</strong>（silent period）专用电路空间而效率较低。</p><h3 id="322-分组交换与电路交换的对比"><a class="markdownIt-Anchor" href="#322-分组交换与电路交换的对比"></a> 3.2.2 分组交换与电路交换的对比</h3><p><strong>电路交换</strong>不考虑需求，而预先分配了传输链路的使用，这使得已分配而并不需要的链路时间未被利用。</p><p><strong>分组交换</strong>按需分配链路使用。链路传输能力将在所有用户之间逐分组地被共享，这些用户有分组需要在链路上传输。</p><p>分组交换是趋势。</p><h2 id="33-网络的网络"><a class="markdownIt-Anchor" href="#33-网络的网络"></a> 3.3 网络的网络</h2><p>端系统通过ISP与因特网相连，而ISP自身也必须互联，通过创建网络的网络解决这一问题。</p><p><img src="/img/cn/cn1.6.png" alt="图为ISP互联的等级结构" /></p><p>存在点（PoP）存在于等级结构的所有层次，但底层（接入ISP）除外。一个PoP只是提供商网络中的一台或多台路由器（在相同位置）群组，其中客户ISP能够与提供商ISP连接，客户网络能够从第三方通信提供商租用高速链路直接将路由器之一连接到位于该PoP的一台路由器。</p><p>任何ISP（除了第一层ISP）可以选择为多宿（multi-home），即可以与两个或更多提供商ISP连接。当一个ISP多宿时，即使它的提供商之一出现故障，它仍然能够继续发送和接收分组。</p><p>为了减少客户ISP支付给提供商ISP的费用，位于相同等级结构层次的邻近一对ISP能够对等（peer），使它们之间的所有流量经直接连接而不是通过上游的中间ISP传输。沿着这些相同路线，第三方公司创建一个因特网交换点（IXP），IXP是一个汇合点，多个ISP能够在这里共同对等。</p><p>内容提供商（如谷歌）通过创建自己的网络，不仅减少了向顶层ISP支付的费用，而且对其服务最终如何交付给端用户有了更多的控制。</p><h1 id="四-分组交换中的时延-丢包和吞吐量"><a class="markdownIt-Anchor" href="#四-分组交换中的时延-丢包和吞吐量"></a> 四、分组交换中的时延、丢包和吞吐量</h1><h2 id="41-分组交换网中的时延概述"><a class="markdownIt-Anchor" href="#41-分组交换网中的时延概述"></a> 4.1 分组交换网中的时延概述</h2><p>当分组从一个结点（端系统或路由器）沿着这条路径到后继结点，该分组在沿途的每个结点经受了几种不同类型的时延。其中最为重要的是<strong>结点处理时延</strong>（nodel processing delay）、<strong>排队时延</strong>（queueing delay）、<strong>传输时延</strong>（transmission delay）和<strong>传播时延</strong>（propagation delay），这些时延总体累加起来是<strong>结点总时延</strong>（total nodal delay）。</p><p><strong>时延的类型</strong></p><p>1 <strong>处理时延</strong><br />检查分组首部和决定将该分组导向何处所需要的时间是处理时延的一部分。它还包括其他因素，如检查比特级别差错所需要的时间。<br />通常是<em>微秒或更低</em>量级。</p><p>2 <strong>排队时延</strong><br />在队列中当分组在链路上等待传输时，它经受排队时延。一个特定分组的排队时延长度将取决于先期到达的正在排队等待向链路传输的分组数量。<br />通常是<em>毫秒到微秒</em>量级。</p><p>3 <strong>传输时延</strong><br />用L（比特）表示该分组的长度，用R（bps）表示从路由器A到B的链路传输速率，则传输时延为L/R。注意是路由器A将分组推向链路所需要的时间。<br />通常是<em>毫秒到微秒</em>量级。</p><p>4 <strong>传播时延</strong><br />当一个比特被推向链路，送往目标路由器时，从该链路的起点到目标路由器传播所需要的时间是传播时延。该传播速率取决于该链路的物理媒体（光纤、双绞铜线等），速率范围略小于光速。该传播时延等于两台路由器之间的距离除以传播速率，即d/s。<br />广域网中，通常是<em>毫秒</em>量级。</p><p>5 <strong>传输时延</strong>和<strong>传播时延</strong>的<strong>比较</strong><br />传输时延是分组长度和链路传输速率的函数；<br />传播时延是两台路由器之间距离的函数。</p><blockquote><p><strong>总时延</strong>由上述四种时延相加，在实际生活中每种时延可能变化很大。</p></blockquote><h2 id="42-排队时延和丢包"><a class="markdownIt-Anchor" href="#42-排队时延和丢包"></a> 4.2 排队时延和丢包</h2><p>令a表示分组到达队列的平均速率（a的单位是分组/秒，即pkt/s），R是传输速率，假定所有分组都是由L比特组成的，则比特到达分组的平均速率是La（bps）。比率La/R被称为<strong>流量强度</strong>。如果La/R&gt;1，则该队列将趋于无限增大。因此，<em>设计系统时流量强度不能大于1</em>。</p><p>如果<strong>流量强度</strong>接近于0，则几乎没有分组到达并且到达间隔很大，随着流量强度接近1，平均排队长度将变得越来越长。随着流量强度接近1，平均排队时延迅速增加。该强度的少量增加将导致时延大得多的增加。<br /><img src="/img/cn/cn1.7.png" alt="图为平均排队时延与流量强度的关系" /></p><p>在实际使用中，一条链路前的队列是有限的，其容量受限于路由器设计和使用成本，当分组到达满的队列时，路由器将丢弃这个分组，即<strong>丢包</strong>。丢包的份额随着流量强度的增加而增加，一个结点的性能不仅根据时延度量，还与丢包的概率度量。丢失的分组可能基于端到端的原则重传，以确保所有的数据最终传到目的地。</p><h2 id="43-端到端时延"><a class="markdownIt-Anchor" href="#43-端到端时延"></a> 4.3 端到端时延</h2><p>上一节研究了结点间的时延，还需要研究端到端的时延，这里不再赘述。除了上文介绍的几种时延，端系统中还存在着其他一些重要时延，例如，作为它的协议的一部分，希望向共享媒体传输分组的端系统可以有意地延迟它的传输以与其他端系统共享媒体。另一个重要的时延是<strong>媒体分组化时延</strong>。</p><h2 id="44-计算机网络中的吞吐量"><a class="markdownIt-Anchor" href="#44-计算机网络中的吞吐量"></a> 4.4 计算机网络中的吞吐量</h2><p>除了时延和丢包，计算机网络中另一个必不可少的性能测度是<strong>端到端吞吐量</strong>。在任何时间瞬间的<strong>瞬时吞吐量</strong>是端系统B接收到该文件的速率。在下载期间，如果文件由F比特组成，端系统B接收到所有文件用时T秒，则<strong>平均吞吐量</strong>是F/T（bps）。</p><p>对于简单的两链路的网络，其吞吐量是min|R1, R2|，这叫做瓶颈链路（bottleneck link）的传输速率。n条链路同理。<br /><img src="/img/cn/cn1.8.png" alt="图为两链路网络" /></p><p>吞吐量取决于数据流过的链路的传输速率，当没有其他干扰流量时，其吞吐量能够近似为沿着源和目的地之间路径的<strong>最小传输速率</strong>。</p><h1 id="五-协议层次及其服务模型"><a class="markdownIt-Anchor" href="#五-协议层次及其服务模型"></a> 五、协议层次及其服务模型</h1><h2 id="51-分层的体系结构"><a class="markdownIt-Anchor" href="#51-分层的体系结构"></a> 5.1 分层的体系结构</h2><h3 id="511-协议分层"><a class="markdownIt-Anchor" href="#511-协议分层"></a> 5.1.1 协议分层</h3><p>为了给网络协议的设计提供一个结构，网络设计者以<strong>分层</strong>（layer）的方式组织协议以及实现这些协议的网络硬件。每个协议属于这些层次之一，就像航线体系结构中的每种功能属于某一层一样。<br /><img src="/img/cn/cn1.9.png" alt="图为航线功能的水平分层" /></p><p>每层通过在该层中执行某些动作或使用直接下层的服务来提供<strong>服务</strong>（service），即<strong>服务模型</strong>（service model）。例如，由第n层提供的服务可能包括报文从网络的一边到另一边的可靠传送，这可能是通过使用第n-1层的边缘到边缘的不可靠报文传送服务，加上第n层的检测和重传丢失报文的功能来实现的。</p><p>一个协议层能够用软件、硬件或两者的结合来实现。一个第n层协议也<strong>分布</strong>在构成该网络的端系统、分组交换机和其他组件中，第n层协议的不同部分常常位于这些网络组件的各部分中。</p><blockquote><p>协议分层<br />优点：<strong>概念化</strong>和<strong>结构化</strong>。<br />潜在的缺点：<br />1 一层可能冗余较低层的功能<br />2 某层的功能可能需要仅在其他某层才出现的信息，违反了层次分离的目标。</p></blockquote><p>各层的所有协议称为协议栈（protocol stack），因特网的协议栈由5个层次组成：物理层、链路层、网络层、运输层和应用层。</p><p>1 <strong>应用层</strong><br />应用层是网络应用程序及它们的应用层协议存留的地方。因特网的应用层包含许多协议，例如HTTP（Web文档的请求和传送）、SMTP（电子邮件报文的传输）和FTP（两个端系统之间的文件传送）。应用层协议分布在多个端系统上，一个端系统中的应用程序使用协议与另一个端系统中的应用程序交换信息的分组，这种位于应用层的信息分组称为<strong>报文</strong>（message）。</p><p>2 <strong>运输层</strong><br />因特网的运输层在应用程序端点之间传送应用层报文。在因特网中，运输层包含TCP和UDP两个运输协议，利用其中任一个都能运输应用层报文。我们把运输层报文称作<strong>报文段</strong>（segment）。<br />——<strong>TCP</strong>提供连接服务，包括了应用层报文向目的地的确保传递和流量控制（即发送方/接收方速率匹配）。<br />——<strong>UDP</strong>提供无连接服务，它不提供不必要服务的服务（没有可靠性、流量控制、拥塞控制等）。</p><p>3 <strong>网络层</strong><br />因特网的网络层负责将称为<strong>数据报</strong>（datagram）的网络层分组从一台主机移动到另一台主机。在一台源主机中的因特网运输层协议（TCP或UDP）向网络层递交运输层报文段和目的地址。</p><p>因特网的网络层包括内容如下：<br />1、著名的<strong>IP协议</strong>，该协议定义了在数据报中的各个字段以及端系统和路由器如何作用于这些字段。IP协议是唯一的，所有具有网络层的因特网组件必须运行IP协议。<br />2、决定路由的<strong>路由选择协议</strong>，它使得数据报根据该路由从源传输到目的地。路由选择协议不唯一。</p><p>网络层包含了IP协议和一些路由选择协议，通常把它称为<strong>IP层</strong>。</p><p>4 <strong>链路层</strong><br />在每个结点，网络层将数据报下传给链路层，链路层沿着路径将数据报传递给下一个结点。在下个结点，链路层将数据报上传给网络层。由链路层提供的服务取决于应用于该链路的特定链路层协议。网络层将受到来自每个不同的链路层协议的不同服务。我们把链路层分组称为帧（frame）。</p><p>5 <strong>物理层</strong><br />链路层的任务是将整个帧从一个网络元素移动到邻近的网络元素，而物理层的任务是将该帧中的<em>一个一个比特</em>从一个结点移动到下一个结点。在这一层的协议仍然是链路相关的，并且进一步与该链路的<strong>传输媒体相关</strong>（以太网关于双铜绞线、关于同轴电缆、关于光纤的协议等等）。在每种场合中，跨越这些链路移动一个比特是以不同的方式进行的。</p><h3 id="512-osi模型"><a class="markdownIt-Anchor" href="#512-osi模型"></a> 5.1.2 OSI模型</h3><p>因特网协议栈不是唯一的协议栈。国际标准化组织（ISO）提出计算机网络应组织为大约7层，称为开放系统互连（OSI）模型[ISO 2012]。这7层分别是：应用层、表示层、会话层、运输层、网络层、数据链路层和物理层。相比于因特网协议栈，它新增了表示层和会话层。</p><p>1 <strong>表示层</strong><br />表示层的作用是使通信的应用程序能够解释交换数据的含义。这些服务包括数据压缩和数据加密以及数据描述（使应用程序不必担心在各台计算机中表示/存储的内部格式不同的问题）。</p><p>2 <strong>会话层</strong><br />会话层提供了数据交换定界和同步功能，包括了建立检查点和恢复方案的方法。</p><p>应用开发者决定这两个层次提供的服务是否重要，如果该服务重要，应用开发者就在应用程序中构建该功能。</p><h2 id="52-封装"><a class="markdownIt-Anchor" href="#52-封装"></a> 5.2 封装</h2><p>数据从发送端系统的协议栈向下，向上和向下经过中间的链路层交换机和路由器的协议栈，进而向上到达接收端系统的协议栈。链路层交换机实现第一层和第二层，路由器实现了第一层到第三层。<br /><img src="/img/cn/cn1.10.png" alt="图为主机、路由器和链路层交换机，每个包含了不同的层，反映了不同的功能" /></p><p>在发送主机端，一个<strong>应用层报文</strong>被传送给运输层。在最简单的情况下，运输层收取到报文并附上附加信息，应用层报文和运输层首部信息构成了<strong>运输层报文段</strong>。运输层由此<strong>封装</strong>（encapsulation）了应用层报文。运输层再向网络层传递该报文段，网络层增加了如源和目的地端系统地址等网络层首部信息，产生了<strong>网络层数据报</strong>。数据报接下来传递给链路层，链路层增加它自己的链路层首部信息并创建<strong>链路层帧</strong>（link-layer frame）。</p><p>由此可见，在每一层，一个分组具有两种类型的字段：首部字段和<strong>有效载荷字段</strong>（payload field）。有效载荷通常是来自上一层的分组。</p><p>封装的过程在实际中会更加复杂。例如，一个大报文可能被划分为多个运输层的报文段（可能被划分为多个网络层数据报），在接收端则必须从其连续的数据报中重构这样一个报文段。</p><h1 id="六-面对攻击的网络"><a class="markdownIt-Anchor" href="#六-面对攻击的网络"></a> 六、面对攻击的网络</h1><p><strong>网络安全</strong>领域主要探讨以下问题：攻击者如何攻击网络以及如何防御攻击，或者更好的设计能够事先免除这样的攻击的新型体系结构。</p><h2 id="61-有害程序能经过因特网放入到计算机中"><a class="markdownIt-Anchor" href="#61-有害程序能经过因特网放入到计算机中"></a> 6.1 有害程序能经过因特网放入到计算机中</h2><p>一旦恶意软件感染设备，就能够窃取隐私信息，然后发送给攻击者。这些受害设备网络被称为<strong>僵尸网络</strong>（botnet），坏人能够利用僵尸网络控制并有效地对目标主机展开垃圾邮件分发或分布式拒绝服务攻击。</p><p>今天的多数恶意软件是<strong>自我复制</strong>（self-replicating）的：一旦感染了一台主机，就会从那台主机寻求进入更多的主机。恶意软件能够以<strong>病毒</strong>或<strong>蠕虫</strong>的方式进行扩散，<br />——<strong>病毒</strong>（virus）是一种需要某种形式的用户交互来感染用户设备的恶意软件。<br />——<strong>蠕虫</strong>（worm）是一种无需任何明显用户交互就能进入设备的恶意软件。</p><h2 id="62-攻击者能够攻击服务器和网络基础设施"><a class="markdownIt-Anchor" href="#62-攻击者能够攻击服务器和网络基础设施"></a> 6.2 攻击者能够攻击服务器和网络基础设施</h2><p>还有一种宽泛类型的安全性威胁称为拒绝服务攻击（DoS攻击）。Dos攻击能够使得网络、主机或其他基础设施部分不能由合法用户使用。大多数因特网DoS攻击属于下列三种类型之一：</p><p>——<strong>弱点攻击</strong>。如果适当顺序的多个分组发送给一个易受攻击的应用程序或操作系统，该服务器可能停止运行，或者更糟糕的是主机可能崩溃。<br />——<strong>带宽洪泛</strong>。攻击者向目标主机发送大量分组，分组数量之多使得目标的接入链路变得拥塞，使得合法的分组无法到达服务器。<br />——<strong>连接洪泛</strong>。攻击者在目标主机中创建大量的半开或全开TCP连接。该主机因这些伪造的连接而陷入困境，并停止接受合法的连接。</p><p>对于带宽洪泛攻击，如果某服务器的接入速率为R bps，则攻击者需要以大约R bps的速率来产生危害。当R非常大时，单一攻击源可能无法产生足够大的流量来伤害该服务器，而且如果从单一源发出所有流量的话，上游路由器就能够检测出该攻击并在该流量靠近服务器前就能将其阻挡下来。所以攻击者会采用<strong>分布式DoS</strong>（DDoS，控制多个源并让每个源向目标猛烈发送流量）的方式削弱或损坏服务器，所有受控源的聚合流量速率需要大约R的能力）。相比于DoS，DDoS更加难以检测和防范。</p><p><img src="/img/cn/cn1.11.png" alt="图为DDoS攻击" /></p><h2 id="63-攻击者能够嗅探分组"><a class="markdownIt-Anchor" href="#63-攻击者能够嗅探分组"></a> 6.3 攻击者能够嗅探分组</h2><p>在无线传输设备的附近放置一台被动的接收机，该接收机就能得到传输的每个分组的副本。记录每个流经的分组副本的被动接收机被称为<strong>分组嗅探机</strong>（packet sniffer）。</p><p>嗅探器也能够部署在有线环境中。在有线的广播环境中，如在许多以太网LAN中，分组嗅探器能够获得经该LAN发送的所有分组。此外，获得某机构与因特网连接的接入路由器或接入链路访问权的攻击者能够放置一台嗅探器以产生从该机构出入的每个分组的副本，再对嗅探到的分组进行离线分析，就能得出敏感信息。</p><p>因为分组嗅探器是被动的，所以难以检测出它们的存在。最好的防御嗅探的方法基本上都与<strong>密码学</strong>有关。</p><h2 id="64-攻击者能够伪装成你信任的人"><a class="markdownIt-Anchor" href="#64-攻击者能够伪装成你信任的人"></a> 6.4 攻击者能够伪装成你信任的人</h2><p>生成具有任意源地址、分组内容和目的地址的分组，然后将这个人工制作的分组传输到互联网中极为容易，这种将具有虚假源地址的分组注入因特网的能力被称为<strong>IP哄骗</strong>（IP spoofing），而它只是一个用户能够冒充另一个用户的许多方式的一种。</p><p>应对这种问题，我们需要采用<strong>端点鉴别</strong>。即一种使我们能够确信一个报文源自我们认为它应当来自的地方的机制。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
      <category>自顶向下方法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/21/hello-world/"/>
    <url>/2022/03/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
